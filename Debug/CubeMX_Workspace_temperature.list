
CubeMX_Workspace_temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008840  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001970  08008af0  08008af0  00018af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a468  0800a468  0001a468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a46c  0800a46c  0001a46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800a470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f0  24000074  0800a4e4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000264  0800a4e4  00020264  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022d61  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003727  00000000  00000000  00042e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010d8  00000000  00000000  00046530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fd0  00000000  00000000  00047608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033156  00000000  00000000  000485d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000159bf  00000000  00000000  0007b72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001514fb  00000000  00000000  000910ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e25e8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004cc4  00000000  00000000  001e263c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008ad8 	.word	0x08008ad8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08008ad8 	.word	0x08008ad8

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b96e 	b.w	8000694 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468c      	mov	ip, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8083 	bne.w	80004e6 <__udivmoddi4+0x116>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d947      	bls.n	8000476 <__udivmoddi4+0xa6>
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	b142      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ec:	f1c2 0020 	rsb	r0, r2, #32
 80003f0:	fa24 f000 	lsr.w	r0, r4, r0
 80003f4:	4091      	lsls	r1, r2
 80003f6:	4097      	lsls	r7, r2
 80003f8:	ea40 0c01 	orr.w	ip, r0, r1
 80003fc:	4094      	lsls	r4, r2
 80003fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fbbc f6f8 	udiv	r6, ip, r8
 8000408:	fa1f fe87 	uxth.w	lr, r7
 800040c:	fb08 c116 	mls	r1, r8, r6, ip
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb06 f10e 	mul.w	r1, r6, lr
 8000418:	4299      	cmp	r1, r3
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x60>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000422:	f080 8119 	bcs.w	8000658 <__udivmoddi4+0x288>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 8116 	bls.w	8000658 <__udivmoddi4+0x288>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3310 	mls	r3, r8, r0, r3
 800043c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x8c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	f080 8105 	bcs.w	800065c <__udivmoddi4+0x28c>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f240 8102 	bls.w	800065c <__udivmoddi4+0x28c>
 8000458:	3802      	subs	r0, #2
 800045a:	443c      	add	r4, r7
 800045c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	2600      	movs	r6, #0
 8000466:	b11d      	cbz	r5, 8000470 <__udivmoddi4+0xa0>
 8000468:	40d4      	lsrs	r4, r2
 800046a:	2300      	movs	r3, #0
 800046c:	e9c5 4300 	strd	r4, r3, [r5]
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	b902      	cbnz	r2, 800047a <__udivmoddi4+0xaa>
 8000478:	deff      	udf	#255	; 0xff
 800047a:	fab2 f282 	clz	r2, r2
 800047e:	2a00      	cmp	r2, #0
 8000480:	d150      	bne.n	8000524 <__udivmoddi4+0x154>
 8000482:	1bcb      	subs	r3, r1, r7
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	fa1f f887 	uxth.w	r8, r7
 800048c:	2601      	movs	r6, #1
 800048e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000492:	0c21      	lsrs	r1, r4, #16
 8000494:	fb0e 331c 	mls	r3, lr, ip, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb08 f30c 	mul.w	r3, r8, ip
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0xe4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0xe2>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	f200 80e9 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004b2:	4684      	mov	ip, r0
 80004b4:	1ac9      	subs	r1, r1, r3
 80004b6:	b2a3      	uxth	r3, r4
 80004b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004c4:	fb08 f800 	mul.w	r8, r8, r0
 80004c8:	45a0      	cmp	r8, r4
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x10c>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x10a>
 80004d4:	45a0      	cmp	r8, r4
 80004d6:	f200 80d9 	bhi.w	800068c <__udivmoddi4+0x2bc>
 80004da:	4618      	mov	r0, r3
 80004dc:	eba4 0408 	sub.w	r4, r4, r8
 80004e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004e4:	e7bf      	b.n	8000466 <__udivmoddi4+0x96>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d909      	bls.n	80004fe <__udivmoddi4+0x12e>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	f000 80b1 	beq.w	8000652 <__udivmoddi4+0x282>
 80004f0:	2600      	movs	r6, #0
 80004f2:	e9c5 0100 	strd	r0, r1, [r5]
 80004f6:	4630      	mov	r0, r6
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	fab3 f683 	clz	r6, r3
 8000502:	2e00      	cmp	r6, #0
 8000504:	d14a      	bne.n	800059c <__udivmoddi4+0x1cc>
 8000506:	428b      	cmp	r3, r1
 8000508:	d302      	bcc.n	8000510 <__udivmoddi4+0x140>
 800050a:	4282      	cmp	r2, r0
 800050c:	f200 80b8 	bhi.w	8000680 <__udivmoddi4+0x2b0>
 8000510:	1a84      	subs	r4, r0, r2
 8000512:	eb61 0103 	sbc.w	r1, r1, r3
 8000516:	2001      	movs	r0, #1
 8000518:	468c      	mov	ip, r1
 800051a:	2d00      	cmp	r5, #0
 800051c:	d0a8      	beq.n	8000470 <__udivmoddi4+0xa0>
 800051e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000522:	e7a5      	b.n	8000470 <__udivmoddi4+0xa0>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f603 	lsr.w	r6, r0, r3
 800052c:	4097      	lsls	r7, r2
 800052e:	fa01 f002 	lsl.w	r0, r1, r2
 8000532:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000536:	40d9      	lsrs	r1, r3
 8000538:	4330      	orrs	r0, r6
 800053a:	0c03      	lsrs	r3, r0, #16
 800053c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000540:	fa1f f887 	uxth.w	r8, r7
 8000544:	fb0e 1116 	mls	r1, lr, r6, r1
 8000548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054c:	fb06 f108 	mul.w	r1, r6, r8
 8000550:	4299      	cmp	r1, r3
 8000552:	fa04 f402 	lsl.w	r4, r4, r2
 8000556:	d909      	bls.n	800056c <__udivmoddi4+0x19c>
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	f106 3cff 	add.w	ip, r6, #4294967295
 800055e:	f080 808d 	bcs.w	800067c <__udivmoddi4+0x2ac>
 8000562:	4299      	cmp	r1, r3
 8000564:	f240 808a 	bls.w	800067c <__udivmoddi4+0x2ac>
 8000568:	3e02      	subs	r6, #2
 800056a:	443b      	add	r3, r7
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b281      	uxth	r1, r0
 8000570:	fbb3 f0fe 	udiv	r0, r3, lr
 8000574:	fb0e 3310 	mls	r3, lr, r0, r3
 8000578:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057c:	fb00 f308 	mul.w	r3, r0, r8
 8000580:	428b      	cmp	r3, r1
 8000582:	d907      	bls.n	8000594 <__udivmoddi4+0x1c4>
 8000584:	1879      	adds	r1, r7, r1
 8000586:	f100 3cff 	add.w	ip, r0, #4294967295
 800058a:	d273      	bcs.n	8000674 <__udivmoddi4+0x2a4>
 800058c:	428b      	cmp	r3, r1
 800058e:	d971      	bls.n	8000674 <__udivmoddi4+0x2a4>
 8000590:	3802      	subs	r0, #2
 8000592:	4439      	add	r1, r7
 8000594:	1acb      	subs	r3, r1, r3
 8000596:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800059a:	e778      	b.n	800048e <__udivmoddi4+0xbe>
 800059c:	f1c6 0c20 	rsb	ip, r6, #32
 80005a0:	fa03 f406 	lsl.w	r4, r3, r6
 80005a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005a8:	431c      	orrs	r4, r3
 80005aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ae:	fa01 f306 	lsl.w	r3, r1, r6
 80005b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ba:	431f      	orrs	r7, r3
 80005bc:	0c3b      	lsrs	r3, r7, #16
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fa1f f884 	uxth.w	r8, r4
 80005c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ce:	fb09 fa08 	mul.w	sl, r9, r8
 80005d2:	458a      	cmp	sl, r1
 80005d4:	fa02 f206 	lsl.w	r2, r2, r6
 80005d8:	fa00 f306 	lsl.w	r3, r0, r6
 80005dc:	d908      	bls.n	80005f0 <__udivmoddi4+0x220>
 80005de:	1861      	adds	r1, r4, r1
 80005e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005e4:	d248      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 80005e6:	458a      	cmp	sl, r1
 80005e8:	d946      	bls.n	8000678 <__udivmoddi4+0x2a8>
 80005ea:	f1a9 0902 	sub.w	r9, r9, #2
 80005ee:	4421      	add	r1, r4
 80005f0:	eba1 010a 	sub.w	r1, r1, sl
 80005f4:	b2bf      	uxth	r7, r7
 80005f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000602:	fb00 f808 	mul.w	r8, r0, r8
 8000606:	45b8      	cmp	r8, r7
 8000608:	d907      	bls.n	800061a <__udivmoddi4+0x24a>
 800060a:	19e7      	adds	r7, r4, r7
 800060c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000610:	d22e      	bcs.n	8000670 <__udivmoddi4+0x2a0>
 8000612:	45b8      	cmp	r8, r7
 8000614:	d92c      	bls.n	8000670 <__udivmoddi4+0x2a0>
 8000616:	3802      	subs	r0, #2
 8000618:	4427      	add	r7, r4
 800061a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800061e:	eba7 0708 	sub.w	r7, r7, r8
 8000622:	fba0 8902 	umull	r8, r9, r0, r2
 8000626:	454f      	cmp	r7, r9
 8000628:	46c6      	mov	lr, r8
 800062a:	4649      	mov	r1, r9
 800062c:	d31a      	bcc.n	8000664 <__udivmoddi4+0x294>
 800062e:	d017      	beq.n	8000660 <__udivmoddi4+0x290>
 8000630:	b15d      	cbz	r5, 800064a <__udivmoddi4+0x27a>
 8000632:	ebb3 020e 	subs.w	r2, r3, lr
 8000636:	eb67 0701 	sbc.w	r7, r7, r1
 800063a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800063e:	40f2      	lsrs	r2, r6
 8000640:	ea4c 0202 	orr.w	r2, ip, r2
 8000644:	40f7      	lsrs	r7, r6
 8000646:	e9c5 2700 	strd	r2, r7, [r5]
 800064a:	2600      	movs	r6, #0
 800064c:	4631      	mov	r1, r6
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e70b      	b.n	8000470 <__udivmoddi4+0xa0>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e9      	b.n	8000430 <__udivmoddi4+0x60>
 800065c:	4618      	mov	r0, r3
 800065e:	e6fd      	b.n	800045c <__udivmoddi4+0x8c>
 8000660:	4543      	cmp	r3, r8
 8000662:	d2e5      	bcs.n	8000630 <__udivmoddi4+0x260>
 8000664:	ebb8 0e02 	subs.w	lr, r8, r2
 8000668:	eb69 0104 	sbc.w	r1, r9, r4
 800066c:	3801      	subs	r0, #1
 800066e:	e7df      	b.n	8000630 <__udivmoddi4+0x260>
 8000670:	4608      	mov	r0, r1
 8000672:	e7d2      	b.n	800061a <__udivmoddi4+0x24a>
 8000674:	4660      	mov	r0, ip
 8000676:	e78d      	b.n	8000594 <__udivmoddi4+0x1c4>
 8000678:	4681      	mov	r9, r0
 800067a:	e7b9      	b.n	80005f0 <__udivmoddi4+0x220>
 800067c:	4666      	mov	r6, ip
 800067e:	e775      	b.n	800056c <__udivmoddi4+0x19c>
 8000680:	4630      	mov	r0, r6
 8000682:	e74a      	b.n	800051a <__udivmoddi4+0x14a>
 8000684:	f1ac 0c02 	sub.w	ip, ip, #2
 8000688:	4439      	add	r1, r7
 800068a:	e713      	b.n	80004b4 <__udivmoddi4+0xe4>
 800068c:	3802      	subs	r0, #2
 800068e:	443c      	add	r4, r7
 8000690:	e724      	b.n	80004dc <__udivmoddi4+0x10c>
 8000692:	bf00      	nop

08000694 <__aeabi_idiv0>:
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	check_loop_count_wwdg = 0;
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <main+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]

#ifdef __WWDG__
	apb3_clk_freq = get_APB3_clk();
 80006a2:	f000 fb85 	bl	8000db0 <get_APB3_clk>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <main+0x64>)
 80006aa:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 ff42 	bl	8001534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f82e 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 fa44 	bl	8000b40 <MX_GPIO_Init>
  MX_ADC2_Init();
 80006b8:	f000 f8a8 	bl	800080c <MX_ADC2_Init>
  MX_USART3_UART_Init();
 80006bc:	f000 f9b4 	bl	8000a28 <MX_USART3_UART_Init>
  MX_RNG_Init();
 80006c0:	f000 f90a 	bl	80008d8 <MX_RNG_Init>
  MX_RTC_Init();
 80006c4:	f000 f91e 	bl	8000904 <MX_RTC_Init>
  MX_WWDG1_Init();
 80006c8:	f000 f9fa 	bl	8000ac0 <MX_WWDG1_Init>
#ifdef __IWDG__
  MX_IWDG1_Init();
  HAL_Delay(1000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
#endif
	HAL_UART_Transmit(&huart3, "System reboot\n", sizeof("System reboot\n"), 100);
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	220f      	movs	r2, #15
 80006d0:	490b      	ldr	r1, [pc, #44]	; (8000700 <main+0x68>)
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <main+0x6c>)
 80006d4:	f006 f836 	bl	8006744 <HAL_UART_Transmit>

	get_APB3_clk();
 80006d8:	f000 fb6a 	bl	8000db0 <get_APB3_clk>
	  HAL_UART_Transmit(&huart3, "5 seconds\n", 10, 500);
	  HAL_IWDG_Refresh(&hiwdg1);
  }
#endif

  HAL_ADC_Start(&hadc2);
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <main+0x70>)
 80006de:	f001 fafb 	bl	8001cd8 <HAL_ADC_Start>
  /* print the readed data */
  Print_readed_data(holdMultipleRead);
#endif

#ifdef __WWDG__
  custom_WWDG_refresh(&hwwdg1);
 80006e2:	480a      	ldr	r0, [pc, #40]	; (800070c <main+0x74>)
 80006e4:	f000 fc40 	bl	8000f68 <custom_WWDG_refresh>
	HAL_UART_Transmit(&huart3, "\n", 1, UART_TIMEOUT);
#endif
//	HAL_Delay(1000);

#ifdef __WWDG__
	  HAL_Delay(14900);
 80006e8:	f643 2034 	movw	r0, #14900	; 0x3a34
 80006ec:	f000 ffb4 	bl	8001658 <HAL_Delay>
	  custom_WWDG_refresh(&hwwdg1);
 80006f0:	4806      	ldr	r0, [pc, #24]	; (800070c <main+0x74>)
 80006f2:	f000 fc39 	bl	8000f68 <custom_WWDG_refresh>
	  HAL_Delay(14900);
 80006f6:	e7f7      	b.n	80006e8 <main+0x50>
 80006f8:	24000210 	.word	0x24000210
 80006fc:	24000090 	.word	0x24000090
 8000700:	08008af0 	.word	0x08008af0
 8000704:	240000d8 	.word	0x240000d8
 8000708:	24000168 	.word	0x24000168
 800070c:	2400023c 	.word	0x2400023c

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09c      	sub	sp, #112	; 0x70
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	224c      	movs	r2, #76	; 0x4c
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f007 fa3a 	bl	8007b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2220      	movs	r2, #32
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f007 fa34 	bl	8007b98 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000730:	4b34      	ldr	r3, [pc, #208]	; (8000804 <SystemClock_Config+0xf4>)
 8000732:	f04f 32ff 	mov.w	r2, #4294967295
 8000736:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800073a:	2004      	movs	r0, #4
 800073c:	f002 fa9e 	bl	8002c7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <SystemClock_Config+0xf8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a2f      	ldr	r2, [pc, #188]	; (8000808 <SystemClock_Config+0xf8>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <SystemClock_Config+0xf8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800075c:	bf00      	nop
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <SystemClock_Config+0xf8>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076a:	d1f8      	bne.n	800075e <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SystemClock_Config+0xf4>)
 800076e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000770:	4a24      	ldr	r2, [pc, #144]	; (8000804 <SystemClock_Config+0xf4>)
 8000772:	f023 0303 	bic.w	r3, r3, #3
 8000776:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000778:	232a      	movs	r3, #42	; 0x2a
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800077c:	2301      	movs	r3, #1
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2340      	movs	r3, #64	; 0x40
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000798:	2308      	movs	r3, #8
 800079a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007a8:	230c      	movs	r3, #12
 80007aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fab9 	bl	8002d30 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007c4:	f000 fc3b 	bl	800103e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	233f      	movs	r3, #63	; 0x3f
 80007ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2303      	movs	r3, #3
 80007ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV16;
 80007d8:	2370      	movs	r3, #112	; 0x70
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2101      	movs	r1, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fea3 	bl	8003538 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xec>
  {
    Error_Handler();
 80007f8:	f000 fc21 	bl	800103e <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3770      	adds	r7, #112	; 0x70
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	58024400 	.word	0x58024400
 8000808:	58024800 	.word	0x58024800

0800080c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]
 8000822:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000826:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <MX_ADC2_Init+0xc4>)
 8000828:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_ADC2_Init+0xc0>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_ADC2_Init+0xc0>)
 800083e:	2204      	movs	r2, #4
 8000840:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000844:	2200      	movs	r2, #0
 8000846:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_ADC2_Init+0xc0>)
 800084a:	2200      	movs	r2, #0
 800084c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000850:	2201      	movs	r2, #1
 8000852:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_ADC2_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_ADC2_Init+0xc0>)
 800086e:	2200      	movs	r2, #0
 8000870:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_ADC2_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000880:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000882:	f001 f8cf 	bl	8001a24 <HAL_ADC_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800088c:	f000 fbd7 	bl	800103e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_ADC2_Init+0xc8>)
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000894:	2306      	movs	r3, #6
 8000896:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000898:	2305      	movs	r3, #5
 800089a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800089c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a2:	2304      	movs	r3, #4
 80008a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_ADC2_Init+0xc0>)
 80008b4:	f001 faca 	bl	8001e4c <HAL_ADC_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80008be:	f000 fbbe 	bl	800103e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3720      	adds	r7, #32
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	24000168 	.word	0x24000168
 80008d0:	40022100 	.word	0x40022100
 80008d4:	cb840000 	.word	0xcb840000

080008d8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_RNG_Init+0x24>)
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <MX_RNG_Init+0x28>)
 80008e0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_RNG_Init+0x24>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_RNG_Init+0x24>)
 80008ea:	f005 fa5b 	bl	8005da4 <HAL_RNG_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80008f4:	f000 fba3 	bl	800103e <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24000214 	.word	0x24000214
 8000900:	48021800 	.word	0x48021800

08000904 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b090      	sub	sp, #64	; 0x40
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800090a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2228      	movs	r2, #40	; 0x28
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f007 f937 	bl	8007b98 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <MX_RTC_Init+0x11c>)
 800092c:	4a3d      	ldr	r2, [pc, #244]	; (8000a24 <MX_RTC_Init+0x120>)
 800092e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000930:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <MX_RTC_Init+0x11c>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000936:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <MX_RTC_Init+0x11c>)
 8000938:	227f      	movs	r2, #127	; 0x7f
 800093a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800093c:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <MX_RTC_Init+0x11c>)
 800093e:	22ff      	movs	r2, #255	; 0xff
 8000940:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000942:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <MX_RTC_Init+0x11c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <MX_RTC_Init+0x11c>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <MX_RTC_Init+0x11c>)
 8000950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000954:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <MX_RTC_Init+0x11c>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800095c:	4830      	ldr	r0, [pc, #192]	; (8000a20 <MX_RTC_Init+0x11c>)
 800095e:	f005 fac7 	bl	8005ef0 <HAL_RTC_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8000968:	f000 fb69 	bl	800103e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000972:	2300      	movs	r3, #0
 8000974:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800097e:	2300      	movs	r3, #0
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098a:	2201      	movs	r2, #1
 800098c:	4619      	mov	r1, r3
 800098e:	4824      	ldr	r0, [pc, #144]	; (8000a20 <MX_RTC_Init+0x11c>)
 8000990:	f005 fb2a 	bl	8005fe8 <HAL_RTC_SetTime>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800099a:	f000 fb50 	bl	800103e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800099e:	2302      	movs	r3, #2
 80009a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_SEPTEMBER;
 80009a4:	2309      	movs	r3, #9
 80009a6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x20;
 80009aa:	2320      	movs	r3, #32
 80009ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x22;
 80009b0:	2322      	movs	r3, #34	; 0x22
 80009b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ba:	2201      	movs	r2, #1
 80009bc:	4619      	mov	r1, r3
 80009be:	4818      	ldr	r0, [pc, #96]	; (8000a20 <MX_RTC_Init+0x11c>)
 80009c0:	f005 fbb0 	bl	8006124 <HAL_RTC_SetDate>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_RTC_Init+0xca>
  {
    Error_Handler();
 80009ca:	f000 fb38 	bl	800103e <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x11;
 80009ce:	2311      	movs	r3, #17
 80009d0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x12;
 80009d2:	2312      	movs	r3, #18
 80009d4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80009f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009fe:	463b      	mov	r3, r7
 8000a00:	2201      	movs	r2, #1
 8000a02:	4619      	mov	r1, r3
 8000a04:	4806      	ldr	r0, [pc, #24]	; (8000a20 <MX_RTC_Init+0x11c>)
 8000a06:	f005 fc15 	bl	8006234 <HAL_RTC_SetAlarm_IT>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8000a10:	f000 fb15 	bl	800103e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	HAL_PWR_EnableBkUpAccess();
 8000a14:	f002 f922 	bl	8002c5c <HAL_PWR_EnableBkUpAccess>
  /* USER CODE END RTC_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3740      	adds	r7, #64	; 0x40
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	240001e8 	.word	0x240001e8
 8000a24:	58004000 	.word	0x58004000

08000a28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <MX_USART3_UART_Init+0x94>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a72:	f005 fe17 	bl	80066a4 <HAL_UART_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a7c:	f000 fadf 	bl	800103e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a84:	f006 ff40 	bl	8007908 <HAL_UARTEx_SetTxFifoThreshold>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8e:	f000 fad6 	bl	800103e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000a96:	f006 ff75 	bl	8007984 <HAL_UARTEx_SetRxFifoThreshold>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa0:	f000 facd 	bl	800103e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_USART3_UART_Init+0x90>)
 8000aa6:	f006 fef6 	bl	8007896 <HAL_UARTEx_DisableFifoMode>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab0:	f000 fac5 	bl	800103e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	240000d8 	.word	0x240000d8
 8000abc:	40004800 	.word	0x40004800

08000ac0 <MX_WWDG1_Init>:
  * @brief WWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG1_Init 0 */

  /* USER CODE BEGIN WWDG1_Init 1 */

  /* USER CODE END WWDG1_Init 1 */
  hwwdg1.Instance = WWDG1;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_WWDG1_Init+0x6c>)
 8000ac6:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <MX_WWDG1_Init+0x70>)
 8000ac8:	601a      	str	r2, [r3, #0]
    }
  if(PRESCALAR_WWDG==64){
  	  hwwdg1.Init.Prescaler = WWDG_PRESCALER_64;
    }
  if(PRESCALAR_WWDG==128){
  	  hwwdg1.Init.Prescaler = WWDG_PRESCALER_128;
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_WWDG1_Init+0x6c>)
 8000acc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ad0:	605a      	str	r2, [r3, #4]
    }
  hwwdg1.Init.Window = (WINDOW_VAL+1);
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_WWDG1_Init+0x74>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <MX_WWDG1_Init+0x78>)
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	da02      	bge.n	8000ae6 <MX_WWDG1_Init+0x26>
 8000ae0:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <MX_WWDG1_Init+0x7c>)
 8000ae2:	441a      	add	r2, r3
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	14db      	asrs	r3, r3, #19
 8000ae8:	3341      	adds	r3, #65	; 0x41
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_WWDG1_Init+0x6c>)
 8000aee:	609a      	str	r2, [r3, #8]
  hwwdg1.Init.Counter = (COUNTER_VAL+1);
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_WWDG1_Init+0x74>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <MX_WWDG1_Init+0x78>)
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da02      	bge.n	8000b04 <MX_WWDG1_Init+0x44>
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <MX_WWDG1_Init+0x7c>)
 8000b00:	441a      	add	r2, r3
 8000b02:	4613      	mov	r3, r2
 8000b04:	14db      	asrs	r3, r3, #19
 8000b06:	3341      	adds	r3, #65	; 0x41
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_WWDG1_Init+0x6c>)
 8000b0c:	60da      	str	r2, [r3, #12]
  hwwdg1.Init.EWIMode = WWDG_EWI_ENABLE;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_WWDG1_Init+0x6c>)
 8000b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b14:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg1) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_WWDG1_Init+0x6c>)
 8000b18:	f006 ffc0 	bl	8007a9c <HAL_WWDG_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_WWDG1_Init+0x66>
  {
    Error_Handler();
 8000b22:	f000 fa8c 	bl	800103e <Error_Handler>
  }
  /* USER CODE BEGIN WWDG1_Init 2 */

  /* USER CODE END WWDG1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2400023c 	.word	0x2400023c
 8000b30:	50003000 	.word	0x50003000
 8000b34:	24000090 	.word	0x24000090
 8000b38:	002dc6c0 	.word	0x002dc6c0
 8000b3c:	0007ffff 	.word	0x0007ffff

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08e      	sub	sp, #56	; 0x38
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b79      	ldr	r3, [pc, #484]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000b58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5c:	4a77      	ldr	r2, [pc, #476]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b66:	4b75      	ldr	r3, [pc, #468]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000b68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	623b      	str	r3, [r7, #32]
 8000b72:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b74:	4b71      	ldr	r3, [pc, #452]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000b76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7a:	4a70      	ldr	r2, [pc, #448]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000b7c:	f043 0320 	orr.w	r3, r3, #32
 8000b80:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b84:	4b6d      	ldr	r3, [pc, #436]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8a:	f003 0320 	and.w	r3, r3, #32
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	4b6a      	ldr	r3, [pc, #424]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b98:	4a68      	ldr	r2, [pc, #416]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba2:	4b66      	ldr	r3, [pc, #408]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4b62      	ldr	r3, [pc, #392]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000bb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb6:	4a61      	ldr	r2, [pc, #388]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc0:	4b5e      	ldr	r3, [pc, #376]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000bc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	4b5b      	ldr	r3, [pc, #364]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000bd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd4:	4a59      	ldr	r2, [pc, #356]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bde:	4b57      	ldr	r3, [pc, #348]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000be0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bec:	4b53      	ldr	r3, [pc, #332]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000bee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf2:	4a52      	ldr	r2, [pc, #328]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bfc:	4b4f      	ldr	r3, [pc, #316]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000bfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b4c      	ldr	r3, [pc, #304]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000c0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c10:	4a4a      	ldr	r2, [pc, #296]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c1a:	4b48      	ldr	r3, [pc, #288]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000c1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c28:	4b44      	ldr	r3, [pc, #272]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000c2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c2e:	4a43      	ldr	r2, [pc, #268]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c38:	4b40      	ldr	r3, [pc, #256]	; (8000d3c <MX_GPIO_Init+0x1fc>)
 8000c3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c3e:	f003 0310 	and.w	r3, r3, #16
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4c:	483c      	ldr	r0, [pc, #240]	; (8000d40 <MX_GPIO_Init+0x200>)
 8000c4e:	f001 ffeb 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c58:	483a      	ldr	r0, [pc, #232]	; (8000d44 <MX_GPIO_Init+0x204>)
 8000c5a:	f001 ffe5 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2102      	movs	r1, #2
 8000c62:	4839      	ldr	r0, [pc, #228]	; (8000d48 <MX_GPIO_Init+0x208>)
 8000c64:	f001 ffe0 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4833      	ldr	r0, [pc, #204]	; (8000d4c <MX_GPIO_Init+0x20c>)
 8000c7e:	f001 fe23 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4829      	ldr	r0, [pc, #164]	; (8000d40 <MX_GPIO_Init+0x200>)
 8000c9c:	f001 fe14 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ca0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4822      	ldr	r0, [pc, #136]	; (8000d44 <MX_GPIO_Init+0x204>)
 8000cba:	f001 fe05 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481f      	ldr	r0, [pc, #124]	; (8000d50 <MX_GPIO_Init+0x210>)
 8000cd4:	f001 fdf8 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cea:	230a      	movs	r3, #10
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4817      	ldr	r0, [pc, #92]	; (8000d54 <MX_GPIO_Init+0x214>)
 8000cf6:	f001 fde7 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000cfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4810      	ldr	r0, [pc, #64]	; (8000d54 <MX_GPIO_Init+0x214>)
 8000d14:	f001 fdd8 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <MX_GPIO_Init+0x208>)
 8000d30:	f001 fdca 	bl	80028c8 <HAL_GPIO_Init>

}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58021400 	.word	0x58021400
 8000d44:	58020400 	.word	0x58020400
 8000d48:	58021000 	.word	0x58021000
 8000d4c:	58020800 	.word	0x58020800
 8000d50:	58021800 	.word	0x58021800
 8000d54:	58020000 	.word	0x58020000

08000d58 <HAL_WWDG_EarlyWakeupCallback>:
}
#endif

#ifdef __WWDG__
void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	check_loop_count_wwdg+=1;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_WWDG_EarlyWakeupCallback+0x44>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_WWDG_EarlyWakeupCallback+0x44>)
 8000d68:	6013      	str	r3, [r2, #0]
	if(check_loop_count_wwdg == LOOP_COUNT_WWDG){
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_WWDG_EarlyWakeupCallback+0x44>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d106      	bne.n	8000d80 <HAL_WWDG_EarlyWakeupCallback+0x28>
		HAL_UART_Transmit(&huart3, "system reboot using watchdog\n", sizeof("system reboot using watchdog\n"), 100);
 8000d72:	2364      	movs	r3, #100	; 0x64
 8000d74:	221e      	movs	r2, #30
 8000d76:	490a      	ldr	r1, [pc, #40]	; (8000da0 <HAL_WWDG_EarlyWakeupCallback+0x48>)
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <HAL_WWDG_EarlyWakeupCallback+0x4c>)
 8000d7a:	f005 fce3 	bl	8006744 <HAL_UART_Transmit>
	else{
//		WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
		HAL_UART_Transmit(&huart3, "inside else ISR\n", sizeof("inside else ISR\n"), 100);
		HAL_WWDG_Refresh(&hwwdg1);
	}
}
 8000d7e:	e008      	b.n	8000d92 <HAL_WWDG_EarlyWakeupCallback+0x3a>
		HAL_UART_Transmit(&huart3, "inside else ISR\n", sizeof("inside else ISR\n"), 100);
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2211      	movs	r2, #17
 8000d84:	4908      	ldr	r1, [pc, #32]	; (8000da8 <HAL_WWDG_EarlyWakeupCallback+0x50>)
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <HAL_WWDG_EarlyWakeupCallback+0x4c>)
 8000d88:	f005 fcdc 	bl	8006744 <HAL_UART_Transmit>
		HAL_WWDG_Refresh(&hwwdg1);
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <HAL_WWDG_EarlyWakeupCallback+0x54>)
 8000d8e:	f006 fea9 	bl	8007ae4 <HAL_WWDG_Refresh>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24000210 	.word	0x24000210
 8000da0:	08008b00 	.word	0x08008b00
 8000da4:	240000d8 	.word	0x240000d8
 8000da8:	08008b20 	.word	0x08008b20
 8000dac:	2400023c 	.word	0x2400023c

08000db0 <get_APB3_clk>:

int get_APB3_clk(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
	/* get the clock freq of APB3 clock */
	uint32_t rcc_hpre = (RCC->CDCFGR1) & 0xf; //first 4 bits
 8000db6:	4b69      	ldr	r3, [pc, #420]	; (8000f5c <get_APB3_clk+0x1ac>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	613b      	str	r3, [r7, #16]
	uint32_t rcc_cdppre = (RCC->CDCFGR1 >> 4) & 0x7; //bit 4,5,6
 8000dc0:	4b66      	ldr	r3, [pc, #408]	; (8000f5c <get_APB3_clk+0x1ac>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]
	uint32_t rcc_cdcpre = (RCC->CDCFGR1 >> 8) & 0x4; //bit 8,9,10,11
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <get_APB3_clk+0x1ac>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60bb      	str	r3, [r7, #8]
	uint32_t cdcpre_clock = {0};
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
	if(rcc_cdcpre == 0xf){
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	2b0f      	cmp	r3, #15
 8000de0:	d105      	bne.n	8000dee <get_APB3_clk+0x3e>
		cdcpre_clock = SYS_CLK/0x200;
 8000de2:	f002 fd5f 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8000de6:	4603      	mov	r3, r0
 8000de8:	0a5b      	lsrs	r3, r3, #9
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	e041      	b.n	8000e72 <get_APB3_clk+0xc2>
	}
	else if(rcc_cdcpre == 0xe){
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b0e      	cmp	r3, #14
 8000df2:	d105      	bne.n	8000e00 <get_APB3_clk+0x50>
		cdcpre_clock = SYS_CLK/0x100;
 8000df4:	f002 fd56 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	e038      	b.n	8000e72 <get_APB3_clk+0xc2>
	}
	else if(rcc_cdcpre == 0xd){
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b0d      	cmp	r3, #13
 8000e04:	d105      	bne.n	8000e12 <get_APB3_clk+0x62>
		cdcpre_clock = SYS_CLK/0x80;
 8000e06:	f002 fd4d 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	09db      	lsrs	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	e02f      	b.n	8000e72 <get_APB3_clk+0xc2>
	}
	else if(rcc_cdcpre == 0xc){
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b0c      	cmp	r3, #12
 8000e16:	d105      	bne.n	8000e24 <get_APB3_clk+0x74>
		cdcpre_clock = SYS_CLK/0x40;
 8000e18:	f002 fd44 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e026      	b.n	8000e72 <get_APB3_clk+0xc2>
	}
	else if(rcc_cdcpre == 0xb){
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b0b      	cmp	r3, #11
 8000e28:	d105      	bne.n	8000e36 <get_APB3_clk+0x86>
		cdcpre_clock = SYS_CLK/0x10;
 8000e2a:	f002 fd3b 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	091b      	lsrs	r3, r3, #4
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	e01d      	b.n	8000e72 <get_APB3_clk+0xc2>
	}
	else if(rcc_cdcpre == 0xa){
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	d105      	bne.n	8000e48 <get_APB3_clk+0x98>
		cdcpre_clock = SYS_CLK/0x8;
 8000e3c:	f002 fd32 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8000e40:	4603      	mov	r3, r0
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e014      	b.n	8000e72 <get_APB3_clk+0xc2>
	}
	else if(rcc_cdcpre == 0x9){
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	2b09      	cmp	r3, #9
 8000e4c:	d105      	bne.n	8000e5a <get_APB3_clk+0xaa>
		cdcpre_clock = SYS_CLK/0x4;
 8000e4e:	f002 fd29 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8000e52:	4603      	mov	r3, r0
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	e00b      	b.n	8000e72 <get_APB3_clk+0xc2>
	}
	else if(rcc_cdcpre == 0x8){
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d105      	bne.n	8000e6c <get_APB3_clk+0xbc>
		cdcpre_clock = SYS_CLK/0x2;
 8000e60:	f002 fd20 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8000e64:	4603      	mov	r3, r0
 8000e66:	085b      	lsrs	r3, r3, #1
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	e002      	b.n	8000e72 <get_APB3_clk+0xc2>
	}
	else {
		cdcpre_clock = SYS_CLK;
 8000e6c:	f002 fd1a 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8000e70:	61f8      	str	r0, [r7, #28]
	}

	uint32_t hpre_clock = {0};
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
	if(rcc_hpre == 0xf){
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d103      	bne.n	8000e84 <get_APB3_clk+0xd4>
		hpre_clock = cdcpre_clock/0x200;
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	0a5b      	lsrs	r3, r3, #9
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	e032      	b.n	8000eea <get_APB3_clk+0x13a>
	}
	else if(rcc_hpre == 0xe){
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b0e      	cmp	r3, #14
 8000e88:	d103      	bne.n	8000e92 <get_APB3_clk+0xe2>
		hpre_clock = cdcpre_clock/0x100;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	e02b      	b.n	8000eea <get_APB3_clk+0x13a>
	}
	else if(rcc_hpre == 0xd){
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	2b0d      	cmp	r3, #13
 8000e96:	d103      	bne.n	8000ea0 <get_APB3_clk+0xf0>
		hpre_clock = cdcpre_clock/0x80;
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	09db      	lsrs	r3, r3, #7
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	e024      	b.n	8000eea <get_APB3_clk+0x13a>
	}
	else if(rcc_hpre == 0xc){
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2b0c      	cmp	r3, #12
 8000ea4:	d103      	bne.n	8000eae <get_APB3_clk+0xfe>
		hpre_clock = cdcpre_clock/0x40;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	e01d      	b.n	8000eea <get_APB3_clk+0x13a>
	}
	else if(rcc_hpre == 0xb){
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b0b      	cmp	r3, #11
 8000eb2:	d103      	bne.n	8000ebc <get_APB3_clk+0x10c>
		hpre_clock = cdcpre_clock/0x10;
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	e016      	b.n	8000eea <get_APB3_clk+0x13a>
	}
	else if(rcc_hpre == 0xa){
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	2b0a      	cmp	r3, #10
 8000ec0:	d103      	bne.n	8000eca <get_APB3_clk+0x11a>
		hpre_clock = cdcpre_clock/0x8;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	61bb      	str	r3, [r7, #24]
 8000ec8:	e00f      	b.n	8000eea <get_APB3_clk+0x13a>
	}
	else if(rcc_hpre == 0x9){
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	2b09      	cmp	r3, #9
 8000ece:	d103      	bne.n	8000ed8 <get_APB3_clk+0x128>
		hpre_clock = cdcpre_clock/0x4;
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	e008      	b.n	8000eea <get_APB3_clk+0x13a>
	}
	else if(rcc_hpre == 0x8){
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d103      	bne.n	8000ee6 <get_APB3_clk+0x136>
		hpre_clock = cdcpre_clock/0x2;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	085b      	lsrs	r3, r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	e001      	b.n	8000eea <get_APB3_clk+0x13a>
	}
	else {
		hpre_clock = cdcpre_clock;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	61bb      	str	r3, [r7, #24]
	}

	uint32_t apb3p_clock = {0};
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
	if(rcc_cdppre == 0x7){
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d103      	bne.n	8000efc <get_APB3_clk+0x14c>
		apb3p_clock = hpre_clock/0x10;
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e016      	b.n	8000f2a <get_APB3_clk+0x17a>
	}
	else if(rcc_cdppre == 0x6){
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d103      	bne.n	8000f0a <get_APB3_clk+0x15a>
		apb3p_clock = hpre_clock/0x8;
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00f      	b.n	8000f2a <get_APB3_clk+0x17a>
	}
	else if(rcc_cdppre == 0x5){
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2b05      	cmp	r3, #5
 8000f0e:	d103      	bne.n	8000f18 <get_APB3_clk+0x168>
		apb3p_clock = hpre_clock/0x4;
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e008      	b.n	8000f2a <get_APB3_clk+0x17a>
	}
	else if(rcc_cdppre == 0x4){
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d103      	bne.n	8000f26 <get_APB3_clk+0x176>
		apb3p_clock = hpre_clock/0x2;
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e001      	b.n	8000f2a <get_APB3_clk+0x17a>
	}
	else {
		apb3p_clock = hpre_clock;
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	617b      	str	r3, [r7, #20]
	}

	apb3p_clock = apb3p_clock/0xF4240;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <get_APB3_clk+0x1b0>)
 8000f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f32:	0c9b      	lsrs	r3, r3, #18
 8000f34:	617b      	str	r3, [r7, #20]
	char temp[2];
	sprintf(temp, "%x", apb3p_clock);
 8000f36:	463b      	mov	r3, r7
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	490a      	ldr	r1, [pc, #40]	; (8000f64 <get_APB3_clk+0x1b4>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 fe33 	bl	8007ba8 <siprintf>
	int dec = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
	dec = hextodc(temp);
 8000f46:	463b      	mov	r3, r7
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f821 	bl	8000f90 <hextodc>
 8000f4e:	6078      	str	r0, [r7, #4]
	return dec;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	431bde83 	.word	0x431bde83
 8000f64:	08008b34 	.word	0x08008b34

08000f68 <custom_WWDG_refresh>:

void custom_WWDG_refresh(WWDG_HandleTypeDef *hwwdg){
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68d2      	ldr	r2, [r2, #12]
 8000f78:	601a      	str	r2, [r3, #0]
	check_loop_count_wwdg = 0;
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <custom_WWDG_refresh+0x24>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	24000210 	.word	0x24000210

08000f90 <hextodc>:

int hextodc(char *hex){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	ed2d 8b04 	vpush	{d8-d9}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
   int y = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
   int dec = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
   int x, i;
   for(i = strlen(hex) - 1 ; i >= 0 ; --i){
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff f9a3 	bl	80002f0 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e03b      	b.n	800102a <hextodc+0x9a>
      if(hex[i]>='0'&&hex[i]<='9'){
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b2f      	cmp	r3, #47	; 0x2f
 8000fbc:	d90c      	bls.n	8000fd8 <hextodc+0x48>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b39      	cmp	r3, #57	; 0x39
 8000fc8:	d806      	bhi.n	8000fd8 <hextodc+0x48>
         x = hex[i] - '0';
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	3b30      	subs	r3, #48	; 0x30
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e005      	b.n	8000fe4 <hextodc+0x54>
      }
      else{
         x = hex[i] - 'A' + 10;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	3b37      	subs	r3, #55	; 0x37
 8000fe2:	613b      	str	r3, [r7, #16]
      }
      dec = dec + x * pow(16 , y);// converting hexadecimal to integer value ++y;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001002:	eeb0 1b47 	vmov.f64	d1, d7
 8001006:	eeb3 0b00 	vmov.f64	d0, #48	; 0x41800000  16.0
 800100a:	f007 fa31 	bl	8008470 <pow>
 800100e:	eeb0 7b40 	vmov.f64	d7, d0
 8001012:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001016:	ee38 7b07 	vadd.f64	d7, d8, d7
 800101a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800101e:	ee17 3a90 	vmov	r3, s15
 8001022:	617b      	str	r3, [r7, #20]
   for(i = strlen(hex) - 1 ; i >= 0 ; --i){
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3b01      	subs	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	dac0      	bge.n	8000fb2 <hextodc+0x22>
   }
   return dec;
 8001030:	697b      	ldr	r3, [r7, #20]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	ecbd 8b04 	vpop	{d8-d9}
 800103c:	bd80      	pop	{r7, pc}

0800103e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001042:	b672      	cpsid	i
}
 8001044:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001046:	e7fe      	b.n	8001046 <Error_Handler+0x8>

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_MspInit+0x30>)
 8001050:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x30>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x30>)
 8001060:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	58024400 	.word	0x58024400

0800107c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0b2      	sub	sp, #200	; 0xc8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	22b8      	movs	r2, #184	; 0xb8
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f006 fd83 	bl	8007b98 <memset>
  if(hadc->Instance==ADC2)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <HAL_ADC_MspInit+0x88>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d12e      	bne.n	80010fa <HAL_ADC_MspInit+0x7e>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800109c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 80010a2:	2320      	movs	r3, #32
 80010a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 80010a6:	2381      	movs	r3, #129	; 0x81
 80010a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fdbf 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80010d8:	f7ff ffb1 	bl	800103e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_ADC_MspInit+0x8c>)
 80010de:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <HAL_ADC_MspInit+0x8c>)
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_ADC_MspInit+0x8c>)
 80010ee:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010f2:	f003 0320 	and.w	r3, r3, #32
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	37c8      	adds	r7, #200	; 0xc8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40022100 	.word	0x40022100
 8001108:	58024400 	.word	0x58024400

0800110c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0b2      	sub	sp, #200	; 0xc8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	22b8      	movs	r2, #184	; 0xb8
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f006 fd3b 	bl	8007b98 <memset>
  if(hrng->Instance==RNG)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <HAL_RNG_MspInit+0x68>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d11e      	bne.n	800116a <HAL_RNG_MspInit+0x5e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800112c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001130:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fd87 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001148:	f7ff ff79 	bl	800103e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_RNG_MspInit+0x6c>)
 800114e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_RNG_MspInit+0x6c>)
 8001154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001158:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_RNG_MspInit+0x6c>)
 800115e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	37c8      	adds	r7, #200	; 0xc8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	48021800 	.word	0x48021800
 8001178:	58024400 	.word	0x58024400

0800117c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b0b0      	sub	sp, #192	; 0xc0
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	22b8      	movs	r2, #184	; 0xb8
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f006 fd03 	bl	8007b98 <memset>
  if(hrtc->Instance==RTC)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <HAL_RTC_MspInit+0x68>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d11e      	bne.n	80011da <HAL_RTC_MspInit+0x5e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800119c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fd4e 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80011ba:	f7ff ff40 	bl	800103e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_RTC_MspInit+0x6c>)
 80011c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c2:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <HAL_RTC_MspInit+0x6c>)
 80011c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2029      	movs	r0, #41	; 0x29
 80011d0:	f001 fb45 	bl	800285e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80011d4:	2029      	movs	r0, #41	; 0x29
 80011d6:	f001 fb5c 	bl	8002892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	37c0      	adds	r7, #192	; 0xc0
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	58004000 	.word	0x58004000
 80011e8:	58024400 	.word	0x58024400

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b8      	sub	sp, #224	; 0xe0
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	22b8      	movs	r2, #184	; 0xb8
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f006 fcc3 	bl	8007b98 <memset>
  if(huart->Instance==USART3)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a25      	ldr	r2, [pc, #148]	; (80012ac <HAL_UART_MspInit+0xc0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d142      	bne.n	80012a2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800121c:	2302      	movs	r3, #2
 800121e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fd10 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001236:	f7ff ff02 	bl	800103e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_UART_MspInit+0xc4>)
 800123c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <HAL_UART_MspInit+0xc4>)
 8001242:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001246:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_UART_MspInit+0xc4>)
 800124c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_UART_MspInit+0xc4>)
 800125a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800125e:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_UART_MspInit+0xc4>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_UART_MspInit+0xc4>)
 800126a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001290:	2307      	movs	r3, #7
 8001292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_UART_MspInit+0xc8>)
 800129e:	f001 fb13 	bl	80028c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	37e0      	adds	r7, #224	; 0xe0
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40004800 	.word	0x40004800
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020c00 	.word	0x58020c00

080012b8 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_WWDG_MspInit+0x48>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d116      	bne.n	80012f8 <HAL_WWDG_MspInit+0x40>
  {
  /* USER CODE BEGIN WWDG1_MspInit 0 */

  /* USER CODE END WWDG1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG1_CLK_ENABLE();
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_WWDG_MspInit+0x4c>)
 80012cc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80012d0:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <HAL_WWDG_MspInit+0x4c>)
 80012d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d6:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_WWDG_MspInit+0x4c>)
 80012dc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80012e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    /* WWDG1 interrupt Init */
    HAL_NVIC_SetPriority(WWDG_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2000      	movs	r0, #0
 80012ee:	f001 fab6 	bl	800285e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WWDG_IRQn);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f001 facd 	bl	8002892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WWDG1_MspInit 1 */

  /* USER CODE END WWDG1_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	50003000 	.word	0x50003000
 8001304:	58024400 	.word	0x58024400

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001354:	f000 f960 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <WWDG_IRQHandler+0x10>)
 8001362:	f006 fbcf 	bl	8007b04 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2400023c 	.word	0x2400023c

08001370 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <RTC_Alarm_IRQHandler+0x10>)
 8001376:	f005 f899 	bl	80064ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	240001e8 	.word	0x240001e8

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f006 fbc6 	bl	8007b44 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	24100000 	.word	0x24100000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	24000094 	.word	0x24000094
 80013ec:	24000268 	.word	0x24000268

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f4:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <SystemInit+0xd0>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a31      	ldr	r2, [pc, #196]	; (80014c0 <SystemInit+0xd0>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <SystemInit+0xd4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	2b02      	cmp	r3, #2
 800140e:	d807      	bhi.n	8001420 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001410:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <SystemInit+0xd4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 030f 	bic.w	r3, r3, #15
 8001418:	4a2a      	ldr	r2, [pc, #168]	; (80014c4 <SystemInit+0xd4>)
 800141a:	f043 0303 	orr.w	r3, r3, #3
 800141e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <SystemInit+0xd8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <SystemInit+0xd8>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <SystemInit+0xd8>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <SystemInit+0xd8>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4924      	ldr	r1, [pc, #144]	; (80014c8 <SystemInit+0xd8>)
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <SystemInit+0xdc>)
 800143a:	4013      	ands	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <SystemInit+0xd4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <SystemInit+0xd4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 030f 	bic.w	r3, r3, #15
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <SystemInit+0xd4>)
 8001454:	f043 0303 	orr.w	r3, r3, #3
 8001458:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <SystemInit+0xd8>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <SystemInit+0xd8>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <SystemInit+0xd8>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <SystemInit+0xd8>)
 800146e:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <SystemInit+0xe0>)
 8001470:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <SystemInit+0xd8>)
 8001474:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <SystemInit+0xe4>)
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <SystemInit+0xd8>)
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <SystemInit+0xe8>)
 800147c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <SystemInit+0xd8>)
 8001480:	2200      	movs	r2, #0
 8001482:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <SystemInit+0xd8>)
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <SystemInit+0xe8>)
 8001488:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <SystemInit+0xd8>)
 800148c:	2200      	movs	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <SystemInit+0xd8>)
 8001492:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <SystemInit+0xe8>)
 8001494:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <SystemInit+0xd8>)
 8001498:	2200      	movs	r2, #0
 800149a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <SystemInit+0xd8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <SystemInit+0xd8>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <SystemInit+0xd8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <SystemInit+0xec>)
 80014b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	52002000 	.word	0x52002000
 80014c8:	58024400 	.word	0x58024400
 80014cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80014d0:	02020200 	.word	0x02020200
 80014d4:	01ff0000 	.word	0x01ff0000
 80014d8:	01010280 	.word	0x01010280
 80014dc:	52004000 	.word	0x52004000

080014e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001518 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e4:	f7ff ff84 	bl	80013f0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	; (800152c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800150e:	f006 fb1f 	bl	8007b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001512:	f7ff f8c1 	bl	8000698 <main>
  bx  lr
 8001516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800151c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001520:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001524:	0800a470 	.word	0x0800a470
  ldr r2, =_sbss
 8001528:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 800152c:	24000264 	.word	0x24000264

08001530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153a:	2003      	movs	r0, #3
 800153c:	f001 f984 	bl	8002848 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001540:	f002 f9b0 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_Init+0x68>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	4913      	ldr	r1, [pc, #76]	; (80015a0 <HAL_Init+0x6c>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_Init+0x68>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_Init+0x6c>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <HAL_Init+0x70>)
 8001576:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_Init+0x74>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157e:	2000      	movs	r0, #0
 8001580:	f000 f814 	bl	80015ac <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e002      	b.n	8001594 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800158e:	f7ff fd5b 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	58024400 	.word	0x58024400
 80015a0:	08008b38 	.word	0x08008b38
 80015a4:	24000004 	.word	0x24000004
 80015a8:	24000000 	.word	0x24000000

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_InitTick+0x60>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e021      	b.n	8001604 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_InitTick+0x64>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_InitTick+0x60>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 f969 	bl	80028ae <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f001 f933 	bl	800285e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_InitTick+0x68>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2400000c 	.word	0x2400000c
 8001610:	24000000 	.word	0x24000000
 8001614:	24000008 	.word	0x24000008

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2400000c 	.word	0x2400000c
 800163c:	24000250 	.word	0x24000250

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	24000250 	.word	0x24000250

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2400000c 	.word	0x2400000c

080016a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	609a      	str	r2, [r3, #8]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	609a      	str	r2, [r3, #8]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3360      	adds	r3, #96	; 0x60
 800171a:	461a      	mov	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	430b      	orrs	r3, r1
 8001736:	431a      	orrs	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800173c:	bf00      	nop
 800173e:	371c      	adds	r7, #28
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	431a      	orrs	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	611a      	str	r2, [r3, #16]
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800177a:	b480      	push	{r7}
 800177c:	b087      	sub	sp, #28
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3360      	adds	r3, #96	; 0x60
 800178a:	461a      	mov	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	431a      	orrs	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	601a      	str	r2, [r3, #0]
  }
}
 80017a4:	bf00      	nop
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3330      	adds	r3, #48	; 0x30
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	211f      	movs	r1, #31
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0e9b      	lsrs	r3, r3, #26
 80017e8:	f003 011f 	and.w	r1, r3, #31
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	431a      	orrs	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017fc:	bf00      	nop
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3314      	adds	r3, #20
 8001818:	461a      	mov	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	0e5b      	lsrs	r3, r3, #25
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	4413      	add	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	0d1b      	lsrs	r3, r3, #20
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2107      	movs	r1, #7
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	401a      	ands	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	0d1b      	lsrs	r3, r3, #20
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0318 	and.w	r3, r3, #24
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001884:	40d9      	lsrs	r1, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	400b      	ands	r3, r1
 800188a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800188e:	431a      	orrs	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	000fffff 	.word	0x000fffff

080018a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 031f 	and.w	r3, r3, #31
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6093      	str	r3, [r2, #8]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	5fffffc0 	.word	0x5fffffc0

080018e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018fc:	d101      	bne.n	8001902 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <LL_ADC_EnableInternalRegulator+0x24>)
 800191e:	4013      	ands	r3, r2
 8001920:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	6fffffc0 	.word	0x6fffffc0

08001938 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800194c:	d101      	bne.n	8001952 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <LL_ADC_Enable+0x24>)
 800196e:	4013      	ands	r3, r2
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	7fffffc0 	.word	0x7fffffc0

08001988 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <LL_ADC_IsEnabled+0x18>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <LL_ADC_IsEnabled+0x1a>
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <LL_ADC_REG_StartConversion+0x24>)
 80019be:	4013      	ands	r3, r2
 80019c0:	f043 0204 	orr.w	r2, r3, #4
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	7fffffc0 	.word	0x7fffffc0

080019d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d101      	bne.n	80019f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d101      	bne.n	8001a16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e138      	b.n	8001cb0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fb15 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff3f 	bl	80018e8 <LL_ADC_IsDeepPowerDownEnabled>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff25 	bl	80018c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff5a 	bl	8001938 <LL_ADC_IsInternalRegulatorEnabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d114      	bne.n	8001ab4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff3e 	bl	8001910 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a94:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_ADC_Init+0x294>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	4a88      	ldr	r2, [pc, #544]	; (8001cbc <HAL_ADC_Init+0x298>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	099b      	lsrs	r3, r3, #6
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aa6:	e002      	b.n	8001aae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff3d 	bl	8001938 <LL_ADC_IsInternalRegulatorEnabled>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10d      	bne.n	8001ae0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	f043 0210 	orr.w	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f043 0201 	orr.w	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff77 	bl	80019d8 <LL_ADC_REG_IsConversionOngoing>
 8001aea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f040 80d2 	bne.w	8001c9e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f040 80ce 	bne.w	8001c9e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b0a:	f043 0202 	orr.w	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff36 	bl	8001988 <LL_ADC_IsEnabled>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d110      	bne.n	8001b44 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b22:	4867      	ldr	r0, [pc, #412]	; (8001cc0 <HAL_ADC_Init+0x29c>)
 8001b24:	f7ff ff30 	bl	8001988 <LL_ADC_IsEnabled>
 8001b28:	4604      	mov	r4, r0
 8001b2a:	4866      	ldr	r0, [pc, #408]	; (8001cc4 <HAL_ADC_Init+0x2a0>)
 8001b2c:	f7ff ff2c 	bl	8001988 <LL_ADC_IsEnabled>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4323      	orrs	r3, r4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4862      	ldr	r0, [pc, #392]	; (8001cc8 <HAL_ADC_Init+0x2a4>)
 8001b40:	f7ff fdae 	bl	80016a0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7d5b      	ldrb	r3, [r3, #21]
 8001b48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b4e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001b54:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7f1b      	ldrb	r3, [r3, #28]
 8001b5a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7f1b      	ldrb	r3, [r3, #28]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d106      	bne.n	8001b76 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	045b      	lsls	r3, r3, #17
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_ADC_Init+0x2a8>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	69b9      	ldr	r1, [r7, #24]
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff14 	bl	80019d8 <LL_ADC_REG_IsConversionOngoing>
 8001bb0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff21 	bl	80019fe <LL_ADC_INJ_IsConversionOngoing>
 8001bbc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d14a      	bne.n	8001c5a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d147      	bne.n	8001c5a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7d1b      	ldrb	r3, [r3, #20]
 8001bce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <HAL_ADC_Init+0x2ac>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	69b9      	ldr	r1, [r7, #24]
 8001be8:	430b      	orrs	r3, r1
 8001bea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d11b      	bne.n	8001c2e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_ADC_Init+0x2b0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c0a:	3a01      	subs	r2, #1
 8001c0c:	0411      	lsls	r1, r2, #16
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c18:	4311      	orrs	r1, r2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	611a      	str	r2, [r3, #16]
 8001c2c:	e007      	b.n	8001c3e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fc5b 	bl	8002510 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10c      	bne.n	8001c7c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f023 010f 	bic.w	r1, r3, #15
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
 8001c7a:	e007      	b.n	8001c8c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 020f 	bic.w	r2, r2, #15
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f023 0303 	bic.w	r3, r3, #3
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
 8001c9c:	e007      	b.n	8001cae <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3724      	adds	r7, #36	; 0x24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd90      	pop	{r4, r7, pc}
 8001cb8:	24000000 	.word	0x24000000
 8001cbc:	053e2d63 	.word	0x053e2d63
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40022100 	.word	0x40022100
 8001cc8:	40022300 	.word	0x40022300
 8001ccc:	fff0c003 	.word	0xfff0c003
 8001cd0:	ffffbffc 	.word	0xffffbffc
 8001cd4:	fc00f81e 	.word	0xfc00f81e

08001cd8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ce0:	4856      	ldr	r0, [pc, #344]	; (8001e3c <HAL_ADC_Start+0x164>)
 8001ce2:	f7ff fde1 	bl	80018a8 <LL_ADC_GetMultimode>
 8001ce6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fe73 	bl	80019d8 <LL_ADC_REG_IsConversionOngoing>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f040 809a 	bne.w	8001e2e <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_Start+0x30>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e095      	b.n	8001e34 <HAL_ADC_Start+0x15c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fb81 	bl	8002418 <ADC_Enable>
 8001d16:	4603      	mov	r3, r0
 8001d18:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 8081 	bne.w	8001e24 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <HAL_ADC_Start+0x168>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a43      	ldr	r2, [pc, #268]	; (8001e44 <HAL_ADC_Start+0x16c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d002      	beq.n	8001d42 <HAL_ADC_Start+0x6a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e000      	b.n	8001d44 <HAL_ADC_Start+0x6c>
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_ADC_Start+0x170>)
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d002      	beq.n	8001d52 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6a:	d106      	bne.n	8001d7a <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f023 0206 	bic.w	r2, r3, #6
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	659a      	str	r2, [r3, #88]	; 0x58
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	221c      	movs	r2, #28
 8001d86:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_ADC_Start+0x16c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d002      	beq.n	8001da0 <HAL_ADC_Start+0xc8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e000      	b.n	8001da2 <HAL_ADC_Start+0xca>
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_ADC_Start+0x170>)
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d008      	beq.n	8001dbc <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d002      	beq.n	8001dbc <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b09      	cmp	r3, #9
 8001dba:	d114      	bne.n	8001de6 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fde6 	bl	80019b0 <LL_ADC_REG_StartConversion>
 8001de4:	e025      	b.n	8001e32 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_ADC_Start+0x16c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d002      	beq.n	8001e02 <HAL_ADC_Start+0x12a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	e000      	b.n	8001e04 <HAL_ADC_Start+0x12c>
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_ADC_Start+0x170>)
 8001e04:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00f      	beq.n	8001e32 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
 8001e22:	e006      	b.n	8001e32 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e2c:	e001      	b.n	8001e32 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40022300 	.word	0x40022300
 8001e40:	fffff0fe 	.word	0xfffff0fe
 8001e44:	40022100 	.word	0x40022100
 8001e48:	40022000 	.word	0x40022000

08001e4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b0a1      	sub	sp, #132	; 0x84
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a9a      	ldr	r2, [pc, #616]	; (80020d0 <HAL_ADC_ConfigChannel+0x284>)
 8001e66:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x2a>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e2bc      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x5a4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fda8 	bl	80019d8 <LL_ADC_REG_IsConversionOngoing>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 82a1 	bne.w	80023d2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d108      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x62>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	e016      	b.n	8001edc <HAL_ADC_ConfigChannel+0x90>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ebe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	e003      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	69d1      	ldr	r1, [r2, #28]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7ff fc5a 	bl	80017b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fd69 	bl	80019d8 <LL_ADC_REG_IsConversionOngoing>
 8001f06:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fd76 	bl	80019fe <LL_ADC_INJ_IsConversionOngoing>
 8001f12:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80a0 	bne.w	800205c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 809c 	bne.w	800205c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6819      	ldr	r1, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	461a      	mov	r2, r3
 8001f32:	f7ff fc69 	bl	8001808 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10b      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x110>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	e00a      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x126>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d027      	beq.n	8001fcc <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6919      	ldr	r1, [r3, #16]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8a:	f7ff fbbd 	bl	8001708 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6919      	ldr	r1, [r3, #16]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	7e5b      	ldrb	r3, [r3, #25]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x158>
 8001f9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001fa2:	e000      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x15a>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f7ff fbe7 	bl	800177a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6919      	ldr	r1, [r3, #16]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	7e1b      	ldrb	r3, [r3, #24]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d102      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x176>
 8001fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc0:	e000      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x178>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f7ff fbbf 	bl	8001748 <LL_ADC_SetDataRightShift>
 8001fca:	e047      	b.n	800205c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	069b      	lsls	r3, r3, #26
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d107      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fee:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	069b      	lsls	r3, r3, #26
 8002000:	429a      	cmp	r2, r3
 8002002:	d107      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002012:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800201a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	069b      	lsls	r3, r3, #26
 8002024:	429a      	cmp	r2, r3
 8002026:	d107      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002036:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	069b      	lsls	r3, r3, #26
 8002048:	429a      	cmp	r2, r3
 800204a:	d107      	bne.n	800205c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800205a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fc91 	bl	8001988 <LL_ADC_IsEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	f040 81bb 	bne.w	80023e4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6819      	ldr	r1, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	461a      	mov	r2, r3
 800207c:	f7ff fbf0 	bl	8001860 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <HAL_ADC_ConfigChannel+0x284>)
 8002086:	4293      	cmp	r3, r2
 8002088:	f040 8130 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x268>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	3301      	adds	r3, #1
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	bf94      	ite	ls
 80020ac:	2301      	movls	r3, #1
 80020ae:	2300      	movhi	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e01b      	b.n	80020ec <HAL_ADC_ConfigChannel+0x2a0>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80020c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80020c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e005      	b.n	80020dc <HAL_ADC_ConfigChannel+0x290>
 80020d0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80020d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2b09      	cmp	r3, #9
 80020e4:	bf94      	ite	ls
 80020e6:	2301      	movls	r3, #1
 80020e8:	2300      	movhi	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d079      	beq.n	80021e4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_ADC_ConfigChannel+0x2c0>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	3301      	adds	r3, #1
 8002104:	069b      	lsls	r3, r3, #26
 8002106:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800210a:	e015      	b.n	8002138 <HAL_ADC_ConfigChannel+0x2ec>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800211a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800211c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800211e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e003      	b.n	8002130 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3301      	adds	r3, #1
 8002132:	069b      	lsls	r3, r3, #26
 8002134:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x30c>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	3301      	adds	r3, #1
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2101      	movs	r1, #1
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	e017      	b.n	8002188 <HAL_ADC_ConfigChannel+0x33c>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002168:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800216a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e003      	b.n	800217c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	ea42 0103 	orr.w	r1, r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x362>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	051b      	lsls	r3, r3, #20
 80021ac:	e018      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x394>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80021c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80021c6:	2320      	movs	r3, #32
 80021c8:	e003      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e0:	430b      	orrs	r3, r1
 80021e2:	e07e      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x3b4>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	069b      	lsls	r3, r3, #26
 80021fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021fe:	e015      	b.n	800222c <HAL_ADC_ConfigChannel+0x3e0>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e003      	b.n	8002224 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	069b      	lsls	r3, r3, #26
 8002228:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_ConfigChannel+0x400>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	3301      	adds	r3, #1
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	e017      	b.n	800227c <HAL_ADC_ConfigChannel+0x430>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	61bb      	str	r3, [r7, #24]
  return result;
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e003      	b.n	8002270 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2101      	movs	r1, #1
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	ea42 0103 	orr.w	r1, r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10d      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x45c>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	3301      	adds	r3, #1
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	3b1e      	subs	r3, #30
 80022a0:	051b      	lsls	r3, r3, #20
 80022a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a6:	e01b      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x494>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	60fb      	str	r3, [r7, #12]
  return result;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 021f 	and.w	r2, r3, #31
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	3b1e      	subs	r3, #30
 80022da:	051b      	lsls	r3, r3, #20
 80022dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e0:	430b      	orrs	r3, r1
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	6892      	ldr	r2, [r2, #8]
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7ff fa8e 	bl	8001808 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da77      	bge.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f4:	4840      	ldr	r0, [pc, #256]	; (80023f8 <HAL_ADC_ConfigChannel+0x5ac>)
 80022f6:	f7ff f9f9 	bl	80016ec <LL_ADC_GetCommonPathInternalCh>
 80022fa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022fc:	483f      	ldr	r0, [pc, #252]	; (80023fc <HAL_ADC_ConfigChannel+0x5b0>)
 80022fe:	f7ff fb43 	bl	8001988 <LL_ADC_IsEnabled>
 8002302:	4604      	mov	r4, r0
 8002304:	483e      	ldr	r0, [pc, #248]	; (8002400 <HAL_ADC_ConfigChannel+0x5b4>)
 8002306:	f7ff fb3f 	bl	8001988 <LL_ADC_IsEnabled>
 800230a:	4603      	mov	r3, r0
 800230c:	4323      	orrs	r3, r4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d155      	bne.n	80023be <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <HAL_ADC_ConfigChannel+0x5b8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d122      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x516>
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11d      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a35      	ldr	r2, [pc, #212]	; (8002400 <HAL_ADC_ConfigChannel+0x5b4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d159      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002336:	4619      	mov	r1, r3
 8002338:	482f      	ldr	r0, [pc, #188]	; (80023f8 <HAL_ADC_ConfigChannel+0x5ac>)
 800233a:	f7ff f9c4 	bl	80016c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800233e:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_ADC_ConfigChannel+0x5bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	099b      	lsrs	r3, r3, #6
 8002344:	4a31      	ldr	r2, [pc, #196]	; (800240c <HAL_ADC_ConfigChannel+0x5c0>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	3301      	adds	r3, #1
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002352:	e002      	b.n	800235a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3b01      	subs	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002360:	e040      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <HAL_ADC_ConfigChannel+0x5c4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d111      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x544>
 800236c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_ADC_ConfigChannel+0x5b4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d131      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002386:	4619      	mov	r1, r3
 8002388:	481b      	ldr	r0, [pc, #108]	; (80023f8 <HAL_ADC_ConfigChannel+0x5ac>)
 800238a:	f7ff f99c 	bl	80016c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800238e:	e029      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_ADC_ConfigChannel+0x5c8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d124      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
 800239a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d11f      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a15      	ldr	r2, [pc, #84]	; (8002400 <HAL_ADC_ConfigChannel+0x5b4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d11a      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80023ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b4:	4619      	mov	r1, r3
 80023b6:	4810      	ldr	r0, [pc, #64]	; (80023f8 <HAL_ADC_ConfigChannel+0x5ac>)
 80023b8:	f7ff f985 	bl	80016c6 <LL_ADC_SetCommonPathInternalCh>
 80023bc:	e012      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023d0:	e008      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3784      	adds	r7, #132	; 0x84
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	40022300 	.word	0x40022300
 80023fc:	40022000 	.word	0x40022000
 8002400:	40022100 	.word	0x40022100
 8002404:	cb840000 	.word	0xcb840000
 8002408:	24000000 	.word	0x24000000
 800240c:	053e2d63 	.word	0x053e2d63
 8002410:	bac04000 	.word	0xbac04000
 8002414:	cfb80000 	.word	0xcfb80000

08002418 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff faaf 	bl	8001988 <LL_ADC_IsEnabled>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d161      	bne.n	80024f4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	4b32      	ldr	r3, [pc, #200]	; (8002500 <ADC_Enable+0xe8>)
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00d      	beq.n	800245a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	f043 0210 	orr.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e04d      	b.n	80024f6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fa7e 	bl	8001960 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002464:	f7ff f8ec 	bl	8001640 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800246a:	4826      	ldr	r0, [pc, #152]	; (8002504 <ADC_Enable+0xec>)
 800246c:	f7ff fa1c 	bl	80018a8 <LL_ADC_GetMultimode>
 8002470:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a24      	ldr	r2, [pc, #144]	; (8002508 <ADC_Enable+0xf0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d002      	beq.n	8002482 <ADC_Enable+0x6a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	e000      	b.n	8002484 <ADC_Enable+0x6c>
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <ADC_Enable+0xf4>)
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	4293      	cmp	r3, r2
 800248a:	d02c      	beq.n	80024e6 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d130      	bne.n	80024f4 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002492:	e028      	b.n	80024e6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fa75 	bl	8001988 <LL_ADC_IsEnabled>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d104      	bne.n	80024ae <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fa59 	bl	8001960 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ae:	f7ff f8c7 	bl	8001640 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d914      	bls.n	80024e6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d00d      	beq.n	80024e6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e007      	b.n	80024f6 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d1cf      	bne.n	8002494 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	8000003f 	.word	0x8000003f
 8002504:	40022300 	.word	0x40022300
 8002508:	40022100 	.word	0x40022100
 800250c:	40022000 	.word	0x40022000

08002510 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002518:	4b5f      	ldr	r3, [pc, #380]	; (8002698 <ADC_ConfigureBoostMode+0x188>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002524:	f001 fb38 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8002528:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002532:	d010      	beq.n	8002556 <ADC_ConfigureBoostMode+0x46>
 8002534:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002538:	d871      	bhi.n	800261e <ADC_ConfigureBoostMode+0x10e>
 800253a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253e:	d002      	beq.n	8002546 <ADC_ConfigureBoostMode+0x36>
 8002540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002544:	d16b      	bne.n	800261e <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0c1b      	lsrs	r3, r3, #16
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	60fb      	str	r3, [r7, #12]
        break;
 8002554:	e066      	b.n	8002624 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	60fb      	str	r3, [r7, #12]
        break;
 800255c:	e062      	b.n	8002624 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800255e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002562:	f002 fa81 	bl	8004a68 <HAL_RCCEx_GetPeriphCLKFreq>
 8002566:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002570:	d051      	beq.n	8002616 <ADC_ConfigureBoostMode+0x106>
 8002572:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002576:	d854      	bhi.n	8002622 <ADC_ConfigureBoostMode+0x112>
 8002578:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800257c:	d047      	beq.n	800260e <ADC_ConfigureBoostMode+0xfe>
 800257e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002582:	d84e      	bhi.n	8002622 <ADC_ConfigureBoostMode+0x112>
 8002584:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002588:	d03d      	beq.n	8002606 <ADC_ConfigureBoostMode+0xf6>
 800258a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800258e:	d848      	bhi.n	8002622 <ADC_ConfigureBoostMode+0x112>
 8002590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002594:	d033      	beq.n	80025fe <ADC_ConfigureBoostMode+0xee>
 8002596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800259a:	d842      	bhi.n	8002622 <ADC_ConfigureBoostMode+0x112>
 800259c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025a0:	d029      	beq.n	80025f6 <ADC_ConfigureBoostMode+0xe6>
 80025a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80025a6:	d83c      	bhi.n	8002622 <ADC_ConfigureBoostMode+0x112>
 80025a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025ac:	d01a      	beq.n	80025e4 <ADC_ConfigureBoostMode+0xd4>
 80025ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80025b2:	d836      	bhi.n	8002622 <ADC_ConfigureBoostMode+0x112>
 80025b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025b8:	d014      	beq.n	80025e4 <ADC_ConfigureBoostMode+0xd4>
 80025ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80025be:	d830      	bhi.n	8002622 <ADC_ConfigureBoostMode+0x112>
 80025c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c4:	d00e      	beq.n	80025e4 <ADC_ConfigureBoostMode+0xd4>
 80025c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ca:	d82a      	bhi.n	8002622 <ADC_ConfigureBoostMode+0x112>
 80025cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025d0:	d008      	beq.n	80025e4 <ADC_ConfigureBoostMode+0xd4>
 80025d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025d6:	d824      	bhi.n	8002622 <ADC_ConfigureBoostMode+0x112>
 80025d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025dc:	d002      	beq.n	80025e4 <ADC_ConfigureBoostMode+0xd4>
 80025de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025e2:	d11e      	bne.n	8002622 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	0c9b      	lsrs	r3, r3, #18
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	60fb      	str	r3, [r7, #12]
        break;
 80025f4:	e016      	b.n	8002624 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	60fb      	str	r3, [r7, #12]
        break;
 80025fc:	e012      	b.n	8002624 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	60fb      	str	r3, [r7, #12]
        break;
 8002604:	e00e      	b.n	8002624 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	099b      	lsrs	r3, r3, #6
 800260a:	60fb      	str	r3, [r7, #12]
        break;
 800260c:	e00a      	b.n	8002624 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	09db      	lsrs	r3, r3, #7
 8002612:	60fb      	str	r3, [r7, #12]
        break;
 8002614:	e006      	b.n	8002624 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	60fb      	str	r3, [r7, #12]
        break;
 800261c:	e002      	b.n	8002624 <ADC_ConfigureBoostMode+0x114>
        break;
 800261e:	bf00      	nop
 8002620:	e000      	b.n	8002624 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002622:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	085b      	lsrs	r3, r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4a1b      	ldr	r2, [pc, #108]	; (800269c <ADC_ConfigureBoostMode+0x18c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d808      	bhi.n	8002644 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002640:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002642:	e025      	b.n	8002690 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a16      	ldr	r2, [pc, #88]	; (80026a0 <ADC_ConfigureBoostMode+0x190>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d80a      	bhi.n	8002662 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	e016      	b.n	8002690 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <ADC_ConfigureBoostMode+0x194>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d80a      	bhi.n	8002680 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267c:	609a      	str	r2, [r3, #8]
}
 800267e:	e007      	b.n	8002690 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40022300 	.word	0x40022300
 800269c:	005f5e10 	.word	0x005f5e10
 80026a0:	00bebc20 	.word	0x00bebc20
 80026a4:	017d7840 	.word	0x017d7840

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <__NVIC_SetPriorityGrouping+0x40>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <__NVIC_SetPriorityGrouping+0x40>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00
 80026ec:	05fa0000 	.word	0x05fa0000

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db0b      	blt.n	8002736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4907      	ldr	r1, [pc, #28]	; (8002744 <__NVIC_EnableIRQ+0x38>)
 8002726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2001      	movs	r0, #1
 800272e:	fa00 f202 	lsl.w	r2, r0, r2
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000e100 	.word	0xe000e100

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	db0a      	blt.n	8002772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	490c      	ldr	r1, [pc, #48]	; (8002794 <__NVIC_SetPriority+0x4c>)
 8002762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	440b      	add	r3, r1
 800276c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002770:	e00a      	b.n	8002788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <__NVIC_SetPriority+0x50>)
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3b04      	subs	r3, #4
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	440b      	add	r3, r1
 8002786:	761a      	strb	r2, [r3, #24]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000e100 	.word	0xe000e100
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f1c3 0307 	rsb	r3, r3, #7
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	bf28      	it	cs
 80027ba:	2304      	movcs	r3, #4
 80027bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d902      	bls.n	80027cc <NVIC_EncodePriority+0x30>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3b03      	subs	r3, #3
 80027ca:	e000      	b.n	80027ce <NVIC_EncodePriority+0x32>
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	4313      	orrs	r3, r2
         );
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002814:	d301      	bcc.n	800281a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002816:	2301      	movs	r3, #1
 8002818:	e00f      	b.n	800283a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <SysTick_Config+0x40>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002822:	210f      	movs	r1, #15
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f7ff ff8e 	bl	8002748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <SysTick_Config+0x40>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <SysTick_Config+0x40>)
 8002834:	2207      	movs	r2, #7
 8002836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	e000e010 	.word	0xe000e010

08002848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff29 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800286c:	f7ff ff40 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 8002870:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff ff90 	bl	800279c <NVIC_EncodePriority>
 800287c:	4602      	mov	r2, r0
 800287e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff5f 	bl	8002748 <__NVIC_SetPriority>
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff33 	bl	800270c <__NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffa4 	bl	8002804 <SysTick_Config>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80028d6:	4b89      	ldr	r3, [pc, #548]	; (8002afc <HAL_GPIO_Init+0x234>)
 80028d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028da:	e194      	b.n	8002c06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8186 	beq.w	8002c00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d005      	beq.n	800290c <HAL_GPIO_Init+0x44>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d130      	bne.n	800296e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002942:	2201      	movs	r2, #1
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0201 	and.w	r2, r3, #1
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b03      	cmp	r3, #3
 8002978:	d017      	beq.n	80029aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2203      	movs	r2, #3
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d123      	bne.n	80029fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	08da      	lsrs	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3208      	adds	r2, #8
 80029be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	08da      	lsrs	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3208      	adds	r2, #8
 80029f8:	69b9      	ldr	r1, [r7, #24]
 80029fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	2203      	movs	r2, #3
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0203 	and.w	r2, r3, #3
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80e0 	beq.w	8002c00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a40:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_GPIO_Init+0x238>)
 8002a42:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002a46:	4a2e      	ldr	r2, [pc, #184]	; (8002b00 <HAL_GPIO_Init+0x238>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002a50:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_GPIO_Init+0x238>)
 8002a52:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a5e:	4a29      	ldr	r2, [pc, #164]	; (8002b04 <HAL_GPIO_Init+0x23c>)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	089b      	lsrs	r3, r3, #2
 8002a64:	3302      	adds	r3, #2
 8002a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	220f      	movs	r2, #15
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <HAL_GPIO_Init+0x240>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d052      	beq.n	8002b30 <HAL_GPIO_Init+0x268>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_GPIO_Init+0x244>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d031      	beq.n	8002af6 <HAL_GPIO_Init+0x22e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_GPIO_Init+0x248>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d02b      	beq.n	8002af2 <HAL_GPIO_Init+0x22a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <HAL_GPIO_Init+0x24c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d025      	beq.n	8002aee <HAL_GPIO_Init+0x226>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_GPIO_Init+0x250>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d01f      	beq.n	8002aea <HAL_GPIO_Init+0x222>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <HAL_GPIO_Init+0x254>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d019      	beq.n	8002ae6 <HAL_GPIO_Init+0x21e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1a      	ldr	r2, [pc, #104]	; (8002b20 <HAL_GPIO_Init+0x258>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_GPIO_Init+0x21a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_GPIO_Init+0x25c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00d      	beq.n	8002ade <HAL_GPIO_Init+0x216>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_GPIO_Init+0x260>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <HAL_GPIO_Init+0x212>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <HAL_GPIO_Init+0x264>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_GPIO_Init+0x20e>
 8002ad2:	2309      	movs	r3, #9
 8002ad4:	e02d      	b.n	8002b32 <HAL_GPIO_Init+0x26a>
 8002ad6:	230a      	movs	r3, #10
 8002ad8:	e02b      	b.n	8002b32 <HAL_GPIO_Init+0x26a>
 8002ada:	2308      	movs	r3, #8
 8002adc:	e029      	b.n	8002b32 <HAL_GPIO_Init+0x26a>
 8002ade:	2307      	movs	r3, #7
 8002ae0:	e027      	b.n	8002b32 <HAL_GPIO_Init+0x26a>
 8002ae2:	2306      	movs	r3, #6
 8002ae4:	e025      	b.n	8002b32 <HAL_GPIO_Init+0x26a>
 8002ae6:	2305      	movs	r3, #5
 8002ae8:	e023      	b.n	8002b32 <HAL_GPIO_Init+0x26a>
 8002aea:	2304      	movs	r3, #4
 8002aec:	e021      	b.n	8002b32 <HAL_GPIO_Init+0x26a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	e01f      	b.n	8002b32 <HAL_GPIO_Init+0x26a>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e01d      	b.n	8002b32 <HAL_GPIO_Init+0x26a>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e01b      	b.n	8002b32 <HAL_GPIO_Init+0x26a>
 8002afa:	bf00      	nop
 8002afc:	58000080 	.word	0x58000080
 8002b00:	58024400 	.word	0x58024400
 8002b04:	58000400 	.word	0x58000400
 8002b08:	58020000 	.word	0x58020000
 8002b0c:	58020400 	.word	0x58020400
 8002b10:	58020800 	.word	0x58020800
 8002b14:	58020c00 	.word	0x58020c00
 8002b18:	58021000 	.word	0x58021000
 8002b1c:	58021400 	.word	0x58021400
 8002b20:	58021800 	.word	0x58021800
 8002b24:	58021c00 	.word	0x58021c00
 8002b28:	58022000 	.word	0x58022000
 8002b2c:	58022400 	.word	0x58022400
 8002b30:	2300      	movs	r3, #0
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	f002 0203 	and.w	r2, r2, #3
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	4093      	lsls	r3, r2
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b42:	4938      	ldr	r1, [pc, #224]	; (8002c24 <HAL_GPIO_Init+0x35c>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3301      	adds	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f47f ae63 	bne.w	80028dc <HAL_GPIO_Init+0x14>
  }
}
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	3724      	adds	r7, #36	; 0x24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	58000400 	.word	0x58000400

08002c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
 8002c34:	4613      	mov	r3, r2
 8002c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c38:	787b      	ldrb	r3, [r7, #1]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c44:	e003      	b.n	8002c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	041a      	lsls	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	619a      	str	r2, [r3, #24]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6a:	6013      	str	r3, [r2, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	58024800 	.word	0x58024800

08002c7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002c84:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	2b06      	cmp	r3, #6
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e040      	b.n	8002d24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e03e      	b.n	8002d24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002cae:	491f      	ldr	r1, [pc, #124]	; (8002d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002cb6:	f7fe fcc3 	bl	8001640 <HAL_GetTick>
 8002cba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cbc:	e009      	b.n	8002cd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cbe:	f7fe fcbf 	bl	8001640 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ccc:	d901      	bls.n	8002cd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e028      	b.n	8002d24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cde:	d1ee      	bne.n	8002cbe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b1e      	cmp	r3, #30
 8002ce4:	d008      	beq.n	8002cf8 <HAL_PWREx_ConfigSupply+0x7c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8002cea:	d005      	beq.n	8002cf8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b1d      	cmp	r3, #29
 8002cf0:	d002      	beq.n	8002cf8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8002cf6:	d114      	bne.n	8002d22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002cf8:	f7fe fca2 	bl	8001640 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cfe:	e009      	b.n	8002d14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d00:	f7fe fc9e 	bl	8001640 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d0e:	d901      	bls.n	8002d14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e007      	b.n	8002d24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d1ee      	bne.n	8002d00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	58024800 	.word	0x58024800

08002d30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08c      	sub	sp, #48	; 0x30
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e3f3      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80b3 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d50:	4b9e      	ldr	r3, [pc, #632]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d5a:	4b9c      	ldr	r3, [pc, #624]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d007      	beq.n	8002d76 <HAL_RCC_OscConfig+0x46>
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	2b18      	cmp	r3, #24
 8002d6a:	d112      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62>
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d10d      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d76:	4b95      	ldr	r3, [pc, #596]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8098 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x184>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 8093 	bne.w	8002eb4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e3cb      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9a:	d106      	bne.n	8002daa <HAL_RCC_OscConfig+0x7a>
 8002d9c:	4b8b      	ldr	r3, [pc, #556]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a8a      	ldr	r2, [pc, #552]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	e058      	b.n	8002e5c <HAL_RCC_OscConfig+0x12c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d112      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xa8>
 8002db2:	4b86      	ldr	r3, [pc, #536]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a85      	ldr	r2, [pc, #532]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b83      	ldr	r3, [pc, #524]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a82      	ldr	r2, [pc, #520]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002dc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b80      	ldr	r3, [pc, #512]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7f      	ldr	r2, [pc, #508]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e041      	b.n	8002e5c <HAL_RCC_OscConfig+0x12c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de0:	d112      	bne.n	8002e08 <HAL_RCC_OscConfig+0xd8>
 8002de2:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a79      	ldr	r2, [pc, #484]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b77      	ldr	r3, [pc, #476]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a76      	ldr	r2, [pc, #472]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002df4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b74      	ldr	r3, [pc, #464]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a73      	ldr	r2, [pc, #460]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e029      	b.n	8002e5c <HAL_RCC_OscConfig+0x12c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002e10:	d112      	bne.n	8002e38 <HAL_RCC_OscConfig+0x108>
 8002e12:	4b6e      	ldr	r3, [pc, #440]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6d      	ldr	r2, [pc, #436]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4b6b      	ldr	r3, [pc, #428]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6a      	ldr	r2, [pc, #424]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b68      	ldr	r3, [pc, #416]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a67      	ldr	r2, [pc, #412]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e011      	b.n	8002e5c <HAL_RCC_OscConfig+0x12c>
 8002e38:	4b64      	ldr	r3, [pc, #400]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a63      	ldr	r2, [pc, #396]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a60      	ldr	r2, [pc, #384]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b5e      	ldr	r3, [pc, #376]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a5d      	ldr	r2, [pc, #372]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fbec 	bl	8001640 <HAL_GetTick>
 8002e68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fbe8 	bl	8001640 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e355      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e7e:	4b53      	ldr	r3, [pc, #332]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x13c>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fbd8 	bl	8001640 <HAL_GetTick>
 8002e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe fbd4 	bl	8001640 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e341      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x164>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 808c 	beq.w	8002fdc <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec4:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ecc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ece:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_RCC_OscConfig+0x1ba>
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2b18      	cmp	r3, #24
 8002ede:	d137      	bne.n	8002f50 <HAL_RCC_OscConfig+0x220>
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d132      	bne.n	8002f50 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eea:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1d2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e313      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f02:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0219 	bic.w	r2, r3, #25
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	492f      	ldr	r1, [pc, #188]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f14:	f7fe fb94 	bl	8001640 <HAL_GetTick>
 8002f18:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fe fb90 	bl	8001640 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e2fd      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	4920      	ldr	r1, [pc, #128]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f4e:	e045      	b.n	8002fdc <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d026      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f58:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f023 0219 	bic.w	r2, r3, #25
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4919      	ldr	r1, [pc, #100]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fb69 	bl	8001640 <HAL_GetTick>
 8002f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe fb65 	bl	8001640 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e2d2      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	490b      	ldr	r1, [pc, #44]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	e01a      	b.n	8002fdc <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <HAL_RCC_OscConfig+0x29c>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fb45 	bl	8001640 <HAL_GetTick>
 8002fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fba:	f7fe fb41 	bl	8001640 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d903      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e2ae      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
 8002fcc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fd0:	4b99      	ldr	r3, [pc, #612]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1ee      	bne.n	8002fba <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d06a      	beq.n	80030be <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe8:	4b93      	ldr	r3, [pc, #588]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ff0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ff2:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d007      	beq.n	800300e <HAL_RCC_OscConfig+0x2de>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b18      	cmp	r3, #24
 8003002:	d11b      	bne.n	800303c <HAL_RCC_OscConfig+0x30c>
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d116      	bne.n	800303c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800300e:	4b8a      	ldr	r3, [pc, #552]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x2f6>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	2b80      	cmp	r3, #128	; 0x80
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e281      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003026:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	4980      	ldr	r1, [pc, #512]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003036:	4313      	orrs	r3, r2
 8003038:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800303a:	e040      	b.n	80030be <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d023      	beq.n	800308c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003044:	4b7c      	ldr	r3, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7b      	ldr	r2, [pc, #492]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 800304a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe faf6 	bl	8001640 <HAL_GetTick>
 8003054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003058:	f7fe faf2 	bl	8001640 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e25f      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800306a:	4b73      	ldr	r3, [pc, #460]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003076:	4b70      	ldr	r3, [pc, #448]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	061b      	lsls	r3, r3, #24
 8003084:	496c      	ldr	r1, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003086:	4313      	orrs	r3, r2
 8003088:	60cb      	str	r3, [r1, #12]
 800308a:	e018      	b.n	80030be <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800308c:	4b6a      	ldr	r3, [pc, #424]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a69      	ldr	r2, [pc, #420]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fad2 	bl	8001640 <HAL_GetTick>
 800309c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030a0:	f7fe face 	bl	8001640 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e23b      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030b2:	4b61      	ldr	r3, [pc, #388]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d036      	beq.n	8003138 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d019      	beq.n	8003106 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 80030d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d6:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fe faaf 	bl	8001640 <HAL_GetTick>
 80030e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e6:	f7fe faab 	bl	8001640 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e218      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030f8:	4b4f      	ldr	r3, [pc, #316]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x3b6>
 8003104:	e018      	b.n	8003138 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003106:	4b4c      	ldr	r3, [pc, #304]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310a:	4a4b      	ldr	r2, [pc, #300]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7fe fa95 	bl	8001640 <HAL_GetTick>
 8003116:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311a:	f7fe fa91 	bl	8001640 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e1fe      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800312c:	4b42      	ldr	r3, [pc, #264]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d036      	beq.n	80031b2 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d019      	beq.n	8003180 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800314c:	4b3a      	ldr	r3, [pc, #232]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a39      	ldr	r2, [pc, #228]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003152:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003156:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003158:	f7fe fa72 	bl	8001640 <HAL_GetTick>
 800315c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003160:	f7fe fa6e 	bl	8001640 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1db      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x430>
 800317e:	e018      	b.n	80031b2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003180:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800318a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800318c:	f7fe fa58 	bl	8001640 <HAL_GetTick>
 8003190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003194:	f7fe fa54 	bl	8001640 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1c1      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80af 	beq.w	800331e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031c0:	4b1e      	ldr	r3, [pc, #120]	; (800323c <HAL_RCC_OscConfig+0x50c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	; (800323c <HAL_RCC_OscConfig+0x50c>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031cc:	f7fe fa38 	bl	8001640 <HAL_GetTick>
 80031d0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031d4:	f7fe fa34 	bl	8001640 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1a1      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_RCC_OscConfig+0x50c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x4d8>
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
 8003206:	e05b      	b.n	80032c0 <HAL_RCC_OscConfig+0x590>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d117      	bne.n	8003240 <HAL_RCC_OscConfig+0x510>
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a08      	ldr	r2, [pc, #32]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	4a05      	ldr	r2, [pc, #20]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 8003222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003226:	6713      	str	r3, [r2, #112]	; 0x70
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	4a02      	ldr	r2, [pc, #8]	; (8003238 <HAL_RCC_OscConfig+0x508>)
 800322e:	f023 0304 	bic.w	r3, r3, #4
 8003232:	6713      	str	r3, [r2, #112]	; 0x70
 8003234:	e044      	b.n	80032c0 <HAL_RCC_OscConfig+0x590>
 8003236:	bf00      	nop
 8003238:	58024400 	.word	0x58024400
 800323c:	58024800 	.word	0x58024800
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d112      	bne.n	800326e <HAL_RCC_OscConfig+0x53e>
 8003248:	4b95      	ldr	r3, [pc, #596]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a94      	ldr	r2, [pc, #592]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	4b92      	ldr	r3, [pc, #584]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4a91      	ldr	r2, [pc, #580]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800325a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800325e:	6713      	str	r3, [r2, #112]	; 0x70
 8003260:	4b8f      	ldr	r3, [pc, #572]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	4a8e      	ldr	r2, [pc, #568]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6713      	str	r3, [r2, #112]	; 0x70
 800326c:	e028      	b.n	80032c0 <HAL_RCC_OscConfig+0x590>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b85      	cmp	r3, #133	; 0x85
 8003274:	d112      	bne.n	800329c <HAL_RCC_OscConfig+0x56c>
 8003276:	4b8a      	ldr	r3, [pc, #552]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a89      	ldr	r2, [pc, #548]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
 8003282:	4b87      	ldr	r3, [pc, #540]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a86      	ldr	r2, [pc, #536]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	4b84      	ldr	r3, [pc, #528]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a83      	ldr	r2, [pc, #524]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	e011      	b.n	80032c0 <HAL_RCC_OscConfig+0x590>
 800329c:	4b80      	ldr	r3, [pc, #512]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a7f      	ldr	r2, [pc, #508]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	4b7d      	ldr	r3, [pc, #500]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a7c      	ldr	r2, [pc, #496]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80032ae:	f023 0304 	bic.w	r3, r3, #4
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	4b7a      	ldr	r3, [pc, #488]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	4a79      	ldr	r2, [pc, #484]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80032ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d015      	beq.n	80032f4 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe f9ba 	bl	8001640 <HAL_GetTick>
 80032cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fe f9b6 	bl	8001640 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e121      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032e6:	4b6e      	ldr	r3, [pc, #440]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ee      	beq.n	80032d0 <HAL_RCC_OscConfig+0x5a0>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fe f9a4 	bl	8001640 <HAL_GetTick>
 80032f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fe f9a0 	bl	8001640 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e10b      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003312:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ee      	bne.n	80032fc <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8100 	beq.w	8003528 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003328:	4b5d      	ldr	r3, [pc, #372]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003330:	2b18      	cmp	r3, #24
 8003332:	f000 80bb 	beq.w	80034ac <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b02      	cmp	r3, #2
 800333c:	f040 8095 	bne.w	800346a <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b57      	ldr	r3, [pc, #348]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a56      	ldr	r2, [pc, #344]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe f978 	bl	8001640 <HAL_GetTick>
 8003350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe f974 	bl	8001640 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0e1      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003366:	4b4e      	ldr	r3, [pc, #312]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003372:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003376:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <HAL_RCC_OscConfig+0x774>)
 8003378:	4013      	ands	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	430a      	orrs	r2, r1
 8003386:	4946      	ldr	r1, [pc, #280]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003388:	4313      	orrs	r3, r2
 800338a:	628b      	str	r3, [r1, #40]	; 0x28
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	3b01      	subs	r3, #1
 8003392:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	3b01      	subs	r3, #1
 800339c:	025b      	lsls	r3, r3, #9
 800339e:	b29b      	uxth	r3, r3
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	3b01      	subs	r3, #1
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	3b01      	subs	r3, #1
 80033b6:	061b      	lsls	r3, r3, #24
 80033b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033bc:	4938      	ldr	r1, [pc, #224]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80033c2:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	4a36      	ldr	r2, [pc, #216]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80033d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d2:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <HAL_RCC_OscConfig+0x778>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033da:	00d2      	lsls	r2, r2, #3
 80033dc:	4930      	ldr	r1, [pc, #192]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033e2:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	f023 020c 	bic.w	r2, r3, #12
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	492c      	ldr	r1, [pc, #176]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033f4:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f023 0202 	bic.w	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	4927      	ldr	r1, [pc, #156]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003402:	4313      	orrs	r3, r2
 8003404:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003406:	4b26      	ldr	r3, [pc, #152]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	4a25      	ldr	r2, [pc, #148]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003410:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003412:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	4a22      	ldr	r2, [pc, #136]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800341c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003428:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800343c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fe f8fd 	bl	8001640 <HAL_GetTick>
 8003446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe f8f9 	bl	8001640 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e066      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x71a>
 8003468:	e05e      	b.n	8003528 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe f8e3 	bl	8001640 <HAL_GetTick>
 800347a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347e:	f7fe f8df 	bl	8001640 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e04c      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCC_OscConfig+0x770>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x74e>
 800349c:	e044      	b.n	8003528 <HAL_RCC_OscConfig+0x7f8>
 800349e:	bf00      	nop
 80034a0:	58024400 	.word	0x58024400
 80034a4:	fffffc0c 	.word	0xfffffc0c
 80034a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <HAL_RCC_OscConfig+0x804>)
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCC_OscConfig+0x804>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d031      	beq.n	8003524 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0203 	and.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d12a      	bne.n	8003524 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d122      	bne.n	8003524 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d11a      	bne.n	8003524 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	0a5b      	lsrs	r3, r3, #9
 80034f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d111      	bne.n	8003524 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d108      	bne.n	8003524 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0e1b      	lsrs	r3, r3, #24
 8003516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3730      	adds	r7, #48	; 0x30
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	58024400 	.word	0x58024400

08003538 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e19c      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b8a      	ldr	r3, [pc, #552]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b87      	ldr	r3, [pc, #540]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 020f 	bic.w	r2, r3, #15
 8003562:	4985      	ldr	r1, [pc, #532]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b83      	ldr	r3, [pc, #524]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e184      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d010      	beq.n	80035aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	4b7b      	ldr	r3, [pc, #492]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003594:	429a      	cmp	r2, r3
 8003596:	d908      	bls.n	80035aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003598:	4b78      	ldr	r3, [pc, #480]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	4975      	ldr	r1, [pc, #468]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d010      	beq.n	80035d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	4b70      	ldr	r3, [pc, #448]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d908      	bls.n	80035d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035c6:	4b6d      	ldr	r3, [pc, #436]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	496a      	ldr	r1, [pc, #424]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699a      	ldr	r2, [r3, #24]
 80035e8:	4b64      	ldr	r3, [pc, #400]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d908      	bls.n	8003606 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035f4:	4b61      	ldr	r3, [pc, #388]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	495e      	ldr	r1, [pc, #376]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003602:	4313      	orrs	r3, r2
 8003604:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800361e:	429a      	cmp	r2, r3
 8003620:	d908      	bls.n	8003634 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003622:	4b56      	ldr	r3, [pc, #344]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4953      	ldr	r1, [pc, #332]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003630:	4313      	orrs	r3, r2
 8003632:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	4b4d      	ldr	r3, [pc, #308]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	429a      	cmp	r2, r3
 800364e:	d908      	bls.n	8003662 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003650:	4b4a      	ldr	r3, [pc, #296]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f023 020f 	bic.w	r2, r3, #15
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4947      	ldr	r1, [pc, #284]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800365e:	4313      	orrs	r3, r2
 8003660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d055      	beq.n	800371a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800366e:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4940      	ldr	r1, [pc, #256]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800367c:	4313      	orrs	r3, r2
 800367e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d107      	bne.n	8003698 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003688:	4b3c      	ldr	r3, [pc, #240]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d121      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0f6      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036a0:	4b36      	ldr	r3, [pc, #216]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d115      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0ea      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036b8:	4b30      	ldr	r3, [pc, #192]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0de      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c8:	4b2c      	ldr	r3, [pc, #176]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0d6      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d8:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f023 0207 	bic.w	r2, r3, #7
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4925      	ldr	r1, [pc, #148]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fd ffa9 	bl	8001640 <HAL_GetTick>
 80036ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f2:	f7fd ffa5 	bl	8001640 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0be      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003708:	4b1c      	ldr	r3, [pc, #112]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	429a      	cmp	r2, r3
 8003718:	d1eb      	bne.n	80036f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	429a      	cmp	r2, r3
 8003734:	d208      	bcs.n	8003748 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f023 020f 	bic.w	r2, r3, #15
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	490e      	ldr	r1, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x244>)
 8003744:	4313      	orrs	r3, r2
 8003746:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d214      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 020f 	bic.w	r2, r3, #15
 800375e:	4906      	ldr	r1, [pc, #24]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <HAL_RCC_ClockConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e086      	b.n	8003886 <HAL_RCC_ClockConfig+0x34e>
 8003778:	52002000 	.word	0x52002000
 800377c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d010      	beq.n	80037ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003798:	429a      	cmp	r2, r3
 800379a:	d208      	bcs.n	80037ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800379c:	4b3c      	ldr	r3, [pc, #240]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	4939      	ldr	r1, [pc, #228]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d010      	beq.n	80037dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d208      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037ca:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	492e      	ldr	r1, [pc, #184]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d010      	beq.n	800380a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	4b28      	ldr	r3, [pc, #160]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d208      	bcs.n	800380a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037f8:	4b25      	ldr	r3, [pc, #148]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	4922      	ldr	r1, [pc, #136]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003806:	4313      	orrs	r3, r2
 8003808:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d010      	beq.n	8003838 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003822:	429a      	cmp	r2, r3
 8003824:	d208      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003826:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	4917      	ldr	r1, [pc, #92]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003834:	4313      	orrs	r3, r2
 8003836:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003838:	f000 f834 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	4912      	ldr	r1, [pc, #72]	; (8003894 <HAL_RCC_ClockConfig+0x35c>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
 8003854:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_RCC_ClockConfig+0x358>)
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <HAL_RCC_ClockConfig+0x35c>)
 8003860:	5cd3      	ldrb	r3, [r2, r3]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <HAL_RCC_ClockConfig+0x360>)
 800386e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <HAL_RCC_ClockConfig+0x364>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_RCC_ClockConfig+0x368>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fe96 	bl	80015ac <HAL_InitTick>
 8003880:	4603      	mov	r3, r0
 8003882:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	58024400 	.word	0x58024400
 8003894:	08008b38 	.word	0x08008b38
 8003898:	24000004 	.word	0x24000004
 800389c:	24000000 	.word	0x24000000
 80038a0:	24000008 	.word	0x24000008

080038a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	; 0x24
 80038a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038aa:	4bb3      	ldr	r3, [pc, #716]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b2:	2b18      	cmp	r3, #24
 80038b4:	f200 8155 	bhi.w	8003b62 <HAL_RCC_GetSysClockFreq+0x2be>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	08003925 	.word	0x08003925
 80038c4:	08003b63 	.word	0x08003b63
 80038c8:	08003b63 	.word	0x08003b63
 80038cc:	08003b63 	.word	0x08003b63
 80038d0:	08003b63 	.word	0x08003b63
 80038d4:	08003b63 	.word	0x08003b63
 80038d8:	08003b63 	.word	0x08003b63
 80038dc:	08003b63 	.word	0x08003b63
 80038e0:	0800394b 	.word	0x0800394b
 80038e4:	08003b63 	.word	0x08003b63
 80038e8:	08003b63 	.word	0x08003b63
 80038ec:	08003b63 	.word	0x08003b63
 80038f0:	08003b63 	.word	0x08003b63
 80038f4:	08003b63 	.word	0x08003b63
 80038f8:	08003b63 	.word	0x08003b63
 80038fc:	08003b63 	.word	0x08003b63
 8003900:	08003951 	.word	0x08003951
 8003904:	08003b63 	.word	0x08003b63
 8003908:	08003b63 	.word	0x08003b63
 800390c:	08003b63 	.word	0x08003b63
 8003910:	08003b63 	.word	0x08003b63
 8003914:	08003b63 	.word	0x08003b63
 8003918:	08003b63 	.word	0x08003b63
 800391c:	08003b63 	.word	0x08003b63
 8003920:	08003957 	.word	0x08003957
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003924:	4b94      	ldr	r3, [pc, #592]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003930:	4b91      	ldr	r3, [pc, #580]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	08db      	lsrs	r3, r3, #3
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	4a90      	ldr	r2, [pc, #576]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
 8003940:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003942:	e111      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003944:	4b8d      	ldr	r3, [pc, #564]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003946:	61bb      	str	r3, [r7, #24]
    break;
 8003948:	e10e      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800394a:	4b8d      	ldr	r3, [pc, #564]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800394c:	61bb      	str	r3, [r7, #24]
    break;
 800394e:	e10b      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003950:	4b8c      	ldr	r3, [pc, #560]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003952:	61bb      	str	r3, [r7, #24]
    break;
 8003954:	e108      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003956:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003960:	4b85      	ldr	r3, [pc, #532]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800396a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800396c:	4b82      	ldr	r3, [pc, #520]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003976:	4b80      	ldr	r3, [pc, #512]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	08db      	lsrs	r3, r3, #3
 800397c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80e1 	beq.w	8003b5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b02      	cmp	r3, #2
 800399e:	f000 8083 	beq.w	8003aa8 <HAL_RCC_GetSysClockFreq+0x204>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	f200 80a1 	bhi.w	8003aec <HAL_RCC_GetSysClockFreq+0x248>
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x114>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d056      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x1c0>
 80039b6:	e099      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039b8:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d02d      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039c4:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	4a6b      	ldr	r2, [pc, #428]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ee:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003a1e:	e087      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a32:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a62:	e065      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a76:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aa6:	e043      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ace:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aea:	e021      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	0a5b      	lsrs	r3, r3, #9
 8003b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b54:	ee17 3a90 	vmov	r3, s15
 8003b58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003b5a:	e005      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
    break;
 8003b60:	e002      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b64:	61bb      	str	r3, [r7, #24]
    break;
 8003b66:	bf00      	nop
  }

  return sysclockfreq;
 8003b68:	69bb      	ldr	r3, [r7, #24]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	03d09000 	.word	0x03d09000
 8003b80:	003d0900 	.word	0x003d0900
 8003b84:	007a1200 	.word	0x007a1200
 8003b88:	46000000 	.word	0x46000000
 8003b8c:	4c742400 	.word	0x4c742400
 8003b90:	4a742400 	.word	0x4a742400
 8003b94:	4af42400 	.word	0x4af42400

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003b9e:	f7ff fe81 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	490f      	ldr	r1, [pc, #60]	; (8003bec <HAL_RCC_GetHCLKFreq+0x54>)
 8003bb0:	5ccb      	ldrb	r3, [r1, r3]
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_GetHCLKFreq+0x54>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bd6:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	58024400 	.word	0x58024400
 8003bec:	08008b38 	.word	0x08008b38
 8003bf0:	24000004 	.word	0x24000004
 8003bf4:	24000000 	.word	0x24000000

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003bfc:	f7ff ffcc 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	08008b38 	.word	0x08008b38

08003c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003c28:	f7ff ffb6 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4904      	ldr	r1, [pc, #16]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	08008b38 	.word	0x08008b38

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d03f      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c74:	d02a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c7a:	d824      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c80:	d018      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c86:	d81e      	bhi.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c90:	d007      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c92:	e018      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4ba6      	ldr	r3, [pc, #664]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4aa5      	ldr	r2, [pc, #660]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ca0:	e015      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 ff17 	bl	8005adc <RCCEx_PLL2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3324      	adds	r3, #36	; 0x24
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 ffc0 	bl	8005c40 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cd4:	4b96      	ldr	r3, [pc, #600]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce0:	4993      	ldr	r1, [pc, #588]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ce6:	e001      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d03d      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d826      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d1d 	.word	0x08003d1d
 8003d0c:	08003d2b 	.word	0x08003d2b
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	08003d55 	.word	0x08003d55
 8003d18:	08003d55 	.word	0x08003d55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	4b84      	ldr	r3, [pc, #528]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a83      	ldr	r2, [pc, #524]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d28:	e015      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 fed3 	bl	8005adc <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d3a:	e00c      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3324      	adds	r3, #36	; 0x24
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 ff7c 	bl	8005c40 <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d4c:	e003      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
      break;
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d109      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d5c:	4b74      	ldr	r3, [pc, #464]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	f023 0207 	bic.w	r2, r3, #7
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	4971      	ldr	r1, [pc, #452]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	650b      	str	r3, [r1, #80]	; 0x50
 8003d6e:	e001      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d04a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d88:	d031      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003d8a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d8e:	d82b      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d94:	d02d      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9a:	d825      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d9c:	2bc0      	cmp	r3, #192	; 0xc0
 8003d9e:	d02a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003da0:	2bc0      	cmp	r3, #192	; 0xc0
 8003da2:	d821      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003da4:	2b80      	cmp	r3, #128	; 0x80
 8003da6:	d016      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d81d      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d007      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003db4:	e018      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db6:	4b5e      	ldr	r3, [pc, #376]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4a5d      	ldr	r2, [pc, #372]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003dc2:	e019      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 fe86 	bl	8005adc <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003dd4:	e010      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3324      	adds	r3, #36	; 0x24
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 ff2f 	bl	8005c40 <RCCEx_PLL3_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003de6:	e007      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
      break;
 8003dec:	e004      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003dee:	bf00      	nop
 8003df0:	e002      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003df2:	bf00      	nop
 8003df4:	e000      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003dfe:	4b4c      	ldr	r3, [pc, #304]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e02:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	4949      	ldr	r1, [pc, #292]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	650b      	str	r3, [r1, #80]	; 0x50
 8003e10:	e001      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d04f      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e2a:	d036      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003e2c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e30:	d830      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e36:	d032      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3c:	d82a      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003e3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e42:	d02e      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003e44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e48:	d824      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4e:	d018      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e54:	d81e      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5e:	d007      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003e60:	e018      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e62:	4b33      	ldr	r3, [pc, #204]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	4a32      	ldr	r2, [pc, #200]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003e6e:	e019      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 fe30 	bl	8005adc <RCCEx_PLL2_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003e80:	e010      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3324      	adds	r3, #36	; 0x24
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 fed9 	bl	8005c40 <RCCEx_PLL3_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003e92:	e007      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	75fb      	strb	r3, [r7, #23]
      break;
 8003e98:	e004      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003eaa:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eae:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	491e      	ldr	r1, [pc, #120]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	650b      	str	r3, [r1, #80]	; 0x50
 8003ebc:	e001      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
 8003ec0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d034      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	2b30      	cmp	r3, #48	; 0x30
 8003ed4:	d01c      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003ed6:	2b30      	cmp	r3, #48	; 0x30
 8003ed8:	d817      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d00c      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d813      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d10f      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003ef6:	e00e      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	2102      	movs	r1, #2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fdec 	bl	8005adc <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003f08:	e005      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0e:	e002      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003f10:	bf00      	nop
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f28:	4901      	ldr	r1, [pc, #4]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f2e:	e003      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003f30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d047      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f4c:	d030      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f52:	d82a      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003f54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f58:	d02c      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003f5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f5e:	d824      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f64:	d018      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f6a:	d81e      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f74:	d007      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003f76:	e018      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f78:	4bb0      	ldr	r3, [pc, #704]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	4aaf      	ldr	r2, [pc, #700]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f84:	e017      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 fda5 	bl	8005adc <RCCEx_PLL2_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f96:	e00e      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3324      	adds	r3, #36	; 0x24
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 fe4e 	bl	8005c40 <RCCEx_PLL3_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fa8:	e005      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	75fb      	strb	r3, [r7, #23]
      break;
 8003fae:	e002      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003fbc:	4b9f      	ldr	r3, [pc, #636]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc8:	499c      	ldr	r1, [pc, #624]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	650b      	str	r3, [r1, #80]	; 0x50
 8003fce:	e001      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d049      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d02e      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fee:	d828      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003ff0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ff4:	d02a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003ff6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ffa:	d822      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003ffc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004000:	d026      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004002:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004006:	d81c      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800400c:	d010      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800400e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004012:	d816      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01d      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401c:	d111      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	2101      	movs	r1, #1
 8004024:	4618      	mov	r0, r3
 8004026:	f001 fd59 	bl	8005adc <RCCEx_PLL2_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800402e:	e012      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3324      	adds	r3, #36	; 0x24
 8004034:	2101      	movs	r1, #1
 8004036:	4618      	mov	r0, r3
 8004038:	f001 fe02 	bl	8005c40 <RCCEx_PLL3_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004040:	e009      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
      break;
 8004046:	e006      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004048:	bf00      	nop
 800404a:	e004      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800404c:	bf00      	nop
 800404e:	e002      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004050:	bf00      	nop
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800405c:	4b77      	ldr	r3, [pc, #476]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800405e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004060:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004068:	4974      	ldr	r1, [pc, #464]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800406a:	4313      	orrs	r3, r2
 800406c:	650b      	str	r3, [r1, #80]	; 0x50
 800406e:	e001      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d053      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004086:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800408a:	d034      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800408c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004090:	d82e      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004092:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004096:	d030      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800409c:	d828      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a2:	d02c      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a8:	d822      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80040aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040ae:	d028      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80040b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040b4:	d81c      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80040b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ba:	d010      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80040bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c0:	d816      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01f      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80040c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ca:	d111      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fd02 	bl	8005adc <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040dc:	e014      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3324      	adds	r3, #36	; 0x24
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fdab 	bl	8005c40 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040ee:	e00b      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
      break;
 80040f4:	e008      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80040f6:	bf00      	nop
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800410e:	4b4b      	ldr	r3, [pc, #300]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800411c:	4947      	ldr	r1, [pc, #284]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800411e:	4313      	orrs	r3, r2
 8004120:	658b      	str	r3, [r1, #88]	; 0x58
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02f      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413c:	d00e      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800413e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004142:	d814      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004144:	2b00      	cmp	r3, #0
 8004146:	d015      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800414c:	d10f      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	4a3a      	ldr	r2, [pc, #232]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004158:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800415a:	e00c      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	2101      	movs	r1, #1
 8004162:	4618      	mov	r0, r3
 8004164:	f001 fcba 	bl	8005adc <RCCEx_PLL2_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	75fb      	strb	r3, [r7, #23]
      break;
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800417c:	4b2f      	ldr	r3, [pc, #188]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	492c      	ldr	r1, [pc, #176]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800418a:	4313      	orrs	r3, r2
 800418c:	650b      	str	r3, [r1, #80]	; 0x50
 800418e:	e001      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d032      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d81b      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041e7 	.word	0x080041e7
 80041b4:	080041c1 	.word	0x080041c1
 80041b8:	080041cf 	.word	0x080041cf
 80041bc:	080041e7 	.word	0x080041e7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	4a1d      	ldr	r2, [pc, #116]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80041c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041cc:	e00c      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3304      	adds	r3, #4
 80041d2:	2102      	movs	r1, #2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 fc81 	bl	8005adc <RCCEx_PLL2_Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041de:	e003      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	75fb      	strb	r3, [r7, #23]
      break;
 80041e4:	e000      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80041e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	f023 0203 	bic.w	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	4910      	ldr	r1, [pc, #64]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004200:	e001      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 808a 	beq.w	8004328 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a09      	ldr	r2, [pc, #36]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004220:	f7fd fa0e 	bl	8001640 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004226:	e00d      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004228:	f7fd fa0a 	bl	8001640 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d906      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	75fb      	strb	r3, [r7, #23]
        break;
 800423a:	e009      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800423c:	58024400 	.word	0x58024400
 8004240:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004244:	4bba      	ldr	r3, [pc, #744]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0eb      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d166      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004256:	4bb7      	ldr	r3, [pc, #732]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004258:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004260:	4053      	eors	r3, r2
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d013      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800426a:	4bb2      	ldr	r3, [pc, #712]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004272:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004274:	4baf      	ldr	r3, [pc, #700]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4aae      	ldr	r2, [pc, #696]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800427a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004280:	4bac      	ldr	r3, [pc, #688]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4aab      	ldr	r2, [pc, #684]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800428c:	4aa9      	ldr	r2, [pc, #676]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429c:	d115      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fd f9cf 	bl	8001640 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a4:	e00b      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fd f9cb 	bl	8001640 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d902      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	75fb      	strb	r3, [r7, #23]
            break;
 80042bc:	e005      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042be:	4b9d      	ldr	r3, [pc, #628]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ed      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d126      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042de:	d10d      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80042e0:	4b94      	ldr	r3, [pc, #592]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042ee:	0919      	lsrs	r1, r3, #4
 80042f0:	4b91      	ldr	r3, [pc, #580]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80042f2:	400b      	ands	r3, r1
 80042f4:	498f      	ldr	r1, [pc, #572]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	610b      	str	r3, [r1, #16]
 80042fa:	e005      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80042fc:	4b8d      	ldr	r3, [pc, #564]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4a8c      	ldr	r2, [pc, #560]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004302:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004306:	6113      	str	r3, [r2, #16]
 8004308:	4b8a      	ldr	r3, [pc, #552]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800430a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004316:	4987      	ldr	r1, [pc, #540]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004318:	4313      	orrs	r3, r2
 800431a:	670b      	str	r3, [r1, #112]	; 0x70
 800431c:	e004      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	75bb      	strb	r3, [r7, #22]
 8004322:	e001      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d07f      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800433a:	2b28      	cmp	r3, #40	; 0x28
 800433c:	d866      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800433e:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004413 	.word	0x08004413
 8004348:	0800440d 	.word	0x0800440d
 800434c:	0800440d 	.word	0x0800440d
 8004350:	0800440d 	.word	0x0800440d
 8004354:	0800440d 	.word	0x0800440d
 8004358:	0800440d 	.word	0x0800440d
 800435c:	0800440d 	.word	0x0800440d
 8004360:	0800440d 	.word	0x0800440d
 8004364:	080043e9 	.word	0x080043e9
 8004368:	0800440d 	.word	0x0800440d
 800436c:	0800440d 	.word	0x0800440d
 8004370:	0800440d 	.word	0x0800440d
 8004374:	0800440d 	.word	0x0800440d
 8004378:	0800440d 	.word	0x0800440d
 800437c:	0800440d 	.word	0x0800440d
 8004380:	0800440d 	.word	0x0800440d
 8004384:	080043fb 	.word	0x080043fb
 8004388:	0800440d 	.word	0x0800440d
 800438c:	0800440d 	.word	0x0800440d
 8004390:	0800440d 	.word	0x0800440d
 8004394:	0800440d 	.word	0x0800440d
 8004398:	0800440d 	.word	0x0800440d
 800439c:	0800440d 	.word	0x0800440d
 80043a0:	0800440d 	.word	0x0800440d
 80043a4:	08004413 	.word	0x08004413
 80043a8:	0800440d 	.word	0x0800440d
 80043ac:	0800440d 	.word	0x0800440d
 80043b0:	0800440d 	.word	0x0800440d
 80043b4:	0800440d 	.word	0x0800440d
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	0800440d 	.word	0x0800440d
 80043c0:	0800440d 	.word	0x0800440d
 80043c4:	08004413 	.word	0x08004413
 80043c8:	0800440d 	.word	0x0800440d
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	0800440d 	.word	0x0800440d
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	0800440d 	.word	0x0800440d
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	08004413 	.word	0x08004413
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3304      	adds	r3, #4
 80043ec:	2101      	movs	r1, #1
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 fb74 	bl	8005adc <RCCEx_PLL2_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80043f8:	e00c      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3324      	adds	r3, #36	; 0x24
 80043fe:	2101      	movs	r1, #1
 8004400:	4618      	mov	r0, r3
 8004402:	f001 fc1d 	bl	8005c40 <RCCEx_PLL3_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800440a:	e003      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75fb      	strb	r3, [r7, #23]
      break;
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8004412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800441a:	4b46      	ldr	r3, [pc, #280]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800441c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004428:	4942      	ldr	r1, [pc, #264]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	654b      	str	r3, [r1, #84]	; 0x54
 800442e:	e001      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d038      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004444:	2b05      	cmp	r3, #5
 8004446:	d821      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004448:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004493 	.word	0x08004493
 8004454:	08004469 	.word	0x08004469
 8004458:	0800447b 	.word	0x0800447b
 800445c:	08004493 	.word	0x08004493
 8004460:	08004493 	.word	0x08004493
 8004464:	08004493 	.word	0x08004493
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	2101      	movs	r1, #1
 800446e:	4618      	mov	r0, r3
 8004470:	f001 fb34 	bl	8005adc <RCCEx_PLL2_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004478:	e00c      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3324      	adds	r3, #36	; 0x24
 800447e:	2101      	movs	r1, #1
 8004480:	4618      	mov	r0, r3
 8004482:	f001 fbdd 	bl	8005c40 <RCCEx_PLL3_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800448a:	e003      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]
      break;
 8004490:	e000      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800449a:	4b26      	ldr	r3, [pc, #152]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	f023 0207 	bic.w	r2, r3, #7
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a6:	4923      	ldr	r1, [pc, #140]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	654b      	str	r3, [r1, #84]	; 0x54
 80044ac:	e001      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
 80044b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d040      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d821      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80044c8:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	08004513 	.word	0x08004513
 80044d4:	080044e9 	.word	0x080044e9
 80044d8:	080044fb 	.word	0x080044fb
 80044dc:	08004513 	.word	0x08004513
 80044e0:	08004513 	.word	0x08004513
 80044e4:	08004513 	.word	0x08004513
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 faf4 	bl	8005adc <RCCEx_PLL2_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80044f8:	e00c      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3324      	adds	r3, #36	; 0x24
 80044fe:	2101      	movs	r1, #1
 8004500:	4618      	mov	r0, r3
 8004502:	f001 fb9d 	bl	8005c40 <RCCEx_PLL3_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800450a:	e003      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	75fb      	strb	r3, [r7, #23]
      break;
 8004510:	e000      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004514:	7dfb      	ldrb	r3, [r7, #23]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d110      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	f023 0207 	bic.w	r2, r3, #7
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004528:	4902      	ldr	r1, [pc, #8]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	658b      	str	r3, [r1, #88]	; 0x58
 800452e:	e007      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004530:	58024800 	.word	0x58024800
 8004534:	58024400 	.word	0x58024400
 8004538:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d04b      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004556:	d02e      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800455c:	d828      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004562:	d02a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d822      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800456a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800456e:	d026      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004574:	d81c      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457a:	d010      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004580:	d816      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01d      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800458a:	d111      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f001 faa2 	bl	8005adc <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800459c:	e012      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3324      	adds	r3, #36	; 0x24
 80045a2:	2102      	movs	r1, #2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f001 fb4b 	bl	8005c40 <RCCEx_PLL3_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045ae:	e009      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	75fb      	strb	r3, [r7, #23]
      break;
 80045b4:	e006      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80045b6:	bf00      	nop
 80045b8:	e004      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80045ba:	bf00      	nop
 80045bc:	e002      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80045c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ca:	4bb3      	ldr	r3, [pc, #716]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d8:	49af      	ldr	r1, [pc, #700]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	654b      	str	r3, [r1, #84]	; 0x54
 80045de:	e001      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d04b      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045fa:	d02e      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80045fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004600:	d828      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004606:	d02a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460c:	d822      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800460e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004612:	d026      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004618:	d81c      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800461a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461e:	d010      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004624:	d816      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01d      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800462a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462e:	d111      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f001 fa50 	bl	8005adc <RCCEx_PLL2_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004640:	e012      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3324      	adds	r3, #36	; 0x24
 8004646:	2102      	movs	r1, #2
 8004648:	4618      	mov	r0, r3
 800464a:	f001 faf9 	bl	8005c40 <RCCEx_PLL3_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004652:	e009      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]
      break;
 8004658:	e006      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800465a:	bf00      	nop
 800465c:	e004      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800466e:	4b8a      	ldr	r3, [pc, #552]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800467c:	4986      	ldr	r1, [pc, #536]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800467e:	4313      	orrs	r3, r2
 8004680:	658b      	str	r3, [r1, #88]	; 0x58
 8004682:	e001      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004690:	2b00      	cmp	r3, #0
 8004692:	d04b      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800469a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800469e:	d02e      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80046a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046a4:	d828      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80046a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046aa:	d02a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80046ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b0:	d822      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80046b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046b6:	d026      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80046b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046bc:	d81c      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80046be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c2:	d010      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80046c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c8:	d816      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01d      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80046ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d2:	d111      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 f9fe 	bl	8005adc <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046e4:	e012      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3324      	adds	r3, #36	; 0x24
 80046ea:	2102      	movs	r1, #2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f001 faa7 	bl	8005c40 <RCCEx_PLL3_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046f6:	e009      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
      break;
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80046fe:	bf00      	nop
 8004700:	e004      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004702:	bf00      	nop
 8004704:	e002      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004706:	bf00      	nop
 8004708:	e000      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800470a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004712:	4b61      	ldr	r3, [pc, #388]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004720:	495d      	ldr	r1, [pc, #372]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004722:	4313      	orrs	r3, r2
 8004724:	658b      	str	r3, [r1, #88]	; 0x58
 8004726:	e001      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004742:	d10a      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3324      	adds	r3, #36	; 0x24
 8004748:	2102      	movs	r1, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f001 fa78 	bl	8005c40 <RCCEx_PLL3_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800475a:	4b4f      	ldr	r3, [pc, #316]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	494b      	ldr	r1, [pc, #300]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800476a:	4313      	orrs	r3, r2
 800476c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004784:	d10a      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3324      	adds	r3, #36	; 0x24
 800478a:	2102      	movs	r1, #2
 800478c:	4618      	mov	r0, r3
 800478e:	f001 fa57 	bl	8005c40 <RCCEx_PLL3_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800479c:	4b3e      	ldr	r3, [pc, #248]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047aa:	493b      	ldr	r1, [pc, #236]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d034      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c6:	d01d      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80047c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047cc:	d817      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80047d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d6:	d009      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80047d8:	e011      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 f97b 	bl	8005adc <RCCEx_PLL2_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047ea:	e00c      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3324      	adds	r3, #36	; 0x24
 80047f0:	2102      	movs	r1, #2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 fa24 	bl	8005c40 <RCCEx_PLL3_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047fc:	e003      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]
      break;
 8004802:	e000      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800480c:	4b22      	ldr	r3, [pc, #136]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800481a:	491f      	ldr	r1, [pc, #124]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800481c:	4313      	orrs	r3, r2
 800481e:	658b      	str	r3, [r1, #88]	; 0x58
 8004820:	e001      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d036      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004838:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800483c:	d01c      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800483e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004842:	d816      	bhi.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004848:	d003      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800484a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800484e:	d007      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004850:	e00f      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004852:	4b11      	ldr	r3, [pc, #68]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	4a10      	ldr	r2, [pc, #64]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800485c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800485e:	e00c      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3324      	adds	r3, #36	; 0x24
 8004864:	2101      	movs	r1, #1
 8004866:	4618      	mov	r0, r3
 8004868:	f001 f9ea 	bl	8005c40 <RCCEx_PLL3_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004870:	e003      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
      break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10d      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800488e:	4902      	ldr	r1, [pc, #8]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004890:	4313      	orrs	r3, r2
 8004892:	654b      	str	r3, [r1, #84]	; 0x54
 8004894:	e004      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004896:	bf00      	nop
 8004898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d029      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80048b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b8:	d007      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80048ba:	e00f      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048bc:	4b69      	ldr	r3, [pc, #420]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	4a68      	ldr	r2, [pc, #416]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80048c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048c8:	e00b      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3304      	adds	r3, #4
 80048ce:	2102      	movs	r1, #2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 f903 	bl	8005adc <RCCEx_PLL2_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
      break;
 80048e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048e8:	4b5e      	ldr	r3, [pc, #376]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80048ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f4:	495b      	ldr	r1, [pc, #364]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048fa:	e001      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3324      	adds	r3, #36	; 0x24
 8004910:	2102      	movs	r1, #2
 8004912:	4618      	mov	r0, r3
 8004914:	f001 f994 	bl	8005c40 <RCCEx_PLL3_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d032      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004938:	d017      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800493a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800493e:	d811      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004944:	d013      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494a:	d80b      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004954:	d106      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004956:	4b43      	ldr	r3, [pc, #268]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	4a42      	ldr	r2, [pc, #264]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800495c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004960:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004962:	e007      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
      break;
 8004968:	e004      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800496a:	bf00      	nop
 800496c:	e002      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800496e:	bf00      	nop
 8004970:	e000      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800497a:	4b3a      	ldr	r3, [pc, #232]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004988:	4936      	ldr	r1, [pc, #216]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800498a:	4313      	orrs	r3, r2
 800498c:	654b      	str	r3, [r1, #84]	; 0x54
 800498e:	e001      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049a0:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ac:	492d      	ldr	r1, [pc, #180]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049be:	4b29      	ldr	r3, [pc, #164]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ca:	4926      	ldr	r1, [pc, #152]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80049dc:	4b21      	ldr	r3, [pc, #132]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	491e      	ldr	r1, [pc, #120]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00d      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049fa:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a04:	6113      	str	r3, [r2, #16]
 8004a06:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a10:	4914      	ldr	r1, [pc, #80]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da08      	bge.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2a:	490e      	ldr	r1, [pc, #56]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	4906      	ldr	r1, [pc, #24]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004a50:	7dbb      	ldrb	r3, [r7, #22]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	58024400 	.word	0x58024400

08004a68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b090      	sub	sp, #64	; 0x40
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a76:	f040 8089 	bne.w	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004a7a:	4ba8      	ldr	r3, [pc, #672]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d87d      	bhi.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004aa5 	.word	0x08004aa5
 8004a94:	08004ac9 	.word	0x08004ac9
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004b81 	.word	0x08004b81
 8004aa0:	08004b11 	.word	0x08004b11

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004aa4:	4b9d      	ldr	r3, [pc, #628]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 febe 	bl	8005838 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ac0:	e3f5      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ac6:	e3f2      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ac8:	4b94      	ldr	r3, [pc, #592]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ad6:	f107 0318 	add.w	r3, r7, #24
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fc04 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ae4:	e3e3      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004aea:	e3e0      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004aec:	4b8b      	ldr	r3, [pc, #556]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af8:	d107      	bne.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004afa:	f107 030c 	add.w	r3, r7, #12
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fd46 	bl	8005590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b08:	e3d1      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b0e:	e3ce      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b10:	4b82      	ldr	r3, [pc, #520]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b1a:	4b80      	ldr	r3, [pc, #512]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b2c:	4b7b      	ldr	r3, [pc, #492]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	08db      	lsrs	r3, r3, #3
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	4a7a      	ldr	r2, [pc, #488]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b3e:	e01e      	b.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b40:	4b76      	ldr	r3, [pc, #472]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4c:	d106      	bne.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b54:	d102      	bne.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b56:	4b73      	ldr	r3, [pc, #460]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5a:	e010      	b.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b5c:	4b6f      	ldr	r3, [pc, #444]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b68:	d106      	bne.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b70:	d102      	bne.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b72:	4b6d      	ldr	r3, [pc, #436]	; (8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b76:	e002      	b.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b7c:	e397      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004b7e:	e396      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b80:	4b6a      	ldr	r3, [pc, #424]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b84:	e393      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b8a:	e390      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b92:	f040 8095 	bne.w	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8004b96:	4b61      	ldr	r3, [pc, #388]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004b9e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba6:	d04d      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	f200 8084 	bhi.w	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb6:	d07d      	beq.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	2bc0      	cmp	r3, #192	; 0xc0
 8004bbc:	d87d      	bhi.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d02d      	beq.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	d877      	bhi.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d012      	beq.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004bd6:	e070      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bd8:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004be4:	d107      	bne.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fe24 	bl	8005838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bf4:	e35b      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bfa:	e358      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bfc:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c08:	d107      	bne.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c0a:	f107 0318 	add.w	r3, r7, #24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fb6a 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c18:	e349      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c1e:	e346      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c20:	4b3e      	ldr	r3, [pc, #248]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c2e:	f107 030c 	add.w	r3, r7, #12
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fcac 	bl	8005590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c3c:	e337      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c42:	e334      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c44:	4b35      	ldr	r3, [pc, #212]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c4e:	4b33      	ldr	r3, [pc, #204]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d109      	bne.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c60:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	08db      	lsrs	r3, r3, #3
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	4a2d      	ldr	r2, [pc, #180]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c72:	e01e      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c74:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c80:	d106      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8004c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c88:	d102      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c8a:	4b26      	ldr	r3, [pc, #152]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c8e:	e010      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c90:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c9c:	d106      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca4:	d102      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004ca6:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004caa:	e002      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004cb0:	e2fd      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004cb2:	e2fc      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cb4:	4b1d      	ldr	r3, [pc, #116]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cb8:	e2f9      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cbe:	e2f6      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc6:	f040 80a7 	bne.w	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cce:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cda:	d05f      	beq.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce2:	f200 8096 	bhi.w	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004cec:	f000 808e 	beq.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004cf6:	f200 808c 	bhi.w	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d00:	d03a      	beq.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d08:	f200 8083 	bhi.w	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d18:	d01c      	beq.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8004d1a:	e07a      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004d1c:	58024400 	.word	0x58024400
 8004d20:	03d09000 	.word	0x03d09000
 8004d24:	003d0900 	.word	0x003d0900
 8004d28:	007a1200 	.word	0x007a1200
 8004d2c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d30:	4ba8      	ldr	r3, [pc, #672]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d3c:	d107      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fd78 	bl	8005838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d4c:	e2af      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d52:	e2ac      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d54:	4b9f      	ldr	r3, [pc, #636]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d60:	d107      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d62:	f107 0318 	add.w	r3, r7, #24
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fabe 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d70:	e29d      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d76:	e29a      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d78:	4b96      	ldr	r3, [pc, #600]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d84:	d107      	bne.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d86:	f107 030c 	add.w	r3, r7, #12
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fc00 	bl	8005590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d94:	e28b      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d9a:	e288      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d9c:	4b8d      	ldr	r3, [pc, #564]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004da6:	4b8b      	ldr	r3, [pc, #556]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004db8:	4b86      	ldr	r3, [pc, #536]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	08db      	lsrs	r3, r3, #3
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	4a85      	ldr	r2, [pc, #532]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dca:	e01e      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004dcc:	4b81      	ldr	r3, [pc, #516]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd8:	d106      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004de0:	d102      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004de2:	4b7e      	ldr	r3, [pc, #504]	; (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de6:	e010      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004de8:	4b7a      	ldr	r3, [pc, #488]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df4:	d106      	bne.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfc:	d102      	bne.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004dfe:	4b78      	ldr	r3, [pc, #480]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e02:	e002      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004e08:	e251      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004e0a:	e250      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e0c:	4b75      	ldr	r3, [pc, #468]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e10:	e24d      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e16:	e24a      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1e:	f040 809c 	bne.w	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004e22:	4b6c      	ldr	r3, [pc, #432]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e26:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004e2a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e32:	d054      	beq.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e3a:	f200 808b 	bhi.w	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e44:	f000 8083 	beq.w	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e4e:	f200 8081 	bhi.w	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e58:	d02f      	beq.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e60:	d878      	bhi.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d004      	beq.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6e:	d012      	beq.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004e70:	e070      	b.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e72:	4b58      	ldr	r3, [pc, #352]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fcd7 	bl	8005838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e8e:	e20e      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e94:	e20b      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e96:	4b4f      	ldr	r3, [pc, #316]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ea4:	f107 0318 	add.w	r3, r7, #24
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fa1d 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004eb2:	e1fc      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eb8:	e1f9      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004eba:	4b46      	ldr	r3, [pc, #280]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec6:	d107      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fb5f 	bl	8005590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ed6:	e1ea      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004edc:	e1e7      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ede:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ee8:	4b3a      	ldr	r3, [pc, #232]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d10c      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004efa:	4b36      	ldr	r3, [pc, #216]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	08db      	lsrs	r3, r3, #3
 8004f00:	f003 0303 	and.w	r3, r3, #3
 8004f04:	4a34      	ldr	r2, [pc, #208]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f0c:	e01e      	b.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f0e:	4b31      	ldr	r3, [pc, #196]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f1a:	d106      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f22:	d102      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f24:	4b2d      	ldr	r3, [pc, #180]	; (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f28:	e010      	b.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f2a:	4b2a      	ldr	r3, [pc, #168]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f36:	d106      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3e:	d102      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004f40:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f44:	e002      	b.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004f4a:	e1b0      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004f4c:	e1af      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f4e:	4b25      	ldr	r3, [pc, #148]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f52:	e1ac      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f58:	e1a9      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f60:	d17d      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004f62:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f6a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f72:	d039      	beq.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f7a:	d86d      	bhi.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f88:	d012      	beq.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004f8a:	e065      	b.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f98:	d107      	bne.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f9a:	f107 0318 	add.w	r3, r7, #24
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f9a2 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fa8:	e181      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fae:	e17e      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fb0:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fbc:	d107      	bne.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fbe:	f107 030c 	add.w	r3, r7, #12
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fae4 	bl	8005590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fcc:	e16f      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fd2:	e16c      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004fd4:	58024400 	.word	0x58024400
 8004fd8:	03d09000 	.word	0x03d09000
 8004fdc:	003d0900 	.word	0x003d0900
 8004fe0:	007a1200 	.word	0x007a1200
 8004fe4:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004fe8:	4ba0      	ldr	r3, [pc, #640]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ff2:	4b9e      	ldr	r3, [pc, #632]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005004:	4b99      	ldr	r3, [pc, #612]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	08db      	lsrs	r3, r3, #3
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	4a98      	ldr	r2, [pc, #608]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005016:	e01e      	b.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005018:	4b94      	ldr	r3, [pc, #592]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005024:	d106      	bne.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800502c:	d102      	bne.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800502e:	4b91      	ldr	r3, [pc, #580]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005032:	e010      	b.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005034:	4b8d      	ldr	r3, [pc, #564]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005040:	d106      	bne.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005048:	d102      	bne.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800504a:	4b8b      	ldr	r3, [pc, #556]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800504c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800504e:	e002      	b.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005054:	e12b      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005056:	e12a      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800505c:	e127      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d133      	bne.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005066:	4b81      	ldr	r3, [pc, #516]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	d012      	beq.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800507e:	e023      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005080:	4b7a      	ldr	r3, [pc, #488]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800508c:	d107      	bne.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800508e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fbd0 	bl	8005838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800509c:	e107      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050a2:	e104      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050a4:	4b71      	ldr	r3, [pc, #452]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b0:	d107      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050b2:	f107 0318 	add.w	r3, r7, #24
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 f916 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050c0:	e0f5      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050c6:	e0f2      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050cc:	e0ef      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050d4:	f040 8091 	bne.w	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80050d8:	4b64      	ldr	r3, [pc, #400]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80050da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050dc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80050e8:	f000 8081 	beq.w	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80050f2:	d87f      	bhi.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050fa:	d06b      	beq.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005102:	d877      	bhi.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510a:	d056      	beq.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d86f      	bhi.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800511a:	d03b      	beq.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005122:	d867      	bhi.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800512a:	d021      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005132:	d85f      	bhi.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005140:	d004      	beq.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8005142:	e057      	b.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005144:	f000 f8ba 	bl	80052bc <HAL_RCCEx_GetD3PCLK1Freq>
 8005148:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800514a:	e0b0      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800514c:	4b47      	ldr	r3, [pc, #284]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005158:	d107      	bne.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800515a:	f107 0318 	add.w	r3, r7, #24
 800515e:	4618      	mov	r0, r3
 8005160:	f000 f8c2 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005168:	e0a1      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800516e:	e09e      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005170:	4b3e      	ldr	r3, [pc, #248]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800517c:	d107      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800517e:	f107 030c 	add.w	r3, r7, #12
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fa04 	bl	8005590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800518c:	e08f      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005192:	e08c      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005194:	4b35      	ldr	r3, [pc, #212]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b04      	cmp	r3, #4
 800519e:	d109      	bne.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051a0:	4b32      	ldr	r3, [pc, #200]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	08db      	lsrs	r3, r3, #3
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	4a31      	ldr	r2, [pc, #196]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
 80051b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051b2:	e07c      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051b8:	e079      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80051ba:	4b2c      	ldr	r3, [pc, #176]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c6:	d102      	bne.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 80051c8:	4b2a      	ldr	r3, [pc, #168]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051cc:	e06f      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051d2:	e06c      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051d4:	4b25      	ldr	r3, [pc, #148]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051e0:	d102      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 80051e2:	4b25      	ldr	r3, [pc, #148]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051e6:	e062      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ec:	e05f      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80051ee:	4b23      	ldr	r3, [pc, #140]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f2:	e05c      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f8:	e059      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005200:	d153      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005202:	4b1a      	ldr	r3, [pc, #104]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005206:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800520a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005212:	d035      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521a:	d843      	bhi.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005228:	d00d      	beq.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800522a:	e03b      	b.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800522c:	4b0f      	ldr	r3, [pc, #60]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005238:	d102      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 800523a:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800523e:	e036      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005244:	e033      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005252:	d107      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005258:	4618      	mov	r0, r3
 800525a:	f000 faed 	bl	8005838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005262:	e024      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005268:	e021      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800526a:	bf00      	nop
 800526c:	58024400 	.word	0x58024400
 8005270:	03d09000 	.word	0x03d09000
 8005274:	003d0900 	.word	0x003d0900
 8005278:	007a1200 	.word	0x007a1200
 800527c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005280:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800528c:	d107      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800528e:	f107 0318 	add.w	r3, r7, #24
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f828 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800529c:	e007      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052a2:	e004      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052a8:	e001      	b.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80052ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3740      	adds	r7, #64	; 0x40
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	58024400 	.word	0x58024400

080052bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80052c0:	f7fe fc6a 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	091b      	lsrs	r3, r3, #4
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4904      	ldr	r1, [pc, #16]	; (80052e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	58024400 	.word	0x58024400
 80052e4:	08008b38 	.word	0x08008b38

080052e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b089      	sub	sp, #36	; 0x24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052f0:	4ba1      	ldr	r3, [pc, #644]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80052fa:	4b9f      	ldr	r3, [pc, #636]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	0b1b      	lsrs	r3, r3, #12
 8005300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005304:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005306:	4b9c      	ldr	r3, [pc, #624]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005312:	4b99      	ldr	r3, [pc, #612]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	08db      	lsrs	r3, r3, #3
 8005318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8111 	beq.w	8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b02      	cmp	r3, #2
 800533a:	f000 8083 	beq.w	8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b02      	cmp	r3, #2
 8005342:	f200 80a1 	bhi.w	8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d056      	beq.n	8005400 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005352:	e099      	b.n	8005488 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005354:	4b88      	ldr	r3, [pc, #544]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d02d      	beq.n	80053bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005360:	4b85      	ldr	r3, [pc, #532]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	4a84      	ldr	r2, [pc, #528]	; (800557c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
 8005370:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538a:	4b7b      	ldr	r3, [pc, #492]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539a:	ed97 6a03 	vldr	s12, [r7, #12]
 800539e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053ba:	e087      	b.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005584 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80053ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ce:	4b6a      	ldr	r3, [pc, #424]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053de:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053fe:	e065      	b.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005588 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800540e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005412:	4b59      	ldr	r3, [pc, #356]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005422:	ed97 6a03 	vldr	s12, [r7, #12]
 8005426:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800542a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005442:	e043      	b.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800558c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005456:	4b48      	ldr	r3, [pc, #288]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	ed97 6a03 	vldr	s12, [r7, #12]
 800546a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800546e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005486:	e021      	b.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005588 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b37      	ldr	r3, [pc, #220]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80054cc:	4b2a      	ldr	r3, [pc, #168]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	0a5b      	lsrs	r3, r3, #9
 80054d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f2:	ee17 2a90 	vmov	r2, s15
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80054fa:	4b1f      	ldr	r3, [pc, #124]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	0c1b      	lsrs	r3, r3, #16
 8005500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005510:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005514:	edd7 6a07 	vldr	s13, [r7, #28]
 8005518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800551c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005520:	ee17 2a90 	vmov	r2, s15
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005528:	4b13      	ldr	r3, [pc, #76]	; (8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	0e1b      	lsrs	r3, r3, #24
 800552e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800553e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005542:	edd7 6a07 	vldr	s13, [r7, #28]
 8005546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800554a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800554e:	ee17 2a90 	vmov	r2, s15
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005556:	e008      	b.n	800556a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	609a      	str	r2, [r3, #8]
}
 800556a:	bf00      	nop
 800556c:	3724      	adds	r7, #36	; 0x24
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	58024400 	.word	0x58024400
 800557c:	03d09000 	.word	0x03d09000
 8005580:	46000000 	.word	0x46000000
 8005584:	4c742400 	.word	0x4c742400
 8005588:	4a742400 	.word	0x4a742400
 800558c:	4af42400 	.word	0x4af42400

08005590 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005590:	b480      	push	{r7}
 8005592:	b089      	sub	sp, #36	; 0x24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005598:	4ba1      	ldr	r3, [pc, #644]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80055a2:	4b9f      	ldr	r3, [pc, #636]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	0d1b      	lsrs	r3, r3, #20
 80055a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055ae:	4b9c      	ldr	r3, [pc, #624]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	0a1b      	lsrs	r3, r3, #8
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80055ba:	4b99      	ldr	r3, [pc, #612]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	08db      	lsrs	r3, r3, #3
 80055c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	fb02 f303 	mul.w	r3, r2, r3
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8111 	beq.w	8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	f000 8083 	beq.w	80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	f200 80a1 	bhi.w	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d056      	beq.n	80056a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80055fa:	e099      	b.n	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055fc:	4b88      	ldr	r3, [pc, #544]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d02d      	beq.n	8005664 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005608:	4b85      	ldr	r3, [pc, #532]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	08db      	lsrs	r3, r3, #3
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	4a84      	ldr	r2, [pc, #528]	; (8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
 8005618:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005632:	4b7b      	ldr	r3, [pc, #492]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005642:	ed97 6a03 	vldr	s12, [r7, #12]
 8005646:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800564a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005662:	e087      	b.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800582c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005676:	4b6a      	ldr	r3, [pc, #424]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005686:	ed97 6a03 	vldr	s12, [r7, #12]
 800568a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800568e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056a6:	e065      	b.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005830 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ba:	4b59      	ldr	r3, [pc, #356]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ea:	e043      	b.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005834 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80056fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fe:	4b48      	ldr	r3, [pc, #288]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005712:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800572e:	e021      	b.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005830 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800573e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005742:	4b37      	ldr	r3, [pc, #220]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005752:	ed97 6a03 	vldr	s12, [r7, #12]
 8005756:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800575a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005772:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005774:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	0a5b      	lsrs	r3, r3, #9
 800577a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800578a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800578e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579a:	ee17 2a90 	vmov	r2, s15
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80057a2:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c8:	ee17 2a90 	vmov	r2, s15
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80057d0:	4b13      	ldr	r3, [pc, #76]	; (8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	0e1b      	lsrs	r3, r3, #24
 80057d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80057ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057f6:	ee17 2a90 	vmov	r2, s15
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057fe:	e008      	b.n	8005812 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	609a      	str	r2, [r3, #8]
}
 8005812:	bf00      	nop
 8005814:	3724      	adds	r7, #36	; 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	58024400 	.word	0x58024400
 8005824:	03d09000 	.word	0x03d09000
 8005828:	46000000 	.word	0x46000000
 800582c:	4c742400 	.word	0x4c742400
 8005830:	4a742400 	.word	0x4a742400
 8005834:	4af42400 	.word	0x4af42400

08005838 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005840:	4ba0      	ldr	r3, [pc, #640]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	f003 0303 	and.w	r3, r3, #3
 8005848:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800584a:	4b9e      	ldr	r3, [pc, #632]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005854:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005856:	4b9b      	ldr	r3, [pc, #620]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005860:	4b98      	ldr	r3, [pc, #608]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	08db      	lsrs	r3, r3, #3
 8005866:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	fb02 f303 	mul.w	r3, r2, r3
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005878:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 8111 	beq.w	8005aa6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b02      	cmp	r3, #2
 8005888:	f000 8083 	beq.w	8005992 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b02      	cmp	r3, #2
 8005890:	f200 80a1 	bhi.w	80059d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d056      	beq.n	800594e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80058a0:	e099      	b.n	80059d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058a2:	4b88      	ldr	r3, [pc, #544]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d02d      	beq.n	800590a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058ae:	4b85      	ldr	r3, [pc, #532]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	08db      	lsrs	r3, r3, #3
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	4a83      	ldr	r2, [pc, #524]	; (8005ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80058ba:	fa22 f303 	lsr.w	r3, r2, r3
 80058be:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d8:	4b7a      	ldr	r3, [pc, #488]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ec:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005acc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80058f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005904:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005908:	e087      	b.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	ee07 3a90 	vmov	s15, r3
 8005910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005914:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591c:	4b69      	ldr	r3, [pc, #420]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005930:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005acc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005948:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800594c:	e065      	b.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005958:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800595c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005960:	4b58      	ldr	r3, [pc, #352]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005970:	ed97 6a03 	vldr	s12, [r7, #12]
 8005974:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005acc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005990:	e043      	b.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	ee07 3a90 	vmov	s15, r3
 8005998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80059a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a4:	4b47      	ldr	r3, [pc, #284]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005acc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80059bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059d4:	e021      	b.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	ee07 3a90 	vmov	s15, r3
 80059dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80059e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e8:	4b36      	ldr	r3, [pc, #216]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005acc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a18:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005a1a:	4b2a      	ldr	r3, [pc, #168]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	0a5b      	lsrs	r3, r3, #9
 8005a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a24:	ee07 3a90 	vmov	s15, r3
 8005a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a40:	ee17 2a90 	vmov	r2, s15
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005a48:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	0c1b      	lsrs	r3, r3, #16
 8005a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a6e:	ee17 2a90 	vmov	r2, s15
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005a76:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	0e1b      	lsrs	r3, r3, #24
 8005a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a9c:	ee17 2a90 	vmov	r2, s15
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	609a      	str	r2, [r3, #8]
}
 8005ab8:	bf00      	nop
 8005aba:	3724      	adds	r7, #36	; 0x24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	58024400 	.word	0x58024400
 8005ac8:	03d09000 	.word	0x03d09000
 8005acc:	46000000 	.word	0x46000000
 8005ad0:	4c742400 	.word	0x4c742400
 8005ad4:	4a742400 	.word	0x4a742400
 8005ad8:	4af42400 	.word	0x4af42400

08005adc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005aea:	4b53      	ldr	r3, [pc, #332]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d101      	bne.n	8005afa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e099      	b.n	8005c2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005afa:	4b4f      	ldr	r3, [pc, #316]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a4e      	ldr	r2, [pc, #312]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005b00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b06:	f7fb fd9b 	bl	8001640 <HAL_GetTick>
 8005b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b0c:	e008      	b.n	8005b20 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b0e:	f7fb fd97 	bl	8001640 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e086      	b.n	8005c2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b20:	4b45      	ldr	r3, [pc, #276]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f0      	bne.n	8005b0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b2c:	4b42      	ldr	r3, [pc, #264]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	031b      	lsls	r3, r3, #12
 8005b3a:	493f      	ldr	r1, [pc, #252]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	025b      	lsls	r3, r3, #9
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	041b      	lsls	r3, r3, #16
 8005b5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	061b      	lsls	r3, r3, #24
 8005b6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b70:	4931      	ldr	r1, [pc, #196]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b76:	4b30      	ldr	r3, [pc, #192]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	492d      	ldr	r1, [pc, #180]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b88:	4b2b      	ldr	r3, [pc, #172]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	f023 0220 	bic.w	r2, r3, #32
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	4928      	ldr	r1, [pc, #160]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b9a:	4b27      	ldr	r3, [pc, #156]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	4a26      	ldr	r2, [pc, #152]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005ba0:	f023 0310 	bic.w	r3, r3, #16
 8005ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ba6:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005baa:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <RCCEx_PLL2_Config+0x160>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	69d2      	ldr	r2, [r2, #28]
 8005bb2:	00d2      	lsls	r2, r2, #3
 8005bb4:	4920      	ldr	r1, [pc, #128]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005bba:	4b1f      	ldr	r3, [pc, #124]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005bc0:	f043 0310 	orr.w	r3, r3, #16
 8005bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d106      	bne.n	8005bda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005bd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bd8:	e00f      	b.n	8005bfa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d106      	bne.n	8005bee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005be0:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	4a14      	ldr	r2, [pc, #80]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bec:	e005      	b.n	8005bfa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005bee:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	4a11      	ldr	r2, [pc, #68]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005bf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005bfa:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a0e      	ldr	r2, [pc, #56]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005c00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c06:	f7fb fd1b 	bl	8001640 <HAL_GetTick>
 8005c0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c0c:	e008      	b.n	8005c20 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c0e:	f7fb fd17 	bl	8001640 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e006      	b.n	8005c2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <RCCEx_PLL2_Config+0x15c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0f0      	beq.n	8005c0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	58024400 	.word	0x58024400
 8005c3c:	ffff0007 	.word	0xffff0007

08005c40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c4e:	4b53      	ldr	r3, [pc, #332]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d101      	bne.n	8005c5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e099      	b.n	8005d92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c5e:	4b4f      	ldr	r3, [pc, #316]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a4e      	ldr	r2, [pc, #312]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6a:	f7fb fce9 	bl	8001640 <HAL_GetTick>
 8005c6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c70:	e008      	b.n	8005c84 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c72:	f7fb fce5 	bl	8001640 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e086      	b.n	8005d92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c84:	4b45      	ldr	r3, [pc, #276]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1f0      	bne.n	8005c72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c90:	4b42      	ldr	r3, [pc, #264]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	051b      	lsls	r3, r3, #20
 8005c9e:	493f      	ldr	r1, [pc, #252]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	025b      	lsls	r3, r3, #9
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	061b      	lsls	r3, r3, #24
 8005cd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cd4:	4931      	ldr	r1, [pc, #196]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005cda:	4b30      	ldr	r3, [pc, #192]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	492d      	ldr	r1, [pc, #180]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005cec:	4b2b      	ldr	r3, [pc, #172]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	4928      	ldr	r1, [pc, #160]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005cfe:	4b27      	ldr	r3, [pc, #156]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	4a26      	ldr	r2, [pc, #152]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d0a:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d0e:	4b24      	ldr	r3, [pc, #144]	; (8005da0 <RCCEx_PLL3_Config+0x160>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	69d2      	ldr	r2, [r2, #28]
 8005d16:	00d2      	lsls	r2, r2, #3
 8005d18:	4920      	ldr	r1, [pc, #128]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d1e:	4b1f      	ldr	r3, [pc, #124]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d30:	4b1a      	ldr	r3, [pc, #104]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d3c:	e00f      	b.n	8005d5e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d106      	bne.n	8005d52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d44:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a14      	ldr	r2, [pc, #80]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d50:	e005      	b.n	8005d5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d52:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	4a11      	ldr	r2, [pc, #68]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a0e      	ldr	r2, [pc, #56]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d6a:	f7fb fc69 	bl	8001640 <HAL_GetTick>
 8005d6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d70:	e008      	b.n	8005d84 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d72:	f7fb fc65 	bl	8001640 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e006      	b.n	8005d92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <RCCEx_PLL3_Config+0x15c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	58024400 	.word	0x58024400
 8005da0:	ffff0007 	.word	0xffff0007

08005da4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e091      	b.n	8005eda <HAL_RNG_Init+0x136>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	7a5b      	ldrb	r3, [r3, #9]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d105      	bne.n	8005dcc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fb f9a0 	bl	800110c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0204 	bic.w	r2, r2, #4
 8005de0:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b3e      	ldr	r3, [pc, #248]	; (8005ee4 <HAL_RNG_Init+0x140>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6852      	ldr	r2, [r2, #4]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005dfa:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a39      	ldr	r2, [pc, #228]	; (8005ee8 <HAL_RNG_Init+0x144>)
 8005e02:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a38      	ldr	r2, [pc, #224]	; (8005eec <HAL_RNG_Init+0x148>)
 8005e0a:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e1c:	f7fb fc10 	bl	8001640 <HAL_GetTick>
 8005e20:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005e22:	e016      	b.n	8005e52 <HAL_RNG_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005e24:	f7fb fc0c 	bl	8001640 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d90f      	bls.n	8005e52 <HAL_RNG_Init+0xae>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e40:	d107      	bne.n	8005e52 <HAL_RNG_Init+0xae>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e043      	b.n	8005eda <HAL_RNG_Init+0x136>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e60:	d0e0      	beq.n	8005e24 <HAL_RNG_Init+0x80>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0204 	orr.w	r2, r2, #4
 8005e70:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d104      	bne.n	8005e8a <HAL_RNG_Init+0xe6>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2204      	movs	r2, #4
 8005e84:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e027      	b.n	8005eda <HAL_RNG_Init+0x136>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005e8a:	f7fb fbd9 	bl	8001640 <HAL_GetTick>
 8005e8e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005e90:	e015      	b.n	8005ebe <HAL_RNG_Init+0x11a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005e92:	f7fb fbd5 	bl	8001640 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d90e      	bls.n	8005ebe <HAL_RNG_Init+0x11a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d107      	bne.n	8005ebe <HAL_RNG_Init+0x11a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e00d      	b.n	8005eda <HAL_RNG_Init+0x136>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d0e2      	beq.n	8005e92 <HAL_RNG_Init+0xee>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	bfffffdf 	.word	0xbfffffdf
 8005ee8:	17590abc 	.word	0x17590abc
 8005eec:	000caa74 	.word	0x000caa74

08005ef0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d06a      	beq.n	8005fd8 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fb f930 	bl	800117c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	22ca      	movs	r2, #202	; 0xca
 8005f2a:	625a      	str	r2, [r3, #36]	; 0x24
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2253      	movs	r2, #83	; 0x53
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fb17 	bl	8006568 <RTC_EnterInitMode>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d13e      	bne.n	8005fc2 <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6999      	ldr	r1, [r3, #24]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <HAL_RTC_Init+0xf4>)
 8005f50:	400b      	ands	r3, r1
 8005f52:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6999      	ldr	r1, [r3, #24]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	0419      	lsls	r1, r3, #16
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fb25 	bl	80065d4 <RTC_ExitInitMode>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d116      	bne.n	8005fc2 <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005fa2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6999      	ldr	r1, [r3, #24]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1a      	ldr	r2, [r3, #32]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	22ff      	movs	r2, #255	; 0xff
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d103      	bne.n	8005fd8 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	fb8fffbf 	.word	0xfb8fffbf

08005fe8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005fe8:	b590      	push	{r4, r7, lr}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_RTC_SetTime+0x1a>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e089      	b.n	8006116 <HAL_RTC_SetTime+0x12e>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2202      	movs	r2, #2
 800600e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	22ca      	movs	r2, #202	; 0xca
 8006018:	625a      	str	r2, [r3, #36]	; 0x24
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2253      	movs	r2, #83	; 0x53
 8006020:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 faa0 	bl	8006568 <RTC_EnterInitMode>
 8006028:	4603      	mov	r3, r0
 800602a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800602c:	7cfb      	ldrb	r3, [r7, #19]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d161      	bne.n	80060f6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d126      	bne.n	8006086 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d102      	bne.n	800604c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2200      	movs	r2, #0
 800604a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fafd 	bl	8006650 <RTC_ByteToBcd2>
 8006056:	4603      	mov	r3, r0
 8006058:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 faf6 	bl	8006650 <RTC_ByteToBcd2>
 8006064:	4603      	mov	r3, r0
 8006066:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006068:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	789b      	ldrb	r3, [r3, #2]
 800606e:	4618      	mov	r0, r3
 8006070:	f000 faee 	bl	8006650 <RTC_ByteToBcd2>
 8006074:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006076:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	78db      	ldrb	r3, [r3, #3]
 800607e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	e018      	b.n	80060b8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2200      	movs	r2, #0
 8006098:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060a6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060ac:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	78db      	ldrb	r3, [r3, #3]
 80060b2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	6979      	ldr	r1, [r7, #20]
 80060be:	4b18      	ldr	r3, [pc, #96]	; (8006120 <HAL_RTC_SetTime+0x138>)
 80060c0:	400b      	ands	r3, r1
 80060c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060d2:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6999      	ldr	r1, [r3, #24]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fa71 	bl	80065d4 <RTC_ExitInitMode>
 80060f2:	4603      	mov	r3, r0
 80060f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	22ff      	movs	r2, #255	; 0xff
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80060fe:	7cfb      	ldrb	r3, [r7, #19]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006114:	7cfb      	ldrb	r3, [r7, #19]
}
 8006116:	4618      	mov	r0, r3
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	bd90      	pop	{r4, r7, pc}
 800611e:	bf00      	nop
 8006120:	007f7f7f 	.word	0x007f7f7f

08006124 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_RTC_SetDate+0x1a>
 800613a:	2302      	movs	r3, #2
 800613c:	e073      	b.n	8006226 <HAL_RTC_SetDate+0x102>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2202      	movs	r2, #2
 800614a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10e      	bne.n	8006172 <HAL_RTC_SetDate+0x4e>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	f023 0310 	bic.w	r3, r3, #16
 8006168:	b2db      	uxtb	r3, r3
 800616a:	330a      	adds	r3, #10
 800616c:	b2da      	uxtb	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11c      	bne.n	80061b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	78db      	ldrb	r3, [r3, #3]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fa67 	bl	8006650 <RTC_ByteToBcd2>
 8006182:	4603      	mov	r3, r0
 8006184:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fa60 	bl	8006650 <RTC_ByteToBcd2>
 8006190:	4603      	mov	r3, r0
 8006192:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006194:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	789b      	ldrb	r3, [r3, #2]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fa58 	bl	8006650 <RTC_ByteToBcd2>
 80061a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	e00e      	b.n	80061d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	78db      	ldrb	r3, [r3, #3]
 80061b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80061be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80061c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	22ca      	movs	r2, #202	; 0xca
 80061d6:	625a      	str	r2, [r3, #36]	; 0x24
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2253      	movs	r2, #83	; 0x53
 80061de:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f9c1 	bl	8006568 <RTC_EnterInitMode>
 80061e6:	4603      	mov	r3, r0
 80061e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80061ea:	7cfb      	ldrb	r3, [r7, #19]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	6979      	ldr	r1, [r7, #20]
 80061f6:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <HAL_RTC_SetDate+0x10c>)
 80061f8:	400b      	ands	r3, r1
 80061fa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f9e9 	bl	80065d4 <RTC_ExitInitMode>
 8006202:	4603      	mov	r3, r0
 8006204:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	22ff      	movs	r2, #255	; 0xff
 800620c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800620e:	7cfb      	ldrb	r3, [r7, #19]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d103      	bne.n	800621c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006224:	7cfb      	ldrb	r3, [r7, #19]


}
 8006226:	4618      	mov	r0, r3
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	bd90      	pop	{r4, r7, pc}
 800622e:	bf00      	nop
 8006230:	00ffff3f 	.word	0x00ffff3f

08006234 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006234:	b590      	push	{r4, r7, lr}
 8006236:	b089      	sub	sp, #36	; 0x24
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_RTC_SetAlarm_IT+0x1a>
 800624a:	2302      	movs	r3, #2
 800624c:	e127      	b.n	800649e <HAL_RTC_SetAlarm_IT+0x26a>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2202      	movs	r2, #2
 800625a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if(Format == RTC_FORMAT_BIN)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d137      	bne.n	80062d4 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d102      	bne.n	8006278 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2200      	movs	r2, #0
 8006276:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 f9e7 	bl	8006650 <RTC_ByteToBcd2>
 8006282:	4603      	mov	r3, r0
 8006284:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	785b      	ldrb	r3, [r3, #1]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f9e0 	bl	8006650 <RTC_ByteToBcd2>
 8006290:	4603      	mov	r3, r0
 8006292:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006294:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	789b      	ldrb	r3, [r3, #2]
 800629a:	4618      	mov	r0, r3
 800629c:	f000 f9d8 	bl	8006650 <RTC_ByteToBcd2>
 80062a0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80062a2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	78db      	ldrb	r3, [r3, #3]
 80062aa:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 80062ac:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f9ca 	bl	8006650 <RTC_ByteToBcd2>
 80062bc:	4603      	mov	r3, r0
 80062be:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 80062c0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80062c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80062ce:	4313      	orrs	r3, r2
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	e023      	b.n	800631c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d102      	bne.n	80062e8 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2200      	movs	r2, #0
 80062e6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	785b      	ldrb	r3, [r3, #1]
 80062f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 80062f4:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 80062fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	78db      	ldrb	r3, [r3, #3]
 8006300:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8006302:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800630a:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 800630c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8006312:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8006318:	4313      	orrs	r3, r2
 800631a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	22ca      	movs	r2, #202	; 0xca
 800632e:	625a      	str	r2, [r3, #36]	; 0x24
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2253      	movs	r2, #83	; 0x53
 8006336:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006340:	d149      	bne.n	80063d6 <HAL_RTC_SetAlarm_IT+0x1a2>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699a      	ldr	r2, [r3, #24]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006350:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8006362:	f7fb f96d 	bl	8001640 <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
 8006368:	e015      	b.n	8006396 <HAL_RTC_SetAlarm_IT+0x162>
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800636a:	f7fb f969 	bl	8001640 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006378:	d90d      	bls.n	8006396 <HAL_RTC_SetAlarm_IT+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	22ff      	movs	r2, #255	; 0xff
 8006380:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2203      	movs	r2, #3
 8006386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e083      	b.n	800649e <HAL_RTC_SetAlarm_IT+0x26a>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0e2      	beq.n	800636a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063d2:	619a      	str	r2, [r3, #24]
 80063d4:	e048      	b.n	8006468 <HAL_RTC_SetAlarm_IT+0x234>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	699a      	ldr	r2, [r3, #24]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80063e4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0202 	orr.w	r2, r2, #2
 80063f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80063f6:	f7fb f923 	bl	8001640 <HAL_GetTick>
 80063fa:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
 80063fc:	e015      	b.n	800642a <HAL_RTC_SetAlarm_IT+0x1f6>
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063fe:	f7fb f91f 	bl	8001640 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800640c:	d90d      	bls.n	800642a <HAL_RTC_SetAlarm_IT+0x1f6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	22ff      	movs	r2, #255	; 0xff
 8006414:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2203      	movs	r2, #3
 800641a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e039      	b.n	800649e <HAL_RTC_SetAlarm_IT+0x26a>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0e2      	beq.n	80063fe <HAL_RTC_SetAlarm_IT+0x1ca>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006456:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006466:	619a      	str	r2, [r3, #24]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006468:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <HAL_RTC_SetAlarm_IT+0x274>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a0e      	ldr	r2, [pc, #56]	; (80064a8 <HAL_RTC_SetAlarm_IT+0x274>)
 800646e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006472:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800647e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006482:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	22ff      	movs	r2, #255	; 0xff
 800648a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3724      	adds	r7, #36	; 0x24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd90      	pop	{r4, r7, pc}
 80064a6:	bf00      	nop
 80064a8:	58000080 	.word	0x58000080

080064ac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80064b4:	4b13      	ldr	r3, [pc, #76]	; (8006504 <HAL_RTC_AlarmIRQHandler+0x58>)
 80064b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064ba:	609a      	str	r2, [r3, #8]
#endif /* DUAL_CORE */

#if defined(RTC_MISR_ALRAMF)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	60fb      	str	r3, [r7, #12]

  if((tmp & RTC_MISR_ALRAMF) != 0u)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d006      	beq.n	80064dc <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2201      	movs	r2, #1
 80064d4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f816 	bl	8006508 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }
#endif /* RTC_MISR_ALRAMF */

#if defined(RTC_MISR_ALRBMF)
  if((tmp & RTC_MISR_ALRBMF) != 0u)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d006      	beq.n	80064f4 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2202      	movs	r2, #2
 80064ec:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8ce 	bl	8006690 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 80064fc:	bf00      	nop
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	58000080 	.word	0x58000080

08006508 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006532:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8006534:	f7fb f884 	bl	8001640 <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800653a:	e009      	b.n	8006550 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800653c:	f7fb f880 	bl	8001640 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800654a:	d901      	bls.n	8006550 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e007      	b.n	8006560 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ee      	beq.n	800653c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d123      	bne.n	80065ca <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006590:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006592:	f7fb f855 	bl	8001640 <HAL_GetTick>
 8006596:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006598:	e00d      	b.n	80065b6 <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800659a:	f7fb f851 	bl	8001640 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065a8:	d905      	bls.n	80065b6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2203      	movs	r2, #3
 80065b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d102      	bne.n	80065ca <RTC_EnterInitMode+0x62>
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d1e7      	bne.n	800659a <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80065e0:	4b1a      	ldr	r3, [pc, #104]	; (800664c <RTC_ExitInitMode+0x78>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	4a19      	ldr	r2, [pc, #100]	; (800664c <RTC_ExitInitMode+0x78>)
 80065e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ea:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80065ec:	4b17      	ldr	r3, [pc, #92]	; (800664c <RTC_ExitInitMode+0x78>)
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10c      	bne.n	8006612 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff ff8f 	bl	800651c <HAL_RTC_WaitForSynchro>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01e      	beq.n	8006642 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2203      	movs	r2, #3
 8006608:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	73fb      	strb	r3, [r7, #15]
 8006610:	e017      	b.n	8006642 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006612:	4b0e      	ldr	r3, [pc, #56]	; (800664c <RTC_ExitInitMode+0x78>)
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	4a0d      	ldr	r2, [pc, #52]	; (800664c <RTC_ExitInitMode+0x78>)
 8006618:	f023 0320 	bic.w	r3, r3, #32
 800661c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff ff7c 	bl	800651c <HAL_RTC_WaitForSynchro>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d005      	beq.n	8006636 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2203      	movs	r2, #3
 800662e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006636:	4b05      	ldr	r3, [pc, #20]	; (800664c <RTC_ExitInitMode+0x78>)
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	4a04      	ldr	r2, [pc, #16]	; (800664c <RTC_ExitInitMode+0x78>)
 800663c:	f043 0320 	orr.w	r3, r3, #32
 8006640:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	58004000 	.word	0x58004000

08006650 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8006662:	e005      	b.n	8006670 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800666a:	7afb      	ldrb	r3, [r7, #11]
 800666c:	3b0a      	subs	r3, #10
 800666e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8006670:	7afb      	ldrb	r3, [r7, #11]
 8006672:	2b09      	cmp	r3, #9
 8006674:	d8f6      	bhi.n	8006664 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	b2da      	uxtb	r2, r3
 800667e:	7afb      	ldrb	r3, [r7, #11]
 8006680:	4313      	orrs	r3, r2
 8006682:	b2db      	uxtb	r3, r3
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e042      	b.n	800673c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7fa fd8f 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2224      	movs	r2, #36	; 0x24
 80066d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0201 	bic.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8c2 	bl	8006870 <UART_SetConfig>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e022      	b.n	800673c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 ff14 	bl	800752c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 ff9b 	bl	8007670 <UART_CheckIdleState>
 800673a:	4603      	mov	r3, r0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	; 0x28
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800675a:	2b20      	cmp	r3, #32
 800675c:	f040 8083 	bne.w	8006866 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_UART_Transmit+0x28>
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e07b      	b.n	8006868 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006776:	2b01      	cmp	r3, #1
 8006778:	d101      	bne.n	800677e <HAL_UART_Transmit+0x3a>
 800677a:	2302      	movs	r3, #2
 800677c:	e074      	b.n	8006868 <HAL_UART_Transmit+0x124>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2221      	movs	r2, #33	; 0x21
 8006792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006796:	f7fa ff53 	bl	8001640 <HAL_GetTick>
 800679a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	88fa      	ldrh	r2, [r7, #6]
 80067a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b4:	d108      	bne.n	80067c8 <HAL_UART_Transmit+0x84>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80067be:	2300      	movs	r3, #0
 80067c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	e003      	b.n	80067d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80067d8:	e02c      	b.n	8006834 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	2180      	movs	r1, #128	; 0x80
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 ff8e 	bl	8007706 <UART_WaitOnFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e039      	b.n	8006868 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10b      	bne.n	8006812 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006808:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	3302      	adds	r3, #2
 800680e:	61bb      	str	r3, [r7, #24]
 8006810:	e007      	b.n	8006822 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	781a      	ldrb	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	3301      	adds	r3, #1
 8006820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006828:	b29b      	uxth	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1cc      	bne.n	80067da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2200      	movs	r2, #0
 8006848:	2140      	movs	r1, #64	; 0x40
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 ff5b 	bl	8007706 <UART_WaitOnFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e006      	b.n	8006868 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	e000      	b.n	8006868 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006866:	2302      	movs	r3, #2
  }
}
 8006868:	4618      	mov	r0, r3
 800686a:	3720      	adds	r7, #32
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006870:	b5b0      	push	{r4, r5, r7, lr}
 8006872:	b08e      	sub	sp, #56	; 0x38
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	4313      	orrs	r3, r2
 8006894:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	4bbf      	ldr	r3, [pc, #764]	; (8006b9c <UART_SetConfig+0x32c>)
 800689e:	4013      	ands	r3, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068a6:	430b      	orrs	r3, r1
 80068a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4ab5      	ldr	r2, [pc, #724]	; (8006ba0 <UART_SetConfig+0x330>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068d6:	4313      	orrs	r3, r2
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	4bb0      	ldr	r3, [pc, #704]	; (8006ba4 <UART_SetConfig+0x334>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068ea:	430b      	orrs	r3, r1
 80068ec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	f023 010f 	bic.w	r1, r3, #15
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4aa7      	ldr	r2, [pc, #668]	; (8006ba8 <UART_SetConfig+0x338>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d176      	bne.n	80069fc <UART_SetConfig+0x18c>
 800690e:	4ba7      	ldr	r3, [pc, #668]	; (8006bac <UART_SetConfig+0x33c>)
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006916:	2b28      	cmp	r3, #40	; 0x28
 8006918:	d86c      	bhi.n	80069f4 <UART_SetConfig+0x184>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <UART_SetConfig+0xb0>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	080069c5 	.word	0x080069c5
 8006924:	080069f5 	.word	0x080069f5
 8006928:	080069f5 	.word	0x080069f5
 800692c:	080069f5 	.word	0x080069f5
 8006930:	080069f5 	.word	0x080069f5
 8006934:	080069f5 	.word	0x080069f5
 8006938:	080069f5 	.word	0x080069f5
 800693c:	080069f5 	.word	0x080069f5
 8006940:	080069cd 	.word	0x080069cd
 8006944:	080069f5 	.word	0x080069f5
 8006948:	080069f5 	.word	0x080069f5
 800694c:	080069f5 	.word	0x080069f5
 8006950:	080069f5 	.word	0x080069f5
 8006954:	080069f5 	.word	0x080069f5
 8006958:	080069f5 	.word	0x080069f5
 800695c:	080069f5 	.word	0x080069f5
 8006960:	080069d5 	.word	0x080069d5
 8006964:	080069f5 	.word	0x080069f5
 8006968:	080069f5 	.word	0x080069f5
 800696c:	080069f5 	.word	0x080069f5
 8006970:	080069f5 	.word	0x080069f5
 8006974:	080069f5 	.word	0x080069f5
 8006978:	080069f5 	.word	0x080069f5
 800697c:	080069f5 	.word	0x080069f5
 8006980:	080069dd 	.word	0x080069dd
 8006984:	080069f5 	.word	0x080069f5
 8006988:	080069f5 	.word	0x080069f5
 800698c:	080069f5 	.word	0x080069f5
 8006990:	080069f5 	.word	0x080069f5
 8006994:	080069f5 	.word	0x080069f5
 8006998:	080069f5 	.word	0x080069f5
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	080069e5 	.word	0x080069e5
 80069a4:	080069f5 	.word	0x080069f5
 80069a8:	080069f5 	.word	0x080069f5
 80069ac:	080069f5 	.word	0x080069f5
 80069b0:	080069f5 	.word	0x080069f5
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	080069f5 	.word	0x080069f5
 80069bc:	080069f5 	.word	0x080069f5
 80069c0:	080069ed 	.word	0x080069ed
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ca:	e326      	b.n	800701a <UART_SetConfig+0x7aa>
 80069cc:	2304      	movs	r3, #4
 80069ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069d2:	e322      	b.n	800701a <UART_SetConfig+0x7aa>
 80069d4:	2308      	movs	r3, #8
 80069d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069da:	e31e      	b.n	800701a <UART_SetConfig+0x7aa>
 80069dc:	2310      	movs	r3, #16
 80069de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069e2:	e31a      	b.n	800701a <UART_SetConfig+0x7aa>
 80069e4:	2320      	movs	r3, #32
 80069e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ea:	e316      	b.n	800701a <UART_SetConfig+0x7aa>
 80069ec:	2340      	movs	r3, #64	; 0x40
 80069ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069f2:	e312      	b.n	800701a <UART_SetConfig+0x7aa>
 80069f4:	2380      	movs	r3, #128	; 0x80
 80069f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069fa:	e30e      	b.n	800701a <UART_SetConfig+0x7aa>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a6b      	ldr	r2, [pc, #428]	; (8006bb0 <UART_SetConfig+0x340>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d130      	bne.n	8006a68 <UART_SetConfig+0x1f8>
 8006a06:	4b69      	ldr	r3, [pc, #420]	; (8006bac <UART_SetConfig+0x33c>)
 8006a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	d826      	bhi.n	8006a60 <UART_SetConfig+0x1f0>
 8006a12:	a201      	add	r2, pc, #4	; (adr r2, 8006a18 <UART_SetConfig+0x1a8>)
 8006a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a18:	08006a31 	.word	0x08006a31
 8006a1c:	08006a39 	.word	0x08006a39
 8006a20:	08006a41 	.word	0x08006a41
 8006a24:	08006a49 	.word	0x08006a49
 8006a28:	08006a51 	.word	0x08006a51
 8006a2c:	08006a59 	.word	0x08006a59
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a36:	e2f0      	b.n	800701a <UART_SetConfig+0x7aa>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a3e:	e2ec      	b.n	800701a <UART_SetConfig+0x7aa>
 8006a40:	2308      	movs	r3, #8
 8006a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a46:	e2e8      	b.n	800701a <UART_SetConfig+0x7aa>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a4e:	e2e4      	b.n	800701a <UART_SetConfig+0x7aa>
 8006a50:	2320      	movs	r3, #32
 8006a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a56:	e2e0      	b.n	800701a <UART_SetConfig+0x7aa>
 8006a58:	2340      	movs	r3, #64	; 0x40
 8006a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a5e:	e2dc      	b.n	800701a <UART_SetConfig+0x7aa>
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a66:	e2d8      	b.n	800701a <UART_SetConfig+0x7aa>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a51      	ldr	r2, [pc, #324]	; (8006bb4 <UART_SetConfig+0x344>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d130      	bne.n	8006ad4 <UART_SetConfig+0x264>
 8006a72:	4b4e      	ldr	r3, [pc, #312]	; (8006bac <UART_SetConfig+0x33c>)
 8006a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	d826      	bhi.n	8006acc <UART_SetConfig+0x25c>
 8006a7e:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <UART_SetConfig+0x214>)
 8006a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a84:	08006a9d 	.word	0x08006a9d
 8006a88:	08006aa5 	.word	0x08006aa5
 8006a8c:	08006aad 	.word	0x08006aad
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006abd 	.word	0x08006abd
 8006a98:	08006ac5 	.word	0x08006ac5
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa2:	e2ba      	b.n	800701a <UART_SetConfig+0x7aa>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aaa:	e2b6      	b.n	800701a <UART_SetConfig+0x7aa>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ab2:	e2b2      	b.n	800701a <UART_SetConfig+0x7aa>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aba:	e2ae      	b.n	800701a <UART_SetConfig+0x7aa>
 8006abc:	2320      	movs	r3, #32
 8006abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac2:	e2aa      	b.n	800701a <UART_SetConfig+0x7aa>
 8006ac4:	2340      	movs	r3, #64	; 0x40
 8006ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aca:	e2a6      	b.n	800701a <UART_SetConfig+0x7aa>
 8006acc:	2380      	movs	r3, #128	; 0x80
 8006ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad2:	e2a2      	b.n	800701a <UART_SetConfig+0x7aa>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a37      	ldr	r2, [pc, #220]	; (8006bb8 <UART_SetConfig+0x348>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d130      	bne.n	8006b40 <UART_SetConfig+0x2d0>
 8006ade:	4b33      	ldr	r3, [pc, #204]	; (8006bac <UART_SetConfig+0x33c>)
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d826      	bhi.n	8006b38 <UART_SetConfig+0x2c8>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <UART_SetConfig+0x280>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b09 	.word	0x08006b09
 8006af4:	08006b11 	.word	0x08006b11
 8006af8:	08006b19 	.word	0x08006b19
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b29 	.word	0x08006b29
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b0e:	e284      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b10:	2304      	movs	r3, #4
 8006b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b16:	e280      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b1e:	e27c      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b20:	2310      	movs	r3, #16
 8006b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b26:	e278      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b28:	2320      	movs	r3, #32
 8006b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2e:	e274      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b30:	2340      	movs	r3, #64	; 0x40
 8006b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b36:	e270      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b3e:	e26c      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1d      	ldr	r2, [pc, #116]	; (8006bbc <UART_SetConfig+0x34c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d142      	bne.n	8006bd0 <UART_SetConfig+0x360>
 8006b4a:	4b18      	ldr	r3, [pc, #96]	; (8006bac <UART_SetConfig+0x33c>)
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	f003 0307 	and.w	r3, r3, #7
 8006b52:	2b05      	cmp	r3, #5
 8006b54:	d838      	bhi.n	8006bc8 <UART_SetConfig+0x358>
 8006b56:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <UART_SetConfig+0x2ec>)
 8006b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5c:	08006b75 	.word	0x08006b75
 8006b60:	08006b7d 	.word	0x08006b7d
 8006b64:	08006b85 	.word	0x08006b85
 8006b68:	08006b8d 	.word	0x08006b8d
 8006b6c:	08006b95 	.word	0x08006b95
 8006b70:	08006bc1 	.word	0x08006bc1
 8006b74:	2300      	movs	r3, #0
 8006b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b7a:	e24e      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b82:	e24a      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b84:	2308      	movs	r3, #8
 8006b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b8a:	e246      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b92:	e242      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b94:	2320      	movs	r3, #32
 8006b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b9a:	e23e      	b.n	800701a <UART_SetConfig+0x7aa>
 8006b9c:	cfff69f3 	.word	0xcfff69f3
 8006ba0:	58000c00 	.word	0x58000c00
 8006ba4:	11fff4ff 	.word	0x11fff4ff
 8006ba8:	40011000 	.word	0x40011000
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	40004400 	.word	0x40004400
 8006bb4:	40004800 	.word	0x40004800
 8006bb8:	40004c00 	.word	0x40004c00
 8006bbc:	40005000 	.word	0x40005000
 8006bc0:	2340      	movs	r3, #64	; 0x40
 8006bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc6:	e228      	b.n	800701a <UART_SetConfig+0x7aa>
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bce:	e224      	b.n	800701a <UART_SetConfig+0x7aa>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4ab1      	ldr	r2, [pc, #708]	; (8006e9c <UART_SetConfig+0x62c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d176      	bne.n	8006cc8 <UART_SetConfig+0x458>
 8006bda:	4bb1      	ldr	r3, [pc, #708]	; (8006ea0 <UART_SetConfig+0x630>)
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006be2:	2b28      	cmp	r3, #40	; 0x28
 8006be4:	d86c      	bhi.n	8006cc0 <UART_SetConfig+0x450>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <UART_SetConfig+0x37c>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c91 	.word	0x08006c91
 8006bf0:	08006cc1 	.word	0x08006cc1
 8006bf4:	08006cc1 	.word	0x08006cc1
 8006bf8:	08006cc1 	.word	0x08006cc1
 8006bfc:	08006cc1 	.word	0x08006cc1
 8006c00:	08006cc1 	.word	0x08006cc1
 8006c04:	08006cc1 	.word	0x08006cc1
 8006c08:	08006cc1 	.word	0x08006cc1
 8006c0c:	08006c99 	.word	0x08006c99
 8006c10:	08006cc1 	.word	0x08006cc1
 8006c14:	08006cc1 	.word	0x08006cc1
 8006c18:	08006cc1 	.word	0x08006cc1
 8006c1c:	08006cc1 	.word	0x08006cc1
 8006c20:	08006cc1 	.word	0x08006cc1
 8006c24:	08006cc1 	.word	0x08006cc1
 8006c28:	08006cc1 	.word	0x08006cc1
 8006c2c:	08006ca1 	.word	0x08006ca1
 8006c30:	08006cc1 	.word	0x08006cc1
 8006c34:	08006cc1 	.word	0x08006cc1
 8006c38:	08006cc1 	.word	0x08006cc1
 8006c3c:	08006cc1 	.word	0x08006cc1
 8006c40:	08006cc1 	.word	0x08006cc1
 8006c44:	08006cc1 	.word	0x08006cc1
 8006c48:	08006cc1 	.word	0x08006cc1
 8006c4c:	08006ca9 	.word	0x08006ca9
 8006c50:	08006cc1 	.word	0x08006cc1
 8006c54:	08006cc1 	.word	0x08006cc1
 8006c58:	08006cc1 	.word	0x08006cc1
 8006c5c:	08006cc1 	.word	0x08006cc1
 8006c60:	08006cc1 	.word	0x08006cc1
 8006c64:	08006cc1 	.word	0x08006cc1
 8006c68:	08006cc1 	.word	0x08006cc1
 8006c6c:	08006cb1 	.word	0x08006cb1
 8006c70:	08006cc1 	.word	0x08006cc1
 8006c74:	08006cc1 	.word	0x08006cc1
 8006c78:	08006cc1 	.word	0x08006cc1
 8006c7c:	08006cc1 	.word	0x08006cc1
 8006c80:	08006cc1 	.word	0x08006cc1
 8006c84:	08006cc1 	.word	0x08006cc1
 8006c88:	08006cc1 	.word	0x08006cc1
 8006c8c:	08006cb9 	.word	0x08006cb9
 8006c90:	2301      	movs	r3, #1
 8006c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c96:	e1c0      	b.n	800701a <UART_SetConfig+0x7aa>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c9e:	e1bc      	b.n	800701a <UART_SetConfig+0x7aa>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ca6:	e1b8      	b.n	800701a <UART_SetConfig+0x7aa>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cae:	e1b4      	b.n	800701a <UART_SetConfig+0x7aa>
 8006cb0:	2320      	movs	r3, #32
 8006cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cb6:	e1b0      	b.n	800701a <UART_SetConfig+0x7aa>
 8006cb8:	2340      	movs	r3, #64	; 0x40
 8006cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cbe:	e1ac      	b.n	800701a <UART_SetConfig+0x7aa>
 8006cc0:	2380      	movs	r3, #128	; 0x80
 8006cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cc6:	e1a8      	b.n	800701a <UART_SetConfig+0x7aa>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a75      	ldr	r2, [pc, #468]	; (8006ea4 <UART_SetConfig+0x634>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d130      	bne.n	8006d34 <UART_SetConfig+0x4c4>
 8006cd2:	4b73      	ldr	r3, [pc, #460]	; (8006ea0 <UART_SetConfig+0x630>)
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	d826      	bhi.n	8006d2c <UART_SetConfig+0x4bc>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <UART_SetConfig+0x474>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006cfd 	.word	0x08006cfd
 8006ce8:	08006d05 	.word	0x08006d05
 8006cec:	08006d0d 	.word	0x08006d0d
 8006cf0:	08006d15 	.word	0x08006d15
 8006cf4:	08006d1d 	.word	0x08006d1d
 8006cf8:	08006d25 	.word	0x08006d25
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d02:	e18a      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d04:	2304      	movs	r3, #4
 8006d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d0a:	e186      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d0c:	2308      	movs	r3, #8
 8006d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d12:	e182      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d14:	2310      	movs	r3, #16
 8006d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d1a:	e17e      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d1c:	2320      	movs	r3, #32
 8006d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d22:	e17a      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d24:	2340      	movs	r3, #64	; 0x40
 8006d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d2a:	e176      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d2c:	2380      	movs	r3, #128	; 0x80
 8006d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d32:	e172      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a5b      	ldr	r2, [pc, #364]	; (8006ea8 <UART_SetConfig+0x638>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d130      	bne.n	8006da0 <UART_SetConfig+0x530>
 8006d3e:	4b58      	ldr	r3, [pc, #352]	; (8006ea0 <UART_SetConfig+0x630>)
 8006d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	d826      	bhi.n	8006d98 <UART_SetConfig+0x528>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0x4e0>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d69 	.word	0x08006d69
 8006d54:	08006d71 	.word	0x08006d71
 8006d58:	08006d79 	.word	0x08006d79
 8006d5c:	08006d81 	.word	0x08006d81
 8006d60:	08006d89 	.word	0x08006d89
 8006d64:	08006d91 	.word	0x08006d91
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d6e:	e154      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d70:	2304      	movs	r3, #4
 8006d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d76:	e150      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d78:	2308      	movs	r3, #8
 8006d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d7e:	e14c      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d80:	2310      	movs	r3, #16
 8006d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d86:	e148      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d88:	2320      	movs	r3, #32
 8006d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d8e:	e144      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d90:	2340      	movs	r3, #64	; 0x40
 8006d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d96:	e140      	b.n	800701a <UART_SetConfig+0x7aa>
 8006d98:	2380      	movs	r3, #128	; 0x80
 8006d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d9e:	e13c      	b.n	800701a <UART_SetConfig+0x7aa>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a41      	ldr	r2, [pc, #260]	; (8006eac <UART_SetConfig+0x63c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	f040 8082 	bne.w	8006eb0 <UART_SetConfig+0x640>
 8006dac:	4b3c      	ldr	r3, [pc, #240]	; (8006ea0 <UART_SetConfig+0x630>)
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006db4:	2b28      	cmp	r3, #40	; 0x28
 8006db6:	d86d      	bhi.n	8006e94 <UART_SetConfig+0x624>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <UART_SetConfig+0x550>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006e65 	.word	0x08006e65
 8006dc4:	08006e95 	.word	0x08006e95
 8006dc8:	08006e95 	.word	0x08006e95
 8006dcc:	08006e95 	.word	0x08006e95
 8006dd0:	08006e95 	.word	0x08006e95
 8006dd4:	08006e95 	.word	0x08006e95
 8006dd8:	08006e95 	.word	0x08006e95
 8006ddc:	08006e95 	.word	0x08006e95
 8006de0:	08006e6d 	.word	0x08006e6d
 8006de4:	08006e95 	.word	0x08006e95
 8006de8:	08006e95 	.word	0x08006e95
 8006dec:	08006e95 	.word	0x08006e95
 8006df0:	08006e95 	.word	0x08006e95
 8006df4:	08006e95 	.word	0x08006e95
 8006df8:	08006e95 	.word	0x08006e95
 8006dfc:	08006e95 	.word	0x08006e95
 8006e00:	08006e75 	.word	0x08006e75
 8006e04:	08006e95 	.word	0x08006e95
 8006e08:	08006e95 	.word	0x08006e95
 8006e0c:	08006e95 	.word	0x08006e95
 8006e10:	08006e95 	.word	0x08006e95
 8006e14:	08006e95 	.word	0x08006e95
 8006e18:	08006e95 	.word	0x08006e95
 8006e1c:	08006e95 	.word	0x08006e95
 8006e20:	08006e7d 	.word	0x08006e7d
 8006e24:	08006e95 	.word	0x08006e95
 8006e28:	08006e95 	.word	0x08006e95
 8006e2c:	08006e95 	.word	0x08006e95
 8006e30:	08006e95 	.word	0x08006e95
 8006e34:	08006e95 	.word	0x08006e95
 8006e38:	08006e95 	.word	0x08006e95
 8006e3c:	08006e95 	.word	0x08006e95
 8006e40:	08006e85 	.word	0x08006e85
 8006e44:	08006e95 	.word	0x08006e95
 8006e48:	08006e95 	.word	0x08006e95
 8006e4c:	08006e95 	.word	0x08006e95
 8006e50:	08006e95 	.word	0x08006e95
 8006e54:	08006e95 	.word	0x08006e95
 8006e58:	08006e95 	.word	0x08006e95
 8006e5c:	08006e95 	.word	0x08006e95
 8006e60:	08006e8d 	.word	0x08006e8d
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e6a:	e0d6      	b.n	800701a <UART_SetConfig+0x7aa>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e72:	e0d2      	b.n	800701a <UART_SetConfig+0x7aa>
 8006e74:	2308      	movs	r3, #8
 8006e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e7a:	e0ce      	b.n	800701a <UART_SetConfig+0x7aa>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e82:	e0ca      	b.n	800701a <UART_SetConfig+0x7aa>
 8006e84:	2320      	movs	r3, #32
 8006e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8a:	e0c6      	b.n	800701a <UART_SetConfig+0x7aa>
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e92:	e0c2      	b.n	800701a <UART_SetConfig+0x7aa>
 8006e94:	2380      	movs	r3, #128	; 0x80
 8006e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9a:	e0be      	b.n	800701a <UART_SetConfig+0x7aa>
 8006e9c:	40011400 	.word	0x40011400
 8006ea0:	58024400 	.word	0x58024400
 8006ea4:	40007800 	.word	0x40007800
 8006ea8:	40007c00 	.word	0x40007c00
 8006eac:	40011800 	.word	0x40011800
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4aad      	ldr	r2, [pc, #692]	; (800716c <UART_SetConfig+0x8fc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d176      	bne.n	8006fa8 <UART_SetConfig+0x738>
 8006eba:	4bad      	ldr	r3, [pc, #692]	; (8007170 <UART_SetConfig+0x900>)
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ec2:	2b28      	cmp	r3, #40	; 0x28
 8006ec4:	d86c      	bhi.n	8006fa0 <UART_SetConfig+0x730>
 8006ec6:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <UART_SetConfig+0x65c>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006f71 	.word	0x08006f71
 8006ed0:	08006fa1 	.word	0x08006fa1
 8006ed4:	08006fa1 	.word	0x08006fa1
 8006ed8:	08006fa1 	.word	0x08006fa1
 8006edc:	08006fa1 	.word	0x08006fa1
 8006ee0:	08006fa1 	.word	0x08006fa1
 8006ee4:	08006fa1 	.word	0x08006fa1
 8006ee8:	08006fa1 	.word	0x08006fa1
 8006eec:	08006f79 	.word	0x08006f79
 8006ef0:	08006fa1 	.word	0x08006fa1
 8006ef4:	08006fa1 	.word	0x08006fa1
 8006ef8:	08006fa1 	.word	0x08006fa1
 8006efc:	08006fa1 	.word	0x08006fa1
 8006f00:	08006fa1 	.word	0x08006fa1
 8006f04:	08006fa1 	.word	0x08006fa1
 8006f08:	08006fa1 	.word	0x08006fa1
 8006f0c:	08006f81 	.word	0x08006f81
 8006f10:	08006fa1 	.word	0x08006fa1
 8006f14:	08006fa1 	.word	0x08006fa1
 8006f18:	08006fa1 	.word	0x08006fa1
 8006f1c:	08006fa1 	.word	0x08006fa1
 8006f20:	08006fa1 	.word	0x08006fa1
 8006f24:	08006fa1 	.word	0x08006fa1
 8006f28:	08006fa1 	.word	0x08006fa1
 8006f2c:	08006f89 	.word	0x08006f89
 8006f30:	08006fa1 	.word	0x08006fa1
 8006f34:	08006fa1 	.word	0x08006fa1
 8006f38:	08006fa1 	.word	0x08006fa1
 8006f3c:	08006fa1 	.word	0x08006fa1
 8006f40:	08006fa1 	.word	0x08006fa1
 8006f44:	08006fa1 	.word	0x08006fa1
 8006f48:	08006fa1 	.word	0x08006fa1
 8006f4c:	08006f91 	.word	0x08006f91
 8006f50:	08006fa1 	.word	0x08006fa1
 8006f54:	08006fa1 	.word	0x08006fa1
 8006f58:	08006fa1 	.word	0x08006fa1
 8006f5c:	08006fa1 	.word	0x08006fa1
 8006f60:	08006fa1 	.word	0x08006fa1
 8006f64:	08006fa1 	.word	0x08006fa1
 8006f68:	08006fa1 	.word	0x08006fa1
 8006f6c:	08006f99 	.word	0x08006f99
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f76:	e050      	b.n	800701a <UART_SetConfig+0x7aa>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f7e:	e04c      	b.n	800701a <UART_SetConfig+0x7aa>
 8006f80:	2308      	movs	r3, #8
 8006f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f86:	e048      	b.n	800701a <UART_SetConfig+0x7aa>
 8006f88:	2310      	movs	r3, #16
 8006f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f8e:	e044      	b.n	800701a <UART_SetConfig+0x7aa>
 8006f90:	2320      	movs	r3, #32
 8006f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f96:	e040      	b.n	800701a <UART_SetConfig+0x7aa>
 8006f98:	2340      	movs	r3, #64	; 0x40
 8006f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f9e:	e03c      	b.n	800701a <UART_SetConfig+0x7aa>
 8006fa0:	2380      	movs	r3, #128	; 0x80
 8006fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fa6:	e038      	b.n	800701a <UART_SetConfig+0x7aa>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a71      	ldr	r2, [pc, #452]	; (8007174 <UART_SetConfig+0x904>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d130      	bne.n	8007014 <UART_SetConfig+0x7a4>
 8006fb2:	4b6f      	ldr	r3, [pc, #444]	; (8007170 <UART_SetConfig+0x900>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	2b05      	cmp	r3, #5
 8006fbc:	d826      	bhi.n	800700c <UART_SetConfig+0x79c>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <UART_SetConfig+0x754>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006fdd 	.word	0x08006fdd
 8006fc8:	08006fe5 	.word	0x08006fe5
 8006fcc:	08006fed 	.word	0x08006fed
 8006fd0:	08006ff5 	.word	0x08006ff5
 8006fd4:	08006ffd 	.word	0x08006ffd
 8006fd8:	08007005 	.word	0x08007005
 8006fdc:	2302      	movs	r3, #2
 8006fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fe2:	e01a      	b.n	800701a <UART_SetConfig+0x7aa>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fea:	e016      	b.n	800701a <UART_SetConfig+0x7aa>
 8006fec:	2308      	movs	r3, #8
 8006fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ff2:	e012      	b.n	800701a <UART_SetConfig+0x7aa>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ffa:	e00e      	b.n	800701a <UART_SetConfig+0x7aa>
 8006ffc:	2320      	movs	r3, #32
 8006ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007002:	e00a      	b.n	800701a <UART_SetConfig+0x7aa>
 8007004:	2340      	movs	r3, #64	; 0x40
 8007006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800700a:	e006      	b.n	800701a <UART_SetConfig+0x7aa>
 800700c:	2380      	movs	r3, #128	; 0x80
 800700e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007012:	e002      	b.n	800701a <UART_SetConfig+0x7aa>
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a55      	ldr	r2, [pc, #340]	; (8007174 <UART_SetConfig+0x904>)
 8007020:	4293      	cmp	r3, r2
 8007022:	f040 80f0 	bne.w	8007206 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007026:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800702a:	2b20      	cmp	r3, #32
 800702c:	dc46      	bgt.n	80070bc <UART_SetConfig+0x84c>
 800702e:	2b02      	cmp	r3, #2
 8007030:	db75      	blt.n	800711e <UART_SetConfig+0x8ae>
 8007032:	3b02      	subs	r3, #2
 8007034:	2b1e      	cmp	r3, #30
 8007036:	d872      	bhi.n	800711e <UART_SetConfig+0x8ae>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x7d0>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	080070c3 	.word	0x080070c3
 8007044:	0800711f 	.word	0x0800711f
 8007048:	080070cb 	.word	0x080070cb
 800704c:	0800711f 	.word	0x0800711f
 8007050:	0800711f 	.word	0x0800711f
 8007054:	0800711f 	.word	0x0800711f
 8007058:	080070db 	.word	0x080070db
 800705c:	0800711f 	.word	0x0800711f
 8007060:	0800711f 	.word	0x0800711f
 8007064:	0800711f 	.word	0x0800711f
 8007068:	0800711f 	.word	0x0800711f
 800706c:	0800711f 	.word	0x0800711f
 8007070:	0800711f 	.word	0x0800711f
 8007074:	0800711f 	.word	0x0800711f
 8007078:	080070eb 	.word	0x080070eb
 800707c:	0800711f 	.word	0x0800711f
 8007080:	0800711f 	.word	0x0800711f
 8007084:	0800711f 	.word	0x0800711f
 8007088:	0800711f 	.word	0x0800711f
 800708c:	0800711f 	.word	0x0800711f
 8007090:	0800711f 	.word	0x0800711f
 8007094:	0800711f 	.word	0x0800711f
 8007098:	0800711f 	.word	0x0800711f
 800709c:	0800711f 	.word	0x0800711f
 80070a0:	0800711f 	.word	0x0800711f
 80070a4:	0800711f 	.word	0x0800711f
 80070a8:	0800711f 	.word	0x0800711f
 80070ac:	0800711f 	.word	0x0800711f
 80070b0:	0800711f 	.word	0x0800711f
 80070b4:	0800711f 	.word	0x0800711f
 80070b8:	08007111 	.word	0x08007111
 80070bc:	2b40      	cmp	r3, #64	; 0x40
 80070be:	d02a      	beq.n	8007116 <UART_SetConfig+0x8a6>
 80070c0:	e02d      	b.n	800711e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80070c2:	f7fe f8fb 	bl	80052bc <HAL_RCCEx_GetD3PCLK1Freq>
 80070c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80070c8:	e02f      	b.n	800712a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ca:	f107 0314 	add.w	r3, r7, #20
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe f90a 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070d8:	e027      	b.n	800712a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070da:	f107 0308 	add.w	r3, r7, #8
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fa56 	bl	8005590 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070e8:	e01f      	b.n	800712a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ea:	4b21      	ldr	r3, [pc, #132]	; (8007170 <UART_SetConfig+0x900>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070f6:	4b1e      	ldr	r3, [pc, #120]	; (8007170 <UART_SetConfig+0x900>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	08db      	lsrs	r3, r3, #3
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	4a1d      	ldr	r2, [pc, #116]	; (8007178 <UART_SetConfig+0x908>)
 8007102:	fa22 f303 	lsr.w	r3, r2, r3
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007108:	e00f      	b.n	800712a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800710a:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <UART_SetConfig+0x908>)
 800710c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800710e:	e00c      	b.n	800712a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007110:	4b1a      	ldr	r3, [pc, #104]	; (800717c <UART_SetConfig+0x90c>)
 8007112:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007114:	e009      	b.n	800712a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800711c:	e005      	b.n	800712a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007128:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 81e6 	beq.w	80074fe <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	4a12      	ldr	r2, [pc, #72]	; (8007180 <UART_SetConfig+0x910>)
 8007138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800713c:	461a      	mov	r2, r3
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	fbb3 f3f2 	udiv	r3, r3, r2
 8007144:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	4613      	mov	r3, r2
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	4413      	add	r3, r2
 8007150:	6a3a      	ldr	r2, [r7, #32]
 8007152:	429a      	cmp	r2, r3
 8007154:	d305      	bcc.n	8007162 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800715c:	6a3a      	ldr	r2, [r7, #32]
 800715e:	429a      	cmp	r2, r3
 8007160:	d910      	bls.n	8007184 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007168:	e1c9      	b.n	80074fe <UART_SetConfig+0xc8e>
 800716a:	bf00      	nop
 800716c:	40011c00 	.word	0x40011c00
 8007170:	58024400 	.word	0x58024400
 8007174:	58000c00 	.word	0x58000c00
 8007178:	03d09000 	.word	0x03d09000
 800717c:	003d0900 	.word	0x003d0900
 8007180:	08008b48 	.word	0x08008b48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007186:	4618      	mov	r0, r3
 8007188:	f04f 0100 	mov.w	r1, #0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	4ac1      	ldr	r2, [pc, #772]	; (8007498 <UART_SetConfig+0xc28>)
 8007192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007196:	b29a      	uxth	r2, r3
 8007198:	f04f 0300 	mov.w	r3, #0
 800719c:	f7f9 f900 	bl	80003a0 <__aeabi_uldivmod>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4610      	mov	r0, r2
 80071a6:	4619      	mov	r1, r3
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	020b      	lsls	r3, r1, #8
 80071b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071b6:	0202      	lsls	r2, r0, #8
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	6849      	ldr	r1, [r1, #4]
 80071bc:	0849      	lsrs	r1, r1, #1
 80071be:	4608      	mov	r0, r1
 80071c0:	f04f 0100 	mov.w	r1, #0
 80071c4:	1814      	adds	r4, r2, r0
 80071c6:	eb43 0501 	adc.w	r5, r3, r1
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	4620      	mov	r0, r4
 80071d6:	4629      	mov	r1, r5
 80071d8:	f7f9 f8e2 	bl	80003a0 <__aeabi_uldivmod>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4613      	mov	r3, r2
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ea:	d308      	bcc.n	80071fe <UART_SetConfig+0x98e>
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071f2:	d204      	bcs.n	80071fe <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071fa:	60da      	str	r2, [r3, #12]
 80071fc:	e17f      	b.n	80074fe <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007204:	e17b      	b.n	80074fe <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800720e:	f040 80bd 	bne.w	800738c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8007212:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007216:	2b20      	cmp	r3, #32
 8007218:	dc48      	bgt.n	80072ac <UART_SetConfig+0xa3c>
 800721a:	2b00      	cmp	r3, #0
 800721c:	db7b      	blt.n	8007316 <UART_SetConfig+0xaa6>
 800721e:	2b20      	cmp	r3, #32
 8007220:	d879      	bhi.n	8007316 <UART_SetConfig+0xaa6>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x9b8>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	080072b3 	.word	0x080072b3
 800722c:	080072bb 	.word	0x080072bb
 8007230:	08007317 	.word	0x08007317
 8007234:	08007317 	.word	0x08007317
 8007238:	080072c3 	.word	0x080072c3
 800723c:	08007317 	.word	0x08007317
 8007240:	08007317 	.word	0x08007317
 8007244:	08007317 	.word	0x08007317
 8007248:	080072d3 	.word	0x080072d3
 800724c:	08007317 	.word	0x08007317
 8007250:	08007317 	.word	0x08007317
 8007254:	08007317 	.word	0x08007317
 8007258:	08007317 	.word	0x08007317
 800725c:	08007317 	.word	0x08007317
 8007260:	08007317 	.word	0x08007317
 8007264:	08007317 	.word	0x08007317
 8007268:	080072e3 	.word	0x080072e3
 800726c:	08007317 	.word	0x08007317
 8007270:	08007317 	.word	0x08007317
 8007274:	08007317 	.word	0x08007317
 8007278:	08007317 	.word	0x08007317
 800727c:	08007317 	.word	0x08007317
 8007280:	08007317 	.word	0x08007317
 8007284:	08007317 	.word	0x08007317
 8007288:	08007317 	.word	0x08007317
 800728c:	08007317 	.word	0x08007317
 8007290:	08007317 	.word	0x08007317
 8007294:	08007317 	.word	0x08007317
 8007298:	08007317 	.word	0x08007317
 800729c:	08007317 	.word	0x08007317
 80072a0:	08007317 	.word	0x08007317
 80072a4:	08007317 	.word	0x08007317
 80072a8:	08007309 	.word	0x08007309
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	d02e      	beq.n	800730e <UART_SetConfig+0xa9e>
 80072b0:	e031      	b.n	8007316 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b2:	f7fc fca1 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 80072b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072b8:	e033      	b.n	8007322 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ba:	f7fc fcb3 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 80072be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80072c0:	e02f      	b.n	8007322 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c2:	f107 0314 	add.w	r3, r7, #20
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe f80e 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072d0:	e027      	b.n	8007322 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072d2:	f107 0308 	add.w	r3, r7, #8
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe f95a 	bl	8005590 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072e0:	e01f      	b.n	8007322 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072e2:	4b6e      	ldr	r3, [pc, #440]	; (800749c <UART_SetConfig+0xc2c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d009      	beq.n	8007302 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072ee:	4b6b      	ldr	r3, [pc, #428]	; (800749c <UART_SetConfig+0xc2c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	08db      	lsrs	r3, r3, #3
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	4a69      	ldr	r2, [pc, #420]	; (80074a0 <UART_SetConfig+0xc30>)
 80072fa:	fa22 f303 	lsr.w	r3, r2, r3
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007300:	e00f      	b.n	8007322 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8007302:	4b67      	ldr	r3, [pc, #412]	; (80074a0 <UART_SetConfig+0xc30>)
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007306:	e00c      	b.n	8007322 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007308:	4b66      	ldr	r3, [pc, #408]	; (80074a4 <UART_SetConfig+0xc34>)
 800730a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800730c:	e009      	b.n	8007322 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007314:	e005      	b.n	8007322 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 80ea 	beq.w	80074fe <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	4a5a      	ldr	r2, [pc, #360]	; (8007498 <UART_SetConfig+0xc28>)
 8007330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007334:	461a      	mov	r2, r3
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	fbb3 f3f2 	udiv	r3, r3, r2
 800733c:	005a      	lsls	r2, r3, #1
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	441a      	add	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	fbb2 f3f3 	udiv	r3, r2, r3
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	2b0f      	cmp	r3, #15
 8007354:	d916      	bls.n	8007384 <UART_SetConfig+0xb14>
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800735c:	d212      	bcs.n	8007384 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	b29b      	uxth	r3, r3
 8007362:	f023 030f 	bic.w	r3, r3, #15
 8007366:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	085b      	lsrs	r3, r3, #1
 800736c:	b29b      	uxth	r3, r3
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	b29a      	uxth	r2, r3
 8007374:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007376:	4313      	orrs	r3, r2
 8007378:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007380:	60da      	str	r2, [r3, #12]
 8007382:	e0bc      	b.n	80074fe <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800738a:	e0b8      	b.n	80074fe <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800738c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007390:	2b20      	cmp	r3, #32
 8007392:	dc4b      	bgt.n	800742c <UART_SetConfig+0xbbc>
 8007394:	2b00      	cmp	r3, #0
 8007396:	f2c0 8087 	blt.w	80074a8 <UART_SetConfig+0xc38>
 800739a:	2b20      	cmp	r3, #32
 800739c:	f200 8084 	bhi.w	80074a8 <UART_SetConfig+0xc38>
 80073a0:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <UART_SetConfig+0xb38>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	08007433 	.word	0x08007433
 80073ac:	0800743b 	.word	0x0800743b
 80073b0:	080074a9 	.word	0x080074a9
 80073b4:	080074a9 	.word	0x080074a9
 80073b8:	08007443 	.word	0x08007443
 80073bc:	080074a9 	.word	0x080074a9
 80073c0:	080074a9 	.word	0x080074a9
 80073c4:	080074a9 	.word	0x080074a9
 80073c8:	08007453 	.word	0x08007453
 80073cc:	080074a9 	.word	0x080074a9
 80073d0:	080074a9 	.word	0x080074a9
 80073d4:	080074a9 	.word	0x080074a9
 80073d8:	080074a9 	.word	0x080074a9
 80073dc:	080074a9 	.word	0x080074a9
 80073e0:	080074a9 	.word	0x080074a9
 80073e4:	080074a9 	.word	0x080074a9
 80073e8:	08007463 	.word	0x08007463
 80073ec:	080074a9 	.word	0x080074a9
 80073f0:	080074a9 	.word	0x080074a9
 80073f4:	080074a9 	.word	0x080074a9
 80073f8:	080074a9 	.word	0x080074a9
 80073fc:	080074a9 	.word	0x080074a9
 8007400:	080074a9 	.word	0x080074a9
 8007404:	080074a9 	.word	0x080074a9
 8007408:	080074a9 	.word	0x080074a9
 800740c:	080074a9 	.word	0x080074a9
 8007410:	080074a9 	.word	0x080074a9
 8007414:	080074a9 	.word	0x080074a9
 8007418:	080074a9 	.word	0x080074a9
 800741c:	080074a9 	.word	0x080074a9
 8007420:	080074a9 	.word	0x080074a9
 8007424:	080074a9 	.word	0x080074a9
 8007428:	08007489 	.word	0x08007489
 800742c:	2b40      	cmp	r3, #64	; 0x40
 800742e:	d02e      	beq.n	800748e <UART_SetConfig+0xc1e>
 8007430:	e03a      	b.n	80074a8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007432:	f7fc fbe1 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8007436:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007438:	e03c      	b.n	80074b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800743a:	f7fc fbf3 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 800743e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007440:	e038      	b.n	80074b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007442:	f107 0314 	add.w	r3, r7, #20
 8007446:	4618      	mov	r0, r3
 8007448:	f7fd ff4e 	bl	80052e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007450:	e030      	b.n	80074b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007452:	f107 0308 	add.w	r3, r7, #8
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe f89a 	bl	8005590 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007460:	e028      	b.n	80074b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007462:	4b0e      	ldr	r3, [pc, #56]	; (800749c <UART_SetConfig+0xc2c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800746e:	4b0b      	ldr	r3, [pc, #44]	; (800749c <UART_SetConfig+0xc2c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	08db      	lsrs	r3, r3, #3
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	4a09      	ldr	r2, [pc, #36]	; (80074a0 <UART_SetConfig+0xc30>)
 800747a:	fa22 f303 	lsr.w	r3, r2, r3
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007480:	e018      	b.n	80074b4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8007482:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <UART_SetConfig+0xc30>)
 8007484:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007486:	e015      	b.n	80074b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <UART_SetConfig+0xc34>)
 800748a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800748c:	e012      	b.n	80074b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007494:	e00e      	b.n	80074b4 <UART_SetConfig+0xc44>
 8007496:	bf00      	nop
 8007498:	08008b48 	.word	0x08008b48
 800749c:	58024400 	.word	0x58024400
 80074a0:	03d09000 	.word	0x03d09000
 80074a4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80074b2:	bf00      	nop
    }

    if (pclk != 0U)
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d021      	beq.n	80074fe <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	4a1a      	ldr	r2, [pc, #104]	; (8007528 <UART_SetConfig+0xcb8>)
 80074c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074c4:	461a      	mov	r2, r3
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	441a      	add	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	2b0f      	cmp	r3, #15
 80074e2:	d909      	bls.n	80074f8 <UART_SetConfig+0xc88>
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ea:	d205      	bcs.n	80074f8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	e002      	b.n	80074fe <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800751a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800751e:	4618      	mov	r0, r3
 8007520:	3738      	adds	r7, #56	; 0x38
 8007522:	46bd      	mov	sp, r7
 8007524:	bdb0      	pop	{r4, r5, r7, pc}
 8007526:	bf00      	nop
 8007528:	08008b48 	.word	0x08008b48

0800752c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	f003 0308 	and.w	r3, r3, #8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01a      	beq.n	8007642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800762a:	d10a      	bne.n	8007642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	605a      	str	r2, [r3, #4]
  }
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af02      	add	r7, sp, #8
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007680:	f7f9 ffde 	bl	8001640 <HAL_GetTick>
 8007684:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b08      	cmp	r3, #8
 8007692:	d10e      	bne.n	80076b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f82f 	bl	8007706 <UART_WaitOnFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e025      	b.n	80076fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d10e      	bne.n	80076de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f819 	bl	8007706 <UART_WaitOnFlagUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e00f      	b.n	80076fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b09c      	sub	sp, #112	; 0x70
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	603b      	str	r3, [r7, #0]
 8007712:	4613      	mov	r3, r2
 8007714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007716:	e0a9      	b.n	800786c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	f000 80a5 	beq.w	800786c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007722:	f7f9 ff8d 	bl	8001640 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800772e:	429a      	cmp	r2, r3
 8007730:	d302      	bcc.n	8007738 <UART_WaitOnFlagUntilTimeout+0x32>
 8007732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007734:	2b00      	cmp	r3, #0
 8007736:	d140      	bne.n	80077ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007748:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800774c:	667b      	str	r3, [r7, #100]	; 0x64
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007758:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800775c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e6      	bne.n	8007738 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3308      	adds	r3, #8
 8007770:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	f023 0301 	bic.w	r3, r3, #1
 8007780:	663b      	str	r3, [r7, #96]	; 0x60
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800778a:	64ba      	str	r2, [r7, #72]	; 0x48
 800778c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e5      	bne.n	800776a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e069      	b.n	800788e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d051      	beq.n	800786c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077d6:	d149      	bne.n	800786c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
 8007802:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e6      	bne.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3308      	adds	r3, #8
 800781a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	613b      	str	r3, [r7, #16]
   return(result);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f023 0301 	bic.w	r3, r3, #1
 800782a:	66bb      	str	r3, [r7, #104]	; 0x68
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3308      	adds	r3, #8
 8007832:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007834:	623a      	str	r2, [r7, #32]
 8007836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	69f9      	ldr	r1, [r7, #28]
 800783a:	6a3a      	ldr	r2, [r7, #32]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	61bb      	str	r3, [r7, #24]
   return(result);
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e5      	bne.n	8007814 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2220      	movs	r2, #32
 800785c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e010      	b.n	800788e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69da      	ldr	r2, [r3, #28]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4013      	ands	r3, r2
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	429a      	cmp	r2, r3
 800787a:	bf0c      	ite	eq
 800787c:	2301      	moveq	r3, #1
 800787e:	2300      	movne	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	461a      	mov	r2, r3
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	429a      	cmp	r2, r3
 8007888:	f43f af46 	beq.w	8007718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3770      	adds	r7, #112	; 0x70
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007896:	b480      	push	{r7}
 8007898:	b085      	sub	sp, #20
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_UARTEx_DisableFifoMode+0x16>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e027      	b.n	80078fc <HAL_UARTEx_DisableFifoMode+0x66>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2224      	movs	r2, #36	; 0x24
 80078b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800791c:	2302      	movs	r3, #2
 800791e:	e02d      	b.n	800797c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2224      	movs	r2, #36	; 0x24
 800792c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0201 	bic.w	r2, r2, #1
 8007946:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f84f 	bl	8007a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007998:	2302      	movs	r3, #2
 800799a:	e02d      	b.n	80079f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2224      	movs	r2, #36	; 0x24
 80079a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0201 	bic.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f811 	bl	8007a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d108      	bne.n	8007a22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a20:	e031      	b.n	8007a86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a22:	2310      	movs	r3, #16
 8007a24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a26:	2310      	movs	r3, #16
 8007a28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	0e5b      	lsrs	r3, r3, #25
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	0f5b      	lsrs	r3, r3, #29
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	7b3a      	ldrb	r2, [r7, #12]
 8007a4e:	4911      	ldr	r1, [pc, #68]	; (8007a94 <UARTEx_SetNbDataToProcess+0x94>)
 8007a50:	5c8a      	ldrb	r2, [r1, r2]
 8007a52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a56:	7b3a      	ldrb	r2, [r7, #12]
 8007a58:	490f      	ldr	r1, [pc, #60]	; (8007a98 <UARTEx_SetNbDataToProcess+0x98>)
 8007a5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	7b7a      	ldrb	r2, [r7, #13]
 8007a6c:	4909      	ldr	r1, [pc, #36]	; (8007a94 <UARTEx_SetNbDataToProcess+0x94>)
 8007a6e:	5c8a      	ldrb	r2, [r1, r2]
 8007a70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a74:	7b7a      	ldrb	r2, [r7, #13]
 8007a76:	4908      	ldr	r1, [pc, #32]	; (8007a98 <UARTEx_SetNbDataToProcess+0x98>)
 8007a78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a86:	bf00      	nop
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	08008b60 	.word	0x08008b60
 8007a98:	08008b68 	.word	0x08008b68

08007a9c <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e016      	b.n	8007adc <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7f9 fc02 	bl	80012b8 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68da      	ldr	r2, [r3, #12]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ac0:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691a      	ldr	r2, [r3, #16]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	ea42 0103 	orr.w	r1, r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	68d2      	ldr	r2, [r2, #12]
 8007af4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b1a:	d10e      	bne.n	8007b3a <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d107      	bne.n	8007b3a <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f06f 0201 	mvn.w	r2, #1
 8007b32:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7f9 f90f 	bl	8000d58 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8007b3a:	bf00      	nop
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <__errno>:
 8007b44:	4b01      	ldr	r3, [pc, #4]	; (8007b4c <__errno+0x8>)
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	24000010 	.word	0x24000010

08007b50 <__libc_init_array>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	4d0d      	ldr	r5, [pc, #52]	; (8007b88 <__libc_init_array+0x38>)
 8007b54:	4c0d      	ldr	r4, [pc, #52]	; (8007b8c <__libc_init_array+0x3c>)
 8007b56:	1b64      	subs	r4, r4, r5
 8007b58:	10a4      	asrs	r4, r4, #2
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	42a6      	cmp	r6, r4
 8007b5e:	d109      	bne.n	8007b74 <__libc_init_array+0x24>
 8007b60:	4d0b      	ldr	r5, [pc, #44]	; (8007b90 <__libc_init_array+0x40>)
 8007b62:	4c0c      	ldr	r4, [pc, #48]	; (8007b94 <__libc_init_array+0x44>)
 8007b64:	f000 ffb8 	bl	8008ad8 <_init>
 8007b68:	1b64      	subs	r4, r4, r5
 8007b6a:	10a4      	asrs	r4, r4, #2
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	42a6      	cmp	r6, r4
 8007b70:	d105      	bne.n	8007b7e <__libc_init_array+0x2e>
 8007b72:	bd70      	pop	{r4, r5, r6, pc}
 8007b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b78:	4798      	blx	r3
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	e7ee      	b.n	8007b5c <__libc_init_array+0xc>
 8007b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b82:	4798      	blx	r3
 8007b84:	3601      	adds	r6, #1
 8007b86:	e7f2      	b.n	8007b6e <__libc_init_array+0x1e>
 8007b88:	0800a468 	.word	0x0800a468
 8007b8c:	0800a468 	.word	0x0800a468
 8007b90:	0800a468 	.word	0x0800a468
 8007b94:	0800a46c 	.word	0x0800a46c

08007b98 <memset>:
 8007b98:	4402      	add	r2, r0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d100      	bne.n	8007ba2 <memset+0xa>
 8007ba0:	4770      	bx	lr
 8007ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ba6:	e7f9      	b.n	8007b9c <memset+0x4>

08007ba8 <siprintf>:
 8007ba8:	b40e      	push	{r1, r2, r3}
 8007baa:	b500      	push	{lr}
 8007bac:	b09c      	sub	sp, #112	; 0x70
 8007bae:	ab1d      	add	r3, sp, #116	; 0x74
 8007bb0:	9002      	str	r0, [sp, #8]
 8007bb2:	9006      	str	r0, [sp, #24]
 8007bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bb8:	4809      	ldr	r0, [pc, #36]	; (8007be0 <siprintf+0x38>)
 8007bba:	9107      	str	r1, [sp, #28]
 8007bbc:	9104      	str	r1, [sp, #16]
 8007bbe:	4909      	ldr	r1, [pc, #36]	; (8007be4 <siprintf+0x3c>)
 8007bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc4:	9105      	str	r1, [sp, #20]
 8007bc6:	6800      	ldr	r0, [r0, #0]
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	a902      	add	r1, sp, #8
 8007bcc:	f000 f868 	bl	8007ca0 <_svfiprintf_r>
 8007bd0:	9b02      	ldr	r3, [sp, #8]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	b01c      	add	sp, #112	; 0x70
 8007bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bdc:	b003      	add	sp, #12
 8007bde:	4770      	bx	lr
 8007be0:	24000010 	.word	0x24000010
 8007be4:	ffff0208 	.word	0xffff0208

08007be8 <__ssputs_r>:
 8007be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	688e      	ldr	r6, [r1, #8]
 8007bee:	429e      	cmp	r6, r3
 8007bf0:	4682      	mov	sl, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	4690      	mov	r8, r2
 8007bf6:	461f      	mov	r7, r3
 8007bf8:	d838      	bhi.n	8007c6c <__ssputs_r+0x84>
 8007bfa:	898a      	ldrh	r2, [r1, #12]
 8007bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c00:	d032      	beq.n	8007c68 <__ssputs_r+0x80>
 8007c02:	6825      	ldr	r5, [r4, #0]
 8007c04:	6909      	ldr	r1, [r1, #16]
 8007c06:	eba5 0901 	sub.w	r9, r5, r1
 8007c0a:	6965      	ldr	r5, [r4, #20]
 8007c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c14:	3301      	adds	r3, #1
 8007c16:	444b      	add	r3, r9
 8007c18:	106d      	asrs	r5, r5, #1
 8007c1a:	429d      	cmp	r5, r3
 8007c1c:	bf38      	it	cc
 8007c1e:	461d      	movcc	r5, r3
 8007c20:	0553      	lsls	r3, r2, #21
 8007c22:	d531      	bpl.n	8007c88 <__ssputs_r+0xa0>
 8007c24:	4629      	mov	r1, r5
 8007c26:	f000 fb47 	bl	80082b8 <_malloc_r>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	b950      	cbnz	r0, 8007c44 <__ssputs_r+0x5c>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	f8ca 3000 	str.w	r3, [sl]
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c44:	6921      	ldr	r1, [r4, #16]
 8007c46:	464a      	mov	r2, r9
 8007c48:	f000 fabe 	bl	80081c8 <memcpy>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	6126      	str	r6, [r4, #16]
 8007c5a:	6165      	str	r5, [r4, #20]
 8007c5c:	444e      	add	r6, r9
 8007c5e:	eba5 0509 	sub.w	r5, r5, r9
 8007c62:	6026      	str	r6, [r4, #0]
 8007c64:	60a5      	str	r5, [r4, #8]
 8007c66:	463e      	mov	r6, r7
 8007c68:	42be      	cmp	r6, r7
 8007c6a:	d900      	bls.n	8007c6e <__ssputs_r+0x86>
 8007c6c:	463e      	mov	r6, r7
 8007c6e:	4632      	mov	r2, r6
 8007c70:	6820      	ldr	r0, [r4, #0]
 8007c72:	4641      	mov	r1, r8
 8007c74:	f000 fab6 	bl	80081e4 <memmove>
 8007c78:	68a3      	ldr	r3, [r4, #8]
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	1b9b      	subs	r3, r3, r6
 8007c7e:	4432      	add	r2, r6
 8007c80:	60a3      	str	r3, [r4, #8]
 8007c82:	6022      	str	r2, [r4, #0]
 8007c84:	2000      	movs	r0, #0
 8007c86:	e7db      	b.n	8007c40 <__ssputs_r+0x58>
 8007c88:	462a      	mov	r2, r5
 8007c8a:	f000 fb6f 	bl	800836c <_realloc_r>
 8007c8e:	4606      	mov	r6, r0
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d1e1      	bne.n	8007c58 <__ssputs_r+0x70>
 8007c94:	6921      	ldr	r1, [r4, #16]
 8007c96:	4650      	mov	r0, sl
 8007c98:	f000 fabe 	bl	8008218 <_free_r>
 8007c9c:	e7c7      	b.n	8007c2e <__ssputs_r+0x46>
	...

08007ca0 <_svfiprintf_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	4698      	mov	r8, r3
 8007ca6:	898b      	ldrh	r3, [r1, #12]
 8007ca8:	061b      	lsls	r3, r3, #24
 8007caa:	b09d      	sub	sp, #116	; 0x74
 8007cac:	4607      	mov	r7, r0
 8007cae:	460d      	mov	r5, r1
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	d50e      	bpl.n	8007cd2 <_svfiprintf_r+0x32>
 8007cb4:	690b      	ldr	r3, [r1, #16]
 8007cb6:	b963      	cbnz	r3, 8007cd2 <_svfiprintf_r+0x32>
 8007cb8:	2140      	movs	r1, #64	; 0x40
 8007cba:	f000 fafd 	bl	80082b8 <_malloc_r>
 8007cbe:	6028      	str	r0, [r5, #0]
 8007cc0:	6128      	str	r0, [r5, #16]
 8007cc2:	b920      	cbnz	r0, 8007cce <_svfiprintf_r+0x2e>
 8007cc4:	230c      	movs	r3, #12
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	e0d1      	b.n	8007e72 <_svfiprintf_r+0x1d2>
 8007cce:	2340      	movs	r3, #64	; 0x40
 8007cd0:	616b      	str	r3, [r5, #20]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd6:	2320      	movs	r3, #32
 8007cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ce0:	2330      	movs	r3, #48	; 0x30
 8007ce2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e8c <_svfiprintf_r+0x1ec>
 8007ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cea:	f04f 0901 	mov.w	r9, #1
 8007cee:	4623      	mov	r3, r4
 8007cf0:	469a      	mov	sl, r3
 8007cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf6:	b10a      	cbz	r2, 8007cfc <_svfiprintf_r+0x5c>
 8007cf8:	2a25      	cmp	r2, #37	; 0x25
 8007cfa:	d1f9      	bne.n	8007cf0 <_svfiprintf_r+0x50>
 8007cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8007d00:	d00b      	beq.n	8007d1a <_svfiprintf_r+0x7a>
 8007d02:	465b      	mov	r3, fp
 8007d04:	4622      	mov	r2, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7ff ff6d 	bl	8007be8 <__ssputs_r>
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f000 80aa 	beq.w	8007e68 <_svfiprintf_r+0x1c8>
 8007d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d16:	445a      	add	r2, fp
 8007d18:	9209      	str	r2, [sp, #36]	; 0x24
 8007d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 80a2 	beq.w	8007e68 <_svfiprintf_r+0x1c8>
 8007d24:	2300      	movs	r3, #0
 8007d26:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d2e:	f10a 0a01 	add.w	sl, sl, #1
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	9307      	str	r3, [sp, #28]
 8007d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007d3c:	4654      	mov	r4, sl
 8007d3e:	2205      	movs	r2, #5
 8007d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d44:	4851      	ldr	r0, [pc, #324]	; (8007e8c <_svfiprintf_r+0x1ec>)
 8007d46:	f7f8 fadb 	bl	8000300 <memchr>
 8007d4a:	9a04      	ldr	r2, [sp, #16]
 8007d4c:	b9d8      	cbnz	r0, 8007d86 <_svfiprintf_r+0xe6>
 8007d4e:	06d0      	lsls	r0, r2, #27
 8007d50:	bf44      	itt	mi
 8007d52:	2320      	movmi	r3, #32
 8007d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d58:	0711      	lsls	r1, r2, #28
 8007d5a:	bf44      	itt	mi
 8007d5c:	232b      	movmi	r3, #43	; 0x2b
 8007d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d62:	f89a 3000 	ldrb.w	r3, [sl]
 8007d66:	2b2a      	cmp	r3, #42	; 0x2a
 8007d68:	d015      	beq.n	8007d96 <_svfiprintf_r+0xf6>
 8007d6a:	9a07      	ldr	r2, [sp, #28]
 8007d6c:	4654      	mov	r4, sl
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f04f 0c0a 	mov.w	ip, #10
 8007d74:	4621      	mov	r1, r4
 8007d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7a:	3b30      	subs	r3, #48	; 0x30
 8007d7c:	2b09      	cmp	r3, #9
 8007d7e:	d94e      	bls.n	8007e1e <_svfiprintf_r+0x17e>
 8007d80:	b1b0      	cbz	r0, 8007db0 <_svfiprintf_r+0x110>
 8007d82:	9207      	str	r2, [sp, #28]
 8007d84:	e014      	b.n	8007db0 <_svfiprintf_r+0x110>
 8007d86:	eba0 0308 	sub.w	r3, r0, r8
 8007d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	46a2      	mov	sl, r4
 8007d94:	e7d2      	b.n	8007d3c <_svfiprintf_r+0x9c>
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	1d19      	adds	r1, r3, #4
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	9103      	str	r1, [sp, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfbb      	ittet	lt
 8007da2:	425b      	neglt	r3, r3
 8007da4:	f042 0202 	orrlt.w	r2, r2, #2
 8007da8:	9307      	strge	r3, [sp, #28]
 8007daa:	9307      	strlt	r3, [sp, #28]
 8007dac:	bfb8      	it	lt
 8007dae:	9204      	strlt	r2, [sp, #16]
 8007db0:	7823      	ldrb	r3, [r4, #0]
 8007db2:	2b2e      	cmp	r3, #46	; 0x2e
 8007db4:	d10c      	bne.n	8007dd0 <_svfiprintf_r+0x130>
 8007db6:	7863      	ldrb	r3, [r4, #1]
 8007db8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dba:	d135      	bne.n	8007e28 <_svfiprintf_r+0x188>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	9203      	str	r2, [sp, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfb8      	it	lt
 8007dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dcc:	3402      	adds	r4, #2
 8007dce:	9305      	str	r3, [sp, #20]
 8007dd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e9c <_svfiprintf_r+0x1fc>
 8007dd4:	7821      	ldrb	r1, [r4, #0]
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	4650      	mov	r0, sl
 8007dda:	f7f8 fa91 	bl	8000300 <memchr>
 8007dde:	b140      	cbz	r0, 8007df2 <_svfiprintf_r+0x152>
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	eba0 000a 	sub.w	r0, r0, sl
 8007de6:	fa03 f000 	lsl.w	r0, r3, r0
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	4303      	orrs	r3, r0
 8007dee:	3401      	adds	r4, #1
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df6:	4826      	ldr	r0, [pc, #152]	; (8007e90 <_svfiprintf_r+0x1f0>)
 8007df8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dfc:	2206      	movs	r2, #6
 8007dfe:	f7f8 fa7f 	bl	8000300 <memchr>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d038      	beq.n	8007e78 <_svfiprintf_r+0x1d8>
 8007e06:	4b23      	ldr	r3, [pc, #140]	; (8007e94 <_svfiprintf_r+0x1f4>)
 8007e08:	bb1b      	cbnz	r3, 8007e52 <_svfiprintf_r+0x1b2>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	3307      	adds	r3, #7
 8007e0e:	f023 0307 	bic.w	r3, r3, #7
 8007e12:	3308      	adds	r3, #8
 8007e14:	9303      	str	r3, [sp, #12]
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	4433      	add	r3, r6
 8007e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1c:	e767      	b.n	8007cee <_svfiprintf_r+0x4e>
 8007e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e22:	460c      	mov	r4, r1
 8007e24:	2001      	movs	r0, #1
 8007e26:	e7a5      	b.n	8007d74 <_svfiprintf_r+0xd4>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	3401      	adds	r4, #1
 8007e2c:	9305      	str	r3, [sp, #20]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	f04f 0c0a 	mov.w	ip, #10
 8007e34:	4620      	mov	r0, r4
 8007e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e3a:	3a30      	subs	r2, #48	; 0x30
 8007e3c:	2a09      	cmp	r2, #9
 8007e3e:	d903      	bls.n	8007e48 <_svfiprintf_r+0x1a8>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0c5      	beq.n	8007dd0 <_svfiprintf_r+0x130>
 8007e44:	9105      	str	r1, [sp, #20]
 8007e46:	e7c3      	b.n	8007dd0 <_svfiprintf_r+0x130>
 8007e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e7f0      	b.n	8007e34 <_svfiprintf_r+0x194>
 8007e52:	ab03      	add	r3, sp, #12
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	462a      	mov	r2, r5
 8007e58:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <_svfiprintf_r+0x1f8>)
 8007e5a:	a904      	add	r1, sp, #16
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f3af 8000 	nop.w
 8007e62:	1c42      	adds	r2, r0, #1
 8007e64:	4606      	mov	r6, r0
 8007e66:	d1d6      	bne.n	8007e16 <_svfiprintf_r+0x176>
 8007e68:	89ab      	ldrh	r3, [r5, #12]
 8007e6a:	065b      	lsls	r3, r3, #25
 8007e6c:	f53f af2c 	bmi.w	8007cc8 <_svfiprintf_r+0x28>
 8007e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e72:	b01d      	add	sp, #116	; 0x74
 8007e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e78:	ab03      	add	r3, sp, #12
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <_svfiprintf_r+0x1f8>)
 8007e80:	a904      	add	r1, sp, #16
 8007e82:	4638      	mov	r0, r7
 8007e84:	f000 f87a 	bl	8007f7c <_printf_i>
 8007e88:	e7eb      	b.n	8007e62 <_svfiprintf_r+0x1c2>
 8007e8a:	bf00      	nop
 8007e8c:	08008b70 	.word	0x08008b70
 8007e90:	08008b7a 	.word	0x08008b7a
 8007e94:	00000000 	.word	0x00000000
 8007e98:	08007be9 	.word	0x08007be9
 8007e9c:	08008b76 	.word	0x08008b76

08007ea0 <_printf_common>:
 8007ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea4:	4616      	mov	r6, r2
 8007ea6:	4699      	mov	r9, r3
 8007ea8:	688a      	ldr	r2, [r1, #8]
 8007eaa:	690b      	ldr	r3, [r1, #16]
 8007eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	bfb8      	it	lt
 8007eb4:	4613      	movlt	r3, r2
 8007eb6:	6033      	str	r3, [r6, #0]
 8007eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	b10a      	cbz	r2, 8007ec6 <_printf_common+0x26>
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	6033      	str	r3, [r6, #0]
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	0699      	lsls	r1, r3, #26
 8007eca:	bf42      	ittt	mi
 8007ecc:	6833      	ldrmi	r3, [r6, #0]
 8007ece:	3302      	addmi	r3, #2
 8007ed0:	6033      	strmi	r3, [r6, #0]
 8007ed2:	6825      	ldr	r5, [r4, #0]
 8007ed4:	f015 0506 	ands.w	r5, r5, #6
 8007ed8:	d106      	bne.n	8007ee8 <_printf_common+0x48>
 8007eda:	f104 0a19 	add.w	sl, r4, #25
 8007ede:	68e3      	ldr	r3, [r4, #12]
 8007ee0:	6832      	ldr	r2, [r6, #0]
 8007ee2:	1a9b      	subs	r3, r3, r2
 8007ee4:	42ab      	cmp	r3, r5
 8007ee6:	dc26      	bgt.n	8007f36 <_printf_common+0x96>
 8007ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eec:	1e13      	subs	r3, r2, #0
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	bf18      	it	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	0692      	lsls	r2, r2, #26
 8007ef6:	d42b      	bmi.n	8007f50 <_printf_common+0xb0>
 8007ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007efc:	4649      	mov	r1, r9
 8007efe:	4638      	mov	r0, r7
 8007f00:	47c0      	blx	r8
 8007f02:	3001      	adds	r0, #1
 8007f04:	d01e      	beq.n	8007f44 <_printf_common+0xa4>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	68e5      	ldr	r5, [r4, #12]
 8007f0a:	6832      	ldr	r2, [r6, #0]
 8007f0c:	f003 0306 	and.w	r3, r3, #6
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	bf08      	it	eq
 8007f14:	1aad      	subeq	r5, r5, r2
 8007f16:	68a3      	ldr	r3, [r4, #8]
 8007f18:	6922      	ldr	r2, [r4, #16]
 8007f1a:	bf0c      	ite	eq
 8007f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f20:	2500      	movne	r5, #0
 8007f22:	4293      	cmp	r3, r2
 8007f24:	bfc4      	itt	gt
 8007f26:	1a9b      	subgt	r3, r3, r2
 8007f28:	18ed      	addgt	r5, r5, r3
 8007f2a:	2600      	movs	r6, #0
 8007f2c:	341a      	adds	r4, #26
 8007f2e:	42b5      	cmp	r5, r6
 8007f30:	d11a      	bne.n	8007f68 <_printf_common+0xc8>
 8007f32:	2000      	movs	r0, #0
 8007f34:	e008      	b.n	8007f48 <_printf_common+0xa8>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4652      	mov	r2, sl
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	47c0      	blx	r8
 8007f40:	3001      	adds	r0, #1
 8007f42:	d103      	bne.n	8007f4c <_printf_common+0xac>
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	e7c6      	b.n	8007ede <_printf_common+0x3e>
 8007f50:	18e1      	adds	r1, r4, r3
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	2030      	movs	r0, #48	; 0x30
 8007f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f5a:	4422      	add	r2, r4
 8007f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f64:	3302      	adds	r3, #2
 8007f66:	e7c7      	b.n	8007ef8 <_printf_common+0x58>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	4638      	mov	r0, r7
 8007f70:	47c0      	blx	r8
 8007f72:	3001      	adds	r0, #1
 8007f74:	d0e6      	beq.n	8007f44 <_printf_common+0xa4>
 8007f76:	3601      	adds	r6, #1
 8007f78:	e7d9      	b.n	8007f2e <_printf_common+0x8e>
	...

08007f7c <_printf_i>:
 8007f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	460c      	mov	r4, r1
 8007f82:	4691      	mov	r9, r2
 8007f84:	7e27      	ldrb	r7, [r4, #24]
 8007f86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f88:	2f78      	cmp	r7, #120	; 0x78
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	469a      	mov	sl, r3
 8007f8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f92:	d807      	bhi.n	8007fa4 <_printf_i+0x28>
 8007f94:	2f62      	cmp	r7, #98	; 0x62
 8007f96:	d80a      	bhi.n	8007fae <_printf_i+0x32>
 8007f98:	2f00      	cmp	r7, #0
 8007f9a:	f000 80d8 	beq.w	800814e <_printf_i+0x1d2>
 8007f9e:	2f58      	cmp	r7, #88	; 0x58
 8007fa0:	f000 80a3 	beq.w	80080ea <_printf_i+0x16e>
 8007fa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fac:	e03a      	b.n	8008024 <_printf_i+0xa8>
 8007fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fb2:	2b15      	cmp	r3, #21
 8007fb4:	d8f6      	bhi.n	8007fa4 <_printf_i+0x28>
 8007fb6:	a001      	add	r0, pc, #4	; (adr r0, 8007fbc <_printf_i+0x40>)
 8007fb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007fbc:	08008015 	.word	0x08008015
 8007fc0:	08008029 	.word	0x08008029
 8007fc4:	08007fa5 	.word	0x08007fa5
 8007fc8:	08007fa5 	.word	0x08007fa5
 8007fcc:	08007fa5 	.word	0x08007fa5
 8007fd0:	08007fa5 	.word	0x08007fa5
 8007fd4:	08008029 	.word	0x08008029
 8007fd8:	08007fa5 	.word	0x08007fa5
 8007fdc:	08007fa5 	.word	0x08007fa5
 8007fe0:	08007fa5 	.word	0x08007fa5
 8007fe4:	08007fa5 	.word	0x08007fa5
 8007fe8:	08008135 	.word	0x08008135
 8007fec:	08008059 	.word	0x08008059
 8007ff0:	08008117 	.word	0x08008117
 8007ff4:	08007fa5 	.word	0x08007fa5
 8007ff8:	08007fa5 	.word	0x08007fa5
 8007ffc:	08008157 	.word	0x08008157
 8008000:	08007fa5 	.word	0x08007fa5
 8008004:	08008059 	.word	0x08008059
 8008008:	08007fa5 	.word	0x08007fa5
 800800c:	08007fa5 	.word	0x08007fa5
 8008010:	0800811f 	.word	0x0800811f
 8008014:	680b      	ldr	r3, [r1, #0]
 8008016:	1d1a      	adds	r2, r3, #4
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	600a      	str	r2, [r1, #0]
 800801c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008024:	2301      	movs	r3, #1
 8008026:	e0a3      	b.n	8008170 <_printf_i+0x1f4>
 8008028:	6825      	ldr	r5, [r4, #0]
 800802a:	6808      	ldr	r0, [r1, #0]
 800802c:	062e      	lsls	r6, r5, #24
 800802e:	f100 0304 	add.w	r3, r0, #4
 8008032:	d50a      	bpl.n	800804a <_printf_i+0xce>
 8008034:	6805      	ldr	r5, [r0, #0]
 8008036:	600b      	str	r3, [r1, #0]
 8008038:	2d00      	cmp	r5, #0
 800803a:	da03      	bge.n	8008044 <_printf_i+0xc8>
 800803c:	232d      	movs	r3, #45	; 0x2d
 800803e:	426d      	negs	r5, r5
 8008040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008044:	485e      	ldr	r0, [pc, #376]	; (80081c0 <_printf_i+0x244>)
 8008046:	230a      	movs	r3, #10
 8008048:	e019      	b.n	800807e <_printf_i+0x102>
 800804a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800804e:	6805      	ldr	r5, [r0, #0]
 8008050:	600b      	str	r3, [r1, #0]
 8008052:	bf18      	it	ne
 8008054:	b22d      	sxthne	r5, r5
 8008056:	e7ef      	b.n	8008038 <_printf_i+0xbc>
 8008058:	680b      	ldr	r3, [r1, #0]
 800805a:	6825      	ldr	r5, [r4, #0]
 800805c:	1d18      	adds	r0, r3, #4
 800805e:	6008      	str	r0, [r1, #0]
 8008060:	0628      	lsls	r0, r5, #24
 8008062:	d501      	bpl.n	8008068 <_printf_i+0xec>
 8008064:	681d      	ldr	r5, [r3, #0]
 8008066:	e002      	b.n	800806e <_printf_i+0xf2>
 8008068:	0669      	lsls	r1, r5, #25
 800806a:	d5fb      	bpl.n	8008064 <_printf_i+0xe8>
 800806c:	881d      	ldrh	r5, [r3, #0]
 800806e:	4854      	ldr	r0, [pc, #336]	; (80081c0 <_printf_i+0x244>)
 8008070:	2f6f      	cmp	r7, #111	; 0x6f
 8008072:	bf0c      	ite	eq
 8008074:	2308      	moveq	r3, #8
 8008076:	230a      	movne	r3, #10
 8008078:	2100      	movs	r1, #0
 800807a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800807e:	6866      	ldr	r6, [r4, #4]
 8008080:	60a6      	str	r6, [r4, #8]
 8008082:	2e00      	cmp	r6, #0
 8008084:	bfa2      	ittt	ge
 8008086:	6821      	ldrge	r1, [r4, #0]
 8008088:	f021 0104 	bicge.w	r1, r1, #4
 800808c:	6021      	strge	r1, [r4, #0]
 800808e:	b90d      	cbnz	r5, 8008094 <_printf_i+0x118>
 8008090:	2e00      	cmp	r6, #0
 8008092:	d04d      	beq.n	8008130 <_printf_i+0x1b4>
 8008094:	4616      	mov	r6, r2
 8008096:	fbb5 f1f3 	udiv	r1, r5, r3
 800809a:	fb03 5711 	mls	r7, r3, r1, r5
 800809e:	5dc7      	ldrb	r7, [r0, r7]
 80080a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080a4:	462f      	mov	r7, r5
 80080a6:	42bb      	cmp	r3, r7
 80080a8:	460d      	mov	r5, r1
 80080aa:	d9f4      	bls.n	8008096 <_printf_i+0x11a>
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d10b      	bne.n	80080c8 <_printf_i+0x14c>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	07df      	lsls	r7, r3, #31
 80080b4:	d508      	bpl.n	80080c8 <_printf_i+0x14c>
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	6861      	ldr	r1, [r4, #4]
 80080ba:	4299      	cmp	r1, r3
 80080bc:	bfde      	ittt	le
 80080be:	2330      	movle	r3, #48	; 0x30
 80080c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080c8:	1b92      	subs	r2, r2, r6
 80080ca:	6122      	str	r2, [r4, #16]
 80080cc:	f8cd a000 	str.w	sl, [sp]
 80080d0:	464b      	mov	r3, r9
 80080d2:	aa03      	add	r2, sp, #12
 80080d4:	4621      	mov	r1, r4
 80080d6:	4640      	mov	r0, r8
 80080d8:	f7ff fee2 	bl	8007ea0 <_printf_common>
 80080dc:	3001      	adds	r0, #1
 80080de:	d14c      	bne.n	800817a <_printf_i+0x1fe>
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295
 80080e4:	b004      	add	sp, #16
 80080e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ea:	4835      	ldr	r0, [pc, #212]	; (80081c0 <_printf_i+0x244>)
 80080ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	680e      	ldr	r6, [r1, #0]
 80080f4:	061f      	lsls	r7, r3, #24
 80080f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80080fa:	600e      	str	r6, [r1, #0]
 80080fc:	d514      	bpl.n	8008128 <_printf_i+0x1ac>
 80080fe:	07d9      	lsls	r1, r3, #31
 8008100:	bf44      	itt	mi
 8008102:	f043 0320 	orrmi.w	r3, r3, #32
 8008106:	6023      	strmi	r3, [r4, #0]
 8008108:	b91d      	cbnz	r5, 8008112 <_printf_i+0x196>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	f023 0320 	bic.w	r3, r3, #32
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	2310      	movs	r3, #16
 8008114:	e7b0      	b.n	8008078 <_printf_i+0xfc>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	f043 0320 	orr.w	r3, r3, #32
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	2378      	movs	r3, #120	; 0x78
 8008120:	4828      	ldr	r0, [pc, #160]	; (80081c4 <_printf_i+0x248>)
 8008122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008126:	e7e3      	b.n	80080f0 <_printf_i+0x174>
 8008128:	065e      	lsls	r6, r3, #25
 800812a:	bf48      	it	mi
 800812c:	b2ad      	uxthmi	r5, r5
 800812e:	e7e6      	b.n	80080fe <_printf_i+0x182>
 8008130:	4616      	mov	r6, r2
 8008132:	e7bb      	b.n	80080ac <_printf_i+0x130>
 8008134:	680b      	ldr	r3, [r1, #0]
 8008136:	6826      	ldr	r6, [r4, #0]
 8008138:	6960      	ldr	r0, [r4, #20]
 800813a:	1d1d      	adds	r5, r3, #4
 800813c:	600d      	str	r5, [r1, #0]
 800813e:	0635      	lsls	r5, r6, #24
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	d501      	bpl.n	8008148 <_printf_i+0x1cc>
 8008144:	6018      	str	r0, [r3, #0]
 8008146:	e002      	b.n	800814e <_printf_i+0x1d2>
 8008148:	0671      	lsls	r1, r6, #25
 800814a:	d5fb      	bpl.n	8008144 <_printf_i+0x1c8>
 800814c:	8018      	strh	r0, [r3, #0]
 800814e:	2300      	movs	r3, #0
 8008150:	6123      	str	r3, [r4, #16]
 8008152:	4616      	mov	r6, r2
 8008154:	e7ba      	b.n	80080cc <_printf_i+0x150>
 8008156:	680b      	ldr	r3, [r1, #0]
 8008158:	1d1a      	adds	r2, r3, #4
 800815a:	600a      	str	r2, [r1, #0]
 800815c:	681e      	ldr	r6, [r3, #0]
 800815e:	6862      	ldr	r2, [r4, #4]
 8008160:	2100      	movs	r1, #0
 8008162:	4630      	mov	r0, r6
 8008164:	f7f8 f8cc 	bl	8000300 <memchr>
 8008168:	b108      	cbz	r0, 800816e <_printf_i+0x1f2>
 800816a:	1b80      	subs	r0, r0, r6
 800816c:	6060      	str	r0, [r4, #4]
 800816e:	6863      	ldr	r3, [r4, #4]
 8008170:	6123      	str	r3, [r4, #16]
 8008172:	2300      	movs	r3, #0
 8008174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008178:	e7a8      	b.n	80080cc <_printf_i+0x150>
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	4632      	mov	r2, r6
 800817e:	4649      	mov	r1, r9
 8008180:	4640      	mov	r0, r8
 8008182:	47d0      	blx	sl
 8008184:	3001      	adds	r0, #1
 8008186:	d0ab      	beq.n	80080e0 <_printf_i+0x164>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	079b      	lsls	r3, r3, #30
 800818c:	d413      	bmi.n	80081b6 <_printf_i+0x23a>
 800818e:	68e0      	ldr	r0, [r4, #12]
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	4298      	cmp	r0, r3
 8008194:	bfb8      	it	lt
 8008196:	4618      	movlt	r0, r3
 8008198:	e7a4      	b.n	80080e4 <_printf_i+0x168>
 800819a:	2301      	movs	r3, #1
 800819c:	4632      	mov	r2, r6
 800819e:	4649      	mov	r1, r9
 80081a0:	4640      	mov	r0, r8
 80081a2:	47d0      	blx	sl
 80081a4:	3001      	adds	r0, #1
 80081a6:	d09b      	beq.n	80080e0 <_printf_i+0x164>
 80081a8:	3501      	adds	r5, #1
 80081aa:	68e3      	ldr	r3, [r4, #12]
 80081ac:	9903      	ldr	r1, [sp, #12]
 80081ae:	1a5b      	subs	r3, r3, r1
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	dcf2      	bgt.n	800819a <_printf_i+0x21e>
 80081b4:	e7eb      	b.n	800818e <_printf_i+0x212>
 80081b6:	2500      	movs	r5, #0
 80081b8:	f104 0619 	add.w	r6, r4, #25
 80081bc:	e7f5      	b.n	80081aa <_printf_i+0x22e>
 80081be:	bf00      	nop
 80081c0:	08008b81 	.word	0x08008b81
 80081c4:	08008b92 	.word	0x08008b92

080081c8 <memcpy>:
 80081c8:	440a      	add	r2, r1
 80081ca:	4291      	cmp	r1, r2
 80081cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80081d0:	d100      	bne.n	80081d4 <memcpy+0xc>
 80081d2:	4770      	bx	lr
 80081d4:	b510      	push	{r4, lr}
 80081d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081de:	4291      	cmp	r1, r2
 80081e0:	d1f9      	bne.n	80081d6 <memcpy+0xe>
 80081e2:	bd10      	pop	{r4, pc}

080081e4 <memmove>:
 80081e4:	4288      	cmp	r0, r1
 80081e6:	b510      	push	{r4, lr}
 80081e8:	eb01 0402 	add.w	r4, r1, r2
 80081ec:	d902      	bls.n	80081f4 <memmove+0x10>
 80081ee:	4284      	cmp	r4, r0
 80081f0:	4623      	mov	r3, r4
 80081f2:	d807      	bhi.n	8008204 <memmove+0x20>
 80081f4:	1e43      	subs	r3, r0, #1
 80081f6:	42a1      	cmp	r1, r4
 80081f8:	d008      	beq.n	800820c <memmove+0x28>
 80081fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008202:	e7f8      	b.n	80081f6 <memmove+0x12>
 8008204:	4402      	add	r2, r0
 8008206:	4601      	mov	r1, r0
 8008208:	428a      	cmp	r2, r1
 800820a:	d100      	bne.n	800820e <memmove+0x2a>
 800820c:	bd10      	pop	{r4, pc}
 800820e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008216:	e7f7      	b.n	8008208 <memmove+0x24>

08008218 <_free_r>:
 8008218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800821a:	2900      	cmp	r1, #0
 800821c:	d048      	beq.n	80082b0 <_free_r+0x98>
 800821e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008222:	9001      	str	r0, [sp, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f1a1 0404 	sub.w	r4, r1, #4
 800822a:	bfb8      	it	lt
 800822c:	18e4      	addlt	r4, r4, r3
 800822e:	f000 f8d3 	bl	80083d8 <__malloc_lock>
 8008232:	4a20      	ldr	r2, [pc, #128]	; (80082b4 <_free_r+0x9c>)
 8008234:	9801      	ldr	r0, [sp, #4]
 8008236:	6813      	ldr	r3, [r2, #0]
 8008238:	4615      	mov	r5, r2
 800823a:	b933      	cbnz	r3, 800824a <_free_r+0x32>
 800823c:	6063      	str	r3, [r4, #4]
 800823e:	6014      	str	r4, [r2, #0]
 8008240:	b003      	add	sp, #12
 8008242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008246:	f000 b8cd 	b.w	80083e4 <__malloc_unlock>
 800824a:	42a3      	cmp	r3, r4
 800824c:	d90b      	bls.n	8008266 <_free_r+0x4e>
 800824e:	6821      	ldr	r1, [r4, #0]
 8008250:	1862      	adds	r2, r4, r1
 8008252:	4293      	cmp	r3, r2
 8008254:	bf04      	itt	eq
 8008256:	681a      	ldreq	r2, [r3, #0]
 8008258:	685b      	ldreq	r3, [r3, #4]
 800825a:	6063      	str	r3, [r4, #4]
 800825c:	bf04      	itt	eq
 800825e:	1852      	addeq	r2, r2, r1
 8008260:	6022      	streq	r2, [r4, #0]
 8008262:	602c      	str	r4, [r5, #0]
 8008264:	e7ec      	b.n	8008240 <_free_r+0x28>
 8008266:	461a      	mov	r2, r3
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	b10b      	cbz	r3, 8008270 <_free_r+0x58>
 800826c:	42a3      	cmp	r3, r4
 800826e:	d9fa      	bls.n	8008266 <_free_r+0x4e>
 8008270:	6811      	ldr	r1, [r2, #0]
 8008272:	1855      	adds	r5, r2, r1
 8008274:	42a5      	cmp	r5, r4
 8008276:	d10b      	bne.n	8008290 <_free_r+0x78>
 8008278:	6824      	ldr	r4, [r4, #0]
 800827a:	4421      	add	r1, r4
 800827c:	1854      	adds	r4, r2, r1
 800827e:	42a3      	cmp	r3, r4
 8008280:	6011      	str	r1, [r2, #0]
 8008282:	d1dd      	bne.n	8008240 <_free_r+0x28>
 8008284:	681c      	ldr	r4, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	6053      	str	r3, [r2, #4]
 800828a:	4421      	add	r1, r4
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	e7d7      	b.n	8008240 <_free_r+0x28>
 8008290:	d902      	bls.n	8008298 <_free_r+0x80>
 8008292:	230c      	movs	r3, #12
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	e7d3      	b.n	8008240 <_free_r+0x28>
 8008298:	6825      	ldr	r5, [r4, #0]
 800829a:	1961      	adds	r1, r4, r5
 800829c:	428b      	cmp	r3, r1
 800829e:	bf04      	itt	eq
 80082a0:	6819      	ldreq	r1, [r3, #0]
 80082a2:	685b      	ldreq	r3, [r3, #4]
 80082a4:	6063      	str	r3, [r4, #4]
 80082a6:	bf04      	itt	eq
 80082a8:	1949      	addeq	r1, r1, r5
 80082aa:	6021      	streq	r1, [r4, #0]
 80082ac:	6054      	str	r4, [r2, #4]
 80082ae:	e7c7      	b.n	8008240 <_free_r+0x28>
 80082b0:	b003      	add	sp, #12
 80082b2:	bd30      	pop	{r4, r5, pc}
 80082b4:	24000098 	.word	0x24000098

080082b8 <_malloc_r>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	1ccd      	adds	r5, r1, #3
 80082bc:	f025 0503 	bic.w	r5, r5, #3
 80082c0:	3508      	adds	r5, #8
 80082c2:	2d0c      	cmp	r5, #12
 80082c4:	bf38      	it	cc
 80082c6:	250c      	movcc	r5, #12
 80082c8:	2d00      	cmp	r5, #0
 80082ca:	4606      	mov	r6, r0
 80082cc:	db01      	blt.n	80082d2 <_malloc_r+0x1a>
 80082ce:	42a9      	cmp	r1, r5
 80082d0:	d903      	bls.n	80082da <_malloc_r+0x22>
 80082d2:	230c      	movs	r3, #12
 80082d4:	6033      	str	r3, [r6, #0]
 80082d6:	2000      	movs	r0, #0
 80082d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082da:	f000 f87d 	bl	80083d8 <__malloc_lock>
 80082de:	4921      	ldr	r1, [pc, #132]	; (8008364 <_malloc_r+0xac>)
 80082e0:	680a      	ldr	r2, [r1, #0]
 80082e2:	4614      	mov	r4, r2
 80082e4:	b99c      	cbnz	r4, 800830e <_malloc_r+0x56>
 80082e6:	4f20      	ldr	r7, [pc, #128]	; (8008368 <_malloc_r+0xb0>)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	b923      	cbnz	r3, 80082f6 <_malloc_r+0x3e>
 80082ec:	4621      	mov	r1, r4
 80082ee:	4630      	mov	r0, r6
 80082f0:	f000 f862 	bl	80083b8 <_sbrk_r>
 80082f4:	6038      	str	r0, [r7, #0]
 80082f6:	4629      	mov	r1, r5
 80082f8:	4630      	mov	r0, r6
 80082fa:	f000 f85d 	bl	80083b8 <_sbrk_r>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	d123      	bne.n	800834a <_malloc_r+0x92>
 8008302:	230c      	movs	r3, #12
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	4630      	mov	r0, r6
 8008308:	f000 f86c 	bl	80083e4 <__malloc_unlock>
 800830c:	e7e3      	b.n	80082d6 <_malloc_r+0x1e>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	1b5b      	subs	r3, r3, r5
 8008312:	d417      	bmi.n	8008344 <_malloc_r+0x8c>
 8008314:	2b0b      	cmp	r3, #11
 8008316:	d903      	bls.n	8008320 <_malloc_r+0x68>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	441c      	add	r4, r3
 800831c:	6025      	str	r5, [r4, #0]
 800831e:	e004      	b.n	800832a <_malloc_r+0x72>
 8008320:	6863      	ldr	r3, [r4, #4]
 8008322:	42a2      	cmp	r2, r4
 8008324:	bf0c      	ite	eq
 8008326:	600b      	streq	r3, [r1, #0]
 8008328:	6053      	strne	r3, [r2, #4]
 800832a:	4630      	mov	r0, r6
 800832c:	f000 f85a 	bl	80083e4 <__malloc_unlock>
 8008330:	f104 000b 	add.w	r0, r4, #11
 8008334:	1d23      	adds	r3, r4, #4
 8008336:	f020 0007 	bic.w	r0, r0, #7
 800833a:	1ac2      	subs	r2, r0, r3
 800833c:	d0cc      	beq.n	80082d8 <_malloc_r+0x20>
 800833e:	1a1b      	subs	r3, r3, r0
 8008340:	50a3      	str	r3, [r4, r2]
 8008342:	e7c9      	b.n	80082d8 <_malloc_r+0x20>
 8008344:	4622      	mov	r2, r4
 8008346:	6864      	ldr	r4, [r4, #4]
 8008348:	e7cc      	b.n	80082e4 <_malloc_r+0x2c>
 800834a:	1cc4      	adds	r4, r0, #3
 800834c:	f024 0403 	bic.w	r4, r4, #3
 8008350:	42a0      	cmp	r0, r4
 8008352:	d0e3      	beq.n	800831c <_malloc_r+0x64>
 8008354:	1a21      	subs	r1, r4, r0
 8008356:	4630      	mov	r0, r6
 8008358:	f000 f82e 	bl	80083b8 <_sbrk_r>
 800835c:	3001      	adds	r0, #1
 800835e:	d1dd      	bne.n	800831c <_malloc_r+0x64>
 8008360:	e7cf      	b.n	8008302 <_malloc_r+0x4a>
 8008362:	bf00      	nop
 8008364:	24000098 	.word	0x24000098
 8008368:	2400009c 	.word	0x2400009c

0800836c <_realloc_r>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	4607      	mov	r7, r0
 8008370:	4614      	mov	r4, r2
 8008372:	460e      	mov	r6, r1
 8008374:	b921      	cbnz	r1, 8008380 <_realloc_r+0x14>
 8008376:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800837a:	4611      	mov	r1, r2
 800837c:	f7ff bf9c 	b.w	80082b8 <_malloc_r>
 8008380:	b922      	cbnz	r2, 800838c <_realloc_r+0x20>
 8008382:	f7ff ff49 	bl	8008218 <_free_r>
 8008386:	4625      	mov	r5, r4
 8008388:	4628      	mov	r0, r5
 800838a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838c:	f000 f830 	bl	80083f0 <_malloc_usable_size_r>
 8008390:	42a0      	cmp	r0, r4
 8008392:	d20f      	bcs.n	80083b4 <_realloc_r+0x48>
 8008394:	4621      	mov	r1, r4
 8008396:	4638      	mov	r0, r7
 8008398:	f7ff ff8e 	bl	80082b8 <_malloc_r>
 800839c:	4605      	mov	r5, r0
 800839e:	2800      	cmp	r0, #0
 80083a0:	d0f2      	beq.n	8008388 <_realloc_r+0x1c>
 80083a2:	4631      	mov	r1, r6
 80083a4:	4622      	mov	r2, r4
 80083a6:	f7ff ff0f 	bl	80081c8 <memcpy>
 80083aa:	4631      	mov	r1, r6
 80083ac:	4638      	mov	r0, r7
 80083ae:	f7ff ff33 	bl	8008218 <_free_r>
 80083b2:	e7e9      	b.n	8008388 <_realloc_r+0x1c>
 80083b4:	4635      	mov	r5, r6
 80083b6:	e7e7      	b.n	8008388 <_realloc_r+0x1c>

080083b8 <_sbrk_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d06      	ldr	r5, [pc, #24]	; (80083d4 <_sbrk_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7f8 ffde 	bl	8001384 <_sbrk>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_sbrk_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_sbrk_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	24000254 	.word	0x24000254

080083d8 <__malloc_lock>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__malloc_lock+0x8>)
 80083da:	f000 b811 	b.w	8008400 <__retarget_lock_acquire_recursive>
 80083de:	bf00      	nop
 80083e0:	2400025c 	.word	0x2400025c

080083e4 <__malloc_unlock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_unlock+0x8>)
 80083e6:	f000 b80c 	b.w	8008402 <__retarget_lock_release_recursive>
 80083ea:	bf00      	nop
 80083ec:	2400025c 	.word	0x2400025c

080083f0 <_malloc_usable_size_r>:
 80083f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f4:	1f18      	subs	r0, r3, #4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	bfbc      	itt	lt
 80083fa:	580b      	ldrlt	r3, [r1, r0]
 80083fc:	18c0      	addlt	r0, r0, r3
 80083fe:	4770      	bx	lr

08008400 <__retarget_lock_acquire_recursive>:
 8008400:	4770      	bx	lr

08008402 <__retarget_lock_release_recursive>:
 8008402:	4770      	bx	lr

08008404 <checkint>:
 8008404:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008408:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800840c:	429a      	cmp	r2, r3
 800840e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008410:	dd2b      	ble.n	800846a <checkint+0x66>
 8008412:	f240 4333 	movw	r3, #1075	; 0x433
 8008416:	429a      	cmp	r2, r3
 8008418:	dc25      	bgt.n	8008466 <checkint+0x62>
 800841a:	1a9b      	subs	r3, r3, r2
 800841c:	f1a3 0620 	sub.w	r6, r3, #32
 8008420:	f04f 32ff 	mov.w	r2, #4294967295
 8008424:	fa02 f606 	lsl.w	r6, r2, r6
 8008428:	fa02 f403 	lsl.w	r4, r2, r3
 800842c:	f1c3 0520 	rsb	r5, r3, #32
 8008430:	4334      	orrs	r4, r6
 8008432:	fa22 f505 	lsr.w	r5, r2, r5
 8008436:	432c      	orrs	r4, r5
 8008438:	409a      	lsls	r2, r3
 800843a:	ea20 0602 	bic.w	r6, r0, r2
 800843e:	ea21 0704 	bic.w	r7, r1, r4
 8008442:	ea56 0207 	orrs.w	r2, r6, r7
 8008446:	f1a3 0420 	sub.w	r4, r3, #32
 800844a:	f1c3 0220 	rsb	r2, r3, #32
 800844e:	d10c      	bne.n	800846a <checkint+0x66>
 8008450:	40d8      	lsrs	r0, r3
 8008452:	fa01 f302 	lsl.w	r3, r1, r2
 8008456:	4318      	orrs	r0, r3
 8008458:	40e1      	lsrs	r1, r4
 800845a:	4308      	orrs	r0, r1
 800845c:	f000 0301 	and.w	r3, r0, #1
 8008460:	f1c3 0002 	rsb	r0, r3, #2
 8008464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008466:	2002      	movs	r0, #2
 8008468:	e7fc      	b.n	8008464 <checkint+0x60>
 800846a:	2000      	movs	r0, #0
 800846c:	e7fa      	b.n	8008464 <checkint+0x60>
	...

08008470 <pow>:
 8008470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	ed2d 8b0a 	vpush	{d8-d12}
 8008478:	b09b      	sub	sp, #108	; 0x6c
 800847a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800847e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008482:	ed8d 1b00 	vstr	d1, [sp]
 8008486:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800848a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800848e:	f109 30ff 	add.w	r0, r9, #4294967295
 8008492:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8008496:	4288      	cmp	r0, r1
 8008498:	46cc      	mov	ip, r9
 800849a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800849e:	d806      	bhi.n	80084ae <pow+0x3e>
 80084a0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 80084a4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 80084a8:	297f      	cmp	r1, #127	; 0x7f
 80084aa:	f240 81ab 	bls.w	8008804 <pow+0x394>
 80084ae:	19b1      	adds	r1, r6, r6
 80084b0:	9104      	str	r1, [sp, #16]
 80084b2:	eb47 0107 	adc.w	r1, r7, r7
 80084b6:	9105      	str	r1, [sp, #20]
 80084b8:	9904      	ldr	r1, [sp, #16]
 80084ba:	f111 31ff 	adds.w	r1, r1, #4294967295
 80084be:	460a      	mov	r2, r1
 80084c0:	9905      	ldr	r1, [sp, #20]
 80084c2:	f141 31ff 	adc.w	r1, r1, #4294967295
 80084c6:	460b      	mov	r3, r1
 80084c8:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 80084cc:	f06f 0001 	mvn.w	r0, #1
 80084d0:	4299      	cmp	r1, r3
 80084d2:	bf08      	it	eq
 80084d4:	4290      	cmpeq	r0, r2
 80084d6:	d260      	bcs.n	800859a <pow+0x12a>
 80084d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084dc:	4313      	orrs	r3, r2
 80084de:	d11a      	bne.n	8008516 <pow+0xa6>
 80084e0:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 80084e4:	1923      	adds	r3, r4, r4
 80084e6:	930c      	str	r3, [sp, #48]	; 0x30
 80084e8:	eb42 0302 	adc.w	r3, r2, r2
 80084ec:	930d      	str	r3, [sp, #52]	; 0x34
 80084ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084f2:	4bcf      	ldr	r3, [pc, #828]	; (8008830 <pow+0x3c0>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	428b      	cmp	r3, r1
 80084f8:	bf08      	it	eq
 80084fa:	4282      	cmpeq	r2, r0
 80084fc:	f080 8265 	bcs.w	80089ca <pow+0x55a>
 8008500:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008504:	ed9d 6b00 	vldr	d6, [sp]
 8008508:	ee37 0b06 	vadd.f64	d0, d7, d6
 800850c:	b01b      	add	sp, #108	; 0x6c
 800850e:	ecbd 8b0a 	vpop	{d8-d12}
 8008512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	49c7      	ldr	r1, [pc, #796]	; (8008834 <pow+0x3c4>)
 8008518:	2000      	movs	r0, #0
 800851a:	428d      	cmp	r5, r1
 800851c:	bf08      	it	eq
 800851e:	4284      	cmpeq	r4, r0
 8008520:	d10b      	bne.n	800853a <pow+0xca>
 8008522:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008526:	19b3      	adds	r3, r6, r6
 8008528:	930e      	str	r3, [sp, #56]	; 0x38
 800852a:	eb42 0302 	adc.w	r3, r2, r2
 800852e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008530:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008534:	4bbe      	ldr	r3, [pc, #760]	; (8008830 <pow+0x3c0>)
 8008536:	2200      	movs	r2, #0
 8008538:	e7dd      	b.n	80084f6 <pow+0x86>
 800853a:	1921      	adds	r1, r4, r4
 800853c:	9106      	str	r1, [sp, #24]
 800853e:	eb45 0105 	adc.w	r1, r5, r5
 8008542:	9107      	str	r1, [sp, #28]
 8008544:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008548:	49bb      	ldr	r1, [pc, #748]	; (8008838 <pow+0x3c8>)
 800854a:	2000      	movs	r0, #0
 800854c:	42a1      	cmp	r1, r4
 800854e:	bf08      	it	eq
 8008550:	4298      	cmpeq	r0, r3
 8008552:	d3d5      	bcc.n	8008500 <pow+0x90>
 8008554:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008558:	428c      	cmp	r4, r1
 800855a:	bf08      	it	eq
 800855c:	4283      	cmpeq	r3, r0
 800855e:	d1cf      	bne.n	8008500 <pow+0x90>
 8008560:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008564:	49b5      	ldr	r1, [pc, #724]	; (800883c <pow+0x3cc>)
 8008566:	2000      	movs	r0, #0
 8008568:	428c      	cmp	r4, r1
 800856a:	bf08      	it	eq
 800856c:	4283      	cmpeq	r3, r0
 800856e:	f000 822c 	beq.w	80089ca <pow+0x55a>
 8008572:	49b3      	ldr	r1, [pc, #716]	; (8008840 <pow+0x3d0>)
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	42a1      	cmp	r1, r4
 800857a:	bf08      	it	eq
 800857c:	4298      	cmpeq	r0, r3
 800857e:	ea6f 0307 	mvn.w	r3, r7
 8008582:	bf34      	ite	cc
 8008584:	2201      	movcc	r2, #1
 8008586:	2200      	movcs	r2, #0
 8008588:	0fdb      	lsrs	r3, r3, #31
 800858a:	429a      	cmp	r2, r3
 800858c:	f040 821a 	bne.w	80089c4 <pow+0x554>
 8008590:	ed9d 7b00 	vldr	d7, [sp]
 8008594:	ee27 0b07 	vmul.f64	d0, d7, d7
 8008598:	e7b8      	b.n	800850c <pow+0x9c>
 800859a:	1923      	adds	r3, r4, r4
 800859c:	9308      	str	r3, [sp, #32]
 800859e:	eb45 0305 	adc.w	r3, r5, r5
 80085a2:	9309      	str	r3, [sp, #36]	; 0x24
 80085a4:	9b08      	ldr	r3, [sp, #32]
 80085a6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80085aa:	9310      	str	r3, [sp, #64]	; 0x40
 80085ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ae:	f143 33ff 	adc.w	r3, r3, #4294967295
 80085b2:	9311      	str	r3, [sp, #68]	; 0x44
 80085b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085b8:	4299      	cmp	r1, r3
 80085ba:	bf08      	it	eq
 80085bc:	4290      	cmpeq	r0, r2
 80085be:	d22d      	bcs.n	800861c <pow+0x1ac>
 80085c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085c4:	2c00      	cmp	r4, #0
 80085c6:	f175 0300 	sbcs.w	r3, r5, #0
 80085ca:	ee27 0b07 	vmul.f64	d0, d7, d7
 80085ce:	da16      	bge.n	80085fe <pow+0x18e>
 80085d0:	4630      	mov	r0, r6
 80085d2:	4639      	mov	r1, r7
 80085d4:	f7ff ff16 	bl	8008404 <checkint>
 80085d8:	2801      	cmp	r0, #1
 80085da:	d110      	bne.n	80085fe <pow+0x18e>
 80085dc:	eeb1 0b40 	vneg.f64	d0, d0
 80085e0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80085e4:	4323      	orrs	r3, r4
 80085e6:	d10c      	bne.n	8008602 <pow+0x192>
 80085e8:	2e00      	cmp	r6, #0
 80085ea:	f177 0300 	sbcs.w	r3, r7, #0
 80085ee:	da8d      	bge.n	800850c <pow+0x9c>
 80085f0:	b01b      	add	sp, #108	; 0x6c
 80085f2:	ecbd 8b0a 	vpop	{d8-d12}
 80085f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fa:	f000 ba29 	b.w	8008a50 <__math_divzero>
 80085fe:	2000      	movs	r0, #0
 8008600:	e7ee      	b.n	80085e0 <pow+0x170>
 8008602:	2e00      	cmp	r6, #0
 8008604:	f177 0300 	sbcs.w	r3, r7, #0
 8008608:	da80      	bge.n	800850c <pow+0x9c>
 800860a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800860e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8008612:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8008616:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800861a:	e777      	b.n	800850c <pow+0x9c>
 800861c:	2c00      	cmp	r4, #0
 800861e:	f175 0300 	sbcs.w	r3, r5, #0
 8008622:	da35      	bge.n	8008690 <pow+0x220>
 8008624:	4630      	mov	r0, r6
 8008626:	4639      	mov	r1, r7
 8008628:	f7ff feec 	bl	8008404 <checkint>
 800862c:	b940      	cbnz	r0, 8008640 <pow+0x1d0>
 800862e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008632:	b01b      	add	sp, #108	; 0x6c
 8008634:	ecbd 8b0a 	vpop	{d8-d12}
 8008638:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	f000 ba20 	b.w	8008a80 <__math_invalid>
 8008640:	2801      	cmp	r0, #1
 8008642:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008646:	bf14      	ite	ne
 8008648:	2000      	movne	r0, #0
 800864a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800864e:	461d      	mov	r5, r3
 8008650:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8008654:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8008658:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800865c:	2a7f      	cmp	r2, #127	; 0x7f
 800865e:	d933      	bls.n	80086c8 <pow+0x258>
 8008660:	4974      	ldr	r1, [pc, #464]	; (8008834 <pow+0x3c4>)
 8008662:	2000      	movs	r0, #0
 8008664:	428d      	cmp	r5, r1
 8008666:	bf08      	it	eq
 8008668:	4284      	cmpeq	r4, r0
 800866a:	f000 81ae 	beq.w	80089ca <pow+0x55a>
 800866e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008672:	4293      	cmp	r3, r2
 8008674:	d80e      	bhi.n	8008694 <pow+0x224>
 8008676:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800867a:	ed9d 7b00 	vldr	d7, [sp]
 800867e:	42a9      	cmp	r1, r5
 8008680:	bf08      	it	eq
 8008682:	42a0      	cmpeq	r0, r4
 8008684:	bf34      	ite	cc
 8008686:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800868a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800868e:	e73d      	b.n	800850c <pow+0x9c>
 8008690:	2000      	movs	r0, #0
 8008692:	e7df      	b.n	8008654 <pow+0x1e4>
 8008694:	42a9      	cmp	r1, r5
 8008696:	bf08      	it	eq
 8008698:	42a0      	cmpeq	r0, r4
 800869a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800869e:	bf2c      	ite	cs
 80086a0:	2301      	movcs	r3, #1
 80086a2:	2300      	movcc	r3, #0
 80086a4:	4590      	cmp	r8, r2
 80086a6:	bf8c      	ite	hi
 80086a8:	f04f 0800 	movhi.w	r8, #0
 80086ac:	f04f 0801 	movls.w	r8, #1
 80086b0:	4543      	cmp	r3, r8
 80086b2:	f04f 0000 	mov.w	r0, #0
 80086b6:	f000 80af 	beq.w	8008818 <pow+0x3a8>
 80086ba:	b01b      	add	sp, #108	; 0x6c
 80086bc:	ecbd 8b0a 	vpop	{d8-d12}
 80086c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	f000 b9bc 	b.w	8008a40 <__math_oflow>
 80086c8:	f1bc 0f00 	cmp.w	ip, #0
 80086cc:	d10e      	bne.n	80086ec <pow+0x27c>
 80086ce:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8008828 <pow+0x3b8>
 80086d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80086d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80086da:	ec57 6b17 	vmov	r6, r7, d7
 80086de:	4b59      	ldr	r3, [pc, #356]	; (8008844 <pow+0x3d4>)
 80086e0:	2100      	movs	r1, #0
 80086e2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80086e6:	1874      	adds	r4, r6, r1
 80086e8:	eb42 0503 	adc.w	r5, r2, r3
 80086ec:	2300      	movs	r3, #0
 80086ee:	18e3      	adds	r3, r4, r3
 80086f0:	4b55      	ldr	r3, [pc, #340]	; (8008848 <pow+0x3d8>)
 80086f2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80086f6:	eb45 0303 	adc.w	r3, r5, r3
 80086fa:	1519      	asrs	r1, r3, #20
 80086fc:	ee03 1a10 	vmov	s6, r1
 8008700:	0d1e      	lsrs	r6, r3, #20
 8008702:	2100      	movs	r1, #0
 8008704:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8008708:	0536      	lsls	r6, r6, #20
 800870a:	1a63      	subs	r3, r4, r1
 800870c:	9312      	str	r3, [sp, #72]	; 0x48
 800870e:	eb65 0306 	sbc.w	r3, r5, r6
 8008712:	9313      	str	r3, [sp, #76]	; 0x4c
 8008714:	4b4d      	ldr	r3, [pc, #308]	; (800884c <pow+0x3dc>)
 8008716:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800871a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800871e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8008722:	eea5 6b07 	vfma.f64	d6, d5, d7
 8008726:	ed93 7b00 	vldr	d7, [r3]
 800872a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800872e:	ed93 4b02 	vldr	d4, [r3, #8]
 8008732:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8008736:	eea3 5b07 	vfma.f64	d5, d3, d7
 800873a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800873e:	ee36 9b05 	vadd.f64	d9, d6, d5
 8008742:	ee35 5b49 	vsub.f64	d5, d5, d9
 8008746:	eea3 7b04 	vfma.f64	d7, d3, d4
 800874a:	ed93 4b04 	vldr	d4, [r3, #16]
 800874e:	ee35 5b06 	vadd.f64	d5, d5, d6
 8008752:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008756:	ee26 4b04 	vmul.f64	d4, d6, d4
 800875a:	ed93 3b08 	vldr	d3, [r3, #32]
 800875e:	ee26 0b04 	vmul.f64	d0, d6, d4
 8008762:	eeb0 8b40 	vmov.f64	d8, d0
 8008766:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800876a:	ed93 4b06 	vldr	d4, [r3, #24]
 800876e:	ee26 ab00 	vmul.f64	d10, d6, d0
 8008772:	ee39 1b00 	vadd.f64	d1, d9, d0
 8008776:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800877a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800877e:	ee39 9b41 	vsub.f64	d9, d9, d1
 8008782:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8008786:	ee37 8b08 	vadd.f64	d8, d7, d8
 800878a:	ee39 9b00 	vadd.f64	d9, d9, d0
 800878e:	eea6 3b02 	vfma.f64	d3, d6, d2
 8008792:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8008796:	ee38 9b09 	vadd.f64	d9, d8, d9
 800879a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800879e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 80087a2:	ed9d 6b00 	vldr	d6, [sp]
 80087a6:	eea0 3b02 	vfma.f64	d3, d0, d2
 80087aa:	eea0 4b03 	vfma.f64	d4, d0, d3
 80087ae:	eeaa 9b04 	vfma.f64	d9, d10, d4
 80087b2:	ee31 7b09 	vadd.f64	d7, d1, d9
 80087b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80087ba:	ed8d 6b02 	vstr	d6, [sp, #8]
 80087be:	eeb0 3b46 	vmov.f64	d3, d6
 80087c2:	ee31 1b47 	vsub.f64	d1, d1, d7
 80087c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087ca:	ee31 9b09 	vadd.f64	d9, d1, d9
 80087ce:	ed9d 6b00 	vldr	d6, [sp]
 80087d2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 80087d6:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 80087da:	193c      	adds	r4, r7, r4
 80087dc:	2c3e      	cmp	r4, #62	; 0x3e
 80087de:	ee96 3b07 	vfnms.f64	d3, d6, d7
 80087e2:	eea6 3b09 	vfma.f64	d3, d6, d9
 80087e6:	d934      	bls.n	8008852 <pow+0x3e2>
 80087e8:	428c      	cmp	r4, r1
 80087ea:	da0d      	bge.n	8008808 <pow+0x398>
 80087ec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80087f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087f4:	ee37 0b00 	vadd.f64	d0, d7, d0
 80087f8:	2800      	cmp	r0, #0
 80087fa:	f43f ae87 	beq.w	800850c <pow+0x9c>
 80087fe:	eeb1 0b40 	vneg.f64	d0, d0
 8008802:	e683      	b.n	800850c <pow+0x9c>
 8008804:	2000      	movs	r0, #0
 8008806:	e771      	b.n	80086ec <pow+0x27c>
 8008808:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800880c:	d920      	bls.n	8008850 <pow+0x3e0>
 800880e:	2a00      	cmp	r2, #0
 8008810:	f173 0300 	sbcs.w	r3, r3, #0
 8008814:	f6bf af51 	bge.w	80086ba <pow+0x24a>
 8008818:	b01b      	add	sp, #108	; 0x6c
 800881a:	ecbd 8b0a 	vpop	{d8-d12}
 800881e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008822:	f000 b905 	b.w	8008a30 <__math_uflow>
 8008826:	bf00      	nop
 8008828:	00000000 	.word	0x00000000
 800882c:	43300000 	.word	0x43300000
 8008830:	fff00000 	.word	0xfff00000
 8008834:	3ff00000 	.word	0x3ff00000
 8008838:	ffe00000 	.word	0xffe00000
 800883c:	7fe00000 	.word	0x7fe00000
 8008840:	7fdfffff 	.word	0x7fdfffff
 8008844:	fcc00000 	.word	0xfcc00000
 8008848:	c0196aab 	.word	0xc0196aab
 800884c:	08008ba8 	.word	0x08008ba8
 8008850:	460f      	mov	r7, r1
 8008852:	4e65      	ldr	r6, [pc, #404]	; (80089e8 <pow+0x578>)
 8008854:	ed9d 4b02 	vldr	d4, [sp, #8]
 8008858:	ed96 6b02 	vldr	d6, [r6, #8]
 800885c:	ed96 7b00 	vldr	d7, [r6]
 8008860:	eeb0 5b46 	vmov.f64	d5, d6
 8008864:	eea4 5b07 	vfma.f64	d5, d4, d7
 8008868:	ed8d 5b00 	vstr	d5, [sp]
 800886c:	ee35 6b46 	vsub.f64	d6, d5, d6
 8008870:	eeb0 5b44 	vmov.f64	d5, d4
 8008874:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008878:	ed96 7b04 	vldr	d7, [r6, #16]
 800887c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8008880:	eea6 5b07 	vfma.f64	d5, d6, d7
 8008884:	eeb0 7b45 	vmov.f64	d7, d5
 8008888:	ed96 5b06 	vldr	d5, [r6, #24]
 800888c:	1849      	adds	r1, r1, r1
 800888e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8008892:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8008896:	eea6 7b05 	vfma.f64	d7, d6, d5
 800889a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800889e:	ee33 3b07 	vadd.f64	d3, d3, d7
 80088a2:	ee23 6b03 	vmul.f64	d6, d3, d3
 80088a6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 80088aa:	ed96 5b08 	vldr	d5, [r6, #32]
 80088ae:	ee33 7b07 	vadd.f64	d7, d3, d7
 80088b2:	1814      	adds	r4, r2, r0
 80088b4:	0365      	lsls	r5, r4, #13
 80088b6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 80088ba:	eea3 5b04 	vfma.f64	d5, d3, d4
 80088be:	eea6 7b05 	vfma.f64	d7, d6, d5
 80088c2:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 80088c6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80088ca:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 80088ce:	2000      	movs	r0, #0
 80088d0:	eb10 0a04 	adds.w	sl, r0, r4
 80088d4:	eea3 5b04 	vfma.f64	d5, d3, d4
 80088d8:	eb45 0b0c 	adc.w	fp, r5, ip
 80088dc:	eea6 7b05 	vfma.f64	d7, d6, d5
 80088e0:	2f00      	cmp	r7, #0
 80088e2:	d16a      	bne.n	80089ba <pow+0x54a>
 80088e4:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 80088e8:	4639      	mov	r1, r7
 80088ea:	ea50 0301 	orrs.w	r3, r0, r1
 80088ee:	f04f 0300 	mov.w	r3, #0
 80088f2:	d115      	bne.n	8008920 <pow+0x4b0>
 80088f4:	eb1a 0303 	adds.w	r3, sl, r3
 80088f8:	ee0b 3a10 	vmov	s22, r3
 80088fc:	4b3b      	ldr	r3, [pc, #236]	; (80089ec <pow+0x57c>)
 80088fe:	ed9f 0b34 	vldr	d0, [pc, #208]	; 80089d0 <pow+0x560>
 8008902:	eb4b 0303 	adc.w	r3, fp, r3
 8008906:	ee0b 3a90 	vmov	s23, r3
 800890a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800890e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8008912:	b01b      	add	sp, #108	; 0x6c
 8008914:	ecbd 8b0a 	vpop	{d8-d12}
 8008918:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891c:	f000 b8c8 	b.w	8008ab0 <__math_check_oflow>
 8008920:	eb1a 0303 	adds.w	r3, sl, r3
 8008924:	930a      	str	r3, [sp, #40]	; 0x28
 8008926:	4b32      	ldr	r3, [pc, #200]	; (80089f0 <pow+0x580>)
 8008928:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800892c:	eb4b 0303 	adc.w	r3, fp, r3
 8008930:	930b      	str	r3, [sp, #44]	; 0x2c
 8008932:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008936:	ee27 6b05 	vmul.f64	d6, d7, d5
 800893a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800893e:	eeb0 3bc7 	vabs.f64	d3, d7
 8008942:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8008946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800894a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80089d8 <pow+0x568>
 800894e:	d52b      	bpl.n	80089a8 <pow+0x538>
 8008950:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008954:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8008960:	ee35 6b06 	vadd.f64	d6, d5, d6
 8008964:	bf48      	it	mi
 8008966:	eeb0 4b43 	vmovmi.f64	d4, d3
 800896a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800896e:	ee34 5b43 	vsub.f64	d5, d4, d3
 8008972:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008976:	ee37 7b06 	vadd.f64	d7, d7, d6
 800897a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800897e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8008982:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800898a:	d105      	bne.n	8008998 <pow+0x528>
 800898c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800898e:	463a      	mov	r2, r7
 8008990:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008994:	ec43 2b17 	vmov	d7, r2, r3
 8008998:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800899c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 80089a0:	ee26 6b00 	vmul.f64	d6, d6, d0
 80089a4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 80089a8:	ee27 0b00 	vmul.f64	d0, d7, d0
 80089ac:	b01b      	add	sp, #108	; 0x6c
 80089ae:	ecbd 8b0a 	vpop	{d8-d12}
 80089b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b6:	f000 b872 	b.w	8008a9e <__math_check_uflow>
 80089ba:	ec4b ab10 	vmov	d0, sl, fp
 80089be:	eea7 0b00 	vfma.f64	d0, d7, d0
 80089c2:	e5a3      	b.n	800850c <pow+0x9c>
 80089c4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80089e0 <pow+0x570>
 80089c8:	e5a0      	b.n	800850c <pow+0x9c>
 80089ca:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80089ce:	e59d      	b.n	800850c <pow+0x9c>
 80089d0:	00000000 	.word	0x00000000
 80089d4:	7f000000 	.word	0x7f000000
 80089d8:	00000000 	.word	0x00000000
 80089dc:	00100000 	.word	0x00100000
	...
 80089e8:	08009bf0 	.word	0x08009bf0
 80089ec:	c0f00000 	.word	0xc0f00000
 80089f0:	3fe00000 	.word	0x3fe00000

080089f4 <with_errno>:
 80089f4:	b513      	push	{r0, r1, r4, lr}
 80089f6:	4604      	mov	r4, r0
 80089f8:	ed8d 0b00 	vstr	d0, [sp]
 80089fc:	f7ff f8a2 	bl	8007b44 <__errno>
 8008a00:	ed9d 0b00 	vldr	d0, [sp]
 8008a04:	6004      	str	r4, [r0, #0]
 8008a06:	b002      	add	sp, #8
 8008a08:	bd10      	pop	{r4, pc}

08008a0a <xflow>:
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	b158      	cbz	r0, 8008a26 <xflow+0x1c>
 8008a0e:	eeb1 7b40 	vneg.f64	d7, d0
 8008a12:	ed8d 7b00 	vstr	d7, [sp]
 8008a16:	ed9d 7b00 	vldr	d7, [sp]
 8008a1a:	2022      	movs	r0, #34	; 0x22
 8008a1c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008a20:	b002      	add	sp, #8
 8008a22:	f7ff bfe7 	b.w	80089f4 <with_errno>
 8008a26:	eeb0 7b40 	vmov.f64	d7, d0
 8008a2a:	e7f2      	b.n	8008a12 <xflow+0x8>
 8008a2c:	0000      	movs	r0, r0
	...

08008a30 <__math_uflow>:
 8008a30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a38 <__math_uflow+0x8>
 8008a34:	f7ff bfe9 	b.w	8008a0a <xflow>
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	10000000 	.word	0x10000000

08008a40 <__math_oflow>:
 8008a40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a48 <__math_oflow+0x8>
 8008a44:	f7ff bfe1 	b.w	8008a0a <xflow>
 8008a48:	00000000 	.word	0x00000000
 8008a4c:	70000000 	.word	0x70000000

08008a50 <__math_divzero>:
 8008a50:	b082      	sub	sp, #8
 8008a52:	2800      	cmp	r0, #0
 8008a54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008a58:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8008a5c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8008a60:	ed8d 7b00 	vstr	d7, [sp]
 8008a64:	ed9d 0b00 	vldr	d0, [sp]
 8008a68:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8008a78 <__math_divzero+0x28>
 8008a6c:	2022      	movs	r0, #34	; 0x22
 8008a6e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8008a72:	b002      	add	sp, #8
 8008a74:	f7ff bfbe 	b.w	80089f4 <with_errno>
	...

08008a80 <__math_invalid>:
 8008a80:	eeb0 7b40 	vmov.f64	d7, d0
 8008a84:	eeb4 7b47 	vcmp.f64	d7, d7
 8008a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a8c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8008a90:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8008a94:	d602      	bvs.n	8008a9c <__math_invalid+0x1c>
 8008a96:	2021      	movs	r0, #33	; 0x21
 8008a98:	f7ff bfac 	b.w	80089f4 <with_errno>
 8008a9c:	4770      	bx	lr

08008a9e <__math_check_uflow>:
 8008a9e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa6:	d102      	bne.n	8008aae <__math_check_uflow+0x10>
 8008aa8:	2022      	movs	r0, #34	; 0x22
 8008aaa:	f7ff bfa3 	b.w	80089f4 <with_errno>
 8008aae:	4770      	bx	lr

08008ab0 <__math_check_oflow>:
 8008ab0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8008ad0 <__math_check_oflow+0x20>
 8008ab4:	eeb0 7bc0 	vabs.f64	d7, d0
 8008ab8:	eeb4 7b46 	vcmp.f64	d7, d6
 8008abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac0:	dd02      	ble.n	8008ac8 <__math_check_oflow+0x18>
 8008ac2:	2022      	movs	r0, #34	; 0x22
 8008ac4:	f7ff bf96 	b.w	80089f4 <with_errno>
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	f3af 8000 	nop.w
 8008ad0:	ffffffff 	.word	0xffffffff
 8008ad4:	7fefffff 	.word	0x7fefffff

08008ad8 <_init>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	bf00      	nop
 8008adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ade:	bc08      	pop	{r3}
 8008ae0:	469e      	mov	lr, r3
 8008ae2:	4770      	bx	lr

08008ae4 <_fini>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	bf00      	nop
 8008ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aea:	bc08      	pop	{r3}
 8008aec:	469e      	mov	lr, r3
 8008aee:	4770      	bx	lr
