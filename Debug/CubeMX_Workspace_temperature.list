
CubeMX_Workspace_temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  24000000  080074e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011dc  24000024  0800750c  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001200  0800750c  00021200  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   000224e5  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035cc  00000000  00000000  00042537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f0  00000000  00000000  00045b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ff8  00000000  00000000  00046bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032e25  00000000  00000000  00047bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015592  00000000  00000000  0007aa15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001511da  00000000  00000000  0008ffa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e1181  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004738  00000000  00000000  001e11d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000024 	.word	0x24000024
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007488 	.word	0x08007488

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000028 	.word	0x24000028
 80002e8:	08007488 	.word	0x08007488

080002ec <strlen>:
 80002ec:	4603      	mov	r3, r0
 80002ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d1fb      	bne.n	80002ee <strlen+0x2>
 80002f6:	1a18      	subs	r0, r3, r0
 80002f8:	3801      	subs	r0, #1
 80002fa:	4770      	bx	lr

080002fc <__aeabi_uldivmod>:
 80002fc:	b953      	cbnz	r3, 8000314 <__aeabi_uldivmod+0x18>
 80002fe:	b94a      	cbnz	r2, 8000314 <__aeabi_uldivmod+0x18>
 8000300:	2900      	cmp	r1, #0
 8000302:	bf08      	it	eq
 8000304:	2800      	cmpeq	r0, #0
 8000306:	bf1c      	itt	ne
 8000308:	f04f 31ff 	movne.w	r1, #4294967295
 800030c:	f04f 30ff 	movne.w	r0, #4294967295
 8000310:	f000 b96e 	b.w	80005f0 <__aeabi_idiv0>
 8000314:	f1ad 0c08 	sub.w	ip, sp, #8
 8000318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031c:	f000 f806 	bl	800032c <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4770      	bx	lr

0800032c <__udivmoddi4>:
 800032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000330:	9d08      	ldr	r5, [sp, #32]
 8000332:	4604      	mov	r4, r0
 8000334:	468c      	mov	ip, r1
 8000336:	2b00      	cmp	r3, #0
 8000338:	f040 8083 	bne.w	8000442 <__udivmoddi4+0x116>
 800033c:	428a      	cmp	r2, r1
 800033e:	4617      	mov	r7, r2
 8000340:	d947      	bls.n	80003d2 <__udivmoddi4+0xa6>
 8000342:	fab2 f282 	clz	r2, r2
 8000346:	b142      	cbz	r2, 800035a <__udivmoddi4+0x2e>
 8000348:	f1c2 0020 	rsb	r0, r2, #32
 800034c:	fa24 f000 	lsr.w	r0, r4, r0
 8000350:	4091      	lsls	r1, r2
 8000352:	4097      	lsls	r7, r2
 8000354:	ea40 0c01 	orr.w	ip, r0, r1
 8000358:	4094      	lsls	r4, r2
 800035a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800035e:	0c23      	lsrs	r3, r4, #16
 8000360:	fbbc f6f8 	udiv	r6, ip, r8
 8000364:	fa1f fe87 	uxth.w	lr, r7
 8000368:	fb08 c116 	mls	r1, r8, r6, ip
 800036c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000370:	fb06 f10e 	mul.w	r1, r6, lr
 8000374:	4299      	cmp	r1, r3
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x60>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f106 30ff 	add.w	r0, r6, #4294967295
 800037e:	f080 8119 	bcs.w	80005b4 <__udivmoddi4+0x288>
 8000382:	4299      	cmp	r1, r3
 8000384:	f240 8116 	bls.w	80005b4 <__udivmoddi4+0x288>
 8000388:	3e02      	subs	r6, #2
 800038a:	443b      	add	r3, r7
 800038c:	1a5b      	subs	r3, r3, r1
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb3 f0f8 	udiv	r0, r3, r8
 8000394:	fb08 3310 	mls	r3, r8, r0, r3
 8000398:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800039c:	fb00 fe0e 	mul.w	lr, r0, lr
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x8c>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 8105 	bcs.w	80005b8 <__udivmoddi4+0x28c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8102 	bls.w	80005b8 <__udivmoddi4+0x28c>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	2600      	movs	r6, #0
 80003c2:	b11d      	cbz	r5, 80003cc <__udivmoddi4+0xa0>
 80003c4:	40d4      	lsrs	r4, r2
 80003c6:	2300      	movs	r3, #0
 80003c8:	e9c5 4300 	strd	r4, r3, [r5]
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xaa>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	2a00      	cmp	r2, #0
 80003dc:	d150      	bne.n	8000480 <__udivmoddi4+0x154>
 80003de:	1bcb      	subs	r3, r1, r7
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f f887 	uxth.w	r8, r7
 80003e8:	2601      	movs	r6, #1
 80003ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ee:	0c21      	lsrs	r1, r4, #16
 80003f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f8:	fb08 f30c 	mul.w	r3, r8, ip
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d907      	bls.n	8000410 <__udivmoddi4+0xe4>
 8000400:	1879      	adds	r1, r7, r1
 8000402:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000406:	d202      	bcs.n	800040e <__udivmoddi4+0xe2>
 8000408:	428b      	cmp	r3, r1
 800040a:	f200 80e9 	bhi.w	80005e0 <__udivmoddi4+0x2b4>
 800040e:	4684      	mov	ip, r0
 8000410:	1ac9      	subs	r1, r1, r3
 8000412:	b2a3      	uxth	r3, r4
 8000414:	fbb1 f0fe 	udiv	r0, r1, lr
 8000418:	fb0e 1110 	mls	r1, lr, r0, r1
 800041c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000420:	fb08 f800 	mul.w	r8, r8, r0
 8000424:	45a0      	cmp	r8, r4
 8000426:	d907      	bls.n	8000438 <__udivmoddi4+0x10c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x10a>
 8000430:	45a0      	cmp	r8, r4
 8000432:	f200 80d9 	bhi.w	80005e8 <__udivmoddi4+0x2bc>
 8000436:	4618      	mov	r0, r3
 8000438:	eba4 0408 	sub.w	r4, r4, r8
 800043c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000440:	e7bf      	b.n	80003c2 <__udivmoddi4+0x96>
 8000442:	428b      	cmp	r3, r1
 8000444:	d909      	bls.n	800045a <__udivmoddi4+0x12e>
 8000446:	2d00      	cmp	r5, #0
 8000448:	f000 80b1 	beq.w	80005ae <__udivmoddi4+0x282>
 800044c:	2600      	movs	r6, #0
 800044e:	e9c5 0100 	strd	r0, r1, [r5]
 8000452:	4630      	mov	r0, r6
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	fab3 f683 	clz	r6, r3
 800045e:	2e00      	cmp	r6, #0
 8000460:	d14a      	bne.n	80004f8 <__udivmoddi4+0x1cc>
 8000462:	428b      	cmp	r3, r1
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0x140>
 8000466:	4282      	cmp	r2, r0
 8000468:	f200 80b8 	bhi.w	80005dc <__udivmoddi4+0x2b0>
 800046c:	1a84      	subs	r4, r0, r2
 800046e:	eb61 0103 	sbc.w	r1, r1, r3
 8000472:	2001      	movs	r0, #1
 8000474:	468c      	mov	ip, r1
 8000476:	2d00      	cmp	r5, #0
 8000478:	d0a8      	beq.n	80003cc <__udivmoddi4+0xa0>
 800047a:	e9c5 4c00 	strd	r4, ip, [r5]
 800047e:	e7a5      	b.n	80003cc <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f603 	lsr.w	r6, r0, r3
 8000488:	4097      	lsls	r7, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000492:	40d9      	lsrs	r1, r3
 8000494:	4330      	orrs	r0, r6
 8000496:	0c03      	lsrs	r3, r0, #16
 8000498:	fbb1 f6fe 	udiv	r6, r1, lr
 800049c:	fa1f f887 	uxth.w	r8, r7
 80004a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a8:	fb06 f108 	mul.w	r1, r6, r8
 80004ac:	4299      	cmp	r1, r3
 80004ae:	fa04 f402 	lsl.w	r4, r4, r2
 80004b2:	d909      	bls.n	80004c8 <__udivmoddi4+0x19c>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ba:	f080 808d 	bcs.w	80005d8 <__udivmoddi4+0x2ac>
 80004be:	4299      	cmp	r1, r3
 80004c0:	f240 808a 	bls.w	80005d8 <__udivmoddi4+0x2ac>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	443b      	add	r3, r7
 80004c8:	1a5b      	subs	r3, r3, r1
 80004ca:	b281      	uxth	r1, r0
 80004cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb00 f308 	mul.w	r3, r0, r8
 80004dc:	428b      	cmp	r3, r1
 80004de:	d907      	bls.n	80004f0 <__udivmoddi4+0x1c4>
 80004e0:	1879      	adds	r1, r7, r1
 80004e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e6:	d273      	bcs.n	80005d0 <__udivmoddi4+0x2a4>
 80004e8:	428b      	cmp	r3, r1
 80004ea:	d971      	bls.n	80005d0 <__udivmoddi4+0x2a4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4439      	add	r1, r7
 80004f0:	1acb      	subs	r3, r1, r3
 80004f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004f6:	e778      	b.n	80003ea <__udivmoddi4+0xbe>
 80004f8:	f1c6 0c20 	rsb	ip, r6, #32
 80004fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000500:	fa22 f30c 	lsr.w	r3, r2, ip
 8000504:	431c      	orrs	r4, r3
 8000506:	fa20 f70c 	lsr.w	r7, r0, ip
 800050a:	fa01 f306 	lsl.w	r3, r1, r6
 800050e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000512:	fa21 f10c 	lsr.w	r1, r1, ip
 8000516:	431f      	orrs	r7, r3
 8000518:	0c3b      	lsrs	r3, r7, #16
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fa1f f884 	uxth.w	r8, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800052a:	fb09 fa08 	mul.w	sl, r9, r8
 800052e:	458a      	cmp	sl, r1
 8000530:	fa02 f206 	lsl.w	r2, r2, r6
 8000534:	fa00 f306 	lsl.w	r3, r0, r6
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x220>
 800053a:	1861      	adds	r1, r4, r1
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d248      	bcs.n	80005d4 <__udivmoddi4+0x2a8>
 8000542:	458a      	cmp	sl, r1
 8000544:	d946      	bls.n	80005d4 <__udivmoddi4+0x2a8>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	4421      	add	r1, r4
 800054c:	eba1 010a 	sub.w	r1, r1, sl
 8000550:	b2bf      	uxth	r7, r7
 8000552:	fbb1 f0fe 	udiv	r0, r1, lr
 8000556:	fb0e 1110 	mls	r1, lr, r0, r1
 800055a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45b8      	cmp	r8, r7
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x24a>
 8000566:	19e7      	adds	r7, r4, r7
 8000568:	f100 31ff 	add.w	r1, r0, #4294967295
 800056c:	d22e      	bcs.n	80005cc <__udivmoddi4+0x2a0>
 800056e:	45b8      	cmp	r8, r7
 8000570:	d92c      	bls.n	80005cc <__udivmoddi4+0x2a0>
 8000572:	3802      	subs	r0, #2
 8000574:	4427      	add	r7, r4
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba7 0708 	sub.w	r7, r7, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454f      	cmp	r7, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	4649      	mov	r1, r9
 8000588:	d31a      	bcc.n	80005c0 <__udivmoddi4+0x294>
 800058a:	d017      	beq.n	80005bc <__udivmoddi4+0x290>
 800058c:	b15d      	cbz	r5, 80005a6 <__udivmoddi4+0x27a>
 800058e:	ebb3 020e 	subs.w	r2, r3, lr
 8000592:	eb67 0701 	sbc.w	r7, r7, r1
 8000596:	fa07 fc0c 	lsl.w	ip, r7, ip
 800059a:	40f2      	lsrs	r2, r6
 800059c:	ea4c 0202 	orr.w	r2, ip, r2
 80005a0:	40f7      	lsrs	r7, r6
 80005a2:	e9c5 2700 	strd	r2, r7, [r5]
 80005a6:	2600      	movs	r6, #0
 80005a8:	4631      	mov	r1, r6
 80005aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e70b      	b.n	80003cc <__udivmoddi4+0xa0>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e9      	b.n	800038c <__udivmoddi4+0x60>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6fd      	b.n	80003b8 <__udivmoddi4+0x8c>
 80005bc:	4543      	cmp	r3, r8
 80005be:	d2e5      	bcs.n	800058c <__udivmoddi4+0x260>
 80005c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c4:	eb69 0104 	sbc.w	r1, r9, r4
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7df      	b.n	800058c <__udivmoddi4+0x260>
 80005cc:	4608      	mov	r0, r1
 80005ce:	e7d2      	b.n	8000576 <__udivmoddi4+0x24a>
 80005d0:	4660      	mov	r0, ip
 80005d2:	e78d      	b.n	80004f0 <__udivmoddi4+0x1c4>
 80005d4:	4681      	mov	r9, r0
 80005d6:	e7b9      	b.n	800054c <__udivmoddi4+0x220>
 80005d8:	4666      	mov	r6, ip
 80005da:	e775      	b.n	80004c8 <__udivmoddi4+0x19c>
 80005dc:	4630      	mov	r0, r6
 80005de:	e74a      	b.n	8000476 <__udivmoddi4+0x14a>
 80005e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e4:	4439      	add	r1, r7
 80005e6:	e713      	b.n	8000410 <__udivmoddi4+0xe4>
 80005e8:	3802      	subs	r0, #2
 80005ea:	443c      	add	r4, r7
 80005ec:	e724      	b.n	8000438 <__udivmoddi4+0x10c>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Use local
	uint32_t holdMultipleRead[DATA_READ_LOOP] = {0};
 80005fe:	4b27      	ldr	r3, [pc, #156]	; (800069c <main+0xa8>)
 8000600:	f241 0208 	movw	r2, #4104	; 0x1008
 8000604:	443a      	add	r2, r7
 8000606:	4413      	add	r3, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	461a      	mov	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f006 ff31 	bl	8007478 <memset>

	for(int i=0; i<DATA_TRANSMIT_LENGTH; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	f241 0204 	movw	r2, #4100	; 0x1004
 800061c:	443a      	add	r2, r7
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	e014      	b.n	800064c <main+0x58>
		buffer_tfs[i] = i;
 8000622:	f241 0304 	movw	r3, #4100	; 0x1004
 8000626:	443b      	add	r3, r7
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	b299      	uxth	r1, r3
 800062c:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <main+0xac>)
 800062e:	f241 0304 	movw	r3, #4100	; 0x1004
 8000632:	443b      	add	r3, r7
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<DATA_TRANSMIT_LENGTH; i++){
 800063a:	f241 0304 	movw	r3, #4100	; 0x1004
 800063e:	443b      	add	r3, r7
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	f241 0204 	movw	r2, #4100	; 0x1004
 8000648:	443a      	add	r2, r7
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	f241 0304 	movw	r3, #4100	; 0x1004
 8000650:	443b      	add	r3, r7
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000658:	dbe3      	blt.n	8000622 <main+0x2e>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fd77 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f825 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 fa1b 	bl	8000a9c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000666:	f000 f89f 	bl	80007a8 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 800066a:	f000 f9ab 	bl	80009c4 <MX_USART3_UART_Init>
  MX_RNG_Init();
 800066e:	f000 f901 	bl	8000874 <MX_RNG_Init>
  MX_RTC_Init();
 8000672:	f000 f915 	bl	80008a0 <MX_RTC_Init>
//  MX_IWDG1_Init();
  HAL_Delay(1000);
 8000676:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067a:	f000 fdf9 	bl	8001270 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <main+0xb0>)
 8000686:	f001 ff6f 	bl	8002568 <HAL_GPIO_WritePin>
  MX_WWDG1_Init();
 800068a:	f000 f9e7 	bl	8000a5c <MX_WWDG1_Init>
//
//	HAL_UART_Transmit(&huart3, "\n", 1, UART_TIMEOUT);

//	HAL_Delay(1000);

	  HAL_Delay(22);
 800068e:	2016      	movs	r0, #22
 8000690:	f000 fdee 	bl	8001270 <HAL_Delay>
	  HAL_WWDG_Refresh(&hwwdg1);
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <main+0xb4>)
 8000696:	f006 febb 	bl	8007410 <HAL_WWDG_Refresh>
	  HAL_Delay(22);
 800069a:	e7f8      	b.n	800068e <main+0x9a>
 800069c:	ffffeffc 	.word	0xffffeffc
 80006a0:	24000040 	.word	0x24000040
 80006a4:	58020400 	.word	0x58020400
 80006a8:	240011e8 	.word	0x240011e8

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09c      	sub	sp, #112	; 0x70
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b6:	224c      	movs	r2, #76	; 0x4c
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 fedc 	bl	8007478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2220      	movs	r2, #32
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 fed6 	bl	8007478 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006cc:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <SystemClock_Config+0xf4>)
 80006ce:	f04f 32ff 	mov.w	r2, #4294967295
 80006d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006d6:	2004      	movs	r0, #4
 80006d8:	f001 ff70 	bl	80025bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <SystemClock_Config+0xf8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a2f      	ldr	r2, [pc, #188]	; (80007a4 <SystemClock_Config+0xf8>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <SystemClock_Config+0xf8>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f8:	bf00      	nop
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <SystemClock_Config+0xf8>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000706:	d1f8      	bne.n	80006fa <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xf4>)
 800070a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070c:	4a24      	ldr	r2, [pc, #144]	; (80007a0 <SystemClock_Config+0xf4>)
 800070e:	f023 0303 	bic.w	r3, r3, #3
 8000712:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000714:	232a      	movs	r3, #42	; 0x2a
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000718:	2301      	movs	r3, #1
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000744:	230c      	movs	r3, #12
 8000746:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000748:	2300      	movs	r3, #0
 800074a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4618      	mov	r0, r3
 8000756:	f001 ff8b 	bl	8002670 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000760:	f000 fabe 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	233f      	movs	r3, #63	; 0x3f
 8000766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2303      	movs	r3, #3
 800076a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fb75 	bl	8002e78 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000794:	f000 faa4 	bl	8000ce0 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3770      	adds	r7, #112	; 0x70
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58024400 	.word	0x58024400
 80007a4:	58024800 	.word	0x58024800

080007a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007c2:	4a2a      	ldr	r2, [pc, #168]	; (800086c <MX_ADC2_Init+0xc4>)
 80007c4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007da:	2204      	movs	r2, #4
 80007dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC2_Init+0xc0>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_ADC2_Init+0xc0>)
 800080a:	2200      	movs	r2, #0
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_ADC2_Init+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_ADC2_Init+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800081c:	4812      	ldr	r0, [pc, #72]	; (8000868 <MX_ADC2_Init+0xc0>)
 800081e:	f000 fed7 	bl	80015d0 <HAL_ADC_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000828:	f000 fa5a 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_ADC2_Init+0xc8>)
 800082e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000830:	2306      	movs	r3, #6
 8000832:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000834:	2305      	movs	r3, #5
 8000836:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000838:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800083c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083e:	2304      	movs	r3, #4
 8000840:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_ADC2_Init+0xc0>)
 8000850:	f001 f818 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800085a:	f000 fa41 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	24001108 	.word	0x24001108
 800086c:	40022100 	.word	0x40022100
 8000870:	cb840000 	.word	0xcb840000

08000874 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_RNG_Init+0x24>)
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <MX_RNG_Init+0x28>)
 800087c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_RNG_Init+0x24>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_RNG_Init+0x24>)
 8000886:	f004 ff2d 	bl	80056e4 <HAL_RNG_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000890:	f000 fa26 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	240011bc 	.word	0x240011bc
 800089c:	48021800 	.word	0x48021800

080008a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	; 0x40
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2228      	movs	r2, #40	; 0x28
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f006 fdd9 	bl	8007478 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008c6:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <MX_RTC_Init+0x11c>)
 80008c8:	4a3d      	ldr	r2, [pc, #244]	; (80009c0 <MX_RTC_Init+0x120>)
 80008ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008cc:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MX_RTC_Init+0x11c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008d2:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <MX_RTC_Init+0x11c>)
 80008d4:	227f      	movs	r2, #127	; 0x7f
 80008d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008d8:	4b38      	ldr	r3, [pc, #224]	; (80009bc <MX_RTC_Init+0x11c>)
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <MX_RTC_Init+0x11c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <MX_RTC_Init+0x11c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <MX_RTC_Init+0x11c>)
 80008ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008f2:	4b32      	ldr	r3, [pc, #200]	; (80009bc <MX_RTC_Init+0x11c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008f8:	4830      	ldr	r0, [pc, #192]	; (80009bc <MX_RTC_Init+0x11c>)
 80008fa:	f004 ff99 	bl	8005830 <HAL_RTC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8000904:	f000 f9ec 	bl	8000ce0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000908:	2300      	movs	r3, #0
 800090a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800090e:	2300      	movs	r3, #0
 8000910:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800091a:	2300      	movs	r3, #0
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000926:	2201      	movs	r2, #1
 8000928:	4619      	mov	r1, r3
 800092a:	4824      	ldr	r0, [pc, #144]	; (80009bc <MX_RTC_Init+0x11c>)
 800092c:	f004 fffc 	bl	8005928 <HAL_RTC_SetTime>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000936:	f000 f9d3 	bl	8000ce0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800093a:	2302      	movs	r3, #2
 800093c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8000940:	2309      	movs	r3, #9
 8000942:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x20;
 8000946:	2320      	movs	r3, #32
 8000948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x22;
 800094c:	2322      	movs	r3, #34	; 0x22
 800094e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000956:	2201      	movs	r2, #1
 8000958:	4619      	mov	r1, r3
 800095a:	4818      	ldr	r0, [pc, #96]	; (80009bc <MX_RTC_Init+0x11c>)
 800095c:	f005 f882 	bl	8005a64 <HAL_RTC_SetDate>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_RTC_Init+0xca>
  {
    Error_Handler();
 8000966:	f000 f9bb 	bl	8000ce0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x11;
 800096a:	2311      	movs	r3, #17
 800096c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x12;
 800096e:	2312      	movs	r3, #18
 8000970:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000972:	2300      	movs	r3, #0
 8000974:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800098e:	2301      	movs	r3, #1
 8000990:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	2201      	movs	r2, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_RTC_Init+0x11c>)
 80009a2:	f005 f8e7 	bl	8005b74 <HAL_RTC_SetAlarm_IT>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 80009ac:	f000 f998 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	HAL_PWR_EnableBkUpAccess();
 80009b0:	f001 fdf4 	bl	800259c <HAL_PWR_EnableBkUpAccess>
  /* USER CODE END RTC_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3740      	adds	r7, #64	; 0x40
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	24001194 	.word	0x24001194
 80009c0:	58004000 	.word	0x58004000

080009c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <MX_USART3_UART_Init+0x94>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0c:	4811      	ldr	r0, [pc, #68]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a0e:	f005 fadf 	bl	8005fd0 <HAL_UART_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a18:	f000 f962 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a20:	f006 fc08 	bl	8007234 <HAL_UARTEx_SetTxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2a:	f000 f959 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a32:	f006 fc3d 	bl	80072b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a3c:	f000 f950 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a42:	f006 fbbe 	bl	80071c2 <HAL_UARTEx_DisableFifoMode>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 f948 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	24001078 	.word	0x24001078
 8000a58:	40004800 	.word	0x40004800

08000a5c <MX_WWDG1_Init>:
  * @brief WWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG1_Init 0 */

  /* USER CODE BEGIN WWDG1_Init 1 */

  /* USER CODE END WWDG1_Init 1 */
  hwwdg1.Instance = WWDG1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_WWDG1_Init+0x38>)
 8000a62:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <MX_WWDG1_Init+0x3c>)
 8000a64:	601a      	str	r2, [r3, #0]
  hwwdg1.Init.Prescaler = WWDG_PRESCALER_16;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_WWDG1_Init+0x38>)
 8000a68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6c:	605a      	str	r2, [r3, #4]
  hwwdg1.Init.Window = 71;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_WWDG1_Init+0x38>)
 8000a70:	2247      	movs	r2, #71	; 0x47
 8000a72:	609a      	str	r2, [r3, #8]
  hwwdg1.Init.Counter = 83;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_WWDG1_Init+0x38>)
 8000a76:	2253      	movs	r2, #83	; 0x53
 8000a78:	60da      	str	r2, [r3, #12]
  hwwdg1.Init.EWIMode = WWDG_EWI_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_WWDG1_Init+0x38>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_WWDG1_Init+0x38>)
 8000a82:	f006 fca1 	bl	80073c8 <HAL_WWDG_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_WWDG1_Init+0x34>
  {
    Error_Handler();
 8000a8c:	f000 f928 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG1_Init 2 */

  /* USER CODE END WWDG1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	240011e8 	.word	0x240011e8
 8000a98:	50003000 	.word	0x50003000

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000ab4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab8:	4a77      	ldr	r2, [pc, #476]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ac2:	4b75      	ldr	r3, [pc, #468]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	623b      	str	r3, [r7, #32]
 8000ace:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad0:	4b71      	ldr	r3, [pc, #452]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000ad2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad6:	4a70      	ldr	r2, [pc, #448]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ae0:	4b6d      	ldr	r3, [pc, #436]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000ae2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000af0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af4:	4a68      	ldr	r2, [pc, #416]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000afe:	4b66      	ldr	r3, [pc, #408]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	4b62      	ldr	r3, [pc, #392]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b12:	4a61      	ldr	r2, [pc, #388]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b1c:	4b5e      	ldr	r3, [pc, #376]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	4b5b      	ldr	r3, [pc, #364]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b30:	4a59      	ldr	r2, [pc, #356]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b3a:	4b57      	ldr	r3, [pc, #348]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b40:	f003 0308 	and.w	r3, r3, #8
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b48:	4b53      	ldr	r3, [pc, #332]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4e:	4a52      	ldr	r2, [pc, #328]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b58:	4b4f      	ldr	r3, [pc, #316]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b4c      	ldr	r3, [pc, #304]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6c:	4a4a      	ldr	r2, [pc, #296]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b76:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b84:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8a:	4a43      	ldr	r2, [pc, #268]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b8c:	f043 0310 	orr.w	r3, r3, #16
 8000b90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b94:	4b40      	ldr	r3, [pc, #256]	; (8000c98 <MX_GPIO_Init+0x1fc>)
 8000b96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba8:	483c      	ldr	r0, [pc, #240]	; (8000c9c <MX_GPIO_Init+0x200>)
 8000baa:	f001 fcdd 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bb4:	483a      	ldr	r0, [pc, #232]	; (8000ca0 <MX_GPIO_Init+0x204>)
 8000bb6:	f001 fcd7 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4839      	ldr	r0, [pc, #228]	; (8000ca4 <MX_GPIO_Init+0x208>)
 8000bc0:	f001 fcd2 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4833      	ldr	r0, [pc, #204]	; (8000ca8 <MX_GPIO_Init+0x20c>)
 8000bda:	f001 fb15 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4829      	ldr	r0, [pc, #164]	; (8000c9c <MX_GPIO_Init+0x200>)
 8000bf8:	f001 fb06 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bfc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4822      	ldr	r0, [pc, #136]	; (8000ca0 <MX_GPIO_Init+0x204>)
 8000c16:	f001 faf7 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	481f      	ldr	r0, [pc, #124]	; (8000cac <MX_GPIO_Init+0x210>)
 8000c30:	f001 faea 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c46:	230a      	movs	r3, #10
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <MX_GPIO_Init+0x214>)
 8000c52:	f001 fad9 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <MX_GPIO_Init+0x214>)
 8000c70:	f001 faca 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c74:	2302      	movs	r3, #2
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_GPIO_Init+0x208>)
 8000c8c:	f001 fabc 	bl	8002208 <HAL_GPIO_Init>

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58021400 	.word	0x58021400
 8000ca0:	58020400 	.word	0x58020400
 8000ca4:	58021000 	.word	0x58021000
 8000ca8:	58020800 	.word	0x58020800
 8000cac:	58021800 	.word	0x58021800
 8000cb0:	58020000 	.word	0x58020000

08000cb4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)alarmMsg, strlen(alarmMsg), UART_TIMEOUT);
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <HAL_RTC_AlarmAEventCallback+0x24>)
 8000cbe:	f7ff fb15 	bl	80002ec <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	2364      	movs	r3, #100	; 0x64
 8000cc8:	4903      	ldr	r1, [pc, #12]	; (8000cd8 <HAL_RTC_AlarmAEventCallback+0x24>)
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <HAL_RTC_AlarmAEventCallback+0x28>)
 8000ccc:	f005 f9d0 	bl	8006070 <HAL_UART_Transmit>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	24000000 	.word	0x24000000
 8000cdc:	24001078 	.word	0x24001078

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_MspInit+0x30>)
 8000cf4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cf8:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x30>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x30>)
 8000d04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	58024400 	.word	0x58024400

08000d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0b2      	sub	sp, #200	; 0xc8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	22b8      	movs	r2, #184	; 0xb8
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f006 fba1 	bl	8007478 <memset>
  if(hadc->Instance==ADC2)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <HAL_ADC_MspInit+0x88>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d12e      	bne.n	8000d9e <HAL_ADC_MspInit+0x7e>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000d46:	2320      	movs	r3, #32
 8000d48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000d4a:	2381      	movs	r3, #129	; 0x81
 8000d4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fc0d 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000d7c:	f7ff ffb0 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_ADC_MspInit+0x8c>)
 8000d82:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_ADC_MspInit+0x8c>)
 8000d88:	f043 0320 	orr.w	r3, r3, #32
 8000d8c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_ADC_MspInit+0x8c>)
 8000d92:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	37c8      	adds	r7, #200	; 0xc8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40022100 	.word	0x40022100
 8000dac:	58024400 	.word	0x58024400

08000db0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0b2      	sub	sp, #200	; 0xc8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	22b8      	movs	r2, #184	; 0xb8
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 fb59 	bl	8007478 <memset>
  if(hrng->Instance==RNG)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <HAL_RNG_MspInit+0x68>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d11e      	bne.n	8000e0e <HAL_RNG_MspInit+0x5e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fbd5 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000dec:	f7ff ff78 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_RNG_MspInit+0x6c>)
 8000df2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_RNG_MspInit+0x6c>)
 8000df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfc:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_RNG_MspInit+0x6c>)
 8000e02:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	37c8      	adds	r7, #200	; 0xc8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	48021800 	.word	0x48021800
 8000e1c:	58024400 	.word	0x58024400

08000e20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0b0      	sub	sp, #192	; 0xc0
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	22b8      	movs	r2, #184	; 0xb8
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f006 fb21 	bl	8007478 <memset>
  if(hrtc->Instance==RTC)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <HAL_RTC_MspInit+0x68>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d11e      	bne.n	8000e7e <HAL_RTC_MspInit+0x5e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e44:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fb9c 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e5e:	f7ff ff3f 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_RTC_MspInit+0x6c>)
 8000e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e66:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <HAL_RTC_MspInit+0x6c>)
 8000e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2029      	movs	r0, #41	; 0x29
 8000e74:	f001 f993 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e78:	2029      	movs	r0, #41	; 0x29
 8000e7a:	f001 f9aa 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	37c0      	adds	r7, #192	; 0xc0
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	58004000 	.word	0x58004000
 8000e8c:	58024400 	.word	0x58024400

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0b8      	sub	sp, #224	; 0xe0
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	22b8      	movs	r2, #184	; 0xb8
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f006 fae1 	bl	8007478 <memset>
  if(huart->Instance==USART3)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a25      	ldr	r2, [pc, #148]	; (8000f50 <HAL_UART_MspInit+0xc0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d142      	bne.n	8000f46 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fb5e 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eda:	f7ff ff01 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000ee0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000ef0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000efe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f02:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000f0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f34:	2307      	movs	r3, #7
 8000f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_UART_MspInit+0xc8>)
 8000f42:	f001 f961 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	37e0      	adds	r7, #224	; 0xe0
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40004800 	.word	0x40004800
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020c00 	.word	0x58020c00

08000f5c <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <HAL_WWDG_MspInit+0x3c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d10e      	bne.n	8000f8c <HAL_WWDG_MspInit+0x30>
  {
  /* USER CODE BEGIN WWDG1_MspInit 0 */

  /* USER CODE END WWDG1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG1_CLK_ENABLE();
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_WWDG_MspInit+0x40>)
 8000f70:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000f74:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <HAL_WWDG_MspInit+0x40>)
 8000f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f7a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <HAL_WWDG_MspInit+0x40>)
 8000f80:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG1_MspInit 1 */

  /* USER CODE END WWDG1_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	50003000 	.word	0x50003000
 8000f9c:	58024400 	.word	0x58024400

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f920 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <RTC_Alarm_IRQHandler+0x10>)
 8000ffa:	f004 fef7 	bl	8005dec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	24001194 	.word	0x24001194

08001008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800100c:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <SystemInit+0xd0>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <SystemInit+0xd0>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <SystemInit+0xd4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	2b02      	cmp	r3, #2
 8001026:	d807      	bhi.n	8001038 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001028:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <SystemInit+0xd4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 030f 	bic.w	r3, r3, #15
 8001030:	4a2a      	ldr	r2, [pc, #168]	; (80010dc <SystemInit+0xd4>)
 8001032:	f043 0303 	orr.w	r3, r3, #3
 8001036:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <SystemInit+0xd8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a28      	ldr	r2, [pc, #160]	; (80010e0 <SystemInit+0xd8>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <SystemInit+0xd8>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <SystemInit+0xd8>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4924      	ldr	r1, [pc, #144]	; (80010e0 <SystemInit+0xd8>)
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <SystemInit+0xdc>)
 8001052:	4013      	ands	r3, r2
 8001054:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <SystemInit+0xd4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <SystemInit+0xd4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 030f 	bic.w	r3, r3, #15
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <SystemInit+0xd4>)
 800106c:	f043 0303 	orr.w	r3, r3, #3
 8001070:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <SystemInit+0xd8>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <SystemInit+0xd8>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <SystemInit+0xd8>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <SystemInit+0xd8>)
 8001086:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <SystemInit+0xe0>)
 8001088:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <SystemInit+0xd8>)
 800108c:	4a17      	ldr	r2, [pc, #92]	; (80010ec <SystemInit+0xe4>)
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <SystemInit+0xd8>)
 8001092:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <SystemInit+0xe8>)
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <SystemInit+0xd8>)
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <SystemInit+0xd8>)
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <SystemInit+0xe8>)
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <SystemInit+0xd8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <SystemInit+0xd8>)
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <SystemInit+0xe8>)
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <SystemInit+0xd8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <SystemInit+0xd8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <SystemInit+0xd8>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <SystemInit+0xd8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <SystemInit+0xec>)
 80010c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	52002000 	.word	0x52002000
 80010e0:	58024400 	.word	0x58024400
 80010e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80010e8:	02020200 	.word	0x02020200
 80010ec:	01ff0000 	.word	0x01ff0000
 80010f0:	01010280 	.word	0x01010280
 80010f4:	52004000 	.word	0x52004000

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010fc:	f7ff ff84 	bl	8001008 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	; (8001138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	; (8001144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001126:	f006 f983 	bl	8007430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fa63 	bl	80005f4 <main>
  bx  lr
 800112e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001134:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001138:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 800113c:	080074e8 	.word	0x080074e8
  ldr r2, =_sbss
 8001140:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8001144:	24001200 	.word	0x24001200

08001148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001152:	2003      	movs	r0, #3
 8001154:	f001 f818 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001158:	f002 f844 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 800115c:	4602      	mov	r2, r0
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_Init+0x68>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	4913      	ldr	r1, [pc, #76]	; (80011b8 <HAL_Init+0x6c>)
 800116a:	5ccb      	ldrb	r3, [r1, r3]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
 8001174:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_Init+0x68>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_Init+0x6c>)
 8001180:	5cd3      	ldrb	r3, [r2, r3]
 8001182:	f003 031f 	and.w	r3, r3, #31
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_Init+0x70>)
 800118e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001190:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_Init+0x74>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	2000      	movs	r0, #0
 8001198:	f000 f814 	bl	80011c4 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e002      	b.n	80011ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011a6:	f7ff fda1 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	58024400 	.word	0x58024400
 80011b8:	080074a0 	.word	0x080074a0
 80011bc:	24000018 	.word	0x24000018
 80011c0:	24000014 	.word	0x24000014

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_InitTick+0x60>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e021      	b.n	800121c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_InitTick+0x64>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_InitTick+0x60>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fffd 	bl	80021ee <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 ffc7 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_InitTick+0x68>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	24000020 	.word	0x24000020
 8001228:	24000014 	.word	0x24000014
 800122c:	2400001c 	.word	0x2400001c

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	24000020 	.word	0x24000020
 8001254:	240011fc 	.word	0x240011fc

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	240011fc 	.word	0x240011fc

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff ffee 	bl	8001258 <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001296:	bf00      	nop
 8001298:	f7ff ffde 	bl	8001258 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	24000020 	.word	0x24000020

080012b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	609a      	str	r2, [r3, #8]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3360      	adds	r3, #96	; 0x60
 8001332:	461a      	mov	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	430b      	orrs	r3, r1
 800134e:	431a      	orrs	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001354:	bf00      	nop
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	431a      	orrs	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	611a      	str	r2, [r3, #16]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001392:	b480      	push	{r7}
 8001394:	b087      	sub	sp, #28
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3360      	adds	r3, #96	; 0x60
 80013a2:	461a      	mov	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	601a      	str	r2, [r3, #0]
  }
}
 80013bc:	bf00      	nop
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3330      	adds	r3, #48	; 0x30
 80013d8:	461a      	mov	r2, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	4413      	add	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	211f      	movs	r1, #31
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	0e9b      	lsrs	r3, r3, #26
 8001400:	f003 011f 	and.w	r1, r3, #31
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	431a      	orrs	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3314      	adds	r3, #20
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	0e5b      	lsrs	r3, r3, #25
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	0d1b      	lsrs	r3, r3, #20
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	2107      	movs	r1, #7
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	401a      	ands	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	0d1b      	lsrs	r3, r3, #20
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	431a      	orrs	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800146a:	bf00      	nop
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0318 	and.w	r3, r3, #24
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800149c:	40d9      	lsrs	r1, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	400b      	ands	r3, r1
 80014a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014a6:	431a      	orrs	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	000fffff 	.word	0x000fffff

080014c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6093      	str	r3, [r2, #8]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	5fffffc0 	.word	0x5fffffc0

080014e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014f8:	d101      	bne.n	80014fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <LL_ADC_EnableInternalRegulator+0x24>)
 800151a:	4013      	ands	r3, r2
 800151c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	6fffffc0 	.word	0x6fffffc0

08001534 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001548:	d101      	bne.n	800154e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <LL_ADC_IsEnabled+0x18>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <LL_ADC_IsEnabled+0x1a>
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b04      	cmp	r3, #4
 8001594:	d101      	bne.n	800159a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d101      	bne.n	80015c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e138      	b.n	800185c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d109      	bne.n	800160c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fb91 	bl	8000d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff67 	bl	80014e4 <LL_ADC_IsDeepPowerDownEnabled>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff4d 	bl	80014c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff82 	bl	8001534 <LL_ADC_IsInternalRegulatorEnabled>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d114      	bne.n	8001660 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff66 	bl	800150c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001640:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_ADC_Init+0x294>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	4a88      	ldr	r2, [pc, #544]	; (8001868 <HAL_ADC_Init+0x298>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	3301      	adds	r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001652:	e002      	b.n	800165a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3b01      	subs	r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f9      	bne.n	8001654 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff65 	bl	8001534 <LL_ADC_IsInternalRegulatorEnabled>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10d      	bne.n	800168c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001674:	f043 0210 	orr.w	r2, r3, #16
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	f043 0201 	orr.w	r2, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff76 	bl	8001582 <LL_ADC_REG_IsConversionOngoing>
 8001696:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f040 80d2 	bne.w	800184a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f040 80ce 	bne.w	800184a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016b6:	f043 0202 	orr.w	r2, r3, #2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff4a 	bl	800155c <LL_ADC_IsEnabled>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d110      	bne.n	80016f0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016ce:	4867      	ldr	r0, [pc, #412]	; (800186c <HAL_ADC_Init+0x29c>)
 80016d0:	f7ff ff44 	bl	800155c <LL_ADC_IsEnabled>
 80016d4:	4604      	mov	r4, r0
 80016d6:	4866      	ldr	r0, [pc, #408]	; (8001870 <HAL_ADC_Init+0x2a0>)
 80016d8:	f7ff ff40 	bl	800155c <LL_ADC_IsEnabled>
 80016dc:	4603      	mov	r3, r0
 80016de:	4323      	orrs	r3, r4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4619      	mov	r1, r3
 80016ea:	4862      	ldr	r0, [pc, #392]	; (8001874 <HAL_ADC_Init+0x2a4>)
 80016ec:	f7ff fde4 	bl	80012b8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7d5b      	ldrb	r3, [r3, #21]
 80016f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016fa:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001700:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7f1b      	ldrb	r3, [r3, #28]
 8001706:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7f1b      	ldrb	r3, [r3, #28]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	3b01      	subs	r3, #1
 800171a:	045b      	lsls	r3, r3, #17
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <HAL_ADC_Init+0x2a8>)
 8001746:	4013      	ands	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	69b9      	ldr	r1, [r7, #24]
 800174e:	430b      	orrs	r3, r1
 8001750:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff13 	bl	8001582 <LL_ADC_REG_IsConversionOngoing>
 800175c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff20 	bl	80015a8 <LL_ADC_INJ_IsConversionOngoing>
 8001768:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d14a      	bne.n	8001806 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d147      	bne.n	8001806 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7d1b      	ldrb	r3, [r3, #20]
 800177a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	4b3c      	ldr	r3, [pc, #240]	; (800187c <HAL_ADC_Init+0x2ac>)
 800178c:	4013      	ands	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	430b      	orrs	r3, r1
 8001796:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d11b      	bne.n	80017da <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <HAL_ADC_Init+0x2b0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017b6:	3a01      	subs	r2, #1
 80017b8:	0411      	lsls	r1, r2, #16
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017be:	4311      	orrs	r1, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017c4:	4311      	orrs	r1, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017ca:	430a      	orrs	r2, r1
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	e007      	b.n	80017ea <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fb25 	bl	8001e50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d10c      	bne.n	8001828 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f023 010f 	bic.w	r1, r3, #15
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	1e5a      	subs	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
 8001826:	e007      	b.n	8001838 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020f 	bic.w	r2, r2, #15
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	f023 0303 	bic.w	r3, r3, #3
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
 8001848:	e007      	b.n	800185a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	f043 0210 	orr.w	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800185a:	7ffb      	ldrb	r3, [r7, #31]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3724      	adds	r7, #36	; 0x24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	24000014 	.word	0x24000014
 8001868:	053e2d63 	.word	0x053e2d63
 800186c:	40022000 	.word	0x40022000
 8001870:	40022100 	.word	0x40022100
 8001874:	40022300 	.word	0x40022300
 8001878:	fff0c003 	.word	0xfff0c003
 800187c:	ffffbffc 	.word	0xffffbffc
 8001880:	fc00f81e 	.word	0xfc00f81e

08001884 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b0a1      	sub	sp, #132	; 0x84
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4a9a      	ldr	r2, [pc, #616]	; (8001b08 <HAL_ADC_ConfigChannel+0x284>)
 800189e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x2a>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e2bc      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x5a4>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe61 	bl	8001582 <LL_ADC_REG_IsConversionOngoing>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 82a1 	bne.w	8001e0a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d108      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x62>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0e9b      	lsrs	r3, r3, #26
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	2201      	movs	r2, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	e016      	b.n	8001914 <HAL_ADC_ConfigChannel+0x90>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018f6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80018fe:	2320      	movs	r3, #32
 8001900:	e003      	b.n	800190a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	2201      	movs	r2, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	69d1      	ldr	r1, [r2, #28]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	430b      	orrs	r3, r1
 8001920:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6859      	ldr	r1, [r3, #4]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	f7ff fd4a 	bl	80013c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fe22 	bl	8001582 <LL_ADC_REG_IsConversionOngoing>
 800193e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe2f 	bl	80015a8 <LL_ADC_INJ_IsConversionOngoing>
 800194a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800194c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 80a0 	bne.w	8001a94 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 809c 	bne.w	8001a94 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	461a      	mov	r2, r3
 800196a:	f7ff fd59 	bl	8001420 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10b      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x110>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	e00a      	b.n	80019aa <HAL_ADC_ConfigChannel+0x126>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d027      	beq.n	8001a04 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6919      	ldr	r1, [r3, #16]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c2:	f7ff fcad 	bl	8001320 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6919      	ldr	r1, [r3, #16]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	7e5b      	ldrb	r3, [r3, #25]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d102      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x158>
 80019d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019da:	e000      	b.n	80019de <HAL_ADC_ConfigChannel+0x15a>
 80019dc:	2300      	movs	r3, #0
 80019de:	461a      	mov	r2, r3
 80019e0:	f7ff fcd7 	bl	8001392 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6919      	ldr	r1, [r3, #16]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	7e1b      	ldrb	r3, [r3, #24]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x176>
 80019f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f8:	e000      	b.n	80019fc <HAL_ADC_ConfigChannel+0x178>
 80019fa:	2300      	movs	r3, #0
 80019fc:	461a      	mov	r2, r3
 80019fe:	f7ff fcaf 	bl	8001360 <LL_ADC_SetDataRightShift>
 8001a02:	e047      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	069b      	lsls	r3, r3, #26
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d107      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a26:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	069b      	lsls	r3, r3, #26
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a4a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	069b      	lsls	r3, r3, #26
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d107      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a6e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	069b      	lsls	r3, r3, #26
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d107      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a92:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fd5f 	bl	800155c <LL_ADC_IsEnabled>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 81bb 	bne.w	8001e1c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f7ff fce0 	bl	8001478 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_ADC_ConfigChannel+0x284>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	f040 8130 	bne.w	8001d24 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10b      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x268>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	3301      	adds	r3, #1
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2b09      	cmp	r3, #9
 8001ae2:	bf94      	ite	ls
 8001ae4:	2301      	movls	r3, #1
 8001ae6:	2300      	movhi	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	e01b      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x2a0>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d103      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	e005      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x290>
 8001b08:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	3301      	adds	r3, #1
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2b09      	cmp	r3, #9
 8001b1c:	bf94      	ite	ls
 8001b1e:	2301      	movls	r3, #1
 8001b20:	2300      	movhi	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d079      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x2c0>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0e9b      	lsrs	r3, r3, #26
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	069b      	lsls	r3, r3, #26
 8001b3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b42:	e015      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x2ec>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b54:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	e003      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	069b      	lsls	r3, r3, #26
 8001b6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x30c>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	3301      	adds	r3, #1
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	e017      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x33c>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e003      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	ea42 0103 	orr.w	r1, r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10a      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x362>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f003 021f 	and.w	r2, r3, #31
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	051b      	lsls	r3, r3, #20
 8001be4:	e018      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x394>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e003      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	e07e      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x3b4>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0e9b      	lsrs	r3, r3, #26
 8001c2e:	3301      	adds	r3, #1
 8001c30:	069b      	lsls	r3, r3, #26
 8001c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c36:	e015      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x3e0>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e003      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	069b      	lsls	r3, r3, #26
 8001c60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x400>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	3301      	adds	r3, #1
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	e017      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x430>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	61bb      	str	r3, [r7, #24]
  return result;
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e003      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	ea42 0103 	orr.w	r1, r2, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x45c>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b1e      	subs	r3, #30
 8001cd8:	051b      	lsls	r3, r3, #20
 8001cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cde:	e01b      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x494>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	60fb      	str	r3, [r7, #12]
  return result;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	e003      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	f003 021f 	and.w	r2, r3, #31
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b1e      	subs	r3, #30
 8001d12:	051b      	lsls	r3, r3, #20
 8001d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	6892      	ldr	r2, [r2, #8]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7ff fb7e 	bl	8001420 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da77      	bge.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d2c:	4840      	ldr	r0, [pc, #256]	; (8001e30 <HAL_ADC_ConfigChannel+0x5ac>)
 8001d2e:	f7ff fae9 	bl	8001304 <LL_ADC_GetCommonPathInternalCh>
 8001d32:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d34:	483f      	ldr	r0, [pc, #252]	; (8001e34 <HAL_ADC_ConfigChannel+0x5b0>)
 8001d36:	f7ff fc11 	bl	800155c <LL_ADC_IsEnabled>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	483e      	ldr	r0, [pc, #248]	; (8001e38 <HAL_ADC_ConfigChannel+0x5b4>)
 8001d3e:	f7ff fc0d 	bl	800155c <LL_ADC_IsEnabled>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4323      	orrs	r3, r4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d155      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a3b      	ldr	r2, [pc, #236]	; (8001e3c <HAL_ADC_ConfigChannel+0x5b8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d122      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x516>
 8001d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d11d      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a35      	ldr	r2, [pc, #212]	; (8001e38 <HAL_ADC_ConfigChannel+0x5b4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d159      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d6e:	4619      	mov	r1, r3
 8001d70:	482f      	ldr	r0, [pc, #188]	; (8001e30 <HAL_ADC_ConfigChannel+0x5ac>)
 8001d72:	f7ff fab4 	bl	80012de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d76:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_ADC_ConfigChannel+0x5bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	099b      	lsrs	r3, r3, #6
 8001d7c:	4a31      	ldr	r2, [pc, #196]	; (8001e44 <HAL_ADC_ConfigChannel+0x5c0>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	3301      	adds	r3, #1
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d8a:	e002      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d98:	e040      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <HAL_ADC_ConfigChannel+0x5c4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d111      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x544>
 8001da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <HAL_ADC_ConfigChannel+0x5b4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d131      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	481b      	ldr	r0, [pc, #108]	; (8001e30 <HAL_ADC_ConfigChannel+0x5ac>)
 8001dc2:	f7ff fa8c 	bl	80012de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dc6:	e029      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <HAL_ADC_ConfigChannel+0x5c8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d124      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
 8001dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d11f      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <HAL_ADC_ConfigChannel+0x5b4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d11a      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dec:	4619      	mov	r1, r3
 8001dee:	4810      	ldr	r0, [pc, #64]	; (8001e30 <HAL_ADC_ConfigChannel+0x5ac>)
 8001df0:	f7ff fa75 	bl	80012de <LL_ADC_SetCommonPathInternalCh>
 8001df4:	e012      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0220 	orr.w	r2, r3, #32
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e08:	e008      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	f043 0220 	orr.w	r2, r3, #32
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3784      	adds	r7, #132	; 0x84
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	40022300 	.word	0x40022300
 8001e34:	40022000 	.word	0x40022000
 8001e38:	40022100 	.word	0x40022100
 8001e3c:	cb840000 	.word	0xcb840000
 8001e40:	24000014 	.word	0x24000014
 8001e44:	053e2d63 	.word	0x053e2d63
 8001e48:	bac04000 	.word	0xbac04000
 8001e4c:	cfb80000 	.word	0xcfb80000

08001e50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001e58:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <ADC_ConfigureBoostMode+0x188>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01c      	beq.n	8001e9e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001e64:	f001 fb38 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 8001e68:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e72:	d010      	beq.n	8001e96 <ADC_ConfigureBoostMode+0x46>
 8001e74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e78:	d871      	bhi.n	8001f5e <ADC_ConfigureBoostMode+0x10e>
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7e:	d002      	beq.n	8001e86 <ADC_ConfigureBoostMode+0x36>
 8001e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e84:	d16b      	bne.n	8001f5e <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0c1b      	lsrs	r3, r3, #16
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	60fb      	str	r3, [r7, #12]
        break;
 8001e94:	e066      	b.n	8001f64 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	60fb      	str	r3, [r7, #12]
        break;
 8001e9c:	e062      	b.n	8001f64 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001e9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ea2:	f002 fa81 	bl	80043a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ea6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001eb0:	d051      	beq.n	8001f56 <ADC_ConfigureBoostMode+0x106>
 8001eb2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001eb6:	d854      	bhi.n	8001f62 <ADC_ConfigureBoostMode+0x112>
 8001eb8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001ebc:	d047      	beq.n	8001f4e <ADC_ConfigureBoostMode+0xfe>
 8001ebe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001ec2:	d84e      	bhi.n	8001f62 <ADC_ConfigureBoostMode+0x112>
 8001ec4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001ec8:	d03d      	beq.n	8001f46 <ADC_ConfigureBoostMode+0xf6>
 8001eca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001ece:	d848      	bhi.n	8001f62 <ADC_ConfigureBoostMode+0x112>
 8001ed0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ed4:	d033      	beq.n	8001f3e <ADC_ConfigureBoostMode+0xee>
 8001ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eda:	d842      	bhi.n	8001f62 <ADC_ConfigureBoostMode+0x112>
 8001edc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001ee0:	d029      	beq.n	8001f36 <ADC_ConfigureBoostMode+0xe6>
 8001ee2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001ee6:	d83c      	bhi.n	8001f62 <ADC_ConfigureBoostMode+0x112>
 8001ee8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001eec:	d01a      	beq.n	8001f24 <ADC_ConfigureBoostMode+0xd4>
 8001eee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001ef2:	d836      	bhi.n	8001f62 <ADC_ConfigureBoostMode+0x112>
 8001ef4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001ef8:	d014      	beq.n	8001f24 <ADC_ConfigureBoostMode+0xd4>
 8001efa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001efe:	d830      	bhi.n	8001f62 <ADC_ConfigureBoostMode+0x112>
 8001f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f04:	d00e      	beq.n	8001f24 <ADC_ConfigureBoostMode+0xd4>
 8001f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f0a:	d82a      	bhi.n	8001f62 <ADC_ConfigureBoostMode+0x112>
 8001f0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f10:	d008      	beq.n	8001f24 <ADC_ConfigureBoostMode+0xd4>
 8001f12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f16:	d824      	bhi.n	8001f62 <ADC_ConfigureBoostMode+0x112>
 8001f18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f1c:	d002      	beq.n	8001f24 <ADC_ConfigureBoostMode+0xd4>
 8001f1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f22:	d11e      	bne.n	8001f62 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	0c9b      	lsrs	r3, r3, #18
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	60fb      	str	r3, [r7, #12]
        break;
 8001f34:	e016      	b.n	8001f64 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
        break;
 8001f3c:	e012      	b.n	8001f64 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	60fb      	str	r3, [r7, #12]
        break;
 8001f44:	e00e      	b.n	8001f64 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	60fb      	str	r3, [r7, #12]
        break;
 8001f4c:	e00a      	b.n	8001f64 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	09db      	lsrs	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]
        break;
 8001f54:	e006      	b.n	8001f64 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	60fb      	str	r3, [r7, #12]
        break;
 8001f5c:	e002      	b.n	8001f64 <ADC_ConfigureBoostMode+0x114>
        break;
 8001f5e:	bf00      	nop
 8001f60:	e000      	b.n	8001f64 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8001f62:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <ADC_ConfigureBoostMode+0x18c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d808      	bhi.n	8001f84 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f80:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001f82:	e025      	b.n	8001fd0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <ADC_ConfigureBoostMode+0x190>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d80a      	bhi.n	8001fa2 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9e:	609a      	str	r2, [r3, #8]
}
 8001fa0:	e016      	b.n	8001fd0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <ADC_ConfigureBoostMode+0x194>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d80a      	bhi.n	8001fc0 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbc:	609a      	str	r2, [r3, #8]
}
 8001fbe:	e007      	b.n	8001fd0 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40022300 	.word	0x40022300
 8001fdc:	005f5e10 	.word	0x005f5e10
 8001fe0:	00bebc20 	.word	0x00bebc20
 8001fe4:	017d7840 	.word	0x017d7840

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <__NVIC_SetPriorityGrouping+0x40>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	4313      	orrs	r3, r2
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x40>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00
 800202c:	05fa0000 	.word	0x05fa0000

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	; (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	; (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff40 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff90 	bl	80020dc <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5f 	bl	8002088 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff33 	bl	800204c <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa4 	bl	8002144 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002216:	4b89      	ldr	r3, [pc, #548]	; (800243c <HAL_GPIO_Init+0x234>)
 8002218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800221a:	e194      	b.n	8002546 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8186 	beq.w	8002540 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d005      	beq.n	800224c <HAL_GPIO_Init+0x44>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d130      	bne.n	80022ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002282:	2201      	movs	r2, #1
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 0201 	and.w	r2, r3, #1
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d017      	beq.n	80022ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d123      	bne.n	800233e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	220f      	movs	r2, #15
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	69b9      	ldr	r1, [r7, #24]
 800233a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0203 	and.w	r2, r3, #3
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80e0 	beq.w	8002540 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002380:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <HAL_GPIO_Init+0x238>)
 8002382:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002386:	4a2e      	ldr	r2, [pc, #184]	; (8002440 <HAL_GPIO_Init+0x238>)
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002390:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_GPIO_Init+0x238>)
 8002392:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239e:	4a29      	ldr	r2, [pc, #164]	; (8002444 <HAL_GPIO_Init+0x23c>)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <HAL_GPIO_Init+0x240>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d052      	beq.n	8002470 <HAL_GPIO_Init+0x268>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1f      	ldr	r2, [pc, #124]	; (800244c <HAL_GPIO_Init+0x244>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d031      	beq.n	8002436 <HAL_GPIO_Init+0x22e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_GPIO_Init+0x248>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d02b      	beq.n	8002432 <HAL_GPIO_Init+0x22a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_GPIO_Init+0x24c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d025      	beq.n	800242e <HAL_GPIO_Init+0x226>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1c      	ldr	r2, [pc, #112]	; (8002458 <HAL_GPIO_Init+0x250>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01f      	beq.n	800242a <HAL_GPIO_Init+0x222>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1b      	ldr	r2, [pc, #108]	; (800245c <HAL_GPIO_Init+0x254>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d019      	beq.n	8002426 <HAL_GPIO_Init+0x21e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1a      	ldr	r2, [pc, #104]	; (8002460 <HAL_GPIO_Init+0x258>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0x21a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a19      	ldr	r2, [pc, #100]	; (8002464 <HAL_GPIO_Init+0x25c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00d      	beq.n	800241e <HAL_GPIO_Init+0x216>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a18      	ldr	r2, [pc, #96]	; (8002468 <HAL_GPIO_Init+0x260>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <HAL_GPIO_Init+0x212>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a17      	ldr	r2, [pc, #92]	; (800246c <HAL_GPIO_Init+0x264>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_GPIO_Init+0x20e>
 8002412:	2309      	movs	r3, #9
 8002414:	e02d      	b.n	8002472 <HAL_GPIO_Init+0x26a>
 8002416:	230a      	movs	r3, #10
 8002418:	e02b      	b.n	8002472 <HAL_GPIO_Init+0x26a>
 800241a:	2308      	movs	r3, #8
 800241c:	e029      	b.n	8002472 <HAL_GPIO_Init+0x26a>
 800241e:	2307      	movs	r3, #7
 8002420:	e027      	b.n	8002472 <HAL_GPIO_Init+0x26a>
 8002422:	2306      	movs	r3, #6
 8002424:	e025      	b.n	8002472 <HAL_GPIO_Init+0x26a>
 8002426:	2305      	movs	r3, #5
 8002428:	e023      	b.n	8002472 <HAL_GPIO_Init+0x26a>
 800242a:	2304      	movs	r3, #4
 800242c:	e021      	b.n	8002472 <HAL_GPIO_Init+0x26a>
 800242e:	2303      	movs	r3, #3
 8002430:	e01f      	b.n	8002472 <HAL_GPIO_Init+0x26a>
 8002432:	2302      	movs	r3, #2
 8002434:	e01d      	b.n	8002472 <HAL_GPIO_Init+0x26a>
 8002436:	2301      	movs	r3, #1
 8002438:	e01b      	b.n	8002472 <HAL_GPIO_Init+0x26a>
 800243a:	bf00      	nop
 800243c:	58000080 	.word	0x58000080
 8002440:	58024400 	.word	0x58024400
 8002444:	58000400 	.word	0x58000400
 8002448:	58020000 	.word	0x58020000
 800244c:	58020400 	.word	0x58020400
 8002450:	58020800 	.word	0x58020800
 8002454:	58020c00 	.word	0x58020c00
 8002458:	58021000 	.word	0x58021000
 800245c:	58021400 	.word	0x58021400
 8002460:	58021800 	.word	0x58021800
 8002464:	58021c00 	.word	0x58021c00
 8002468:	58022000 	.word	0x58022000
 800246c:	58022400 	.word	0x58022400
 8002470:	2300      	movs	r3, #0
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	f002 0203 	and.w	r2, r2, #3
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	4093      	lsls	r3, r2
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002482:	4938      	ldr	r1, [pc, #224]	; (8002564 <HAL_GPIO_Init+0x35c>)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	3301      	adds	r3, #1
 8002544:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f ae63 	bne.w	800221c <HAL_GPIO_Init+0x14>
  }
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	3724      	adds	r7, #36	; 0x24
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	58000400 	.word	0x58000400

08002568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
 8002574:	4613      	mov	r3, r2
 8002576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002578:	787b      	ldrb	r3, [r7, #1]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002584:	e003      	b.n	800258e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	041a      	lsls	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	58024800 	.word	0x58024800

080025bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025c4:	4b29      	ldr	r3, [pc, #164]	; (800266c <HAL_PWREx_ConfigSupply+0xb0>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d00a      	beq.n	80025e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025d0:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_PWREx_ConfigSupply+0xb0>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e040      	b.n	8002664 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e03e      	b.n	8002664 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_PWREx_ConfigSupply+0xb0>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80025ee:	491f      	ldr	r1, [pc, #124]	; (800266c <HAL_PWREx_ConfigSupply+0xb0>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025f6:	f7fe fe2f 	bl	8001258 <HAL_GetTick>
 80025fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025fc:	e009      	b.n	8002612 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025fe:	f7fe fe2b 	bl	8001258 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800260c:	d901      	bls.n	8002612 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e028      	b.n	8002664 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_PWREx_ConfigSupply+0xb0>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261e:	d1ee      	bne.n	80025fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b1e      	cmp	r3, #30
 8002624:	d008      	beq.n	8002638 <HAL_PWREx_ConfigSupply+0x7c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b2e      	cmp	r3, #46	; 0x2e
 800262a:	d005      	beq.n	8002638 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b1d      	cmp	r3, #29
 8002630:	d002      	beq.n	8002638 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b2d      	cmp	r3, #45	; 0x2d
 8002636:	d114      	bne.n	8002662 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002638:	f7fe fe0e 	bl	8001258 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800263e:	e009      	b.n	8002654 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002640:	f7fe fe0a 	bl	8001258 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264e:	d901      	bls.n	8002654 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e007      	b.n	8002664 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_PWREx_ConfigSupply+0xb0>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d1ee      	bne.n	8002640 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	58024800 	.word	0x58024800

08002670 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e3f3      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80b3 	beq.w	80027f6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002690:	4b9e      	ldr	r3, [pc, #632]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800269a:	4b9c      	ldr	r3, [pc, #624]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	d007      	beq.n	80026b6 <HAL_RCC_OscConfig+0x46>
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	2b18      	cmp	r3, #24
 80026aa:	d112      	bne.n	80026d2 <HAL_RCC_OscConfig+0x62>
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d10d      	bne.n	80026d2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b6:	4b95      	ldr	r3, [pc, #596]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8098 	beq.w	80027f4 <HAL_RCC_OscConfig+0x184>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f040 8093 	bne.w	80027f4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e3cb      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x7a>
 80026dc:	4b8b      	ldr	r3, [pc, #556]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a8a      	ldr	r2, [pc, #552]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e058      	b.n	800279c <HAL_RCC_OscConfig+0x12c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d112      	bne.n	8002718 <HAL_RCC_OscConfig+0xa8>
 80026f2:	4b86      	ldr	r3, [pc, #536]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a85      	ldr	r2, [pc, #532]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b83      	ldr	r3, [pc, #524]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a82      	ldr	r2, [pc, #520]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002704:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b80      	ldr	r3, [pc, #512]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7f      	ldr	r2, [pc, #508]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e041      	b.n	800279c <HAL_RCC_OscConfig+0x12c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002720:	d112      	bne.n	8002748 <HAL_RCC_OscConfig+0xd8>
 8002722:	4b7a      	ldr	r3, [pc, #488]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a79      	ldr	r2, [pc, #484]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	4b77      	ldr	r3, [pc, #476]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a76      	ldr	r2, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002734:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b74      	ldr	r3, [pc, #464]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a73      	ldr	r2, [pc, #460]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e029      	b.n	800279c <HAL_RCC_OscConfig+0x12c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002750:	d112      	bne.n	8002778 <HAL_RCC_OscConfig+0x108>
 8002752:	4b6e      	ldr	r3, [pc, #440]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6d      	ldr	r2, [pc, #436]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b6b      	ldr	r3, [pc, #428]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6a      	ldr	r2, [pc, #424]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b68      	ldr	r3, [pc, #416]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a67      	ldr	r2, [pc, #412]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e011      	b.n	800279c <HAL_RCC_OscConfig+0x12c>
 8002778:	4b64      	ldr	r3, [pc, #400]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a63      	ldr	r2, [pc, #396]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800277e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a60      	ldr	r2, [pc, #384]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800278a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b5e      	ldr	r3, [pc, #376]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5d      	ldr	r2, [pc, #372]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002796:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800279a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fd58 	bl	8001258 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fd54 	bl	8001258 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e355      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027be:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x13c>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fd44 	bl	8001258 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fd40 	bl	8001258 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e341      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027e6:	4b49      	ldr	r3, [pc, #292]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x164>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 808c 	beq.w	800291c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002804:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800280c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800280e:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_RCC_OscConfig+0x1ba>
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	2b18      	cmp	r3, #24
 800281e:	d137      	bne.n	8002890 <HAL_RCC_OscConfig+0x220>
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d132      	bne.n	8002890 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x1d2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e313      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002842:	4b32      	ldr	r3, [pc, #200]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0219 	bic.w	r2, r3, #25
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	492f      	ldr	r1, [pc, #188]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002854:	f7fe fd00 	bl	8001258 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285c:	f7fe fcfc 	bl	8001258 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e2fd      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800286e:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	4920      	ldr	r1, [pc, #128]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288e:	e045      	b.n	800291c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d026      	beq.n	80028e6 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002898:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f023 0219 	bic.w	r2, r3, #25
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4919      	ldr	r1, [pc, #100]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fcd5 	bl	8001258 <HAL_GetTick>
 80028ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe fcd1 	bl	8001258 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e2d2      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	490b      	ldr	r1, [pc, #44]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
 80028e4:	e01a      	b.n	800291c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_RCC_OscConfig+0x29c>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe fcb1 	bl	8001258 <HAL_GetTick>
 80028f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028f8:	e00a      	b.n	8002910 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fa:	f7fe fcad 	bl	8001258 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d903      	bls.n	8002910 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e2ae      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
 800290c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002910:	4b99      	ldr	r3, [pc, #612]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ee      	bne.n	80028fa <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d06a      	beq.n	80029fe <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002928:	4b93      	ldr	r3, [pc, #588]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002930:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002932:	4b91      	ldr	r3, [pc, #580]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b08      	cmp	r3, #8
 800293c:	d007      	beq.n	800294e <HAL_RCC_OscConfig+0x2de>
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b18      	cmp	r3, #24
 8002942:	d11b      	bne.n	800297c <HAL_RCC_OscConfig+0x30c>
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d116      	bne.n	800297c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800294e:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x2f6>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	2b80      	cmp	r3, #128	; 0x80
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e281      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002966:	4b84      	ldr	r3, [pc, #528]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	061b      	lsls	r3, r3, #24
 8002974:	4980      	ldr	r1, [pc, #512]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002976:	4313      	orrs	r3, r2
 8002978:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800297a:	e040      	b.n	80029fe <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d023      	beq.n	80029cc <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002984:	4b7c      	ldr	r3, [pc, #496]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7b      	ldr	r2, [pc, #492]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 800298a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fc62 	bl	8001258 <HAL_GetTick>
 8002994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002998:	f7fe fc5e 	bl	8001258 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e25f      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029aa:	4b73      	ldr	r3, [pc, #460]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029b6:	4b70      	ldr	r3, [pc, #448]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	061b      	lsls	r3, r3, #24
 80029c4:	496c      	ldr	r1, [pc, #432]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60cb      	str	r3, [r1, #12]
 80029ca:	e018      	b.n	80029fe <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029cc:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a69      	ldr	r2, [pc, #420]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 80029d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fc3e 	bl	8001258 <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029e0:	f7fe fc3a 	bl	8001258 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e23b      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029f2:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d036      	beq.n	8002a78 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d019      	beq.n	8002a46 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a12:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a16:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fc1b 	bl	8001258 <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a26:	f7fe fc17 	bl	8001258 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e218      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a38:	4b4f      	ldr	r3, [pc, #316]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x3b6>
 8002a44:	e018      	b.n	8002a78 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a46:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4a:	4a4b      	ldr	r2, [pc, #300]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7fe fc01 	bl	8001258 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7fe fbfd 	bl	8001258 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1fe      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a6c:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d036      	beq.n	8002af2 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d019      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a8c:	4b3a      	ldr	r3, [pc, #232]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a39      	ldr	r2, [pc, #228]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a98:	f7fe fbde 	bl	8001258 <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002aa0:	f7fe fbda 	bl	8001258 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1db      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ab2:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x430>
 8002abe:	e018      	b.n	8002af2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2c      	ldr	r2, [pc, #176]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002acc:	f7fe fbc4 	bl	8001258 <HAL_GetTick>
 8002ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ad4:	f7fe fbc0 	bl	8001258 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1c1      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80af 	beq.w	8002c5e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_RCC_OscConfig+0x50c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_RCC_OscConfig+0x50c>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b0c:	f7fe fba4 	bl	8001258 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b14:	f7fe fba0 	bl	8001258 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1a1      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_RCC_OscConfig+0x50c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4d8>
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	e05b      	b.n	8002c00 <HAL_RCC_OscConfig+0x590>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d117      	bne.n	8002b80 <HAL_RCC_OscConfig+0x510>
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b66:	6713      	str	r3, [r2, #112]	; 0x70
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a02      	ldr	r2, [pc, #8]	; (8002b78 <HAL_RCC_OscConfig+0x508>)
 8002b6e:	f023 0304 	bic.w	r3, r3, #4
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	e044      	b.n	8002c00 <HAL_RCC_OscConfig+0x590>
 8002b76:	bf00      	nop
 8002b78:	58024400 	.word	0x58024400
 8002b7c:	58024800 	.word	0x58024800
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d112      	bne.n	8002bae <HAL_RCC_OscConfig+0x53e>
 8002b88:	4b95      	ldr	r3, [pc, #596]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a94      	ldr	r2, [pc, #592]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
 8002b94:	4b92      	ldr	r3, [pc, #584]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a91      	ldr	r2, [pc, #580]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	4b8f      	ldr	r3, [pc, #572]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a8e      	ldr	r2, [pc, #568]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	e028      	b.n	8002c00 <HAL_RCC_OscConfig+0x590>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b85      	cmp	r3, #133	; 0x85
 8002bb4:	d112      	bne.n	8002bdc <HAL_RCC_OscConfig+0x56c>
 8002bb6:	4b8a      	ldr	r3, [pc, #552]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a89      	ldr	r2, [pc, #548]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	4b87      	ldr	r3, [pc, #540]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a86      	ldr	r2, [pc, #536]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bce:	4b84      	ldr	r3, [pc, #528]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a83      	ldr	r2, [pc, #524]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	e011      	b.n	8002c00 <HAL_RCC_OscConfig+0x590>
 8002bdc:	4b80      	ldr	r3, [pc, #512]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	4a7f      	ldr	r2, [pc, #508]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	; 0x70
 8002be8:	4b7d      	ldr	r3, [pc, #500]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	4a7c      	ldr	r2, [pc, #496]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bee:	f023 0304 	bic.w	r3, r3, #4
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	4b7a      	ldr	r3, [pc, #488]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a79      	ldr	r2, [pc, #484]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe fb26 	bl	8001258 <HAL_GetTick>
 8002c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe fb22 	bl	8001258 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e121      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c26:	4b6e      	ldr	r3, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ee      	beq.n	8002c10 <HAL_RCC_OscConfig+0x5a0>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fb10 	bl	8001258 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fb0c 	bl	8001258 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e10b      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c52:	4b63      	ldr	r3, [pc, #396]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8100 	beq.w	8002e68 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c68:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c70:	2b18      	cmp	r3, #24
 8002c72:	f000 80bb 	beq.w	8002dec <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	f040 8095 	bne.w	8002daa <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c80:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a56      	ldr	r2, [pc, #344]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fae4 	bl	8001258 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe fae0 	bl	8001258 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e0e1      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca6:	4b4e      	ldr	r3, [pc, #312]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb2:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb6:	4b4b      	ldr	r3, [pc, #300]	; (8002de4 <HAL_RCC_OscConfig+0x774>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	4946      	ldr	r1, [pc, #280]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	628b      	str	r3, [r1, #40]	; 0x28
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	025b      	lsls	r3, r3, #9
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	061b      	lsls	r3, r3, #24
 8002cf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002cfc:	4938      	ldr	r1, [pc, #224]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	4a36      	ldr	r2, [pc, #216]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d0e:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d12:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <HAL_RCC_OscConfig+0x778>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d1a:	00d2      	lsls	r2, r2, #3
 8002d1c:	4930      	ldr	r1, [pc, #192]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d22:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	f023 020c 	bic.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	492c      	ldr	r1, [pc, #176]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d34:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f023 0202 	bic.w	r2, r3, #2
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	4927      	ldr	r1, [pc, #156]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fe fa69 	bl	8001258 <HAL_GetTick>
 8002d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe fa65 	bl	8001258 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e066      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d9c:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x71a>
 8002da8:	e05e      	b.n	8002e68 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe fa4f 	bl	8001258 <HAL_GetTick>
 8002dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe fa4b 	bl	8001258 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e04c      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_RCC_OscConfig+0x770>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x74e>
 8002ddc:	e044      	b.n	8002e68 <HAL_RCC_OscConfig+0x7f8>
 8002dde:	bf00      	nop
 8002de0:	58024400 	.word	0x58024400
 8002de4:	fffffc0c 	.word	0xfffffc0c
 8002de8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002dec:	4b21      	ldr	r3, [pc, #132]	; (8002e74 <HAL_RCC_OscConfig+0x804>)
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HAL_RCC_OscConfig+0x804>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d031      	beq.n	8002e64 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f003 0203 	and.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d12a      	bne.n	8002e64 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d122      	bne.n	8002e64 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d11a      	bne.n	8002e64 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	0a5b      	lsrs	r3, r3, #9
 8002e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d111      	bne.n	8002e64 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	0c1b      	lsrs	r3, r3, #16
 8002e44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d108      	bne.n	8002e64 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	0e1b      	lsrs	r3, r3, #24
 8002e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3730      	adds	r7, #48	; 0x30
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400

08002e78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e19c      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b8a      	ldr	r3, [pc, #552]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d910      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b87      	ldr	r3, [pc, #540]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 020f 	bic.w	r2, r3, #15
 8002ea2:	4985      	ldr	r1, [pc, #532]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b83      	ldr	r3, [pc, #524]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e184      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	4b7b      	ldr	r3, [pc, #492]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d908      	bls.n	8002eea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ed8:	4b78      	ldr	r3, [pc, #480]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	4975      	ldr	r1, [pc, #468]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	4b70      	ldr	r3, [pc, #448]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d908      	bls.n	8002f18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f06:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	496a      	ldr	r1, [pc, #424]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d010      	beq.n	8002f46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	4b64      	ldr	r3, [pc, #400]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d908      	bls.n	8002f46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f34:	4b61      	ldr	r3, [pc, #388]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	495e      	ldr	r1, [pc, #376]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d010      	beq.n	8002f74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	4b59      	ldr	r3, [pc, #356]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d908      	bls.n	8002f74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f62:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4953      	ldr	r1, [pc, #332]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	4b4d      	ldr	r3, [pc, #308]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d908      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f023 020f 	bic.w	r2, r3, #15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4947      	ldr	r1, [pc, #284]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d055      	beq.n	800305a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fae:	4b43      	ldr	r3, [pc, #268]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4940      	ldr	r1, [pc, #256]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fc8:	4b3c      	ldr	r3, [pc, #240]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d121      	bne.n	8003018 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0f6      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d115      	bne.n	8003018 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0ea      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ff8:	4b30      	ldr	r3, [pc, #192]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0de      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003008:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0d6      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003018:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f023 0207 	bic.w	r2, r3, #7
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4925      	ldr	r1, [pc, #148]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8003026:	4313      	orrs	r3, r2
 8003028:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302a:	f7fe f915 	bl	8001258 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003030:	e00a      	b.n	8003048 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003032:	f7fe f911 	bl	8001258 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0be      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003048:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	429a      	cmp	r2, r3
 8003058:	d1eb      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d010      	beq.n	8003088 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	4b14      	ldr	r3, [pc, #80]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	429a      	cmp	r2, r3
 8003074:	d208      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f023 020f 	bic.w	r2, r3, #15
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	490e      	ldr	r1, [pc, #56]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 8003084:	4313      	orrs	r3, r2
 8003086:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d214      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 020f 	bic.w	r2, r3, #15
 800309e:	4906      	ldr	r1, [pc, #24]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e086      	b.n	80031c6 <HAL_RCC_ClockConfig+0x34e>
 80030b8:	52002000 	.word	0x52002000
 80030bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d8:	429a      	cmp	r2, r3
 80030da:	d208      	bcs.n	80030ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030dc:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	4939      	ldr	r1, [pc, #228]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d010      	beq.n	800311c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003106:	429a      	cmp	r2, r3
 8003108:	d208      	bcs.n	800311c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	492e      	ldr	r1, [pc, #184]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003118:	4313      	orrs	r3, r2
 800311a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d010      	beq.n	800314a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003134:	429a      	cmp	r2, r3
 8003136:	d208      	bcs.n	800314a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003138:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	4922      	ldr	r1, [pc, #136]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003146:	4313      	orrs	r3, r2
 8003148:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d010      	beq.n	8003178 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003162:	429a      	cmp	r2, r3
 8003164:	d208      	bcs.n	8003178 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4917      	ldr	r1, [pc, #92]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003174:	4313      	orrs	r3, r2
 8003176:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003178:	f000 f834 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	4912      	ldr	r1, [pc, #72]	; (80031d4 <HAL_RCC_ClockConfig+0x35c>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
 8003194:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003196:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_RCC_ClockConfig+0x358>)
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <HAL_RCC_ClockConfig+0x35c>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <HAL_RCC_ClockConfig+0x360>)
 80031ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031b0:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <HAL_RCC_ClockConfig+0x364>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_RCC_ClockConfig+0x368>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe f802 	bl	80011c4 <HAL_InitTick>
 80031c0:	4603      	mov	r3, r0
 80031c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	58024400 	.word	0x58024400
 80031d4:	080074a0 	.word	0x080074a0
 80031d8:	24000018 	.word	0x24000018
 80031dc:	24000014 	.word	0x24000014
 80031e0:	2400001c 	.word	0x2400001c

080031e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ea:	4bb3      	ldr	r3, [pc, #716]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031f2:	2b18      	cmp	r3, #24
 80031f4:	f200 8155 	bhi.w	80034a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80031f8:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	08003265 	.word	0x08003265
 8003204:	080034a3 	.word	0x080034a3
 8003208:	080034a3 	.word	0x080034a3
 800320c:	080034a3 	.word	0x080034a3
 8003210:	080034a3 	.word	0x080034a3
 8003214:	080034a3 	.word	0x080034a3
 8003218:	080034a3 	.word	0x080034a3
 800321c:	080034a3 	.word	0x080034a3
 8003220:	0800328b 	.word	0x0800328b
 8003224:	080034a3 	.word	0x080034a3
 8003228:	080034a3 	.word	0x080034a3
 800322c:	080034a3 	.word	0x080034a3
 8003230:	080034a3 	.word	0x080034a3
 8003234:	080034a3 	.word	0x080034a3
 8003238:	080034a3 	.word	0x080034a3
 800323c:	080034a3 	.word	0x080034a3
 8003240:	08003291 	.word	0x08003291
 8003244:	080034a3 	.word	0x080034a3
 8003248:	080034a3 	.word	0x080034a3
 800324c:	080034a3 	.word	0x080034a3
 8003250:	080034a3 	.word	0x080034a3
 8003254:	080034a3 	.word	0x080034a3
 8003258:	080034a3 	.word	0x080034a3
 800325c:	080034a3 	.word	0x080034a3
 8003260:	08003297 	.word	0x08003297
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003264:	4b94      	ldr	r3, [pc, #592]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003270:	4b91      	ldr	r3, [pc, #580]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	08db      	lsrs	r3, r3, #3
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	4a90      	ldr	r2, [pc, #576]	; (80034bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003282:	e111      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003284:	4b8d      	ldr	r3, [pc, #564]	; (80034bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003286:	61bb      	str	r3, [r7, #24]
    break;
 8003288:	e10e      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800328a:	4b8d      	ldr	r3, [pc, #564]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800328c:	61bb      	str	r3, [r7, #24]
    break;
 800328e:	e10b      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003290:	4b8c      	ldr	r3, [pc, #560]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003292:	61bb      	str	r3, [r7, #24]
    break;
 8003294:	e108      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003296:	4b88      	ldr	r3, [pc, #544]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80032a0:	4b85      	ldr	r3, [pc, #532]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032ac:	4b82      	ldr	r3, [pc, #520]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032b6:	4b80      	ldr	r3, [pc, #512]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	08db      	lsrs	r3, r3, #3
 80032bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80e1 	beq.w	800349c <HAL_RCC_GetSysClockFreq+0x2b8>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	f000 8083 	beq.w	80033e8 <HAL_RCC_GetSysClockFreq+0x204>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	f200 80a1 	bhi.w	800342c <HAL_RCC_GetSysClockFreq+0x248>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x114>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d056      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032f6:	e099      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032f8:	4b6f      	ldr	r3, [pc, #444]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02d      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003304:	4b6c      	ldr	r3, [pc, #432]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	08db      	lsrs	r3, r3, #3
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	4a6b      	ldr	r2, [pc, #428]	; (80034bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
 8003314:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332e:	4b62      	ldr	r3, [pc, #392]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003342:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800334a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800335e:	e087      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800336e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003372:	4b51      	ldr	r3, [pc, #324]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003382:	ed97 6a02 	vldr	s12, [r7, #8]
 8003386:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800338a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800339a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033a2:	e065      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b6:	4b40      	ldr	r3, [pc, #256]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033e6:	e043      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fa:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340a:	ed97 6a02 	vldr	s12, [r7, #8]
 800340e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800341a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800342a:	e021      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003436:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800343a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003452:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800345a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800346e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	0a5b      	lsrs	r3, r3, #9
 8003476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800347a:	3301      	adds	r3, #1
 800347c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003488:	edd7 6a07 	vldr	s13, [r7, #28]
 800348c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003494:	ee17 3a90 	vmov	r3, s15
 8003498:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800349a:	e005      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
    break;
 80034a0:	e002      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034a4:	61bb      	str	r3, [r7, #24]
    break;
 80034a6:	bf00      	nop
  }

  return sysclockfreq;
 80034a8:	69bb      	ldr	r3, [r7, #24]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	58024400 	.word	0x58024400
 80034bc:	03d09000 	.word	0x03d09000
 80034c0:	003d0900 	.word	0x003d0900
 80034c4:	007a1200 	.word	0x007a1200
 80034c8:	46000000 	.word	0x46000000
 80034cc:	4c742400 	.word	0x4c742400
 80034d0:	4a742400 	.word	0x4a742400
 80034d4:	4af42400 	.word	0x4af42400

080034d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80034de:	f7ff fe81 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 80034e2:	4602      	mov	r2, r0
 80034e4:	4b10      	ldr	r3, [pc, #64]	; (8003528 <HAL_RCC_GetHCLKFreq+0x50>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	490f      	ldr	r1, [pc, #60]	; (800352c <HAL_RCC_GetHCLKFreq+0x54>)
 80034f0:	5ccb      	ldrb	r3, [r1, r3]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <HAL_RCC_GetHCLKFreq+0x50>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	4a09      	ldr	r2, [pc, #36]	; (800352c <HAL_RCC_GetHCLKFreq+0x54>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	fa22 f303 	lsr.w	r3, r2, r3
 8003512:	4a07      	ldr	r2, [pc, #28]	; (8003530 <HAL_RCC_GetHCLKFreq+0x58>)
 8003514:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003516:	4a07      	ldr	r2, [pc, #28]	; (8003534 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <HAL_RCC_GetHCLKFreq+0x58>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	58024400 	.word	0x58024400
 800352c:	080074a0 	.word	0x080074a0
 8003530:	24000018 	.word	0x24000018
 8003534:	24000014 	.word	0x24000014

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800353c:	f7ff ffcc 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4904      	ldr	r1, [pc, #16]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	58024400 	.word	0x58024400
 8003560:	080074a0 	.word	0x080074a0

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003568:	f7ff ffb6 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4904      	ldr	r1, [pc, #16]	; (800358c <HAL_RCC_GetPCLK2Freq+0x28>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	58024400 	.word	0x58024400
 800358c:	080074a0 	.word	0x080074a0

08003590 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003598:	2300      	movs	r3, #0
 800359a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800359c:	2300      	movs	r3, #0
 800359e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d03f      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035b4:	d02a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035ba:	d824      	bhi.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c0:	d018      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c6:	d81e      	bhi.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035d0:	d007      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035d2:	e018      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d4:	4ba6      	ldr	r3, [pc, #664]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	4aa5      	ldr	r2, [pc, #660]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035e0:	e015      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3304      	adds	r3, #4
 80035e6:	2102      	movs	r1, #2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 ff17 	bl	800541c <RCCEx_PLL2_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035f2:	e00c      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3324      	adds	r3, #36	; 0x24
 80035f8:	2102      	movs	r1, #2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 ffc0 	bl	8005580 <RCCEx_PLL3_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003604:	e003      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
      break;
 800360a:	e000      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800360c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003614:	4b96      	ldr	r3, [pc, #600]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003620:	4993      	ldr	r1, [pc, #588]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	650b      	str	r3, [r1, #80]	; 0x50
 8003626:	e001      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d03d      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	2b04      	cmp	r3, #4
 800363e:	d826      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003640:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003646:	bf00      	nop
 8003648:	0800365d 	.word	0x0800365d
 800364c:	0800366b 	.word	0x0800366b
 8003650:	0800367d 	.word	0x0800367d
 8003654:	08003695 	.word	0x08003695
 8003658:	08003695 	.word	0x08003695
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365c:	4b84      	ldr	r3, [pc, #528]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	4a83      	ldr	r2, [pc, #524]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003668:	e015      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3304      	adds	r3, #4
 800366e:	2100      	movs	r1, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f001 fed3 	bl	800541c <RCCEx_PLL2_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800367a:	e00c      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f001 ff7c 	bl	8005580 <RCCEx_PLL3_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
      break;
 8003692:	e000      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800369c:	4b74      	ldr	r3, [pc, #464]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	f023 0207 	bic.w	r2, r3, #7
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	4971      	ldr	r1, [pc, #452]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	650b      	str	r3, [r1, #80]	; 0x50
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d04a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036c8:	d031      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80036ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036ce:	d82b      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d4:	d02d      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036da:	d825      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036dc:	2bc0      	cmp	r3, #192	; 0xc0
 80036de:	d02a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036e0:	2bc0      	cmp	r3, #192	; 0xc0
 80036e2:	d821      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d016      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	d81d      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d007      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80036f4:	e018      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f6:	4b5e      	ldr	r3, [pc, #376]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	4a5d      	ldr	r2, [pc, #372]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003700:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003702:	e019      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f001 fe86 	bl	800541c <RCCEx_PLL2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003714:	e010      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3324      	adds	r3, #36	; 0x24
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f001 ff2f 	bl	8005580 <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003726:	e007      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	75fb      	strb	r3, [r7, #23]
      break;
 800372c:	e004      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800373e:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003742:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	4949      	ldr	r1, [pc, #292]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800374c:	4313      	orrs	r3, r2
 800374e:	650b      	str	r3, [r1, #80]	; 0x50
 8003750:	e001      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375e:	2b00      	cmp	r3, #0
 8003760:	d04f      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800376a:	d036      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800376c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003770:	d830      	bhi.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003776:	d032      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377c:	d82a      	bhi.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800377e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003782:	d02e      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003784:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003788:	d824      	bhi.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800378a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378e:	d018      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003794:	d81e      	bhi.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800379a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379e:	d007      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80037a0:	e018      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a2:	4b33      	ldr	r3, [pc, #204]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	4a32      	ldr	r2, [pc, #200]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80037ae:	e019      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 fe30 	bl	800541c <RCCEx_PLL2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80037c0:	e010      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3324      	adds	r3, #36	; 0x24
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 fed9 	bl	8005580 <RCCEx_PLL3_Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80037d2:	e007      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	75fb      	strb	r3, [r7, #23]
      break;
 80037d8:	e004      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80037da:	bf00      	nop
 80037dc:	e002      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80037de:	bf00      	nop
 80037e0:	e000      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80037e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ee:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	491e      	ldr	r1, [pc, #120]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	650b      	str	r3, [r1, #80]	; 0x50
 80037fc:	e001      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d034      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	2b30      	cmp	r3, #48	; 0x30
 8003814:	d01c      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003816:	2b30      	cmp	r3, #48	; 0x30
 8003818:	d817      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d00c      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800381e:	2b20      	cmp	r3, #32
 8003820:	d813      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003826:	2b10      	cmp	r3, #16
 8003828:	d10f      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	4a10      	ldr	r2, [pc, #64]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003836:	e00e      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	2102      	movs	r1, #2
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fdec 	bl	800541c <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003848:	e005      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
      break;
 800384e:	e002      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003850:	bf00      	nop
 8003852:	e000      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800385c:	4b04      	ldr	r3, [pc, #16]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800385e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003860:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003868:	4901      	ldr	r1, [pc, #4]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800386a:	4313      	orrs	r3, r2
 800386c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800386e:	e003      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d047      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800388c:	d030      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800388e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003892:	d82a      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003894:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003898:	d02c      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800389a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800389e:	d824      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80038a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a4:	d018      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80038a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038aa:	d81e      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	d007      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80038b6:	e018      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b8:	4bb0      	ldr	r3, [pc, #704]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4aaf      	ldr	r2, [pc, #700]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038c4:	e017      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 fda5 	bl	800541c <RCCEx_PLL2_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038d6:	e00e      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3324      	adds	r3, #36	; 0x24
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fe4e 	bl	8005580 <RCCEx_PLL3_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038e8:	e005      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	75fb      	strb	r3, [r7, #23]
      break;
 80038ee:	e002      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80038f0:	bf00      	nop
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80038f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038fc:	4b9f      	ldr	r3, [pc, #636]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003908:	499c      	ldr	r1, [pc, #624]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800390a:	4313      	orrs	r3, r2
 800390c:	650b      	str	r3, [r1, #80]	; 0x50
 800390e:	e001      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d049      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003928:	d02e      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800392a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392e:	d828      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003930:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003934:	d02a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003936:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800393a:	d822      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800393c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003940:	d026      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003946:	d81c      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800394c:	d010      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800394e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003952:	d816      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01d      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d111      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f001 fd59 	bl	800541c <RCCEx_PLL2_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800396e:	e012      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3324      	adds	r3, #36	; 0x24
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f001 fe02 	bl	8005580 <RCCEx_PLL3_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003980:	e009      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
      break;
 8003986:	e006      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003988:	bf00      	nop
 800398a:	e004      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800398c:	bf00      	nop
 800398e:	e002      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800399c:	4b77      	ldr	r3, [pc, #476]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a8:	4974      	ldr	r1, [pc, #464]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	650b      	str	r3, [r1, #80]	; 0x50
 80039ae:	e001      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d053      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039c6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80039ca:	d034      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039cc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80039d0:	d82e      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80039d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d6:	d030      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80039d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039dc:	d828      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e2:	d02c      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d822      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80039ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ee:	d028      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80039f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039f4:	d81c      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80039f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fa:	d010      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80039fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a00:	d816      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01f      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a0a:	d111      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	2101      	movs	r1, #1
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 fd02 	bl	800541c <RCCEx_PLL2_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a1c:	e014      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3324      	adds	r3, #36	; 0x24
 8003a22:	2101      	movs	r1, #1
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 fdab 	bl	8005580 <RCCEx_PLL3_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a2e:	e00b      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	75fb      	strb	r3, [r7, #23]
      break;
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a36:	bf00      	nop
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e004      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a4e:	4b4b      	ldr	r3, [pc, #300]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a5c:	4947      	ldr	r1, [pc, #284]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	658b      	str	r3, [r1, #88]	; 0x58
 8003a62:	e001      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02f      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7c:	d00e      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a82:	d814      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003a88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a8c:	d10f      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8e:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	4a3a      	ldr	r2, [pc, #232]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a9a:	e00c      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 fcba 	bl	800541c <RCCEx_PLL2_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003aac:	e003      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003abc:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac8:	492c      	ldr	r1, [pc, #176]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	650b      	str	r3, [r1, #80]	; 0x50
 8003ace:	e001      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d032      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d81b      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003ae8:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b27 	.word	0x08003b27
 8003af4:	08003b01 	.word	0x08003b01
 8003af8:	08003b0f 	.word	0x08003b0f
 8003afc:	08003b27 	.word	0x08003b27
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b0c:	e00c      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fc81 	bl	800541c <RCCEx_PLL2_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b1e:	e003      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]
      break;
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	4910      	ldr	r1, [pc, #64]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b40:	e001      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 808a 	beq.w	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b60:	f7fd fb7a 	bl	8001258 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b66:	e00d      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b68:	f7fd fb76 	bl	8001258 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d906      	bls.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	75fb      	strb	r3, [r7, #23]
        break;
 8003b7a:	e009      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003b7c:	58024400 	.word	0x58024400
 8003b80:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b84:	4bba      	ldr	r3, [pc, #744]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0eb      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d166      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b96:	4bb7      	ldr	r3, [pc, #732]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ba0:	4053      	eors	r3, r2
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d013      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003baa:	4bb2      	ldr	r3, [pc, #712]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bb4:	4baf      	ldr	r3, [pc, #700]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	4aae      	ldr	r2, [pc, #696]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc0:	4bac      	ldr	r3, [pc, #688]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	4aab      	ldr	r2, [pc, #684]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bcc:	4aa9      	ldr	r2, [pc, #676]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bdc:	d115      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fd fb3b 	bl	8001258 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be4:	e00b      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fd fb37 	bl	8001258 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d902      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	75fb      	strb	r3, [r7, #23]
            break;
 8003bfc:	e005      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bfe:	4b9d      	ldr	r3, [pc, #628]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ed      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d126      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c1e:	d10d      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003c20:	4b94      	ldr	r3, [pc, #592]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c2e:	0919      	lsrs	r1, r3, #4
 8003c30:	4b91      	ldr	r3, [pc, #580]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003c32:	400b      	ands	r3, r1
 8003c34:	498f      	ldr	r1, [pc, #572]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	610b      	str	r3, [r1, #16]
 8003c3a:	e005      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003c3c:	4b8d      	ldr	r3, [pc, #564]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	4a8c      	ldr	r2, [pc, #560]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c46:	6113      	str	r3, [r2, #16]
 8003c48:	4b8a      	ldr	r3, [pc, #552]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c56:	4987      	ldr	r1, [pc, #540]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	670b      	str	r3, [r1, #112]	; 0x70
 8003c5c:	e004      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	75bb      	strb	r3, [r7, #22]
 8003c62:	e001      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d07f      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7a:	2b28      	cmp	r3, #40	; 0x28
 8003c7c:	d866      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003d53 	.word	0x08003d53
 8003c88:	08003d4d 	.word	0x08003d4d
 8003c8c:	08003d4d 	.word	0x08003d4d
 8003c90:	08003d4d 	.word	0x08003d4d
 8003c94:	08003d4d 	.word	0x08003d4d
 8003c98:	08003d4d 	.word	0x08003d4d
 8003c9c:	08003d4d 	.word	0x08003d4d
 8003ca0:	08003d4d 	.word	0x08003d4d
 8003ca4:	08003d29 	.word	0x08003d29
 8003ca8:	08003d4d 	.word	0x08003d4d
 8003cac:	08003d4d 	.word	0x08003d4d
 8003cb0:	08003d4d 	.word	0x08003d4d
 8003cb4:	08003d4d 	.word	0x08003d4d
 8003cb8:	08003d4d 	.word	0x08003d4d
 8003cbc:	08003d4d 	.word	0x08003d4d
 8003cc0:	08003d4d 	.word	0x08003d4d
 8003cc4:	08003d3b 	.word	0x08003d3b
 8003cc8:	08003d4d 	.word	0x08003d4d
 8003ccc:	08003d4d 	.word	0x08003d4d
 8003cd0:	08003d4d 	.word	0x08003d4d
 8003cd4:	08003d4d 	.word	0x08003d4d
 8003cd8:	08003d4d 	.word	0x08003d4d
 8003cdc:	08003d4d 	.word	0x08003d4d
 8003ce0:	08003d4d 	.word	0x08003d4d
 8003ce4:	08003d53 	.word	0x08003d53
 8003ce8:	08003d4d 	.word	0x08003d4d
 8003cec:	08003d4d 	.word	0x08003d4d
 8003cf0:	08003d4d 	.word	0x08003d4d
 8003cf4:	08003d4d 	.word	0x08003d4d
 8003cf8:	08003d4d 	.word	0x08003d4d
 8003cfc:	08003d4d 	.word	0x08003d4d
 8003d00:	08003d4d 	.word	0x08003d4d
 8003d04:	08003d53 	.word	0x08003d53
 8003d08:	08003d4d 	.word	0x08003d4d
 8003d0c:	08003d4d 	.word	0x08003d4d
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d4d 	.word	0x08003d4d
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003d4d 	.word	0x08003d4d
 8003d20:	08003d4d 	.word	0x08003d4d
 8003d24:	08003d53 	.word	0x08003d53
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 fb74 	bl	800541c <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d38:	e00c      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3324      	adds	r3, #36	; 0x24
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 fc1d 	bl	8005580 <RCCEx_PLL3_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d4a:	e003      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d50:	e000      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d5a:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d68:	4942      	ldr	r1, [pc, #264]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	654b      	str	r3, [r1, #84]	; 0x54
 8003d6e:	e001      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d038      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d84:	2b05      	cmp	r3, #5
 8003d86:	d821      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003d88:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003dd3 	.word	0x08003dd3
 8003d94:	08003da9 	.word	0x08003da9
 8003d98:	08003dbb 	.word	0x08003dbb
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003dd3 	.word	0x08003dd3
 8003da4:	08003dd3 	.word	0x08003dd3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 fb34 	bl	800541c <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003db8:	e00c      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3324      	adds	r3, #36	; 0x24
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fbdd 	bl	8005580 <RCCEx_PLL3_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dda:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f023 0207 	bic.w	r2, r3, #7
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de6:	4923      	ldr	r1, [pc, #140]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	654b      	str	r3, [r1, #84]	; 0x54
 8003dec:	e001      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d040      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d821      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e53 	.word	0x08003e53
 8003e14:	08003e29 	.word	0x08003e29
 8003e18:	08003e3b 	.word	0x08003e3b
 8003e1c:	08003e53 	.word	0x08003e53
 8003e20:	08003e53 	.word	0x08003e53
 8003e24:	08003e53 	.word	0x08003e53
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 faf4 	bl	800541c <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e38:	e00c      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3324      	adds	r3, #36	; 0x24
 8003e3e:	2101      	movs	r1, #1
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 fb9d 	bl	8005580 <RCCEx_PLL3_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e4a:	e003      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	e000      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d110      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	f023 0207 	bic.w	r2, r3, #7
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e68:	4902      	ldr	r1, [pc, #8]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e6e:	e007      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003e70:	58024800 	.word	0x58024800
 8003e74:	58024400 	.word	0x58024400
 8003e78:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d04b      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e96:	d02e      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e9c:	d828      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d02a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea8:	d822      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003eaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003eae:	d026      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003eb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003eb4:	d81c      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eba:	d010      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec0:	d816      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01d      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eca:	d111      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 faa2 	bl	800541c <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003edc:	e012      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3324      	adds	r3, #36	; 0x24
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 fb4b 	bl	8005580 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003eee:	e009      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef4:	e006      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e004      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003efa:	bf00      	nop
 8003efc:	e002      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003efe:	bf00      	nop
 8003f00:	e000      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f0a:	4bb3      	ldr	r3, [pc, #716]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f18:	49af      	ldr	r1, [pc, #700]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	654b      	str	r3, [r1, #84]	; 0x54
 8003f1e:	e001      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d04b      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f3a:	d02e      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003f3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f40:	d828      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f46:	d02a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d822      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f52:	d026      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f58:	d81c      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5e:	d010      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f64:	d816      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01d      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d111      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fa50 	bl	800541c <RCCEx_PLL2_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f80:	e012      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3324      	adds	r3, #36	; 0x24
 8003f86:	2102      	movs	r1, #2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 faf9 	bl	8005580 <RCCEx_PLL3_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f92:	e009      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	75fb      	strb	r3, [r7, #23]
      break;
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e004      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fae:	4b8a      	ldr	r3, [pc, #552]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fbc:	4986      	ldr	r1, [pc, #536]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	658b      	str	r3, [r1, #88]	; 0x58
 8003fc2:	e001      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d04b      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fde:	d02e      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003fe0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fe4:	d828      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fea:	d02a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff0:	d822      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003ff2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ff6:	d026      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003ff8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ffc:	d81c      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004002:	d010      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004008:	d816      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01d      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004012:	d111      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f001 f9fe 	bl	800541c <RCCEx_PLL2_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004024:	e012      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3324      	adds	r3, #36	; 0x24
 800402a:	2102      	movs	r1, #2
 800402c:	4618      	mov	r0, r3
 800402e:	f001 faa7 	bl	8005580 <RCCEx_PLL3_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004036:	e009      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
      break;
 800403c:	e006      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800403e:	bf00      	nop
 8004040:	e004      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004042:	bf00      	nop
 8004044:	e002      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004046:	bf00      	nop
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800404a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004052:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004060:	495d      	ldr	r1, [pc, #372]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004062:	4313      	orrs	r3, r2
 8004064:	658b      	str	r3, [r1, #88]	; 0x58
 8004066:	e001      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004082:	d10a      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3324      	adds	r3, #36	; 0x24
 8004088:	2102      	movs	r1, #2
 800408a:	4618      	mov	r0, r3
 800408c:	f001 fa78 	bl	8005580 <RCCEx_PLL3_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800409a:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a8:	494b      	ldr	r1, [pc, #300]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c4:	d10a      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3324      	adds	r3, #36	; 0x24
 80040ca:	2102      	movs	r1, #2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 fa57 	bl	8005580 <RCCEx_PLL3_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040dc:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ea:	493b      	ldr	r1, [pc, #236]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d034      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004106:	d01d      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800410c:	d817      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004116:	d009      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004118:	e011      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3304      	adds	r3, #4
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f001 f97b 	bl	800541c <RCCEx_PLL2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800412a:	e00c      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3324      	adds	r3, #36	; 0x24
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f001 fa24 	bl	8005580 <RCCEx_PLL3_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800413c:	e003      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
      break;
 8004142:	e000      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004146:	7dfb      	ldrb	r3, [r7, #23]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800414c:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800415a:	491f      	ldr	r1, [pc, #124]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800415c:	4313      	orrs	r3, r2
 800415e:	658b      	str	r3, [r1, #88]	; 0x58
 8004160:	e001      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	7dfb      	ldrb	r3, [r7, #23]
 8004164:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d036      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004178:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800417c:	d01c      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800417e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004182:	d816      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004188:	d003      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800418a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800418e:	d007      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004190:	e00f      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	4a10      	ldr	r2, [pc, #64]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800419c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800419e:	e00c      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3324      	adds	r3, #36	; 0x24
 80041a4:	2101      	movs	r1, #1
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 f9ea 	bl	8005580 <RCCEx_PLL3_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
      break;
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80041b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10d      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ce:	4902      	ldr	r1, [pc, #8]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	654b      	str	r3, [r1, #84]	; 0x54
 80041d4:	e004      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80041d6:	bf00      	nop
 80041d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d029      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80041f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f8:	d007      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80041fa:	e00f      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041fc:	4b69      	ldr	r3, [pc, #420]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	4a68      	ldr	r2, [pc, #416]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004208:	e00b      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	2102      	movs	r1, #2
 8004210:	4618      	mov	r0, r3
 8004212:	f001 f903 	bl	800541c <RCCEx_PLL2_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800421a:	e002      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	75fb      	strb	r3, [r7, #23]
      break;
 8004220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004228:	4b5e      	ldr	r3, [pc, #376]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004234:	495b      	ldr	r1, [pc, #364]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004236:	4313      	orrs	r3, r2
 8004238:	64cb      	str	r3, [r1, #76]	; 0x4c
 800423a:	e001      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3324      	adds	r3, #36	; 0x24
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f994 	bl	8005580 <RCCEx_PLL3_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d032      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004278:	d017      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800427a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427e:	d811      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004284:	d013      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428a:	d80b      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004294:	d106      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004296:	4b43      	ldr	r3, [pc, #268]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	4a42      	ldr	r2, [pc, #264]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800429c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80042a2:	e007      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	75fb      	strb	r3, [r7, #23]
      break;
 80042a8:	e004      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80042aa:	bf00      	nop
 80042ac:	e002      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80042b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042ba:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c8:	4936      	ldr	r1, [pc, #216]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	654b      	str	r3, [r1, #84]	; 0x54
 80042ce:	e001      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042e0:	4b30      	ldr	r3, [pc, #192]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ec:	492d      	ldr	r1, [pc, #180]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042fe:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004302:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800430a:	4926      	ldr	r1, [pc, #152]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800430c:	4313      	orrs	r3, r2
 800430e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	491e      	ldr	r1, [pc, #120]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800432a:	4313      	orrs	r3, r2
 800432c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004344:	6113      	str	r3, [r2, #16]
 8004346:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004350:	4914      	ldr	r1, [pc, #80]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004352:	4313      	orrs	r3, r2
 8004354:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	da08      	bge.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800435e:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436a:	490e      	ldr	r1, [pc, #56]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800436c:	4313      	orrs	r3, r2
 800436e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d009      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	4906      	ldr	r1, [pc, #24]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800438c:	4313      	orrs	r3, r2
 800438e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004390:	7dbb      	ldrb	r3, [r7, #22]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	58024400 	.word	0x58024400

080043a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b090      	sub	sp, #64	; 0x40
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b6:	f040 8089 	bne.w	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80043ba:	4ba8      	ldr	r3, [pc, #672]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d87d      	bhi.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80043ca:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80043cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d0:	080043e5 	.word	0x080043e5
 80043d4:	08004409 	.word	0x08004409
 80043d8:	0800442d 	.word	0x0800442d
 80043dc:	080044c1 	.word	0x080044c1
 80043e0:	08004451 	.word	0x08004451

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80043e4:	4b9d      	ldr	r3, [pc, #628]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043f0:	d107      	bne.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 febe 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004400:	e3f5      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004406:	e3f2      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004408:	4b94      	ldr	r3, [pc, #592]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004414:	d107      	bne.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004416:	f107 0318 	add.w	r3, r7, #24
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fc04 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004424:	e3e3      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800442a:	e3e0      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800442c:	4b8b      	ldr	r3, [pc, #556]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004438:	d107      	bne.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800443a:	f107 030c 	add.w	r3, r7, #12
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fd46 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004448:	e3d1      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800444e:	e3ce      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004450:	4b82      	ldr	r3, [pc, #520]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004458:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800445a:	4b80      	ldr	r3, [pc, #512]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b04      	cmp	r3, #4
 8004464:	d10c      	bne.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800446c:	4b7b      	ldr	r3, [pc, #492]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	08db      	lsrs	r3, r3, #3
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	4a7a      	ldr	r2, [pc, #488]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447e:	e01e      	b.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004480:	4b76      	ldr	r3, [pc, #472]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448c:	d106      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004494:	d102      	bne.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004496:	4b73      	ldr	r3, [pc, #460]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800449a:	e010      	b.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800449c:	4b6f      	ldr	r3, [pc, #444]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a8:	d106      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80044aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b0:	d102      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80044b2:	4b6d      	ldr	r3, [pc, #436]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b6:	e002      	b.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80044bc:	e397      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80044be:	e396      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80044c0:	4b6a      	ldr	r3, [pc, #424]	; (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80044c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044c4:	e393      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044ca:	e390      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d2:	f040 8095 	bne.w	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80044d6:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044da:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80044de:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e6:	d04d      	beq.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ee:	f200 8084 	bhi.w	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	2bc0      	cmp	r3, #192	; 0xc0
 80044f6:	d07d      	beq.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	2bc0      	cmp	r3, #192	; 0xc0
 80044fc:	d87d      	bhi.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d02d      	beq.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	2b80      	cmp	r3, #128	; 0x80
 8004508:	d877      	bhi.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d012      	beq.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004516:	e070      	b.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004518:	4b50      	ldr	r3, [pc, #320]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004524:	d107      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fe24 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004534:	e35b      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800453a:	e358      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800453c:	4b47      	ldr	r3, [pc, #284]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004548:	d107      	bne.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800454a:	f107 0318 	add.w	r3, r7, #24
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fb6a 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004558:	e349      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800455e:	e346      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004560:	4b3e      	ldr	r3, [pc, #248]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800456c:	d107      	bne.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800456e:	f107 030c 	add.w	r3, r7, #12
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fcac 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800457c:	e337      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004582:	e334      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004584:	4b35      	ldr	r3, [pc, #212]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800458c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800458e:	4b33      	ldr	r3, [pc, #204]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d10c      	bne.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 800459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045a0:	4b2e      	ldr	r3, [pc, #184]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	08db      	lsrs	r3, r3, #3
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	4a2d      	ldr	r2, [pc, #180]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b2:	e01e      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80045b4:	4b29      	ldr	r3, [pc, #164]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c0:	d106      	bne.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80045c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c8:	d102      	bne.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80045ca:	4b26      	ldr	r3, [pc, #152]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80045cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ce:	e010      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80045d0:	4b22      	ldr	r3, [pc, #136]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045dc:	d106      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80045de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e4:	d102      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80045e6:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ea:	e002      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80045f0:	e2fd      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80045f2:	e2fc      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80045f4:	4b1d      	ldr	r3, [pc, #116]	; (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045f8:	e2f9      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045fe:	e2f6      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004606:	f040 80a7 	bne.w	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800460c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004612:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461a:	d05f      	beq.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004622:	f200 8096 	bhi.w	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800462c:	f000 808e 	beq.w	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004636:	f200 808c 	bhi.w	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004640:	d03a      	beq.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004648:	f200 8083 	bhi.w	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00e      	beq.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004658:	d01c      	beq.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 800465a:	e07a      	b.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800465c:	58024400 	.word	0x58024400
 8004660:	03d09000 	.word	0x03d09000
 8004664:	003d0900 	.word	0x003d0900
 8004668:	007a1200 	.word	0x007a1200
 800466c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004670:	4ba8      	ldr	r3, [pc, #672]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800467c:	d107      	bne.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800467e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fd78 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800468c:	e2af      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004692:	e2ac      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004694:	4b9f      	ldr	r3, [pc, #636]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800469c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a0:	d107      	bne.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046a2:	f107 0318 	add.w	r3, r7, #24
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fabe 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046b0:	e29d      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046b6:	e29a      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046b8:	4b96      	ldr	r3, [pc, #600]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c4:	d107      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046c6:	f107 030c 	add.w	r3, r7, #12
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fc00 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046d4:	e28b      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046da:	e288      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80046dc:	4b8d      	ldr	r3, [pc, #564]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80046de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80046e6:	4b8b      	ldr	r3, [pc, #556]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d10c      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80046f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046f8:	4b86      	ldr	r3, [pc, #536]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	08db      	lsrs	r3, r3, #3
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	4a85      	ldr	r2, [pc, #532]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
 8004708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470a:	e01e      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800470c:	4b81      	ldr	r3, [pc, #516]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004718:	d106      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 800471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004720:	d102      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004722:	4b7e      	ldr	r3, [pc, #504]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004726:	e010      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004728:	4b7a      	ldr	r3, [pc, #488]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004734:	d106      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800473c:	d102      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800473e:	4b78      	ldr	r3, [pc, #480]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004742:	e002      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004748:	e251      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800474a:	e250      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800474c:	4b75      	ldr	r3, [pc, #468]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004750:	e24d      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004756:	e24a      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	f040 809c 	bne.w	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004762:	4b6c      	ldr	r3, [pc, #432]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004766:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800476a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004772:	d054      	beq.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800477a:	f200 808b 	bhi.w	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004784:	f000 8083 	beq.w	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800478e:	f200 8081 	bhi.w	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004798:	d02f      	beq.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a0:	d878      	bhi.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80047a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d012      	beq.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80047b0:	e070      	b.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047b2:	4b58      	ldr	r3, [pc, #352]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047be:	d107      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fcd7 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047ce:	e20e      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047d4:	e20b      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047d6:	4b4f      	ldr	r3, [pc, #316]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e2:	d107      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e4:	f107 0318 	add.w	r3, r7, #24
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fa1d 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047f2:	e1fc      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047f8:	e1f9      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047fa:	4b46      	ldr	r3, [pc, #280]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004806:	d107      	bne.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fb5f 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004816:	e1ea      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800481c:	e1e7      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800481e:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004822:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004826:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004828:	4b3a      	ldr	r3, [pc, #232]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d10c      	bne.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800483a:	4b36      	ldr	r3, [pc, #216]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	08db      	lsrs	r3, r3, #3
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	4a34      	ldr	r2, [pc, #208]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484c:	e01e      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800484e:	4b31      	ldr	r3, [pc, #196]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485a:	d106      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004862:	d102      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004864:	4b2d      	ldr	r3, [pc, #180]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004868:	e010      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800486a:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004876:	d106      	bne.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800487e:	d102      	bne.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004884:	e002      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800488a:	e1b0      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800488c:	e1af      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800488e:	4b25      	ldr	r3, [pc, #148]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004892:	e1ac      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004898:	e1a9      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048a0:	d17d      	bne.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80048a2:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b2:	d039      	beq.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ba:	d86d      	bhi.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80048bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d004      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 80048c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c8:	d012      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80048ca:	e065      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048cc:	4b11      	ldr	r3, [pc, #68]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d8:	d107      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048da:	f107 0318 	add.w	r3, r7, #24
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f9a2 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048e8:	e181      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048ee:	e17e      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048f0:	4b08      	ldr	r3, [pc, #32]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048fc:	d107      	bne.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fae4 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800490c:	e16f      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004912:	e16c      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004914:	58024400 	.word	0x58024400
 8004918:	03d09000 	.word	0x03d09000
 800491c:	003d0900 	.word	0x003d0900
 8004920:	007a1200 	.word	0x007a1200
 8004924:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004928:	4ba0      	ldr	r3, [pc, #640]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800492a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004930:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004932:	4b9e      	ldr	r3, [pc, #632]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b04      	cmp	r3, #4
 800493c:	d10c      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800493e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004944:	4b99      	ldr	r3, [pc, #612]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	08db      	lsrs	r3, r3, #3
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	4a98      	ldr	r2, [pc, #608]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004956:	e01e      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004958:	4b94      	ldr	r3, [pc, #592]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004964:	d106      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800496c:	d102      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800496e:	4b91      	ldr	r3, [pc, #580]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004972:	e010      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004974:	4b8d      	ldr	r3, [pc, #564]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004980:	d106      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004988:	d102      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800498a:	4b8b      	ldr	r3, [pc, #556]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498e:	e002      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004994:	e12b      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004996:	e12a      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800499c:	e127      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d133      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80049a6:	4b81      	ldr	r3, [pc, #516]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80049a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d012      	beq.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80049be:	e023      	b.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049c0:	4b7a      	ldr	r3, [pc, #488]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049cc:	d107      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fbd0 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80049dc:	e107      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049e2:	e104      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049e4:	4b71      	ldr	r3, [pc, #452]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049f0:	d107      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049f2:	f107 0318 	add.w	r3, r7, #24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f916 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004a00:	e0f5      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a06:	e0f2      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a0c:	e0ef      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a14:	f040 8091 	bne.w	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004a18:	4b64      	ldr	r3, [pc, #400]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004a20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004a28:	f000 8081 	beq.w	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004a32:	d87f      	bhi.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a3a:	d06b      	beq.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a42:	d877      	bhi.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d056      	beq.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d86f      	bhi.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a5a:	d03b      	beq.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a62:	d867      	bhi.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6a:	d021      	beq.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a72:	d85f      	bhi.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a80:	d004      	beq.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004a82:	e057      	b.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004a84:	f000 f8ba 	bl	8004bfc <HAL_RCCEx_GetD3PCLK1Freq>
 8004a88:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004a8a:	e0b0      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a8c:	4b47      	ldr	r3, [pc, #284]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a98:	d107      	bne.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a9a:	f107 0318 	add.w	r3, r7, #24
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f8c2 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004aa8:	e0a1      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004aae:	e09e      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ab0:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004abc:	d107      	bne.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004abe:	f107 030c 	add.w	r3, r7, #12
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fa04 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004acc:	e08f      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad2:	e08c      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ad4:	4b35      	ldr	r3, [pc, #212]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d109      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ae0:	4b32      	ldr	r3, [pc, #200]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	08db      	lsrs	r3, r3, #3
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004af2:	e07c      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af8:	e079      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004afa:	4b2c      	ldr	r3, [pc, #176]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b06:	d102      	bne.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8004b08:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b0c:	e06f      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b12:	e06c      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b20:	d102      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8004b22:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b26:	e062      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b2c:	e05f      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b2e:	4b23      	ldr	r3, [pc, #140]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b32:	e05c      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b38:	e059      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b40:	d153      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004b42:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b4a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b52:	d035      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5a:	d843      	bhi.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b68:	d00d      	beq.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8004b6a:	e03b      	b.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b78:	d102      	bne.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b7e:	e036      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b84:	e033      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b86:	4b09      	ldr	r3, [pc, #36]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b92:	d107      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 faed 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ba2:	e024      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ba8:	e021      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
 8004bb0:	03d09000 	.word	0x03d09000
 8004bb4:	003d0900 	.word	0x003d0900
 8004bb8:	007a1200 	.word	0x007a1200
 8004bbc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bc0:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bcc:	d107      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bce:	f107 0318 	add.w	r3, r7, #24
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f828 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004bdc:	e007      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004be2:	e004      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004be8:	e001      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3740      	adds	r7, #64	; 0x40
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	58024400 	.word	0x58024400

08004bfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004c00:	f7fe fc6a 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	4904      	ldr	r1, [pc, #16]	; (8004c24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	58024400 	.word	0x58024400
 8004c24:	080074a0 	.word	0x080074a0

08004c28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	; 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c30:	4ba1      	ldr	r3, [pc, #644]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004c3a:	4b9f      	ldr	r3, [pc, #636]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	0b1b      	lsrs	r3, r3, #12
 8004c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c46:	4b9c      	ldr	r3, [pc, #624]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c52:	4b99      	ldr	r3, [pc, #612]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8111 	beq.w	8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	f000 8083 	beq.w	8004d84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	f200 80a1 	bhi.w	8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d056      	beq.n	8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c92:	e099      	b.n	8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c94:	4b88      	ldr	r3, [pc, #544]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d02d      	beq.n	8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ca0:	4b85      	ldr	r3, [pc, #532]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	08db      	lsrs	r3, r3, #3
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	4a84      	ldr	r2, [pc, #528]	; (8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	ee07 3a90 	vmov	s15, r3
 8004cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cca:	4b7b      	ldr	r3, [pc, #492]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cde:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004cfa:	e087      	b.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0e:	4b6a      	ldr	r3, [pc, #424]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d3e:	e065      	b.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d52:	4b59      	ldr	r3, [pc, #356]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d82:	e043      	b.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d96:	4b48      	ldr	r3, [pc, #288]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004daa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dc6:	e021      	b.n	8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dda:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004e0c:	4b2a      	ldr	r3, [pc, #168]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	0a5b      	lsrs	r3, r3, #9
 8004e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e32:	ee17 2a90 	vmov	r2, s15
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	0c1b      	lsrs	r3, r3, #16
 8004e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e60:	ee17 2a90 	vmov	r2, s15
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	0e1b      	lsrs	r3, r3, #24
 8004e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8e:	ee17 2a90 	vmov	r2, s15
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e96:	e008      	b.n	8004eaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	609a      	str	r2, [r3, #8]
}
 8004eaa:	bf00      	nop
 8004eac:	3724      	adds	r7, #36	; 0x24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	03d09000 	.word	0x03d09000
 8004ec0:	46000000 	.word	0x46000000
 8004ec4:	4c742400 	.word	0x4c742400
 8004ec8:	4a742400 	.word	0x4a742400
 8004ecc:	4af42400 	.word	0x4af42400

08004ed0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b089      	sub	sp, #36	; 0x24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ed8:	4ba1      	ldr	r3, [pc, #644]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ee2:	4b9f      	ldr	r3, [pc, #636]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	0d1b      	lsrs	r3, r3, #20
 8004ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004eee:	4b9c      	ldr	r3, [pc, #624]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004efa:	4b99      	ldr	r3, [pc, #612]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	08db      	lsrs	r3, r3, #3
 8004f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8111 	beq.w	8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	f000 8083 	beq.w	800502c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	f200 80a1 	bhi.w	8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d056      	beq.n	8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f3a:	e099      	b.n	8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f3c:	4b88      	ldr	r3, [pc, #544]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02d      	beq.n	8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f48:	4b85      	ldr	r3, [pc, #532]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	08db      	lsrs	r3, r3, #3
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	4a84      	ldr	r2, [pc, #528]	; (8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f72:	4b7b      	ldr	r3, [pc, #492]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004fa2:	e087      	b.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800516c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb6:	4b6a      	ldr	r3, [pc, #424]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fe6:	e065      	b.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffa:	4b59      	ldr	r3, [pc, #356]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500a:	ed97 6a03 	vldr	s12, [r7, #12]
 800500e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800501e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800502a:	e043      	b.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005036:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800503a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503e:	4b48      	ldr	r3, [pc, #288]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005052:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800506e:	e021      	b.n	80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800507e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005082:	4b37      	ldr	r3, [pc, #220]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005092:	ed97 6a03 	vldr	s12, [r7, #12]
 8005096:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800509a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80050b4:	4b2a      	ldr	r3, [pc, #168]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	0a5b      	lsrs	r3, r3, #9
 80050ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050da:	ee17 2a90 	vmov	r2, s15
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80050e2:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	0c1b      	lsrs	r3, r3, #16
 80050e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ec:	ee07 3a90 	vmov	s15, r3
 80050f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005108:	ee17 2a90 	vmov	r2, s15
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005110:	4b13      	ldr	r3, [pc, #76]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	0e1b      	lsrs	r3, r3, #24
 8005116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800512a:	edd7 6a07 	vldr	s13, [r7, #28]
 800512e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005136:	ee17 2a90 	vmov	r2, s15
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800513e:	e008      	b.n	8005152 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	609a      	str	r2, [r3, #8]
}
 8005152:	bf00      	nop
 8005154:	3724      	adds	r7, #36	; 0x24
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	58024400 	.word	0x58024400
 8005164:	03d09000 	.word	0x03d09000
 8005168:	46000000 	.word	0x46000000
 800516c:	4c742400 	.word	0x4c742400
 8005170:	4a742400 	.word	0x4a742400
 8005174:	4af42400 	.word	0x4af42400

08005178 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005178:	b480      	push	{r7}
 800517a:	b089      	sub	sp, #36	; 0x24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005180:	4ba0      	ldr	r3, [pc, #640]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800518a:	4b9e      	ldr	r3, [pc, #632]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005194:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005196:	4b9b      	ldr	r3, [pc, #620]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80051a0:	4b98      	ldr	r3, [pc, #608]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a4:	08db      	lsrs	r3, r3, #3
 80051a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	fb02 f303 	mul.w	r3, r2, r3
 80051b0:	ee07 3a90 	vmov	s15, r3
 80051b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8111 	beq.w	80053e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	f000 8083 	beq.w	80052d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	f200 80a1 	bhi.w	8005316 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d056      	beq.n	800528e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80051e0:	e099      	b.n	8005316 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e2:	4b88      	ldr	r3, [pc, #544]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02d      	beq.n	800524a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051ee:	4b85      	ldr	r3, [pc, #532]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	08db      	lsrs	r3, r3, #3
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	4a83      	ldr	r2, [pc, #524]	; (8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80051fa:	fa22 f303 	lsr.w	r3, r2, r3
 80051fe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	ee07 3a90 	vmov	s15, r3
 8005210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005218:	4b7a      	ldr	r3, [pc, #488]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005220:	ee07 3a90 	vmov	s15, r3
 8005224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005228:	ed97 6a03 	vldr	s12, [r7, #12]
 800522c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800540c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800523c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005244:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005248:	e087      	b.n	800535a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	ee07 3a90 	vmov	s15, r3
 8005250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005254:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005410 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525c:	4b69      	ldr	r3, [pc, #420]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005264:	ee07 3a90 	vmov	s15, r3
 8005268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005270:	eddf 5a66 	vldr	s11, [pc, #408]	; 800540c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005288:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800528c:	e065      	b.n	800535a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	ee07 3a90 	vmov	s15, r3
 8005294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005298:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800529c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a0:	4b58      	ldr	r3, [pc, #352]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a8:	ee07 3a90 	vmov	s15, r3
 80052ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80052b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800540c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80052b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052d0:	e043      	b.n	800535a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	ee07 3a90 	vmov	s15, r3
 80052d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005418 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80052e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e4:	4b47      	ldr	r3, [pc, #284]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80052f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800540c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80052fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005310:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005314:	e021      	b.n	800535a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005320:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005410 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005328:	4b36      	ldr	r3, [pc, #216]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005330:	ee07 3a90 	vmov	s15, r3
 8005334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005338:	ed97 6a03 	vldr	s12, [r7, #12]
 800533c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800540c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005348:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800534c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005354:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005358:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800535a:	4b2a      	ldr	r3, [pc, #168]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	0a5b      	lsrs	r3, r3, #9
 8005360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005370:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005374:	edd7 6a07 	vldr	s13, [r7, #28]
 8005378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800537c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005380:	ee17 2a90 	vmov	r2, s15
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005388:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800539e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ae:	ee17 2a90 	vmov	r2, s15
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	0e1b      	lsrs	r3, r3, #24
 80053bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053dc:	ee17 2a90 	vmov	r2, s15
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80053e4:	e008      	b.n	80053f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	609a      	str	r2, [r3, #8]
}
 80053f8:	bf00      	nop
 80053fa:	3724      	adds	r7, #36	; 0x24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	58024400 	.word	0x58024400
 8005408:	03d09000 	.word	0x03d09000
 800540c:	46000000 	.word	0x46000000
 8005410:	4c742400 	.word	0x4c742400
 8005414:	4a742400 	.word	0x4a742400
 8005418:	4af42400 	.word	0x4af42400

0800541c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800542a:	4b53      	ldr	r3, [pc, #332]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b03      	cmp	r3, #3
 8005434:	d101      	bne.n	800543a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e099      	b.n	800556e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800543a:	4b4f      	ldr	r3, [pc, #316]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a4e      	ldr	r2, [pc, #312]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005440:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005446:	f7fb ff07 	bl	8001258 <HAL_GetTick>
 800544a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800544c:	e008      	b.n	8005460 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800544e:	f7fb ff03 	bl	8001258 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e086      	b.n	800556e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005460:	4b45      	ldr	r3, [pc, #276]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f0      	bne.n	800544e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800546c:	4b42      	ldr	r3, [pc, #264]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	031b      	lsls	r3, r3, #12
 800547a:	493f      	ldr	r1, [pc, #252]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 800547c:	4313      	orrs	r3, r2
 800547e:	628b      	str	r3, [r1, #40]	; 0x28
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	3b01      	subs	r3, #1
 8005486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	3b01      	subs	r3, #1
 8005490:	025b      	lsls	r3, r3, #9
 8005492:	b29b      	uxth	r3, r3
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	3b01      	subs	r3, #1
 800549c:	041b      	lsls	r3, r3, #16
 800549e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	061b      	lsls	r3, r3, #24
 80054ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054b0:	4931      	ldr	r1, [pc, #196]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054b6:	4b30      	ldr	r3, [pc, #192]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	492d      	ldr	r1, [pc, #180]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054c8:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	f023 0220 	bic.w	r2, r3, #32
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	4928      	ldr	r1, [pc, #160]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054da:	4b27      	ldr	r3, [pc, #156]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	4a26      	ldr	r2, [pc, #152]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054e0:	f023 0310 	bic.w	r3, r3, #16
 80054e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054e6:	4b24      	ldr	r3, [pc, #144]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <RCCEx_PLL2_Config+0x160>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	69d2      	ldr	r2, [r2, #28]
 80054f2:	00d2      	lsls	r2, r2, #3
 80054f4:	4920      	ldr	r1, [pc, #128]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054fa:	4b1f      	ldr	r3, [pc, #124]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005500:	f043 0310 	orr.w	r3, r3, #16
 8005504:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800550c:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	4a19      	ldr	r2, [pc, #100]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005516:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005518:	e00f      	b.n	800553a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d106      	bne.n	800552e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005520:	4b15      	ldr	r3, [pc, #84]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	4a14      	ldr	r2, [pc, #80]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800552a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800552c:	e005      	b.n	800553a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800552e:	4b12      	ldr	r3, [pc, #72]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	4a11      	ldr	r2, [pc, #68]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005538:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a0e      	ldr	r2, [pc, #56]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005540:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005546:	f7fb fe87 	bl	8001258 <HAL_GetTick>
 800554a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800554c:	e008      	b.n	8005560 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800554e:	f7fb fe83 	bl	8001258 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e006      	b.n	800556e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005560:	4b05      	ldr	r3, [pc, #20]	; (8005578 <RCCEx_PLL2_Config+0x15c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	58024400 	.word	0x58024400
 800557c:	ffff0007 	.word	0xffff0007

08005580 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800558e:	4b53      	ldr	r3, [pc, #332]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b03      	cmp	r3, #3
 8005598:	d101      	bne.n	800559e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e099      	b.n	80056d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800559e:	4b4f      	ldr	r3, [pc, #316]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a4e      	ldr	r2, [pc, #312]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 80055a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055aa:	f7fb fe55 	bl	8001258 <HAL_GetTick>
 80055ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055b0:	e008      	b.n	80055c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80055b2:	f7fb fe51 	bl	8001258 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e086      	b.n	80056d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055c4:	4b45      	ldr	r3, [pc, #276]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f0      	bne.n	80055b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055d0:	4b42      	ldr	r3, [pc, #264]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	051b      	lsls	r3, r3, #20
 80055de:	493f      	ldr	r1, [pc, #252]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	628b      	str	r3, [r1, #40]	; 0x28
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	025b      	lsls	r3, r3, #9
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	3b01      	subs	r3, #1
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	3b01      	subs	r3, #1
 800560e:	061b      	lsls	r3, r3, #24
 8005610:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005614:	4931      	ldr	r1, [pc, #196]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800561a:	4b30      	ldr	r3, [pc, #192]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	492d      	ldr	r1, [pc, #180]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005628:	4313      	orrs	r3, r2
 800562a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800562c:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	4928      	ldr	r1, [pc, #160]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800563e:	4b27      	ldr	r3, [pc, #156]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	4a26      	ldr	r2, [pc, #152]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005648:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800564a:	4b24      	ldr	r3, [pc, #144]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 800564c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564e:	4b24      	ldr	r3, [pc, #144]	; (80056e0 <RCCEx_PLL3_Config+0x160>)
 8005650:	4013      	ands	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	69d2      	ldr	r2, [r2, #28]
 8005656:	00d2      	lsls	r2, r2, #3
 8005658:	4920      	ldr	r1, [pc, #128]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800565e:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005670:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	4a19      	ldr	r2, [pc, #100]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005676:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800567a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800567c:	e00f      	b.n	800569e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d106      	bne.n	8005692 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005684:	4b15      	ldr	r3, [pc, #84]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	4a14      	ldr	r2, [pc, #80]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 800568a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800568e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005690:	e005      	b.n	800569e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	4a11      	ldr	r2, [pc, #68]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 8005698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800569c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800569e:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 80056a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056aa:	f7fb fdd5 	bl	8001258 <HAL_GetTick>
 80056ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056b0:	e008      	b.n	80056c4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056b2:	f7fb fdd1 	bl	8001258 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e006      	b.n	80056d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <RCCEx_PLL3_Config+0x15c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	58024400 	.word	0x58024400
 80056e0:	ffff0007 	.word	0xffff0007

080056e4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e091      	b.n	800581a <HAL_RNG_Init+0x136>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	7a5b      	ldrb	r3, [r3, #9]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d105      	bne.n	800570c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fb fb52 	bl	8000db0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0204 	bic.w	r2, r2, #4
 8005720:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4b3e      	ldr	r3, [pc, #248]	; (8005824 <HAL_RNG_Init+0x140>)
 800572a:	4013      	ands	r3, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6852      	ldr	r2, [r2, #4]
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800573a:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a39      	ldr	r2, [pc, #228]	; (8005828 <HAL_RNG_Init+0x144>)
 8005742:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a38      	ldr	r2, [pc, #224]	; (800582c <HAL_RNG_Init+0x148>)
 800574a:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800575a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800575c:	f7fb fd7c 	bl	8001258 <HAL_GetTick>
 8005760:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005762:	e016      	b.n	8005792 <HAL_RNG_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005764:	f7fb fd78 	bl	8001258 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d90f      	bls.n	8005792 <HAL_RNG_Init+0xae>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800577c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005780:	d107      	bne.n	8005792 <HAL_RNG_Init+0xae>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e043      	b.n	800581a <HAL_RNG_Init+0x136>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a0:	d0e0      	beq.n	8005764 <HAL_RNG_Init+0x80>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0204 	orr.w	r2, r2, #4
 80057b0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d104      	bne.n	80057ca <HAL_RNG_Init+0xe6>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2204      	movs	r2, #4
 80057c4:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e027      	b.n	800581a <HAL_RNG_Init+0x136>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80057ca:	f7fb fd45 	bl	8001258 <HAL_GetTick>
 80057ce:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80057d0:	e015      	b.n	80057fe <HAL_RNG_Init+0x11a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80057d2:	f7fb fd41 	bl	8001258 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d90e      	bls.n	80057fe <HAL_RNG_Init+0x11a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d107      	bne.n	80057fe <HAL_RNG_Init+0x11a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2204      	movs	r2, #4
 80057f2:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e00d      	b.n	800581a <HAL_RNG_Init+0x136>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d0e2      	beq.n	80057d2 <HAL_RNG_Init+0xee>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	bfffffdf 	.word	0xbfffffdf
 8005828:	17590abc 	.word	0x17590abc
 800582c:	000caa74 	.word	0x000caa74

08005830 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d06a      	beq.n	8005918 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fb fae2 	bl	8000e20 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	22ca      	movs	r2, #202	; 0xca
 800586a:	625a      	str	r2, [r3, #36]	; 0x24
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2253      	movs	r2, #83	; 0x53
 8005872:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fb0d 	bl	8005e94 <RTC_EnterInitMode>
 800587a:	4603      	mov	r3, r0
 800587c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d13e      	bne.n	8005902 <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6999      	ldr	r1, [r3, #24]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b25      	ldr	r3, [pc, #148]	; (8005924 <HAL_RTC_Init+0xf4>)
 8005890:	400b      	ands	r3, r1
 8005892:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6999      	ldr	r1, [r3, #24]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	0419      	lsls	r1, r3, #16
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fb1b 	bl	8005f00 <RTC_ExitInitMode>
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d116      	bne.n	8005902 <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80058e2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6999      	ldr	r1, [r3, #24]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1a      	ldr	r2, [r3, #32]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	22ff      	movs	r2, #255	; 0xff
 8005908:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d103      	bne.n	8005918 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	fb8fffbf 	.word	0xfb8fffbf

08005928 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_RTC_SetTime+0x1a>
 800593e:	2302      	movs	r3, #2
 8005940:	e089      	b.n	8005a56 <HAL_RTC_SetTime+0x12e>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2202      	movs	r2, #2
 800594e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	22ca      	movs	r2, #202	; 0xca
 8005958:	625a      	str	r2, [r3, #36]	; 0x24
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2253      	movs	r2, #83	; 0x53
 8005960:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fa96 	bl	8005e94 <RTC_EnterInitMode>
 8005968:	4603      	mov	r3, r0
 800596a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800596c:	7cfb      	ldrb	r3, [r7, #19]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d161      	bne.n	8005a36 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d126      	bne.n	80059c6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2200      	movs	r2, #0
 800598a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 faf3 	bl	8005f7c <RTC_ByteToBcd2>
 8005996:	4603      	mov	r3, r0
 8005998:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 faec 	bl	8005f7c <RTC_ByteToBcd2>
 80059a4:	4603      	mov	r3, r0
 80059a6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059a8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	789b      	ldrb	r3, [r3, #2]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fae4 	bl	8005f7c <RTC_ByteToBcd2>
 80059b4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059b6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	78db      	ldrb	r3, [r3, #3]
 80059be:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e018      	b.n	80059f8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2200      	movs	r2, #0
 80059d8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059e6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059ec:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	78db      	ldrb	r3, [r3, #3]
 80059f2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	6979      	ldr	r1, [r7, #20]
 80059fe:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <HAL_RTC_SetTime+0x138>)
 8005a00:	400b      	ands	r3, r1
 8005a02:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a12:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6999      	ldr	r1, [r3, #24]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 fa67 	bl	8005f00 <RTC_ExitInitMode>
 8005a32:	4603      	mov	r3, r0
 8005a34:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	22ff      	movs	r2, #255	; 0xff
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005a3e:	7cfb      	ldrb	r3, [r7, #19]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005a54:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd90      	pop	{r4, r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	007f7f7f 	.word	0x007f7f7f

08005a64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_RTC_SetDate+0x1a>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e073      	b.n	8005b66 <HAL_RTC_SetDate+0x102>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10e      	bne.n	8005ab2 <HAL_RTC_SetDate+0x4e>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	f023 0310 	bic.w	r3, r3, #16
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	330a      	adds	r3, #10
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d11c      	bne.n	8005af2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	78db      	ldrb	r3, [r3, #3]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fa5d 	bl	8005f7c <RTC_ByteToBcd2>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fa56 	bl	8005f7c <RTC_ByteToBcd2>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ad4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	789b      	ldrb	r3, [r3, #2]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fa4e 	bl	8005f7c <RTC_ByteToBcd2>
 8005ae0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ae2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e00e      	b.n	8005b10 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	78db      	ldrb	r3, [r3, #3]
 8005af6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005afe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b04:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	22ca      	movs	r2, #202	; 0xca
 8005b16:	625a      	str	r2, [r3, #36]	; 0x24
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2253      	movs	r2, #83	; 0x53
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f9b7 	bl	8005e94 <RTC_EnterInitMode>
 8005b26:	4603      	mov	r3, r0
 8005b28:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	6979      	ldr	r1, [r7, #20]
 8005b36:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <HAL_RTC_SetDate+0x10c>)
 8005b38:	400b      	ands	r3, r1
 8005b3a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f9df 	bl	8005f00 <RTC_ExitInitMode>
 8005b42:	4603      	mov	r3, r0
 8005b44:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	22ff      	movs	r2, #255	; 0xff
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005b4e:	7cfb      	ldrb	r3, [r7, #19]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d103      	bne.n	8005b5c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005b64:	7cfb      	ldrb	r3, [r7, #19]


}
 8005b66:	4618      	mov	r0, r3
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd90      	pop	{r4, r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	00ffff3f 	.word	0x00ffff3f

08005b74 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b089      	sub	sp, #36	; 0x24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_RTC_SetAlarm_IT+0x1a>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e127      	b.n	8005dde <HAL_RTC_SetAlarm_IT+0x26a>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if(Format == RTC_FORMAT_BIN)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d137      	bne.n	8005c14 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d102      	bne.n	8005bb8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 f9dd 	bl	8005f7c <RTC_ByteToBcd2>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f9d6 	bl	8005f7c <RTC_ByteToBcd2>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005bd4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	789b      	ldrb	r3, [r3, #2]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f9ce 	bl	8005f7c <RTC_ByteToBcd2>
 8005be0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005be2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	78db      	ldrb	r3, [r3, #3]
 8005bea:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8005bec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 f9c0 	bl	8005f7c <RTC_ByteToBcd2>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8005c00:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005c08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	e023      	b.n	8005c5c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2200      	movs	r2, #0
 8005c26:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005c34:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8005c3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	78db      	ldrb	r3, [r3, #3]
 8005c40:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8005c42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c4a:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8005c4c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8005c52:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	22ca      	movs	r2, #202	; 0xca
 8005c6e:	625a      	str	r2, [r3, #36]	; 0x24
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2253      	movs	r2, #83	; 0x53
 8005c76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c80:	d149      	bne.n	8005d16 <HAL_RTC_SetAlarm_IT+0x1a2>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c90:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0201 	orr.w	r2, r2, #1
 8005ca0:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005ca2:	f7fb fad9 	bl	8001258 <HAL_GetTick>
 8005ca6:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
 8005ca8:	e015      	b.n	8005cd6 <HAL_RTC_SetAlarm_IT+0x162>
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005caa:	f7fb fad5 	bl	8001258 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cb8:	d90d      	bls.n	8005cd6 <HAL_RTC_SetAlarm_IT+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	22ff      	movs	r2, #255	; 0xff
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2203      	movs	r2, #3
 8005cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e083      	b.n	8005dde <HAL_RTC_SetAlarm_IT+0x26a>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0e2      	beq.n	8005caa <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d02:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d12:	619a      	str	r2, [r3, #24]
 8005d14:	e048      	b.n	8005da8 <HAL_RTC_SetAlarm_IT+0x234>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d24:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0202 	orr.w	r2, r2, #2
 8005d34:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005d36:	f7fb fa8f 	bl	8001258 <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
 8005d3c:	e015      	b.n	8005d6a <HAL_RTC_SetAlarm_IT+0x1f6>
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d3e:	f7fb fa8b 	bl	8001258 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d4c:	d90d      	bls.n	8005d6a <HAL_RTC_SetAlarm_IT+0x1f6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	22ff      	movs	r2, #255	; 0xff
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2203      	movs	r2, #3
 8005d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e039      	b.n	8005dde <HAL_RTC_SetAlarm_IT+0x26a>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0e2      	beq.n	8005d3e <HAL_RTC_SetAlarm_IT+0x1ca>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d96:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005da6:	619a      	str	r2, [r3, #24]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005da8:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a0e      	ldr	r2, [pc, #56]	; (8005de8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db2:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc2:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3724      	adds	r7, #36	; 0x24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd90      	pop	{r4, r7, pc}
 8005de6:	bf00      	nop
 8005de8:	58000080 	.word	0x58000080

08005dec <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005df4:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <HAL_RTC_AlarmIRQHandler+0x58>)
 8005df6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005dfa:	609a      	str	r2, [r3, #8]
#endif /* DUAL_CORE */

#if defined(RTC_MISR_ALRAMF)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e02:	60fb      	str	r3, [r7, #12]

  if((tmp & RTC_MISR_ALRAMF) != 0u)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d006      	beq.n	8005e1c <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2201      	movs	r2, #1
 8005e14:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fa ff4c 	bl	8000cb4 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }
#endif /* RTC_MISR_ALRAMF */

#if defined(RTC_MISR_ALRBMF)
  if((tmp & RTC_MISR_ALRBMF) != 0u)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d006      	beq.n	8005e34 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8c4 	bl	8005fbc <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	58000080 	.word	0x58000080

08005e48 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e5e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8005e60:	f7fb f9fa 	bl	8001258 <HAL_GetTick>
 8005e64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e66:	e009      	b.n	8005e7c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e68:	f7fb f9f6 	bl	8001258 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e76:	d901      	bls.n	8005e7c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e007      	b.n	8005e8c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0ee      	beq.n	8005e68 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d123      	bne.n	8005ef6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ebc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ebe:	f7fb f9cb 	bl	8001258 <HAL_GetTick>
 8005ec2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ec4:	e00d      	b.n	8005ee2 <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005ec6:	f7fb f9c7 	bl	8001258 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ed4:	d905      	bls.n	8005ee2 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2203      	movs	r2, #3
 8005ede:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d102      	bne.n	8005ef6 <RTC_EnterInitMode+0x62>
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d1e7      	bne.n	8005ec6 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005f0c:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <RTC_ExitInitMode+0x78>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <RTC_ExitInitMode+0x78>)
 8005f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f16:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f18:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <RTC_ExitInitMode+0x78>)
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10c      	bne.n	8005f3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff ff8f 	bl	8005e48 <HAL_RTC_WaitForSynchro>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01e      	beq.n	8005f6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2203      	movs	r2, #3
 8005f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	73fb      	strb	r3, [r7, #15]
 8005f3c:	e017      	b.n	8005f6e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f3e:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <RTC_ExitInitMode+0x78>)
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	4a0d      	ldr	r2, [pc, #52]	; (8005f78 <RTC_ExitInitMode+0x78>)
 8005f44:	f023 0320 	bic.w	r3, r3, #32
 8005f48:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff ff7c 	bl	8005e48 <HAL_RTC_WaitForSynchro>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2203      	movs	r2, #3
 8005f5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f62:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <RTC_ExitInitMode+0x78>)
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	4a04      	ldr	r2, [pc, #16]	; (8005f78 <RTC_ExitInitMode+0x78>)
 8005f68:	f043 0320 	orr.w	r3, r3, #32
 8005f6c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	58004000 	.word	0x58004000

08005f7c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8005f8e:	e005      	b.n	8005f9c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8005f96:	7afb      	ldrb	r3, [r7, #11]
 8005f98:	3b0a      	subs	r3, #10
 8005f9a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8005f9c:	7afb      	ldrb	r3, [r7, #11]
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	d8f6      	bhi.n	8005f90 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	7afb      	ldrb	r3, [r7, #11]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	b2db      	uxtb	r3, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e042      	b.n	8006068 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d106      	bne.n	8005ffa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7fa ff4b 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2224      	movs	r2, #36	; 0x24
 8005ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8c2 	bl	800619c <UART_SetConfig>
 8006018:	4603      	mov	r3, r0
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e022      	b.n	8006068 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 ff14 	bl	8006e58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800603e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800604e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 ff9b 	bl	8006f9c <UART_CheckIdleState>
 8006066:	4603      	mov	r3, r0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af02      	add	r7, sp, #8
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	4613      	mov	r3, r2
 800607e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006086:	2b20      	cmp	r3, #32
 8006088:	f040 8083 	bne.w	8006192 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_UART_Transmit+0x28>
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e07b      	b.n	8006194 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_UART_Transmit+0x3a>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e074      	b.n	8006194 <HAL_UART_Transmit+0x124>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2221      	movs	r2, #33	; 0x21
 80060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060c2:	f7fb f8c9 	bl	8001258 <HAL_GetTick>
 80060c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	88fa      	ldrh	r2, [r7, #6]
 80060d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e0:	d108      	bne.n	80060f4 <HAL_UART_Transmit+0x84>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	e003      	b.n	80060fc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006104:	e02c      	b.n	8006160 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2200      	movs	r2, #0
 800610e:	2180      	movs	r1, #128	; 0x80
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 ff8e 	bl	8007032 <UART_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e039      	b.n	8006194 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10b      	bne.n	800613e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	3302      	adds	r3, #2
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	e007      	b.n	800614e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	781a      	ldrb	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	3301      	adds	r3, #1
 800614c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1cc      	bne.n	8006106 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2200      	movs	r2, #0
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 ff5b 	bl	8007032 <UART_WaitOnFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e006      	b.n	8006194 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e000      	b.n	8006194 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006192:	2302      	movs	r3, #2
  }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800619c:	b5b0      	push	{r4, r5, r7, lr}
 800619e:	b08e      	sub	sp, #56	; 0x38
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	4313      	orrs	r3, r2
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	4bbf      	ldr	r3, [pc, #764]	; (80064c8 <UART_SetConfig+0x32c>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4ab5      	ldr	r2, [pc, #724]	; (80064cc <UART_SetConfig+0x330>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d004      	beq.n	8006206 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006202:	4313      	orrs	r3, r2
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	4bb0      	ldr	r3, [pc, #704]	; (80064d0 <UART_SetConfig+0x334>)
 800620e:	4013      	ands	r3, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006216:	430b      	orrs	r3, r1
 8006218:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	f023 010f 	bic.w	r1, r3, #15
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4aa7      	ldr	r2, [pc, #668]	; (80064d4 <UART_SetConfig+0x338>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d176      	bne.n	8006328 <UART_SetConfig+0x18c>
 800623a:	4ba7      	ldr	r3, [pc, #668]	; (80064d8 <UART_SetConfig+0x33c>)
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006242:	2b28      	cmp	r3, #40	; 0x28
 8006244:	d86c      	bhi.n	8006320 <UART_SetConfig+0x184>
 8006246:	a201      	add	r2, pc, #4	; (adr r2, 800624c <UART_SetConfig+0xb0>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	080062f1 	.word	0x080062f1
 8006250:	08006321 	.word	0x08006321
 8006254:	08006321 	.word	0x08006321
 8006258:	08006321 	.word	0x08006321
 800625c:	08006321 	.word	0x08006321
 8006260:	08006321 	.word	0x08006321
 8006264:	08006321 	.word	0x08006321
 8006268:	08006321 	.word	0x08006321
 800626c:	080062f9 	.word	0x080062f9
 8006270:	08006321 	.word	0x08006321
 8006274:	08006321 	.word	0x08006321
 8006278:	08006321 	.word	0x08006321
 800627c:	08006321 	.word	0x08006321
 8006280:	08006321 	.word	0x08006321
 8006284:	08006321 	.word	0x08006321
 8006288:	08006321 	.word	0x08006321
 800628c:	08006301 	.word	0x08006301
 8006290:	08006321 	.word	0x08006321
 8006294:	08006321 	.word	0x08006321
 8006298:	08006321 	.word	0x08006321
 800629c:	08006321 	.word	0x08006321
 80062a0:	08006321 	.word	0x08006321
 80062a4:	08006321 	.word	0x08006321
 80062a8:	08006321 	.word	0x08006321
 80062ac:	08006309 	.word	0x08006309
 80062b0:	08006321 	.word	0x08006321
 80062b4:	08006321 	.word	0x08006321
 80062b8:	08006321 	.word	0x08006321
 80062bc:	08006321 	.word	0x08006321
 80062c0:	08006321 	.word	0x08006321
 80062c4:	08006321 	.word	0x08006321
 80062c8:	08006321 	.word	0x08006321
 80062cc:	08006311 	.word	0x08006311
 80062d0:	08006321 	.word	0x08006321
 80062d4:	08006321 	.word	0x08006321
 80062d8:	08006321 	.word	0x08006321
 80062dc:	08006321 	.word	0x08006321
 80062e0:	08006321 	.word	0x08006321
 80062e4:	08006321 	.word	0x08006321
 80062e8:	08006321 	.word	0x08006321
 80062ec:	08006319 	.word	0x08006319
 80062f0:	2301      	movs	r3, #1
 80062f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f6:	e326      	b.n	8006946 <UART_SetConfig+0x7aa>
 80062f8:	2304      	movs	r3, #4
 80062fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fe:	e322      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006300:	2308      	movs	r3, #8
 8006302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006306:	e31e      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006308:	2310      	movs	r3, #16
 800630a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630e:	e31a      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006310:	2320      	movs	r3, #32
 8006312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006316:	e316      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006318:	2340      	movs	r3, #64	; 0x40
 800631a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631e:	e312      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006326:	e30e      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a6b      	ldr	r2, [pc, #428]	; (80064dc <UART_SetConfig+0x340>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d130      	bne.n	8006394 <UART_SetConfig+0x1f8>
 8006332:	4b69      	ldr	r3, [pc, #420]	; (80064d8 <UART_SetConfig+0x33c>)
 8006334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	2b05      	cmp	r3, #5
 800633c:	d826      	bhi.n	800638c <UART_SetConfig+0x1f0>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <UART_SetConfig+0x1a8>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	0800635d 	.word	0x0800635d
 8006348:	08006365 	.word	0x08006365
 800634c:	0800636d 	.word	0x0800636d
 8006350:	08006375 	.word	0x08006375
 8006354:	0800637d 	.word	0x0800637d
 8006358:	08006385 	.word	0x08006385
 800635c:	2300      	movs	r3, #0
 800635e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006362:	e2f0      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006364:	2304      	movs	r3, #4
 8006366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800636a:	e2ec      	b.n	8006946 <UART_SetConfig+0x7aa>
 800636c:	2308      	movs	r3, #8
 800636e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006372:	e2e8      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006374:	2310      	movs	r3, #16
 8006376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800637a:	e2e4      	b.n	8006946 <UART_SetConfig+0x7aa>
 800637c:	2320      	movs	r3, #32
 800637e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006382:	e2e0      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006384:	2340      	movs	r3, #64	; 0x40
 8006386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800638a:	e2dc      	b.n	8006946 <UART_SetConfig+0x7aa>
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006392:	e2d8      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a51      	ldr	r2, [pc, #324]	; (80064e0 <UART_SetConfig+0x344>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d130      	bne.n	8006400 <UART_SetConfig+0x264>
 800639e:	4b4e      	ldr	r3, [pc, #312]	; (80064d8 <UART_SetConfig+0x33c>)
 80063a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b05      	cmp	r3, #5
 80063a8:	d826      	bhi.n	80063f8 <UART_SetConfig+0x25c>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0x214>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063c9 	.word	0x080063c9
 80063b4:	080063d1 	.word	0x080063d1
 80063b8:	080063d9 	.word	0x080063d9
 80063bc:	080063e1 	.word	0x080063e1
 80063c0:	080063e9 	.word	0x080063e9
 80063c4:	080063f1 	.word	0x080063f1
 80063c8:	2300      	movs	r3, #0
 80063ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ce:	e2ba      	b.n	8006946 <UART_SetConfig+0x7aa>
 80063d0:	2304      	movs	r3, #4
 80063d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063d6:	e2b6      	b.n	8006946 <UART_SetConfig+0x7aa>
 80063d8:	2308      	movs	r3, #8
 80063da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063de:	e2b2      	b.n	8006946 <UART_SetConfig+0x7aa>
 80063e0:	2310      	movs	r3, #16
 80063e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063e6:	e2ae      	b.n	8006946 <UART_SetConfig+0x7aa>
 80063e8:	2320      	movs	r3, #32
 80063ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ee:	e2aa      	b.n	8006946 <UART_SetConfig+0x7aa>
 80063f0:	2340      	movs	r3, #64	; 0x40
 80063f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063f6:	e2a6      	b.n	8006946 <UART_SetConfig+0x7aa>
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063fe:	e2a2      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a37      	ldr	r2, [pc, #220]	; (80064e4 <UART_SetConfig+0x348>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d130      	bne.n	800646c <UART_SetConfig+0x2d0>
 800640a:	4b33      	ldr	r3, [pc, #204]	; (80064d8 <UART_SetConfig+0x33c>)
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	2b05      	cmp	r3, #5
 8006414:	d826      	bhi.n	8006464 <UART_SetConfig+0x2c8>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0x280>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006435 	.word	0x08006435
 8006420:	0800643d 	.word	0x0800643d
 8006424:	08006445 	.word	0x08006445
 8006428:	0800644d 	.word	0x0800644d
 800642c:	08006455 	.word	0x08006455
 8006430:	0800645d 	.word	0x0800645d
 8006434:	2300      	movs	r3, #0
 8006436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800643a:	e284      	b.n	8006946 <UART_SetConfig+0x7aa>
 800643c:	2304      	movs	r3, #4
 800643e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006442:	e280      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006444:	2308      	movs	r3, #8
 8006446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800644a:	e27c      	b.n	8006946 <UART_SetConfig+0x7aa>
 800644c:	2310      	movs	r3, #16
 800644e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006452:	e278      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006454:	2320      	movs	r3, #32
 8006456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800645a:	e274      	b.n	8006946 <UART_SetConfig+0x7aa>
 800645c:	2340      	movs	r3, #64	; 0x40
 800645e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006462:	e270      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646a:	e26c      	b.n	8006946 <UART_SetConfig+0x7aa>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <UART_SetConfig+0x34c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d142      	bne.n	80064fc <UART_SetConfig+0x360>
 8006476:	4b18      	ldr	r3, [pc, #96]	; (80064d8 <UART_SetConfig+0x33c>)
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	2b05      	cmp	r3, #5
 8006480:	d838      	bhi.n	80064f4 <UART_SetConfig+0x358>
 8006482:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <UART_SetConfig+0x2ec>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	080064a1 	.word	0x080064a1
 800648c:	080064a9 	.word	0x080064a9
 8006490:	080064b1 	.word	0x080064b1
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064c1 	.word	0x080064c1
 800649c:	080064ed 	.word	0x080064ed
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064a6:	e24e      	b.n	8006946 <UART_SetConfig+0x7aa>
 80064a8:	2304      	movs	r3, #4
 80064aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ae:	e24a      	b.n	8006946 <UART_SetConfig+0x7aa>
 80064b0:	2308      	movs	r3, #8
 80064b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064b6:	e246      	b.n	8006946 <UART_SetConfig+0x7aa>
 80064b8:	2310      	movs	r3, #16
 80064ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064be:	e242      	b.n	8006946 <UART_SetConfig+0x7aa>
 80064c0:	2320      	movs	r3, #32
 80064c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064c6:	e23e      	b.n	8006946 <UART_SetConfig+0x7aa>
 80064c8:	cfff69f3 	.word	0xcfff69f3
 80064cc:	58000c00 	.word	0x58000c00
 80064d0:	11fff4ff 	.word	0x11fff4ff
 80064d4:	40011000 	.word	0x40011000
 80064d8:	58024400 	.word	0x58024400
 80064dc:	40004400 	.word	0x40004400
 80064e0:	40004800 	.word	0x40004800
 80064e4:	40004c00 	.word	0x40004c00
 80064e8:	40005000 	.word	0x40005000
 80064ec:	2340      	movs	r3, #64	; 0x40
 80064ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f2:	e228      	b.n	8006946 <UART_SetConfig+0x7aa>
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064fa:	e224      	b.n	8006946 <UART_SetConfig+0x7aa>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4ab1      	ldr	r2, [pc, #708]	; (80067c8 <UART_SetConfig+0x62c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d176      	bne.n	80065f4 <UART_SetConfig+0x458>
 8006506:	4bb1      	ldr	r3, [pc, #708]	; (80067cc <UART_SetConfig+0x630>)
 8006508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800650e:	2b28      	cmp	r3, #40	; 0x28
 8006510:	d86c      	bhi.n	80065ec <UART_SetConfig+0x450>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0x37c>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	080065bd 	.word	0x080065bd
 800651c:	080065ed 	.word	0x080065ed
 8006520:	080065ed 	.word	0x080065ed
 8006524:	080065ed 	.word	0x080065ed
 8006528:	080065ed 	.word	0x080065ed
 800652c:	080065ed 	.word	0x080065ed
 8006530:	080065ed 	.word	0x080065ed
 8006534:	080065ed 	.word	0x080065ed
 8006538:	080065c5 	.word	0x080065c5
 800653c:	080065ed 	.word	0x080065ed
 8006540:	080065ed 	.word	0x080065ed
 8006544:	080065ed 	.word	0x080065ed
 8006548:	080065ed 	.word	0x080065ed
 800654c:	080065ed 	.word	0x080065ed
 8006550:	080065ed 	.word	0x080065ed
 8006554:	080065ed 	.word	0x080065ed
 8006558:	080065cd 	.word	0x080065cd
 800655c:	080065ed 	.word	0x080065ed
 8006560:	080065ed 	.word	0x080065ed
 8006564:	080065ed 	.word	0x080065ed
 8006568:	080065ed 	.word	0x080065ed
 800656c:	080065ed 	.word	0x080065ed
 8006570:	080065ed 	.word	0x080065ed
 8006574:	080065ed 	.word	0x080065ed
 8006578:	080065d5 	.word	0x080065d5
 800657c:	080065ed 	.word	0x080065ed
 8006580:	080065ed 	.word	0x080065ed
 8006584:	080065ed 	.word	0x080065ed
 8006588:	080065ed 	.word	0x080065ed
 800658c:	080065ed 	.word	0x080065ed
 8006590:	080065ed 	.word	0x080065ed
 8006594:	080065ed 	.word	0x080065ed
 8006598:	080065dd 	.word	0x080065dd
 800659c:	080065ed 	.word	0x080065ed
 80065a0:	080065ed 	.word	0x080065ed
 80065a4:	080065ed 	.word	0x080065ed
 80065a8:	080065ed 	.word	0x080065ed
 80065ac:	080065ed 	.word	0x080065ed
 80065b0:	080065ed 	.word	0x080065ed
 80065b4:	080065ed 	.word	0x080065ed
 80065b8:	080065e5 	.word	0x080065e5
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c2:	e1c0      	b.n	8006946 <UART_SetConfig+0x7aa>
 80065c4:	2304      	movs	r3, #4
 80065c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ca:	e1bc      	b.n	8006946 <UART_SetConfig+0x7aa>
 80065cc:	2308      	movs	r3, #8
 80065ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065d2:	e1b8      	b.n	8006946 <UART_SetConfig+0x7aa>
 80065d4:	2310      	movs	r3, #16
 80065d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065da:	e1b4      	b.n	8006946 <UART_SetConfig+0x7aa>
 80065dc:	2320      	movs	r3, #32
 80065de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065e2:	e1b0      	b.n	8006946 <UART_SetConfig+0x7aa>
 80065e4:	2340      	movs	r3, #64	; 0x40
 80065e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ea:	e1ac      	b.n	8006946 <UART_SetConfig+0x7aa>
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f2:	e1a8      	b.n	8006946 <UART_SetConfig+0x7aa>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a75      	ldr	r2, [pc, #468]	; (80067d0 <UART_SetConfig+0x634>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d130      	bne.n	8006660 <UART_SetConfig+0x4c4>
 80065fe:	4b73      	ldr	r3, [pc, #460]	; (80067cc <UART_SetConfig+0x630>)
 8006600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	2b05      	cmp	r3, #5
 8006608:	d826      	bhi.n	8006658 <UART_SetConfig+0x4bc>
 800660a:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <UART_SetConfig+0x474>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006629 	.word	0x08006629
 8006614:	08006631 	.word	0x08006631
 8006618:	08006639 	.word	0x08006639
 800661c:	08006641 	.word	0x08006641
 8006620:	08006649 	.word	0x08006649
 8006624:	08006651 	.word	0x08006651
 8006628:	2300      	movs	r3, #0
 800662a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662e:	e18a      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006630:	2304      	movs	r3, #4
 8006632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006636:	e186      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006638:	2308      	movs	r3, #8
 800663a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663e:	e182      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006640:	2310      	movs	r3, #16
 8006642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006646:	e17e      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006648:	2320      	movs	r3, #32
 800664a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664e:	e17a      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006650:	2340      	movs	r3, #64	; 0x40
 8006652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006656:	e176      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006658:	2380      	movs	r3, #128	; 0x80
 800665a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800665e:	e172      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a5b      	ldr	r2, [pc, #364]	; (80067d4 <UART_SetConfig+0x638>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d130      	bne.n	80066cc <UART_SetConfig+0x530>
 800666a:	4b58      	ldr	r3, [pc, #352]	; (80067cc <UART_SetConfig+0x630>)
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	2b05      	cmp	r3, #5
 8006674:	d826      	bhi.n	80066c4 <UART_SetConfig+0x528>
 8006676:	a201      	add	r2, pc, #4	; (adr r2, 800667c <UART_SetConfig+0x4e0>)
 8006678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667c:	08006695 	.word	0x08006695
 8006680:	0800669d 	.word	0x0800669d
 8006684:	080066a5 	.word	0x080066a5
 8006688:	080066ad 	.word	0x080066ad
 800668c:	080066b5 	.word	0x080066b5
 8006690:	080066bd 	.word	0x080066bd
 8006694:	2300      	movs	r3, #0
 8006696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800669a:	e154      	b.n	8006946 <UART_SetConfig+0x7aa>
 800669c:	2304      	movs	r3, #4
 800669e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066a2:	e150      	b.n	8006946 <UART_SetConfig+0x7aa>
 80066a4:	2308      	movs	r3, #8
 80066a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066aa:	e14c      	b.n	8006946 <UART_SetConfig+0x7aa>
 80066ac:	2310      	movs	r3, #16
 80066ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066b2:	e148      	b.n	8006946 <UART_SetConfig+0x7aa>
 80066b4:	2320      	movs	r3, #32
 80066b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ba:	e144      	b.n	8006946 <UART_SetConfig+0x7aa>
 80066bc:	2340      	movs	r3, #64	; 0x40
 80066be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066c2:	e140      	b.n	8006946 <UART_SetConfig+0x7aa>
 80066c4:	2380      	movs	r3, #128	; 0x80
 80066c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ca:	e13c      	b.n	8006946 <UART_SetConfig+0x7aa>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a41      	ldr	r2, [pc, #260]	; (80067d8 <UART_SetConfig+0x63c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	f040 8082 	bne.w	80067dc <UART_SetConfig+0x640>
 80066d8:	4b3c      	ldr	r3, [pc, #240]	; (80067cc <UART_SetConfig+0x630>)
 80066da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066e0:	2b28      	cmp	r3, #40	; 0x28
 80066e2:	d86d      	bhi.n	80067c0 <UART_SetConfig+0x624>
 80066e4:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0x550>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006791 	.word	0x08006791
 80066f0:	080067c1 	.word	0x080067c1
 80066f4:	080067c1 	.word	0x080067c1
 80066f8:	080067c1 	.word	0x080067c1
 80066fc:	080067c1 	.word	0x080067c1
 8006700:	080067c1 	.word	0x080067c1
 8006704:	080067c1 	.word	0x080067c1
 8006708:	080067c1 	.word	0x080067c1
 800670c:	08006799 	.word	0x08006799
 8006710:	080067c1 	.word	0x080067c1
 8006714:	080067c1 	.word	0x080067c1
 8006718:	080067c1 	.word	0x080067c1
 800671c:	080067c1 	.word	0x080067c1
 8006720:	080067c1 	.word	0x080067c1
 8006724:	080067c1 	.word	0x080067c1
 8006728:	080067c1 	.word	0x080067c1
 800672c:	080067a1 	.word	0x080067a1
 8006730:	080067c1 	.word	0x080067c1
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067c1 	.word	0x080067c1
 800673c:	080067c1 	.word	0x080067c1
 8006740:	080067c1 	.word	0x080067c1
 8006744:	080067c1 	.word	0x080067c1
 8006748:	080067c1 	.word	0x080067c1
 800674c:	080067a9 	.word	0x080067a9
 8006750:	080067c1 	.word	0x080067c1
 8006754:	080067c1 	.word	0x080067c1
 8006758:	080067c1 	.word	0x080067c1
 800675c:	080067c1 	.word	0x080067c1
 8006760:	080067c1 	.word	0x080067c1
 8006764:	080067c1 	.word	0x080067c1
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067b1 	.word	0x080067b1
 8006770:	080067c1 	.word	0x080067c1
 8006774:	080067c1 	.word	0x080067c1
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067c1 	.word	0x080067c1
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
 8006788:	080067c1 	.word	0x080067c1
 800678c:	080067b9 	.word	0x080067b9
 8006790:	2301      	movs	r3, #1
 8006792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006796:	e0d6      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800679e:	e0d2      	b.n	8006946 <UART_SetConfig+0x7aa>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a6:	e0ce      	b.n	8006946 <UART_SetConfig+0x7aa>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ae:	e0ca      	b.n	8006946 <UART_SetConfig+0x7aa>
 80067b0:	2320      	movs	r3, #32
 80067b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b6:	e0c6      	b.n	8006946 <UART_SetConfig+0x7aa>
 80067b8:	2340      	movs	r3, #64	; 0x40
 80067ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067be:	e0c2      	b.n	8006946 <UART_SetConfig+0x7aa>
 80067c0:	2380      	movs	r3, #128	; 0x80
 80067c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c6:	e0be      	b.n	8006946 <UART_SetConfig+0x7aa>
 80067c8:	40011400 	.word	0x40011400
 80067cc:	58024400 	.word	0x58024400
 80067d0:	40007800 	.word	0x40007800
 80067d4:	40007c00 	.word	0x40007c00
 80067d8:	40011800 	.word	0x40011800
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4aad      	ldr	r2, [pc, #692]	; (8006a98 <UART_SetConfig+0x8fc>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d176      	bne.n	80068d4 <UART_SetConfig+0x738>
 80067e6:	4bad      	ldr	r3, [pc, #692]	; (8006a9c <UART_SetConfig+0x900>)
 80067e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ee:	2b28      	cmp	r3, #40	; 0x28
 80067f0:	d86c      	bhi.n	80068cc <UART_SetConfig+0x730>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <UART_SetConfig+0x65c>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	0800689d 	.word	0x0800689d
 80067fc:	080068cd 	.word	0x080068cd
 8006800:	080068cd 	.word	0x080068cd
 8006804:	080068cd 	.word	0x080068cd
 8006808:	080068cd 	.word	0x080068cd
 800680c:	080068cd 	.word	0x080068cd
 8006810:	080068cd 	.word	0x080068cd
 8006814:	080068cd 	.word	0x080068cd
 8006818:	080068a5 	.word	0x080068a5
 800681c:	080068cd 	.word	0x080068cd
 8006820:	080068cd 	.word	0x080068cd
 8006824:	080068cd 	.word	0x080068cd
 8006828:	080068cd 	.word	0x080068cd
 800682c:	080068cd 	.word	0x080068cd
 8006830:	080068cd 	.word	0x080068cd
 8006834:	080068cd 	.word	0x080068cd
 8006838:	080068ad 	.word	0x080068ad
 800683c:	080068cd 	.word	0x080068cd
 8006840:	080068cd 	.word	0x080068cd
 8006844:	080068cd 	.word	0x080068cd
 8006848:	080068cd 	.word	0x080068cd
 800684c:	080068cd 	.word	0x080068cd
 8006850:	080068cd 	.word	0x080068cd
 8006854:	080068cd 	.word	0x080068cd
 8006858:	080068b5 	.word	0x080068b5
 800685c:	080068cd 	.word	0x080068cd
 8006860:	080068cd 	.word	0x080068cd
 8006864:	080068cd 	.word	0x080068cd
 8006868:	080068cd 	.word	0x080068cd
 800686c:	080068cd 	.word	0x080068cd
 8006870:	080068cd 	.word	0x080068cd
 8006874:	080068cd 	.word	0x080068cd
 8006878:	080068bd 	.word	0x080068bd
 800687c:	080068cd 	.word	0x080068cd
 8006880:	080068cd 	.word	0x080068cd
 8006884:	080068cd 	.word	0x080068cd
 8006888:	080068cd 	.word	0x080068cd
 800688c:	080068cd 	.word	0x080068cd
 8006890:	080068cd 	.word	0x080068cd
 8006894:	080068cd 	.word	0x080068cd
 8006898:	080068c5 	.word	0x080068c5
 800689c:	2301      	movs	r3, #1
 800689e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a2:	e050      	b.n	8006946 <UART_SetConfig+0x7aa>
 80068a4:	2304      	movs	r3, #4
 80068a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068aa:	e04c      	b.n	8006946 <UART_SetConfig+0x7aa>
 80068ac:	2308      	movs	r3, #8
 80068ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b2:	e048      	b.n	8006946 <UART_SetConfig+0x7aa>
 80068b4:	2310      	movs	r3, #16
 80068b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ba:	e044      	b.n	8006946 <UART_SetConfig+0x7aa>
 80068bc:	2320      	movs	r3, #32
 80068be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c2:	e040      	b.n	8006946 <UART_SetConfig+0x7aa>
 80068c4:	2340      	movs	r3, #64	; 0x40
 80068c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ca:	e03c      	b.n	8006946 <UART_SetConfig+0x7aa>
 80068cc:	2380      	movs	r3, #128	; 0x80
 80068ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d2:	e038      	b.n	8006946 <UART_SetConfig+0x7aa>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a71      	ldr	r2, [pc, #452]	; (8006aa0 <UART_SetConfig+0x904>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d130      	bne.n	8006940 <UART_SetConfig+0x7a4>
 80068de:	4b6f      	ldr	r3, [pc, #444]	; (8006a9c <UART_SetConfig+0x900>)
 80068e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	d826      	bhi.n	8006938 <UART_SetConfig+0x79c>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <UART_SetConfig+0x754>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006909 	.word	0x08006909
 80068f4:	08006911 	.word	0x08006911
 80068f8:	08006919 	.word	0x08006919
 80068fc:	08006921 	.word	0x08006921
 8006900:	08006929 	.word	0x08006929
 8006904:	08006931 	.word	0x08006931
 8006908:	2302      	movs	r3, #2
 800690a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690e:	e01a      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006910:	2304      	movs	r3, #4
 8006912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006916:	e016      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006918:	2308      	movs	r3, #8
 800691a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800691e:	e012      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006920:	2310      	movs	r3, #16
 8006922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006926:	e00e      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006928:	2320      	movs	r3, #32
 800692a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800692e:	e00a      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006930:	2340      	movs	r3, #64	; 0x40
 8006932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006936:	e006      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006938:	2380      	movs	r3, #128	; 0x80
 800693a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800693e:	e002      	b.n	8006946 <UART_SetConfig+0x7aa>
 8006940:	2380      	movs	r3, #128	; 0x80
 8006942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a55      	ldr	r2, [pc, #340]	; (8006aa0 <UART_SetConfig+0x904>)
 800694c:	4293      	cmp	r3, r2
 800694e:	f040 80f0 	bne.w	8006b32 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006956:	2b20      	cmp	r3, #32
 8006958:	dc46      	bgt.n	80069e8 <UART_SetConfig+0x84c>
 800695a:	2b02      	cmp	r3, #2
 800695c:	db75      	blt.n	8006a4a <UART_SetConfig+0x8ae>
 800695e:	3b02      	subs	r3, #2
 8006960:	2b1e      	cmp	r3, #30
 8006962:	d872      	bhi.n	8006a4a <UART_SetConfig+0x8ae>
 8006964:	a201      	add	r2, pc, #4	; (adr r2, 800696c <UART_SetConfig+0x7d0>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	080069ef 	.word	0x080069ef
 8006970:	08006a4b 	.word	0x08006a4b
 8006974:	080069f7 	.word	0x080069f7
 8006978:	08006a4b 	.word	0x08006a4b
 800697c:	08006a4b 	.word	0x08006a4b
 8006980:	08006a4b 	.word	0x08006a4b
 8006984:	08006a07 	.word	0x08006a07
 8006988:	08006a4b 	.word	0x08006a4b
 800698c:	08006a4b 	.word	0x08006a4b
 8006990:	08006a4b 	.word	0x08006a4b
 8006994:	08006a4b 	.word	0x08006a4b
 8006998:	08006a4b 	.word	0x08006a4b
 800699c:	08006a4b 	.word	0x08006a4b
 80069a0:	08006a4b 	.word	0x08006a4b
 80069a4:	08006a17 	.word	0x08006a17
 80069a8:	08006a4b 	.word	0x08006a4b
 80069ac:	08006a4b 	.word	0x08006a4b
 80069b0:	08006a4b 	.word	0x08006a4b
 80069b4:	08006a4b 	.word	0x08006a4b
 80069b8:	08006a4b 	.word	0x08006a4b
 80069bc:	08006a4b 	.word	0x08006a4b
 80069c0:	08006a4b 	.word	0x08006a4b
 80069c4:	08006a4b 	.word	0x08006a4b
 80069c8:	08006a4b 	.word	0x08006a4b
 80069cc:	08006a4b 	.word	0x08006a4b
 80069d0:	08006a4b 	.word	0x08006a4b
 80069d4:	08006a4b 	.word	0x08006a4b
 80069d8:	08006a4b 	.word	0x08006a4b
 80069dc:	08006a4b 	.word	0x08006a4b
 80069e0:	08006a4b 	.word	0x08006a4b
 80069e4:	08006a3d 	.word	0x08006a3d
 80069e8:	2b40      	cmp	r3, #64	; 0x40
 80069ea:	d02a      	beq.n	8006a42 <UART_SetConfig+0x8a6>
 80069ec:	e02d      	b.n	8006a4a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069ee:	f7fe f905 	bl	8004bfc <HAL_RCCEx_GetD3PCLK1Freq>
 80069f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80069f4:	e02f      	b.n	8006a56 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f6:	f107 0314 	add.w	r3, r7, #20
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe f914 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a04:	e027      	b.n	8006a56 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a06:	f107 0308 	add.w	r3, r7, #8
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe fa60 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a14:	e01f      	b.n	8006a56 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a16:	4b21      	ldr	r3, [pc, #132]	; (8006a9c <UART_SetConfig+0x900>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d009      	beq.n	8006a36 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a22:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <UART_SetConfig+0x900>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	08db      	lsrs	r3, r3, #3
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <UART_SetConfig+0x908>)
 8006a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a34:	e00f      	b.n	8006a56 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006a36:	4b1b      	ldr	r3, [pc, #108]	; (8006aa4 <UART_SetConfig+0x908>)
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a3a:	e00c      	b.n	8006a56 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a3c:	4b1a      	ldr	r3, [pc, #104]	; (8006aa8 <UART_SetConfig+0x90c>)
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a40:	e009      	b.n	8006a56 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a48:	e005      	b.n	8006a56 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006a54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 81e6 	beq.w	8006e2a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	4a12      	ldr	r2, [pc, #72]	; (8006aac <UART_SetConfig+0x910>)
 8006a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a70:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	4413      	add	r3, r2
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d305      	bcc.n	8006a8e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a88:	6a3a      	ldr	r2, [r7, #32]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d910      	bls.n	8006ab0 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a94:	e1c9      	b.n	8006e2a <UART_SetConfig+0xc8e>
 8006a96:	bf00      	nop
 8006a98:	40011c00 	.word	0x40011c00
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	58000c00 	.word	0x58000c00
 8006aa4:	03d09000 	.word	0x03d09000
 8006aa8:	003d0900 	.word	0x003d0900
 8006aac:	080074b0 	.word	0x080074b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f04f 0100 	mov.w	r1, #0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	4ac1      	ldr	r2, [pc, #772]	; (8006dc4 <UART_SetConfig+0xc28>)
 8006abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	f7f9 fc18 	bl	80002fc <__aeabi_uldivmod>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	020b      	lsls	r3, r1, #8
 8006ade:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ae2:	0202      	lsls	r2, r0, #8
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	6849      	ldr	r1, [r1, #4]
 8006ae8:	0849      	lsrs	r1, r1, #1
 8006aea:	4608      	mov	r0, r1
 8006aec:	f04f 0100 	mov.w	r1, #0
 8006af0:	1814      	adds	r4, r2, r0
 8006af2:	eb43 0501 	adc.w	r5, r3, r1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	461a      	mov	r2, r3
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	4620      	mov	r0, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	f7f9 fbfa 	bl	80002fc <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b16:	d308      	bcc.n	8006b2a <UART_SetConfig+0x98e>
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b1e:	d204      	bcs.n	8006b2a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b26:	60da      	str	r2, [r3, #12]
 8006b28:	e17f      	b.n	8006e2a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006b30:	e17b      	b.n	8006e2a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3a:	f040 80bd 	bne.w	8006cb8 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8006b3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	dc48      	bgt.n	8006bd8 <UART_SetConfig+0xa3c>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	db7b      	blt.n	8006c42 <UART_SetConfig+0xaa6>
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d879      	bhi.n	8006c42 <UART_SetConfig+0xaa6>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <UART_SetConfig+0x9b8>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006bdf 	.word	0x08006bdf
 8006b58:	08006be7 	.word	0x08006be7
 8006b5c:	08006c43 	.word	0x08006c43
 8006b60:	08006c43 	.word	0x08006c43
 8006b64:	08006bef 	.word	0x08006bef
 8006b68:	08006c43 	.word	0x08006c43
 8006b6c:	08006c43 	.word	0x08006c43
 8006b70:	08006c43 	.word	0x08006c43
 8006b74:	08006bff 	.word	0x08006bff
 8006b78:	08006c43 	.word	0x08006c43
 8006b7c:	08006c43 	.word	0x08006c43
 8006b80:	08006c43 	.word	0x08006c43
 8006b84:	08006c43 	.word	0x08006c43
 8006b88:	08006c43 	.word	0x08006c43
 8006b8c:	08006c43 	.word	0x08006c43
 8006b90:	08006c43 	.word	0x08006c43
 8006b94:	08006c0f 	.word	0x08006c0f
 8006b98:	08006c43 	.word	0x08006c43
 8006b9c:	08006c43 	.word	0x08006c43
 8006ba0:	08006c43 	.word	0x08006c43
 8006ba4:	08006c43 	.word	0x08006c43
 8006ba8:	08006c43 	.word	0x08006c43
 8006bac:	08006c43 	.word	0x08006c43
 8006bb0:	08006c43 	.word	0x08006c43
 8006bb4:	08006c43 	.word	0x08006c43
 8006bb8:	08006c43 	.word	0x08006c43
 8006bbc:	08006c43 	.word	0x08006c43
 8006bc0:	08006c43 	.word	0x08006c43
 8006bc4:	08006c43 	.word	0x08006c43
 8006bc8:	08006c43 	.word	0x08006c43
 8006bcc:	08006c43 	.word	0x08006c43
 8006bd0:	08006c43 	.word	0x08006c43
 8006bd4:	08006c35 	.word	0x08006c35
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	d02e      	beq.n	8006c3a <UART_SetConfig+0xa9e>
 8006bdc:	e031      	b.n	8006c42 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bde:	f7fc fcab 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8006be2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006be4:	e033      	b.n	8006c4e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be6:	f7fc fcbd 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8006bea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006bec:	e02f      	b.n	8006c4e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bee:	f107 0314 	add.w	r3, r7, #20
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe f818 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bfc:	e027      	b.n	8006c4e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bfe:	f107 0308 	add.w	r3, r7, #8
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe f964 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c0c:	e01f      	b.n	8006c4e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c0e:	4b6e      	ldr	r3, [pc, #440]	; (8006dc8 <UART_SetConfig+0xc2c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c1a:	4b6b      	ldr	r3, [pc, #428]	; (8006dc8 <UART_SetConfig+0xc2c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	08db      	lsrs	r3, r3, #3
 8006c20:	f003 0303 	and.w	r3, r3, #3
 8006c24:	4a69      	ldr	r2, [pc, #420]	; (8006dcc <UART_SetConfig+0xc30>)
 8006c26:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c2c:	e00f      	b.n	8006c4e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006c2e:	4b67      	ldr	r3, [pc, #412]	; (8006dcc <UART_SetConfig+0xc30>)
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c32:	e00c      	b.n	8006c4e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c34:	4b66      	ldr	r3, [pc, #408]	; (8006dd0 <UART_SetConfig+0xc34>)
 8006c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c38:	e009      	b.n	8006c4e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c40:	e005      	b.n	8006c4e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 80ea 	beq.w	8006e2a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	4a5a      	ldr	r2, [pc, #360]	; (8006dc4 <UART_SetConfig+0xc28>)
 8006c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c60:	461a      	mov	r2, r3
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c68:	005a      	lsls	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	441a      	add	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	2b0f      	cmp	r3, #15
 8006c80:	d916      	bls.n	8006cb0 <UART_SetConfig+0xb14>
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c88:	d212      	bcs.n	8006cb0 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f023 030f 	bic.w	r3, r3, #15
 8006c92:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	e0bc      	b.n	8006e2a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006cb6:	e0b8      	b.n	8006e2a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	dc4b      	bgt.n	8006d58 <UART_SetConfig+0xbbc>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f2c0 8087 	blt.w	8006dd4 <UART_SetConfig+0xc38>
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	f200 8084 	bhi.w	8006dd4 <UART_SetConfig+0xc38>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <UART_SetConfig+0xb38>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006d5f 	.word	0x08006d5f
 8006cd8:	08006d67 	.word	0x08006d67
 8006cdc:	08006dd5 	.word	0x08006dd5
 8006ce0:	08006dd5 	.word	0x08006dd5
 8006ce4:	08006d6f 	.word	0x08006d6f
 8006ce8:	08006dd5 	.word	0x08006dd5
 8006cec:	08006dd5 	.word	0x08006dd5
 8006cf0:	08006dd5 	.word	0x08006dd5
 8006cf4:	08006d7f 	.word	0x08006d7f
 8006cf8:	08006dd5 	.word	0x08006dd5
 8006cfc:	08006dd5 	.word	0x08006dd5
 8006d00:	08006dd5 	.word	0x08006dd5
 8006d04:	08006dd5 	.word	0x08006dd5
 8006d08:	08006dd5 	.word	0x08006dd5
 8006d0c:	08006dd5 	.word	0x08006dd5
 8006d10:	08006dd5 	.word	0x08006dd5
 8006d14:	08006d8f 	.word	0x08006d8f
 8006d18:	08006dd5 	.word	0x08006dd5
 8006d1c:	08006dd5 	.word	0x08006dd5
 8006d20:	08006dd5 	.word	0x08006dd5
 8006d24:	08006dd5 	.word	0x08006dd5
 8006d28:	08006dd5 	.word	0x08006dd5
 8006d2c:	08006dd5 	.word	0x08006dd5
 8006d30:	08006dd5 	.word	0x08006dd5
 8006d34:	08006dd5 	.word	0x08006dd5
 8006d38:	08006dd5 	.word	0x08006dd5
 8006d3c:	08006dd5 	.word	0x08006dd5
 8006d40:	08006dd5 	.word	0x08006dd5
 8006d44:	08006dd5 	.word	0x08006dd5
 8006d48:	08006dd5 	.word	0x08006dd5
 8006d4c:	08006dd5 	.word	0x08006dd5
 8006d50:	08006dd5 	.word	0x08006dd5
 8006d54:	08006db5 	.word	0x08006db5
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d02e      	beq.n	8006dba <UART_SetConfig+0xc1e>
 8006d5c:	e03a      	b.n	8006dd4 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d5e:	f7fc fbeb 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8006d62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d64:	e03c      	b.n	8006de0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d66:	f7fc fbfd 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8006d6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d6c:	e038      	b.n	8006de0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d6e:	f107 0314 	add.w	r3, r7, #20
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fd ff58 	bl	8004c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d7c:	e030      	b.n	8006de0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d7e:	f107 0308 	add.w	r3, r7, #8
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe f8a4 	bl	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d8c:	e028      	b.n	8006de0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d8e:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <UART_SetConfig+0xc2c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <UART_SetConfig+0xc2c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	08db      	lsrs	r3, r3, #3
 8006da0:	f003 0303 	and.w	r3, r3, #3
 8006da4:	4a09      	ldr	r2, [pc, #36]	; (8006dcc <UART_SetConfig+0xc30>)
 8006da6:	fa22 f303 	lsr.w	r3, r2, r3
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006dac:	e018      	b.n	8006de0 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006dae:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <UART_SetConfig+0xc30>)
 8006db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006db2:	e015      	b.n	8006de0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006db4:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <UART_SetConfig+0xc34>)
 8006db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006db8:	e012      	b.n	8006de0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dc0:	e00e      	b.n	8006de0 <UART_SetConfig+0xc44>
 8006dc2:	bf00      	nop
 8006dc4:	080074b0 	.word	0x080074b0
 8006dc8:	58024400 	.word	0x58024400
 8006dcc:	03d09000 	.word	0x03d09000
 8006dd0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006dde:	bf00      	nop
    }

    if (pclk != 0U)
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d021      	beq.n	8006e2a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	4a1a      	ldr	r2, [pc, #104]	; (8006e54 <UART_SetConfig+0xcb8>)
 8006dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006df0:	461a      	mov	r2, r3
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	fbb3 f2f2 	udiv	r2, r3, r2
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	441a      	add	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e08:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	2b0f      	cmp	r3, #15
 8006e0e:	d909      	bls.n	8006e24 <UART_SetConfig+0xc88>
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e16:	d205      	bcs.n	8006e24 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60da      	str	r2, [r3, #12]
 8006e22:	e002      	b.n	8006e2a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006e46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3738      	adds	r7, #56	; 0x38
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bdb0      	pop	{r4, r5, r7, pc}
 8006e52:	bf00      	nop
 8006e54:	080074b0 	.word	0x080074b0

08006e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01a      	beq.n	8006f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f56:	d10a      	bne.n	8006f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fac:	f7fa f954 	bl	8001258 <HAL_GetTick>
 8006fb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d10e      	bne.n	8006fde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f82f 	bl	8007032 <UART_WaitOnFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e025      	b.n	800702a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d10e      	bne.n	800700a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f819 	bl	8007032 <UART_WaitOnFlagUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e00f      	b.n	800702a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b09c      	sub	sp, #112	; 0x70
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	603b      	str	r3, [r7, #0]
 800703e:	4613      	mov	r3, r2
 8007040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007042:	e0a9      	b.n	8007198 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	f000 80a5 	beq.w	8007198 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704e:	f7fa f903 	bl	8001258 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800705a:	429a      	cmp	r2, r3
 800705c:	d302      	bcc.n	8007064 <UART_WaitOnFlagUntilTimeout+0x32>
 800705e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007060:	2b00      	cmp	r3, #0
 8007062:	d140      	bne.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007074:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007078:	667b      	str	r3, [r7, #100]	; 0x64
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007084:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007088:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e6      	bne.n	8007064 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3308      	adds	r3, #8
 800709c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	663b      	str	r3, [r7, #96]	; 0x60
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3308      	adds	r3, #8
 80070b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80070b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e5      	bne.n	8007096 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e069      	b.n	80071ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d051      	beq.n	8007198 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007102:	d149      	bne.n	8007198 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800710c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007122:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
 800712e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e6      	bne.n	800710e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	613b      	str	r3, [r7, #16]
   return(result);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	66bb      	str	r3, [r7, #104]	; 0x68
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3308      	adds	r3, #8
 800715e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007160:	623a      	str	r2, [r7, #32]
 8007162:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	69f9      	ldr	r1, [r7, #28]
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	61bb      	str	r3, [r7, #24]
   return(result);
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e5      	bne.n	8007140 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2220      	movs	r2, #32
 8007178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2220      	movs	r2, #32
 8007180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e010      	b.n	80071ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69da      	ldr	r2, [r3, #28]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4013      	ands	r3, r2
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	bf0c      	ite	eq
 80071a8:	2301      	moveq	r3, #1
 80071aa:	2300      	movne	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	461a      	mov	r2, r3
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	f43f af46 	beq.w	8007044 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3770      	adds	r7, #112	; 0x70
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e027      	b.n	8007228 <HAL_UARTEx_DisableFifoMode+0x66>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2224      	movs	r2, #36	; 0x24
 80071e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007206:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007248:	2302      	movs	r3, #2
 800724a:	e02d      	b.n	80072a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2224      	movs	r2, #36	; 0x24
 8007258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f84f 	bl	800732c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072c4:	2302      	movs	r3, #2
 80072c6:	e02d      	b.n	8007324 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2224      	movs	r2, #36	; 0x24
 80072d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0201 	bic.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f811 	bl	800732c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2220      	movs	r2, #32
 8007316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007338:	2b00      	cmp	r3, #0
 800733a:	d108      	bne.n	800734e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800734c:	e031      	b.n	80073b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800734e:	2310      	movs	r3, #16
 8007350:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007352:	2310      	movs	r3, #16
 8007354:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	0e5b      	lsrs	r3, r3, #25
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	0f5b      	lsrs	r3, r3, #29
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	7b3a      	ldrb	r2, [r7, #12]
 800737a:	4911      	ldr	r1, [pc, #68]	; (80073c0 <UARTEx_SetNbDataToProcess+0x94>)
 800737c:	5c8a      	ldrb	r2, [r1, r2]
 800737e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007382:	7b3a      	ldrb	r2, [r7, #12]
 8007384:	490f      	ldr	r1, [pc, #60]	; (80073c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007386:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007388:	fb93 f3f2 	sdiv	r3, r3, r2
 800738c:	b29a      	uxth	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	7b7a      	ldrb	r2, [r7, #13]
 8007398:	4909      	ldr	r1, [pc, #36]	; (80073c0 <UARTEx_SetNbDataToProcess+0x94>)
 800739a:	5c8a      	ldrb	r2, [r1, r2]
 800739c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073a0:	7b7a      	ldrb	r2, [r7, #13]
 80073a2:	4908      	ldr	r1, [pc, #32]	; (80073c4 <UARTEx_SetNbDataToProcess+0x98>)
 80073a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	080074c8 	.word	0x080074c8
 80073c4:	080074d0 	.word	0x080074d0

080073c8 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e016      	b.n	8007408 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7f9 fdbe 	bl	8000f5c <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073ec:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	ea42 0103 	orr.w	r1, r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	68d2      	ldr	r2, [r2, #12]
 8007420:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <__libc_init_array>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	4d0d      	ldr	r5, [pc, #52]	; (8007468 <__libc_init_array+0x38>)
 8007434:	4c0d      	ldr	r4, [pc, #52]	; (800746c <__libc_init_array+0x3c>)
 8007436:	1b64      	subs	r4, r4, r5
 8007438:	10a4      	asrs	r4, r4, #2
 800743a:	2600      	movs	r6, #0
 800743c:	42a6      	cmp	r6, r4
 800743e:	d109      	bne.n	8007454 <__libc_init_array+0x24>
 8007440:	4d0b      	ldr	r5, [pc, #44]	; (8007470 <__libc_init_array+0x40>)
 8007442:	4c0c      	ldr	r4, [pc, #48]	; (8007474 <__libc_init_array+0x44>)
 8007444:	f000 f820 	bl	8007488 <_init>
 8007448:	1b64      	subs	r4, r4, r5
 800744a:	10a4      	asrs	r4, r4, #2
 800744c:	2600      	movs	r6, #0
 800744e:	42a6      	cmp	r6, r4
 8007450:	d105      	bne.n	800745e <__libc_init_array+0x2e>
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	f855 3b04 	ldr.w	r3, [r5], #4
 8007458:	4798      	blx	r3
 800745a:	3601      	adds	r6, #1
 800745c:	e7ee      	b.n	800743c <__libc_init_array+0xc>
 800745e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007462:	4798      	blx	r3
 8007464:	3601      	adds	r6, #1
 8007466:	e7f2      	b.n	800744e <__libc_init_array+0x1e>
 8007468:	080074e0 	.word	0x080074e0
 800746c:	080074e0 	.word	0x080074e0
 8007470:	080074e0 	.word	0x080074e0
 8007474:	080074e4 	.word	0x080074e4

08007478 <memset>:
 8007478:	4402      	add	r2, r0
 800747a:	4603      	mov	r3, r0
 800747c:	4293      	cmp	r3, r2
 800747e:	d100      	bne.n	8007482 <memset+0xa>
 8007480:	4770      	bx	lr
 8007482:	f803 1b01 	strb.w	r1, [r3], #1
 8007486:	e7f9      	b.n	800747c <memset+0x4>

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
