
CubeMX_Workspace_temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f0  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800749c  0800749c  0001749c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080075a8  080075a8  000175a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080075b4  080075b4  000175b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  24000000  080075b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011dc  24000024  080075dc  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001200  080075dc  00021200  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   000224e5  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035cc  00000000  00000000  00042537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f0  00000000  00000000  00045b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ff8  00000000  00000000  00046bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032e25  00000000  00000000  00047bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015591  00000000  00000000  0007aa15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001511da  00000000  00000000  0008ffa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e1180  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004738  00000000  00000000  001e11d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000024 	.word	0x24000024
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007484 	.word	0x08007484

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000028 	.word	0x24000028
 80002e8:	08007484 	.word	0x08007484

080002ec <strlen>:
 80002ec:	4603      	mov	r3, r0
 80002ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d1fb      	bne.n	80002ee <strlen+0x2>
 80002f6:	1a18      	subs	r0, r3, r0
 80002f8:	3801      	subs	r0, #1
 80002fa:	4770      	bx	lr

080002fc <__aeabi_uldivmod>:
 80002fc:	b953      	cbnz	r3, 8000314 <__aeabi_uldivmod+0x18>
 80002fe:	b94a      	cbnz	r2, 8000314 <__aeabi_uldivmod+0x18>
 8000300:	2900      	cmp	r1, #0
 8000302:	bf08      	it	eq
 8000304:	2800      	cmpeq	r0, #0
 8000306:	bf1c      	itt	ne
 8000308:	f04f 31ff 	movne.w	r1, #4294967295
 800030c:	f04f 30ff 	movne.w	r0, #4294967295
 8000310:	f000 b96e 	b.w	80005f0 <__aeabi_idiv0>
 8000314:	f1ad 0c08 	sub.w	ip, sp, #8
 8000318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031c:	f000 f806 	bl	800032c <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4770      	bx	lr

0800032c <__udivmoddi4>:
 800032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000330:	9d08      	ldr	r5, [sp, #32]
 8000332:	4604      	mov	r4, r0
 8000334:	468c      	mov	ip, r1
 8000336:	2b00      	cmp	r3, #0
 8000338:	f040 8083 	bne.w	8000442 <__udivmoddi4+0x116>
 800033c:	428a      	cmp	r2, r1
 800033e:	4617      	mov	r7, r2
 8000340:	d947      	bls.n	80003d2 <__udivmoddi4+0xa6>
 8000342:	fab2 f282 	clz	r2, r2
 8000346:	b142      	cbz	r2, 800035a <__udivmoddi4+0x2e>
 8000348:	f1c2 0020 	rsb	r0, r2, #32
 800034c:	fa24 f000 	lsr.w	r0, r4, r0
 8000350:	4091      	lsls	r1, r2
 8000352:	4097      	lsls	r7, r2
 8000354:	ea40 0c01 	orr.w	ip, r0, r1
 8000358:	4094      	lsls	r4, r2
 800035a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800035e:	0c23      	lsrs	r3, r4, #16
 8000360:	fbbc f6f8 	udiv	r6, ip, r8
 8000364:	fa1f fe87 	uxth.w	lr, r7
 8000368:	fb08 c116 	mls	r1, r8, r6, ip
 800036c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000370:	fb06 f10e 	mul.w	r1, r6, lr
 8000374:	4299      	cmp	r1, r3
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x60>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f106 30ff 	add.w	r0, r6, #4294967295
 800037e:	f080 8119 	bcs.w	80005b4 <__udivmoddi4+0x288>
 8000382:	4299      	cmp	r1, r3
 8000384:	f240 8116 	bls.w	80005b4 <__udivmoddi4+0x288>
 8000388:	3e02      	subs	r6, #2
 800038a:	443b      	add	r3, r7
 800038c:	1a5b      	subs	r3, r3, r1
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb3 f0f8 	udiv	r0, r3, r8
 8000394:	fb08 3310 	mls	r3, r8, r0, r3
 8000398:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800039c:	fb00 fe0e 	mul.w	lr, r0, lr
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x8c>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 8105 	bcs.w	80005b8 <__udivmoddi4+0x28c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8102 	bls.w	80005b8 <__udivmoddi4+0x28c>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	2600      	movs	r6, #0
 80003c2:	b11d      	cbz	r5, 80003cc <__udivmoddi4+0xa0>
 80003c4:	40d4      	lsrs	r4, r2
 80003c6:	2300      	movs	r3, #0
 80003c8:	e9c5 4300 	strd	r4, r3, [r5]
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xaa>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	2a00      	cmp	r2, #0
 80003dc:	d150      	bne.n	8000480 <__udivmoddi4+0x154>
 80003de:	1bcb      	subs	r3, r1, r7
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f f887 	uxth.w	r8, r7
 80003e8:	2601      	movs	r6, #1
 80003ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ee:	0c21      	lsrs	r1, r4, #16
 80003f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f8:	fb08 f30c 	mul.w	r3, r8, ip
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d907      	bls.n	8000410 <__udivmoddi4+0xe4>
 8000400:	1879      	adds	r1, r7, r1
 8000402:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000406:	d202      	bcs.n	800040e <__udivmoddi4+0xe2>
 8000408:	428b      	cmp	r3, r1
 800040a:	f200 80e9 	bhi.w	80005e0 <__udivmoddi4+0x2b4>
 800040e:	4684      	mov	ip, r0
 8000410:	1ac9      	subs	r1, r1, r3
 8000412:	b2a3      	uxth	r3, r4
 8000414:	fbb1 f0fe 	udiv	r0, r1, lr
 8000418:	fb0e 1110 	mls	r1, lr, r0, r1
 800041c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000420:	fb08 f800 	mul.w	r8, r8, r0
 8000424:	45a0      	cmp	r8, r4
 8000426:	d907      	bls.n	8000438 <__udivmoddi4+0x10c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x10a>
 8000430:	45a0      	cmp	r8, r4
 8000432:	f200 80d9 	bhi.w	80005e8 <__udivmoddi4+0x2bc>
 8000436:	4618      	mov	r0, r3
 8000438:	eba4 0408 	sub.w	r4, r4, r8
 800043c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000440:	e7bf      	b.n	80003c2 <__udivmoddi4+0x96>
 8000442:	428b      	cmp	r3, r1
 8000444:	d909      	bls.n	800045a <__udivmoddi4+0x12e>
 8000446:	2d00      	cmp	r5, #0
 8000448:	f000 80b1 	beq.w	80005ae <__udivmoddi4+0x282>
 800044c:	2600      	movs	r6, #0
 800044e:	e9c5 0100 	strd	r0, r1, [r5]
 8000452:	4630      	mov	r0, r6
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	fab3 f683 	clz	r6, r3
 800045e:	2e00      	cmp	r6, #0
 8000460:	d14a      	bne.n	80004f8 <__udivmoddi4+0x1cc>
 8000462:	428b      	cmp	r3, r1
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0x140>
 8000466:	4282      	cmp	r2, r0
 8000468:	f200 80b8 	bhi.w	80005dc <__udivmoddi4+0x2b0>
 800046c:	1a84      	subs	r4, r0, r2
 800046e:	eb61 0103 	sbc.w	r1, r1, r3
 8000472:	2001      	movs	r0, #1
 8000474:	468c      	mov	ip, r1
 8000476:	2d00      	cmp	r5, #0
 8000478:	d0a8      	beq.n	80003cc <__udivmoddi4+0xa0>
 800047a:	e9c5 4c00 	strd	r4, ip, [r5]
 800047e:	e7a5      	b.n	80003cc <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f603 	lsr.w	r6, r0, r3
 8000488:	4097      	lsls	r7, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000492:	40d9      	lsrs	r1, r3
 8000494:	4330      	orrs	r0, r6
 8000496:	0c03      	lsrs	r3, r0, #16
 8000498:	fbb1 f6fe 	udiv	r6, r1, lr
 800049c:	fa1f f887 	uxth.w	r8, r7
 80004a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a8:	fb06 f108 	mul.w	r1, r6, r8
 80004ac:	4299      	cmp	r1, r3
 80004ae:	fa04 f402 	lsl.w	r4, r4, r2
 80004b2:	d909      	bls.n	80004c8 <__udivmoddi4+0x19c>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ba:	f080 808d 	bcs.w	80005d8 <__udivmoddi4+0x2ac>
 80004be:	4299      	cmp	r1, r3
 80004c0:	f240 808a 	bls.w	80005d8 <__udivmoddi4+0x2ac>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	443b      	add	r3, r7
 80004c8:	1a5b      	subs	r3, r3, r1
 80004ca:	b281      	uxth	r1, r0
 80004cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb00 f308 	mul.w	r3, r0, r8
 80004dc:	428b      	cmp	r3, r1
 80004de:	d907      	bls.n	80004f0 <__udivmoddi4+0x1c4>
 80004e0:	1879      	adds	r1, r7, r1
 80004e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e6:	d273      	bcs.n	80005d0 <__udivmoddi4+0x2a4>
 80004e8:	428b      	cmp	r3, r1
 80004ea:	d971      	bls.n	80005d0 <__udivmoddi4+0x2a4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4439      	add	r1, r7
 80004f0:	1acb      	subs	r3, r1, r3
 80004f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004f6:	e778      	b.n	80003ea <__udivmoddi4+0xbe>
 80004f8:	f1c6 0c20 	rsb	ip, r6, #32
 80004fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000500:	fa22 f30c 	lsr.w	r3, r2, ip
 8000504:	431c      	orrs	r4, r3
 8000506:	fa20 f70c 	lsr.w	r7, r0, ip
 800050a:	fa01 f306 	lsl.w	r3, r1, r6
 800050e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000512:	fa21 f10c 	lsr.w	r1, r1, ip
 8000516:	431f      	orrs	r7, r3
 8000518:	0c3b      	lsrs	r3, r7, #16
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fa1f f884 	uxth.w	r8, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800052a:	fb09 fa08 	mul.w	sl, r9, r8
 800052e:	458a      	cmp	sl, r1
 8000530:	fa02 f206 	lsl.w	r2, r2, r6
 8000534:	fa00 f306 	lsl.w	r3, r0, r6
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x220>
 800053a:	1861      	adds	r1, r4, r1
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d248      	bcs.n	80005d4 <__udivmoddi4+0x2a8>
 8000542:	458a      	cmp	sl, r1
 8000544:	d946      	bls.n	80005d4 <__udivmoddi4+0x2a8>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	4421      	add	r1, r4
 800054c:	eba1 010a 	sub.w	r1, r1, sl
 8000550:	b2bf      	uxth	r7, r7
 8000552:	fbb1 f0fe 	udiv	r0, r1, lr
 8000556:	fb0e 1110 	mls	r1, lr, r0, r1
 800055a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45b8      	cmp	r8, r7
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x24a>
 8000566:	19e7      	adds	r7, r4, r7
 8000568:	f100 31ff 	add.w	r1, r0, #4294967295
 800056c:	d22e      	bcs.n	80005cc <__udivmoddi4+0x2a0>
 800056e:	45b8      	cmp	r8, r7
 8000570:	d92c      	bls.n	80005cc <__udivmoddi4+0x2a0>
 8000572:	3802      	subs	r0, #2
 8000574:	4427      	add	r7, r4
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba7 0708 	sub.w	r7, r7, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454f      	cmp	r7, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	4649      	mov	r1, r9
 8000588:	d31a      	bcc.n	80005c0 <__udivmoddi4+0x294>
 800058a:	d017      	beq.n	80005bc <__udivmoddi4+0x290>
 800058c:	b15d      	cbz	r5, 80005a6 <__udivmoddi4+0x27a>
 800058e:	ebb3 020e 	subs.w	r2, r3, lr
 8000592:	eb67 0701 	sbc.w	r7, r7, r1
 8000596:	fa07 fc0c 	lsl.w	ip, r7, ip
 800059a:	40f2      	lsrs	r2, r6
 800059c:	ea4c 0202 	orr.w	r2, ip, r2
 80005a0:	40f7      	lsrs	r7, r6
 80005a2:	e9c5 2700 	strd	r2, r7, [r5]
 80005a6:	2600      	movs	r6, #0
 80005a8:	4631      	mov	r1, r6
 80005aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e70b      	b.n	80003cc <__udivmoddi4+0xa0>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e9      	b.n	800038c <__udivmoddi4+0x60>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6fd      	b.n	80003b8 <__udivmoddi4+0x8c>
 80005bc:	4543      	cmp	r3, r8
 80005be:	d2e5      	bcs.n	800058c <__udivmoddi4+0x260>
 80005c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c4:	eb69 0104 	sbc.w	r1, r9, r4
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7df      	b.n	800058c <__udivmoddi4+0x260>
 80005cc:	4608      	mov	r0, r1
 80005ce:	e7d2      	b.n	8000576 <__udivmoddi4+0x24a>
 80005d0:	4660      	mov	r0, ip
 80005d2:	e78d      	b.n	80004f0 <__udivmoddi4+0x1c4>
 80005d4:	4681      	mov	r9, r0
 80005d6:	e7b9      	b.n	800054c <__udivmoddi4+0x220>
 80005d8:	4666      	mov	r6, ip
 80005da:	e775      	b.n	80004c8 <__udivmoddi4+0x19c>
 80005dc:	4630      	mov	r0, r6
 80005de:	e74a      	b.n	8000476 <__udivmoddi4+0x14a>
 80005e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e4:	4439      	add	r1, r7
 80005e6:	e713      	b.n	8000410 <__udivmoddi4+0xe4>
 80005e8:	3802      	subs	r0, #2
 80005ea:	443c      	add	r4, r7
 80005ec:	e724      	b.n	8000438 <__udivmoddi4+0x10c>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Use local
	uint32_t holdMultipleRead[DATA_READ_LOOP] = {0};
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <main+0xa0>)
 8000600:	f241 0208 	movw	r2, #4104	; 0x1008
 8000604:	443a      	add	r2, r7
 8000606:	4413      	add	r3, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	461a      	mov	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f006 ff2f 	bl	8007474 <memset>

	for(int i=0; i<DATA_TRANSMIT_LENGTH; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	f241 0204 	movw	r2, #4100	; 0x1004
 800061c:	443a      	add	r2, r7
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	e014      	b.n	800064c <main+0x58>
		buffer_tfs[i] = i;
 8000622:	f241 0304 	movw	r3, #4100	; 0x1004
 8000626:	443b      	add	r3, r7
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	b299      	uxth	r1, r3
 800062c:	4a1a      	ldr	r2, [pc, #104]	; (8000698 <main+0xa4>)
 800062e:	f241 0304 	movw	r3, #4100	; 0x1004
 8000632:	443b      	add	r3, r7
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<DATA_TRANSMIT_LENGTH; i++){
 800063a:	f241 0304 	movw	r3, #4100	; 0x1004
 800063e:	443b      	add	r3, r7
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	f241 0204 	movw	r2, #4100	; 0x1004
 8000648:	443a      	add	r2, r7
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	f241 0304 	movw	r3, #4100	; 0x1004
 8000650:	443b      	add	r3, r7
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000658:	dbe3      	blt.n	8000622 <main+0x2e>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fd75 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f823 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 fa19 	bl	8000a98 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000666:	f000 f89d 	bl	80007a4 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 800066a:	f000 f9a9 	bl	80009c0 <MX_USART3_UART_Init>
  MX_RNG_Init();
 800066e:	f000 f8ff 	bl	8000870 <MX_RNG_Init>
  MX_RTC_Init();
 8000672:	f000 f913 	bl	800089c <MX_RTC_Init>
//  MX_IWDG1_Init();
  HAL_UART_Transmit(&huart3, "uart initialized again\n", 23, UART_TIMEOUT);
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	2217      	movs	r2, #23
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <main+0xa8>)
 800067c:	4808      	ldr	r0, [pc, #32]	; (80006a0 <main+0xac>)
 800067e:	f005 fcf5 	bl	800606c <HAL_UART_Transmit>
  MX_WWDG1_Init();
 8000682:	f000 f9e9 	bl	8000a58 <MX_WWDG1_Init>
//
//	HAL_UART_Transmit(&huart3, "\n", 1, UART_TIMEOUT);

//	HAL_Delay(1000);

	  HAL_Delay(15);
 8000686:	200f      	movs	r0, #15
 8000688:	f000 fdf0 	bl	800126c <HAL_Delay>
	  HAL_WWDG_Refresh(&hwwdg1);
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <main+0xb0>)
 800068e:	f006 febd 	bl	800740c <HAL_WWDG_Refresh>
	  HAL_Delay(15);
 8000692:	e7f8      	b.n	8000686 <main+0x92>
 8000694:	ffffeffc 	.word	0xffffeffc
 8000698:	24000040 	.word	0x24000040
 800069c:	0800749c 	.word	0x0800749c
 80006a0:	24001078 	.word	0x24001078
 80006a4:	240011e8 	.word	0x240011e8

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09c      	sub	sp, #112	; 0x70
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	224c      	movs	r2, #76	; 0x4c
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 fedc 	bl	8007474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2220      	movs	r2, #32
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 fed6 	bl	8007474 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006c8:	4b34      	ldr	r3, [pc, #208]	; (800079c <SystemClock_Config+0xf4>)
 80006ca:	f04f 32ff 	mov.w	r2, #4294967295
 80006ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006d2:	2004      	movs	r0, #4
 80006d4:	f001 ff70 	bl	80025b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <SystemClock_Config+0xf8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a2f      	ldr	r2, [pc, #188]	; (80007a0 <SystemClock_Config+0xf8>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <SystemClock_Config+0xf8>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f4:	bf00      	nop
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <SystemClock_Config+0xf8>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000702:	d1f8      	bne.n	80006f6 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemClock_Config+0xf4>)
 8000706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000708:	4a24      	ldr	r2, [pc, #144]	; (800079c <SystemClock_Config+0xf4>)
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000710:	232a      	movs	r3, #42	; 0x2a
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000714:	2301      	movs	r3, #1
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2340      	movs	r3, #64	; 0x40
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000740:	230c      	movs	r3, #12
 8000742:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000744:	2300      	movs	r3, #0
 8000746:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4618      	mov	r0, r3
 8000752:	f001 ff8b 	bl	800266c <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800075c:	f000 fabe 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	233f      	movs	r3, #63	; 0x3f
 8000762:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2303      	movs	r3, #3
 8000766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2101      	movs	r1, #1
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fb75 	bl	8002e74 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000790:	f000 faa4 	bl	8000cdc <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3770      	adds	r7, #112	; 0x70
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58024400 	.word	0x58024400
 80007a0:	58024800 	.word	0x58024800

080007a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007bc:	4b29      	ldr	r3, [pc, #164]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007be:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <MX_ADC2_Init+0xc4>)
 80007c0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007d6:	2204      	movs	r2, #4
 80007d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_ADC2_Init+0xc0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_ADC2_Init+0xc0>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_ADC2_Init+0xc0>)
 8000806:	2200      	movs	r2, #0
 8000808:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_ADC2_Init+0xc0>)
 800080c:	2200      	movs	r2, #0
 800080e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_ADC2_Init+0xc0>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000818:	4812      	ldr	r0, [pc, #72]	; (8000864 <MX_ADC2_Init+0xc0>)
 800081a:	f000 fed7 	bl	80015cc <HAL_ADC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000824:	f000 fa5a 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_ADC2_Init+0xc8>)
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082c:	2306      	movs	r3, #6
 800082e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000830:	2305      	movs	r3, #5
 8000832:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000834:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000838:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083a:	2304      	movs	r3, #4
 800083c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_ADC2_Init+0xc0>)
 800084c:	f001 f818 	bl	8001880 <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000856:	f000 fa41 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	24001108 	.word	0x24001108
 8000868:	40022100 	.word	0x40022100
 800086c:	cb840000 	.word	0xcb840000

08000870 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_RNG_Init+0x24>)
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <MX_RNG_Init+0x28>)
 8000878:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_RNG_Init+0x24>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_RNG_Init+0x24>)
 8000882:	f004 ff2d 	bl	80056e0 <HAL_RNG_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800088c:	f000 fa26 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	240011bc 	.word	0x240011bc
 8000898:	48021800 	.word	0x48021800

0800089c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b090      	sub	sp, #64	; 0x40
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2228      	movs	r2, #40	; 0x28
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f006 fdd9 	bl	8007474 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008c2:	4b3d      	ldr	r3, [pc, #244]	; (80009b8 <MX_RTC_Init+0x11c>)
 80008c4:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <MX_RTC_Init+0x120>)
 80008c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008c8:	4b3b      	ldr	r3, [pc, #236]	; (80009b8 <MX_RTC_Init+0x11c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008ce:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <MX_RTC_Init+0x11c>)
 80008d0:	227f      	movs	r2, #127	; 0x7f
 80008d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008d4:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <MX_RTC_Init+0x11c>)
 80008d6:	22ff      	movs	r2, #255	; 0xff
 80008d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008da:	4b37      	ldr	r3, [pc, #220]	; (80009b8 <MX_RTC_Init+0x11c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <MX_RTC_Init+0x11c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <MX_RTC_Init+0x11c>)
 80008e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ec:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008ee:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <MX_RTC_Init+0x11c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008f4:	4830      	ldr	r0, [pc, #192]	; (80009b8 <MX_RTC_Init+0x11c>)
 80008f6:	f004 ff99 	bl	800582c <HAL_RTC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8000900:	f000 f9ec 	bl	8000cdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000904:	2300      	movs	r3, #0
 8000906:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800090a:	2300      	movs	r3, #0
 800090c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000910:	2300      	movs	r3, #0
 8000912:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000916:	2300      	movs	r3, #0
 8000918:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800091e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000922:	2201      	movs	r2, #1
 8000924:	4619      	mov	r1, r3
 8000926:	4824      	ldr	r0, [pc, #144]	; (80009b8 <MX_RTC_Init+0x11c>)
 8000928:	f004 fffc 	bl	8005924 <HAL_RTC_SetTime>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000932:	f000 f9d3 	bl	8000cdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000936:	2302      	movs	r3, #2
 8000938:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_SEPTEMBER;
 800093c:	2309      	movs	r3, #9
 800093e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x20;
 8000942:	2320      	movs	r3, #32
 8000944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x22;
 8000948:	2322      	movs	r3, #34	; 0x22
 800094a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800094e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000952:	2201      	movs	r2, #1
 8000954:	4619      	mov	r1, r3
 8000956:	4818      	ldr	r0, [pc, #96]	; (80009b8 <MX_RTC_Init+0x11c>)
 8000958:	f005 f882 	bl	8005a60 <HAL_RTC_SetDate>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_RTC_Init+0xca>
  {
    Error_Handler();
 8000962:	f000 f9bb 	bl	8000cdc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x11;
 8000966:	2311      	movs	r3, #17
 8000968:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x12;
 800096a:	2312      	movs	r3, #18
 800096c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800096e:	2300      	movs	r3, #0
 8000970:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800098a:	2301      	movs	r3, #1
 800098c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	2201      	movs	r2, #1
 800099a:	4619      	mov	r1, r3
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <MX_RTC_Init+0x11c>)
 800099e:	f005 f8e7 	bl	8005b70 <HAL_RTC_SetAlarm_IT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_RTC_Init+0x110>
  {
    Error_Handler();
 80009a8:	f000 f998 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	HAL_PWR_EnableBkUpAccess();
 80009ac:	f001 fdf4 	bl	8002598 <HAL_PWR_EnableBkUpAccess>
  /* USER CODE END RTC_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3740      	adds	r7, #64	; 0x40
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	24001194 	.word	0x24001194
 80009bc:	58004000 	.word	0x58004000

080009c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c4:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 80009c6:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <MX_USART3_UART_Init+0x94>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a08:	4811      	ldr	r0, [pc, #68]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 8000a0a:	f005 fadf 	bl	8005fcc <HAL_UART_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a14:	f000 f962 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 8000a1c:	f006 fc08 	bl	8007230 <HAL_UARTEx_SetTxFifoThreshold>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a26:	f000 f959 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 8000a2e:	f006 fc3d 	bl	80072ac <HAL_UARTEx_SetRxFifoThreshold>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a38:	f000 f950 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_USART3_UART_Init+0x90>)
 8000a3e:	f006 fbbe 	bl	80071be <HAL_UARTEx_DisableFifoMode>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a48:	f000 f948 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	24001078 	.word	0x24001078
 8000a54:	40004800 	.word	0x40004800

08000a58 <MX_WWDG1_Init>:
  * @brief WWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG1_Init 0 */

  /* USER CODE BEGIN WWDG1_Init 1 */

  /* USER CODE END WWDG1_Init 1 */
  hwwdg1.Instance = WWDG1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_WWDG1_Init+0x38>)
 8000a5e:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <MX_WWDG1_Init+0x3c>)
 8000a60:	601a      	str	r2, [r3, #0]
  hwwdg1.Init.Prescaler = WWDG_PRESCALER_4;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_WWDG1_Init+0x38>)
 8000a64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a68:	605a      	str	r2, [r3, #4]
  hwwdg1.Init.Window = 83;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_WWDG1_Init+0x38>)
 8000a6c:	2253      	movs	r2, #83	; 0x53
 8000a6e:	609a      	str	r2, [r3, #8]
  hwwdg1.Init.Counter = 119;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <MX_WWDG1_Init+0x38>)
 8000a72:	2277      	movs	r2, #119	; 0x77
 8000a74:	60da      	str	r2, [r3, #12]
  hwwdg1.Init.EWIMode = WWDG_EWI_DISABLE;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_WWDG1_Init+0x38>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg1) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_WWDG1_Init+0x38>)
 8000a7e:	f006 fca1 	bl	80073c4 <HAL_WWDG_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_WWDG1_Init+0x34>
  {
    Error_Handler();
 8000a88:	f000 f928 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN WWDG1_Init 2 */

  /* USER CODE END WWDG1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	240011e8 	.word	0x240011e8
 8000a94:	50003000 	.word	0x50003000

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	; 0x38
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b79      	ldr	r3, [pc, #484]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ab0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab4:	4a77      	ldr	r2, [pc, #476]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000abe:	4b75      	ldr	r3, [pc, #468]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000acc:	4b71      	ldr	r3, [pc, #452]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ace:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad2:	4a70      	ldr	r2, [pc, #448]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ad4:	f043 0320 	orr.w	r3, r3, #32
 8000ad8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000adc:	4b6d      	ldr	r3, [pc, #436]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000ade:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aea:	4b6a      	ldr	r3, [pc, #424]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af0:	4a68      	ldr	r2, [pc, #416]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000afa:	4b66      	ldr	r3, [pc, #408]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b08:	4b62      	ldr	r3, [pc, #392]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0e:	4a61      	ldr	r2, [pc, #388]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b18:	4b5e      	ldr	r3, [pc, #376]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	4b5b      	ldr	r3, [pc, #364]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2c:	4a59      	ldr	r2, [pc, #356]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b36:	4b57      	ldr	r3, [pc, #348]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b44:	4b53      	ldr	r3, [pc, #332]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4a:	4a52      	ldr	r2, [pc, #328]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b54:	4b4f      	ldr	r3, [pc, #316]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b68:	4a4a      	ldr	r2, [pc, #296]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b72:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b80:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b86:	4a43      	ldr	r2, [pc, #268]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b88:	f043 0310 	orr.w	r3, r3, #16
 8000b8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b90:	4b40      	ldr	r3, [pc, #256]	; (8000c94 <MX_GPIO_Init+0x1fc>)
 8000b92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b96:	f003 0310 	and.w	r3, r3, #16
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba4:	483c      	ldr	r0, [pc, #240]	; (8000c98 <MX_GPIO_Init+0x200>)
 8000ba6:	f001 fcdd 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bb0:	483a      	ldr	r0, [pc, #232]	; (8000c9c <MX_GPIO_Init+0x204>)
 8000bb2:	f001 fcd7 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2102      	movs	r1, #2
 8000bba:	4839      	ldr	r0, [pc, #228]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000bbc:	f001 fcd2 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4833      	ldr	r0, [pc, #204]	; (8000ca4 <MX_GPIO_Init+0x20c>)
 8000bd6:	f001 fb15 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4829      	ldr	r0, [pc, #164]	; (8000c98 <MX_GPIO_Init+0x200>)
 8000bf4:	f001 fb06 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bf8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4822      	ldr	r0, [pc, #136]	; (8000c9c <MX_GPIO_Init+0x204>)
 8000c12:	f001 faf7 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481f      	ldr	r0, [pc, #124]	; (8000ca8 <MX_GPIO_Init+0x210>)
 8000c2c:	f001 faea 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c42:	230a      	movs	r3, #10
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4817      	ldr	r0, [pc, #92]	; (8000cac <MX_GPIO_Init+0x214>)
 8000c4e:	f001 fad9 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4810      	ldr	r0, [pc, #64]	; (8000cac <MX_GPIO_Init+0x214>)
 8000c6c:	f001 faca 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c70:	2302      	movs	r3, #2
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000c88:	f001 fabc 	bl	8002204 <HAL_GPIO_Init>

}
 8000c8c:	bf00      	nop
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	58024400 	.word	0x58024400
 8000c98:	58021400 	.word	0x58021400
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	58021000 	.word	0x58021000
 8000ca4:	58020800 	.word	0x58020800
 8000ca8:	58021800 	.word	0x58021800
 8000cac:	58020000 	.word	0x58020000

08000cb0 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)alarmMsg, strlen(alarmMsg), UART_TIMEOUT);
 8000cb8:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <HAL_RTC_AlarmAEventCallback+0x24>)
 8000cba:	f7ff fb17 	bl	80002ec <strlen>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	2364      	movs	r3, #100	; 0x64
 8000cc4:	4903      	ldr	r1, [pc, #12]	; (8000cd4 <HAL_RTC_AlarmAEventCallback+0x24>)
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <HAL_RTC_AlarmAEventCallback+0x28>)
 8000cc8:	f005 f9d0 	bl	800606c <HAL_UART_Transmit>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	24000000 	.word	0x24000000
 8000cd8:	24001078 	.word	0x24001078

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_MspInit+0x30>)
 8000cf0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cf4:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x30>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x30>)
 8000d00:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	58024400 	.word	0x58024400

08000d1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0b2      	sub	sp, #200	; 0xc8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	22b8      	movs	r2, #184	; 0xb8
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f006 fba1 	bl	8007474 <memset>
  if(hadc->Instance==ADC2)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <HAL_ADC_MspInit+0x88>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d12e      	bne.n	8000d9a <HAL_ADC_MspInit+0x7e>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000d42:	2320      	movs	r3, #32
 8000d44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000d46:	2381      	movs	r3, #129	; 0x81
 8000d48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000d56:	2340      	movs	r3, #64	; 0x40
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 fc0d 	bl	800358c <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000d78:	f7ff ffb0 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_ADC_MspInit+0x8c>)
 8000d7e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d82:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <HAL_ADC_MspInit+0x8c>)
 8000d84:	f043 0320 	orr.w	r3, r3, #32
 8000d88:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_ADC_MspInit+0x8c>)
 8000d8e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d92:	f003 0320 	and.w	r3, r3, #32
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	37c8      	adds	r7, #200	; 0xc8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40022100 	.word	0x40022100
 8000da8:	58024400 	.word	0x58024400

08000dac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0b2      	sub	sp, #200	; 0xc8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	22b8      	movs	r2, #184	; 0xb8
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f006 fb59 	bl	8007474 <memset>
  if(hrng->Instance==RNG)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_RNG_MspInit+0x68>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d11e      	bne.n	8000e0a <HAL_RNG_MspInit+0x5e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fbd5 	bl	800358c <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000de8:	f7ff ff78 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_RNG_MspInit+0x6c>)
 8000dee:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <HAL_RNG_MspInit+0x6c>)
 8000df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df8:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_RNG_MspInit+0x6c>)
 8000dfe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	37c8      	adds	r7, #200	; 0xc8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	48021800 	.word	0x48021800
 8000e18:	58024400 	.word	0x58024400

08000e1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0b0      	sub	sp, #192	; 0xc0
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	22b8      	movs	r2, #184	; 0xb8
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f006 fb21 	bl	8007474 <memset>
  if(hrtc->Instance==RTC)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_RTC_MspInit+0x68>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d11e      	bne.n	8000e7a <HAL_RTC_MspInit+0x5e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e40:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fb9c 	bl	800358c <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e5a:	f7ff ff3f 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_RTC_MspInit+0x6c>)
 8000e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_RTC_MspInit+0x6c>)
 8000e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e68:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2029      	movs	r0, #41	; 0x29
 8000e70:	f001 f993 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e74:	2029      	movs	r0, #41	; 0x29
 8000e76:	f001 f9aa 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	37c0      	adds	r7, #192	; 0xc0
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	58004000 	.word	0x58004000
 8000e88:	58024400 	.word	0x58024400

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0b8      	sub	sp, #224	; 0xe0
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	22b8      	movs	r2, #184	; 0xb8
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 fae1 	bl	8007474 <memset>
  if(huart->Instance==USART3)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a25      	ldr	r2, [pc, #148]	; (8000f4c <HAL_UART_MspInit+0xc0>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d142      	bne.n	8000f42 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 fb5e 	bl	800358c <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ed6:	f7ff ff01 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000edc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000eec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000efe:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_UART_MspInit+0xc4>)
 8000f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f30:	2307      	movs	r3, #7
 8000f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_UART_MspInit+0xc8>)
 8000f3e:	f001 f961 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	37e0      	adds	r7, #224	; 0xe0
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40004800 	.word	0x40004800
 8000f50:	58024400 	.word	0x58024400
 8000f54:	58020c00 	.word	0x58020c00

08000f58 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_WWDG_MspInit+0x3c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10e      	bne.n	8000f88 <HAL_WWDG_MspInit+0x30>
  {
  /* USER CODE BEGIN WWDG1_MspInit 0 */

  /* USER CODE END WWDG1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG1_CLK_ENABLE();
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_WWDG_MspInit+0x40>)
 8000f6c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_WWDG_MspInit+0x40>)
 8000f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f76:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_WWDG_MspInit+0x40>)
 8000f7c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG1_MspInit 1 */

  /* USER CODE END WWDG1_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	50003000 	.word	0x50003000
 8000f98:	58024400 	.word	0x58024400

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f920 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <RTC_Alarm_IRQHandler+0x10>)
 8000ff6:	f004 fef7 	bl	8005de8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	24001194 	.word	0x24001194

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001008:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <SystemInit+0xd0>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <SystemInit+0xd0>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <SystemInit+0xd4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	2b02      	cmp	r3, #2
 8001022:	d807      	bhi.n	8001034 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <SystemInit+0xd4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f023 030f 	bic.w	r3, r3, #15
 800102c:	4a2a      	ldr	r2, [pc, #168]	; (80010d8 <SystemInit+0xd4>)
 800102e:	f043 0303 	orr.w	r3, r3, #3
 8001032:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <SystemInit+0xd8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a28      	ldr	r2, [pc, #160]	; (80010dc <SystemInit+0xd8>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <SystemInit+0xd8>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <SystemInit+0xd8>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4924      	ldr	r1, [pc, #144]	; (80010dc <SystemInit+0xd8>)
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <SystemInit+0xdc>)
 800104e:	4013      	ands	r3, r2
 8001050:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <SystemInit+0xd4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b00      	cmp	r3, #0
 800105c:	d007      	beq.n	800106e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <SystemInit+0xd4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 030f 	bic.w	r3, r3, #15
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <SystemInit+0xd4>)
 8001068:	f043 0303 	orr.w	r3, r3, #3
 800106c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <SystemInit+0xd8>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <SystemInit+0xd8>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <SystemInit+0xd8>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <SystemInit+0xd8>)
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <SystemInit+0xe0>)
 8001084:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <SystemInit+0xd8>)
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <SystemInit+0xe4>)
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <SystemInit+0xd8>)
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <SystemInit+0xe8>)
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <SystemInit+0xd8>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <SystemInit+0xd8>)
 800109a:	4a14      	ldr	r2, [pc, #80]	; (80010ec <SystemInit+0xe8>)
 800109c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <SystemInit+0xd8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <SystemInit+0xd8>)
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <SystemInit+0xe8>)
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <SystemInit+0xd8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <SystemInit+0xd8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a09      	ldr	r2, [pc, #36]	; (80010dc <SystemInit+0xd8>)
 80010b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <SystemInit+0xd8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <SystemInit+0xec>)
 80010c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00
 80010d8:	52002000 	.word	0x52002000
 80010dc:	58024400 	.word	0x58024400
 80010e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010e4:	02020200 	.word	0x02020200
 80010e8:	01ff0000 	.word	0x01ff0000
 80010ec:	01010280 	.word	0x01010280
 80010f0:	52004000 	.word	0x52004000

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f8:	f7ff ff84 	bl	8001004 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	; (8001134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	; (8001140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001122:	f006 f983 	bl	800742c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff fa65 	bl	80005f4 <main>
  bx  lr
 800112a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001130:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001134:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8001138:	080075b8 	.word	0x080075b8
  ldr r2, =_sbss
 800113c:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8001140:	24001200 	.word	0x24001200

08001144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114e:	2003      	movs	r0, #3
 8001150:	f001 f818 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001154:	f002 f844 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 8001158:	4602      	mov	r2, r0
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_Init+0x68>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	0a1b      	lsrs	r3, r3, #8
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	4913      	ldr	r1, [pc, #76]	; (80011b4 <HAL_Init+0x6c>)
 8001166:	5ccb      	ldrb	r3, [r1, r3]
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	fa22 f303 	lsr.w	r3, r2, r3
 8001170:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_Init+0x68>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_Init+0x6c>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	fa22 f303 	lsr.w	r3, r2, r3
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <HAL_Init+0x70>)
 800118a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800118c:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_Init+0x74>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f814 	bl	80011c0 <HAL_InitTick>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e002      	b.n	80011a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011a2:	f7ff fda1 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	58024400 	.word	0x58024400
 80011b4:	08007570 	.word	0x08007570
 80011b8:	24000018 	.word	0x24000018
 80011bc:	24000014 	.word	0x24000014

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_InitTick+0x60>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e021      	b.n	8001218 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_InitTick+0x64>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_InitTick+0x60>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fffd 	bl	80021ea <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f000 ffc7 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_InitTick+0x68>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24000020 	.word	0x24000020
 8001224:	24000014 	.word	0x24000014
 8001228:	2400001c 	.word	0x2400001c

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	24000020 	.word	0x24000020
 8001250:	240011fc 	.word	0x240011fc

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	240011fc 	.word	0x240011fc

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_Delay+0x44>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffde 	bl	8001254 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24000020 	.word	0x24000020

080012b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3360      	adds	r3, #96	; 0x60
 800132e:	461a      	mov	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	430b      	orrs	r3, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f003 031f 	and.w	r3, r3, #31
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	431a      	orrs	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	611a      	str	r2, [r3, #16]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800138e:	b480      	push	{r7}
 8001390:	b087      	sub	sp, #28
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3360      	adds	r3, #96	; 0x60
 800139e:	461a      	mov	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]
  }
}
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3330      	adds	r3, #48	; 0x30
 80013d4:	461a      	mov	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	4413      	add	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	211f      	movs	r1, #31
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	401a      	ands	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0e9b      	lsrs	r3, r3, #26
 80013fc:	f003 011f 	and.w	r1, r3, #31
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	431a      	orrs	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001410:	bf00      	nop
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3314      	adds	r3, #20
 800142c:	461a      	mov	r2, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	0e5b      	lsrs	r3, r3, #25
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	4413      	add	r3, r2
 800143a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	0d1b      	lsrs	r3, r3, #20
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	2107      	movs	r1, #7
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	401a      	ands	r2, r3
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	0d1b      	lsrs	r3, r3, #20
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	431a      	orrs	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001466:	bf00      	nop
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0318 	and.w	r3, r3, #24
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001498:	40d9      	lsrs	r1, r3
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	400b      	ands	r3, r1
 800149e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014a2:	431a      	orrs	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	000fffff 	.word	0x000fffff

080014bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6093      	str	r3, [r2, #8]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	5fffffc0 	.word	0x5fffffc0

080014e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014f4:	d101      	bne.n	80014fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <LL_ADC_EnableInternalRegulator+0x24>)
 8001516:	4013      	ands	r3, r2
 8001518:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	6fffffc0 	.word	0x6fffffc0

08001530 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001544:	d101      	bne.n	800154a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <LL_ADC_IsEnabled+0x18>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <LL_ADC_IsEnabled+0x1a>
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b04      	cmp	r3, #4
 8001590:	d101      	bne.n	8001596 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d101      	bne.n	80015bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e138      	b.n	8001858 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d109      	bne.n	8001608 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fb91 	bl	8000d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff67 	bl	80014e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff4d 	bl	80014bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff82 	bl	8001530 <LL_ADC_IsInternalRegulatorEnabled>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d114      	bne.n	800165c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff66 	bl	8001508 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800163c:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_ADC_Init+0x294>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	099b      	lsrs	r3, r3, #6
 8001642:	4a88      	ldr	r2, [pc, #544]	; (8001864 <HAL_ADC_Init+0x298>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	3301      	adds	r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800164e:	e002      	b.n	8001656 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	3b01      	subs	r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f9      	bne.n	8001650 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff65 	bl	8001530 <LL_ADC_IsInternalRegulatorEnabled>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	f043 0210 	orr.w	r2, r3, #16
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f043 0201 	orr.w	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff76 	bl	800157e <LL_ADC_REG_IsConversionOngoing>
 8001692:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 80d2 	bne.w	8001846 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 80ce 	bne.w	8001846 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016b2:	f043 0202 	orr.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff4a 	bl	8001558 <LL_ADC_IsEnabled>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d110      	bne.n	80016ec <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016ca:	4867      	ldr	r0, [pc, #412]	; (8001868 <HAL_ADC_Init+0x29c>)
 80016cc:	f7ff ff44 	bl	8001558 <LL_ADC_IsEnabled>
 80016d0:	4604      	mov	r4, r0
 80016d2:	4866      	ldr	r0, [pc, #408]	; (800186c <HAL_ADC_Init+0x2a0>)
 80016d4:	f7ff ff40 	bl	8001558 <LL_ADC_IsEnabled>
 80016d8:	4603      	mov	r3, r0
 80016da:	4323      	orrs	r3, r4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4862      	ldr	r0, [pc, #392]	; (8001870 <HAL_ADC_Init+0x2a4>)
 80016e8:	f7ff fde4 	bl	80012b4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7d5b      	ldrb	r3, [r3, #21]
 80016f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80016fc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7f1b      	ldrb	r3, [r3, #28]
 8001702:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7f1b      	ldrb	r3, [r3, #28]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d106      	bne.n	800171e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	3b01      	subs	r3, #1
 8001716:	045b      	lsls	r3, r3, #17
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_ADC_Init+0x2a8>)
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	69b9      	ldr	r1, [r7, #24]
 800174a:	430b      	orrs	r3, r1
 800174c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff13 	bl	800157e <LL_ADC_REG_IsConversionOngoing>
 8001758:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff20 	bl	80015a4 <LL_ADC_INJ_IsConversionOngoing>
 8001764:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d14a      	bne.n	8001802 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d147      	bne.n	8001802 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7d1b      	ldrb	r3, [r3, #20]
 8001776:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <HAL_ADC_Init+0x2ac>)
 8001788:	4013      	ands	r3, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	69b9      	ldr	r1, [r7, #24]
 8001790:	430b      	orrs	r3, r1
 8001792:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800179a:	2b01      	cmp	r3, #1
 800179c:	d11b      	bne.n	80017d6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <HAL_ADC_Init+0x2b0>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017b2:	3a01      	subs	r2, #1
 80017b4:	0411      	lsls	r1, r2, #16
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017ba:	4311      	orrs	r1, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017c0:	4311      	orrs	r1, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017c6:	430a      	orrs	r2, r1
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	e007      	b.n	80017e6 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fb25 	bl	8001e4c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d10c      	bne.n	8001824 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	f023 010f 	bic.w	r1, r3, #15
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
 8001822:	e007      	b.n	8001834 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 020f 	bic.w	r2, r2, #15
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001838:	f023 0303 	bic.w	r3, r3, #3
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	655a      	str	r2, [r3, #84]	; 0x54
 8001844:	e007      	b.n	8001856 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184a:	f043 0210 	orr.w	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001856:	7ffb      	ldrb	r3, [r7, #31]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3724      	adds	r7, #36	; 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	24000014 	.word	0x24000014
 8001864:	053e2d63 	.word	0x053e2d63
 8001868:	40022000 	.word	0x40022000
 800186c:	40022100 	.word	0x40022100
 8001870:	40022300 	.word	0x40022300
 8001874:	fff0c003 	.word	0xfff0c003
 8001878:	ffffbffc 	.word	0xffffbffc
 800187c:	fc00f81e 	.word	0xfc00f81e

08001880 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b0a1      	sub	sp, #132	; 0x84
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a9a      	ldr	r2, [pc, #616]	; (8001b04 <HAL_ADC_ConfigChannel+0x284>)
 800189a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x2a>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e2bc      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x5a4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fe61 	bl	800157e <LL_ADC_REG_IsConversionOngoing>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 82a1 	bne.w	8001e06 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d108      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x62>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0e9b      	lsrs	r3, r3, #26
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	2201      	movs	r2, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	e016      	b.n	8001910 <HAL_ADC_ConfigChannel+0x90>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018f2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80018fa:	2320      	movs	r3, #32
 80018fc:	e003      	b.n	8001906 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80018fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2201      	movs	r2, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	69d1      	ldr	r1, [r2, #28]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	430b      	orrs	r3, r1
 800191c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	f7ff fd4a 	bl	80013c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fe22 	bl	800157e <LL_ADC_REG_IsConversionOngoing>
 800193a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fe2f 	bl	80015a4 <LL_ADC_INJ_IsConversionOngoing>
 8001946:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 80a0 	bne.w	8001a90 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 809c 	bne.w	8001a90 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	461a      	mov	r2, r3
 8001966:	f7ff fd59 	bl	800141c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10b      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x110>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	695a      	ldr	r2, [r3, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	e00a      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x126>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d027      	beq.n	8001a00 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6919      	ldr	r1, [r3, #16]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019be:	f7ff fcad 	bl	800131c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6919      	ldr	r1, [r3, #16]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	7e5b      	ldrb	r3, [r3, #25]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d102      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x158>
 80019d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019d6:	e000      	b.n	80019da <HAL_ADC_ConfigChannel+0x15a>
 80019d8:	2300      	movs	r3, #0
 80019da:	461a      	mov	r2, r3
 80019dc:	f7ff fcd7 	bl	800138e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6919      	ldr	r1, [r3, #16]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	7e1b      	ldrb	r3, [r3, #24]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d102      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x176>
 80019f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f4:	e000      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x178>
 80019f6:	2300      	movs	r3, #0
 80019f8:	461a      	mov	r2, r3
 80019fa:	f7ff fcaf 	bl	800135c <LL_ADC_SetDataRightShift>
 80019fe:	e047      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	069b      	lsls	r3, r3, #26
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d107      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a22:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	069b      	lsls	r3, r3, #26
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d107      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a46:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	069b      	lsls	r3, r3, #26
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d107      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a6a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	069b      	lsls	r3, r3, #26
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d107      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a8e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fd5f 	bl	8001558 <LL_ADC_IsEnabled>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f040 81bb 	bne.w	8001e18 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6819      	ldr	r1, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f7ff fce0 	bl	8001474 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_ADC_ConfigChannel+0x284>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	f040 8130 	bne.w	8001d20 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10b      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x268>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0e9b      	lsrs	r3, r3, #26
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	2b09      	cmp	r3, #9
 8001ade:	bf94      	ite	ls
 8001ae0:	2301      	movls	r3, #1
 8001ae2:	2300      	movhi	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	e01b      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x2a0>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d103      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001b00:	2320      	movs	r3, #32
 8001b02:	e005      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x290>
 8001b04:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2b09      	cmp	r3, #9
 8001b18:	bf94      	ite	ls
 8001b1a:	2301      	movls	r3, #1
 8001b1c:	2300      	movhi	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d079      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d107      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x2c0>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0e9b      	lsrs	r3, r3, #26
 8001b36:	3301      	adds	r3, #1
 8001b38:	069b      	lsls	r3, r3, #26
 8001b3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3e:	e015      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x2ec>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b50:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e003      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	069b      	lsls	r3, r3, #26
 8001b68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x30c>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	e017      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x33c>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	e003      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	ea42 0103 	orr.w	r1, r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10a      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x362>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0e9b      	lsrs	r3, r3, #26
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	051b      	lsls	r3, r3, #20
 8001be0:	e018      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x394>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	e003      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c14:	430b      	orrs	r3, r1
 8001c16:	e07e      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d107      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x3b4>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0e9b      	lsrs	r3, r3, #26
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	069b      	lsls	r3, r3, #26
 8001c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c32:	e015      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x3e0>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	e003      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	069b      	lsls	r3, r3, #26
 8001c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x400>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	3301      	adds	r3, #1
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	e017      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x430>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	61bb      	str	r3, [r7, #24]
  return result;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e003      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2101      	movs	r1, #1
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	ea42 0103 	orr.w	r1, r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10d      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x45c>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0e9b      	lsrs	r3, r3, #26
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b1e      	subs	r3, #30
 8001cd4:	051b      	lsls	r3, r3, #20
 8001cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cda:	e01b      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x494>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	60fb      	str	r3, [r7, #12]
  return result;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	e003      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	f003 021f 	and.w	r2, r3, #31
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b1e      	subs	r3, #30
 8001d0e:	051b      	lsls	r3, r3, #20
 8001d10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d14:	430b      	orrs	r3, r1
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	6892      	ldr	r2, [r2, #8]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7ff fb7e 	bl	800141c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da77      	bge.n	8001e18 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d28:	4840      	ldr	r0, [pc, #256]	; (8001e2c <HAL_ADC_ConfigChannel+0x5ac>)
 8001d2a:	f7ff fae9 	bl	8001300 <LL_ADC_GetCommonPathInternalCh>
 8001d2e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d30:	483f      	ldr	r0, [pc, #252]	; (8001e30 <HAL_ADC_ConfigChannel+0x5b0>)
 8001d32:	f7ff fc11 	bl	8001558 <LL_ADC_IsEnabled>
 8001d36:	4604      	mov	r4, r0
 8001d38:	483e      	ldr	r0, [pc, #248]	; (8001e34 <HAL_ADC_ConfigChannel+0x5b4>)
 8001d3a:	f7ff fc0d 	bl	8001558 <LL_ADC_IsEnabled>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4323      	orrs	r3, r4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d155      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a3b      	ldr	r2, [pc, #236]	; (8001e38 <HAL_ADC_ConfigChannel+0x5b8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d122      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x516>
 8001d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11d      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a35      	ldr	r2, [pc, #212]	; (8001e34 <HAL_ADC_ConfigChannel+0x5b4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d159      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	482f      	ldr	r0, [pc, #188]	; (8001e2c <HAL_ADC_ConfigChannel+0x5ac>)
 8001d6e:	f7ff fab4 	bl	80012da <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d72:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <HAL_ADC_ConfigChannel+0x5bc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	4a31      	ldr	r2, [pc, #196]	; (8001e40 <HAL_ADC_ConfigChannel+0x5c0>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	3301      	adds	r3, #1
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d86:	e002      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f9      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d94:	e040      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2a      	ldr	r2, [pc, #168]	; (8001e44 <HAL_ADC_ConfigChannel+0x5c4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d111      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x544>
 8001da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_ADC_ConfigChannel+0x5b4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d131      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	4619      	mov	r1, r3
 8001dbc:	481b      	ldr	r0, [pc, #108]	; (8001e2c <HAL_ADC_ConfigChannel+0x5ac>)
 8001dbe:	f7ff fa8c 	bl	80012da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dc2:	e029      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_ADC_ConfigChannel+0x5c8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d124      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x598>
 8001dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11f      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_ADC_ConfigChannel+0x5b4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d11a      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de8:	4619      	mov	r1, r3
 8001dea:	4810      	ldr	r0, [pc, #64]	; (8001e2c <HAL_ADC_ConfigChannel+0x5ac>)
 8001dec:	f7ff fa75 	bl	80012da <LL_ADC_SetCommonPathInternalCh>
 8001df0:	e012      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f043 0220 	orr.w	r2, r3, #32
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e04:	e008      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f043 0220 	orr.w	r2, r3, #32
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3784      	adds	r7, #132	; 0x84
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}
 8001e2c:	40022300 	.word	0x40022300
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40022100 	.word	0x40022100
 8001e38:	cb840000 	.word	0xcb840000
 8001e3c:	24000014 	.word	0x24000014
 8001e40:	053e2d63 	.word	0x053e2d63
 8001e44:	bac04000 	.word	0xbac04000
 8001e48:	cfb80000 	.word	0xcfb80000

08001e4c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001e54:	4b5f      	ldr	r3, [pc, #380]	; (8001fd4 <ADC_ConfigureBoostMode+0x188>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01c      	beq.n	8001e9a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001e60:	f001 fb38 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 8001e64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e6e:	d010      	beq.n	8001e92 <ADC_ConfigureBoostMode+0x46>
 8001e70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e74:	d871      	bhi.n	8001f5a <ADC_ConfigureBoostMode+0x10e>
 8001e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7a:	d002      	beq.n	8001e82 <ADC_ConfigureBoostMode+0x36>
 8001e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e80:	d16b      	bne.n	8001f5a <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	60fb      	str	r3, [r7, #12]
        break;
 8001e90:	e066      	b.n	8001f60 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	60fb      	str	r3, [r7, #12]
        break;
 8001e98:	e062      	b.n	8001f60 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001e9a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e9e:	f002 fa81 	bl	80043a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ea2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001eac:	d051      	beq.n	8001f52 <ADC_ConfigureBoostMode+0x106>
 8001eae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001eb2:	d854      	bhi.n	8001f5e <ADC_ConfigureBoostMode+0x112>
 8001eb4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001eb8:	d047      	beq.n	8001f4a <ADC_ConfigureBoostMode+0xfe>
 8001eba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001ebe:	d84e      	bhi.n	8001f5e <ADC_ConfigureBoostMode+0x112>
 8001ec0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001ec4:	d03d      	beq.n	8001f42 <ADC_ConfigureBoostMode+0xf6>
 8001ec6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001eca:	d848      	bhi.n	8001f5e <ADC_ConfigureBoostMode+0x112>
 8001ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ed0:	d033      	beq.n	8001f3a <ADC_ConfigureBoostMode+0xee>
 8001ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ed6:	d842      	bhi.n	8001f5e <ADC_ConfigureBoostMode+0x112>
 8001ed8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001edc:	d029      	beq.n	8001f32 <ADC_ConfigureBoostMode+0xe6>
 8001ede:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001ee2:	d83c      	bhi.n	8001f5e <ADC_ConfigureBoostMode+0x112>
 8001ee4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001ee8:	d01a      	beq.n	8001f20 <ADC_ConfigureBoostMode+0xd4>
 8001eea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001eee:	d836      	bhi.n	8001f5e <ADC_ConfigureBoostMode+0x112>
 8001ef0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001ef4:	d014      	beq.n	8001f20 <ADC_ConfigureBoostMode+0xd4>
 8001ef6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001efa:	d830      	bhi.n	8001f5e <ADC_ConfigureBoostMode+0x112>
 8001efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f00:	d00e      	beq.n	8001f20 <ADC_ConfigureBoostMode+0xd4>
 8001f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f06:	d82a      	bhi.n	8001f5e <ADC_ConfigureBoostMode+0x112>
 8001f08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f0c:	d008      	beq.n	8001f20 <ADC_ConfigureBoostMode+0xd4>
 8001f0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f12:	d824      	bhi.n	8001f5e <ADC_ConfigureBoostMode+0x112>
 8001f14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f18:	d002      	beq.n	8001f20 <ADC_ConfigureBoostMode+0xd4>
 8001f1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f1e:	d11e      	bne.n	8001f5e <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	0c9b      	lsrs	r3, r3, #18
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	60fb      	str	r3, [r7, #12]
        break;
 8001f30:	e016      	b.n	8001f60 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
        break;
 8001f38:	e012      	b.n	8001f60 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	60fb      	str	r3, [r7, #12]
        break;
 8001f40:	e00e      	b.n	8001f60 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	60fb      	str	r3, [r7, #12]
        break;
 8001f48:	e00a      	b.n	8001f60 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	09db      	lsrs	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]
        break;
 8001f50:	e006      	b.n	8001f60 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	60fb      	str	r3, [r7, #12]
        break;
 8001f58:	e002      	b.n	8001f60 <ADC_ConfigureBoostMode+0x114>
        break;
 8001f5a:	bf00      	nop
 8001f5c:	e000      	b.n	8001f60 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8001f5e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <ADC_ConfigureBoostMode+0x18c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d808      	bhi.n	8001f80 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f7c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001f7e:	e025      	b.n	8001fcc <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <ADC_ConfigureBoostMode+0x190>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d80a      	bhi.n	8001f9e <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9a:	609a      	str	r2, [r3, #8]
}
 8001f9c:	e016      	b.n	8001fcc <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <ADC_ConfigureBoostMode+0x194>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d80a      	bhi.n	8001fbc <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb8:	609a      	str	r2, [r3, #8]
}
 8001fba:	e007      	b.n	8001fcc <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001fca:	609a      	str	r2, [r3, #8]
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40022300 	.word	0x40022300
 8001fd8:	005f5e10 	.word	0x005f5e10
 8001fdc:	00bebc20 	.word	0x00bebc20
 8001fe0:	017d7840 	.word	0x017d7840

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	4313      	orrs	r3, r2
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <__NVIC_SetPriorityGrouping+0x40>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00
 8002028:	05fa0000 	.word	0x05fa0000

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021a8:	f7ff ff40 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff90 	bl	80020d8 <NVIC_EncodePriority>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5f 	bl	8002084 <__NVIC_SetPriority>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff33 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffa4 	bl	8002140 <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002212:	4b89      	ldr	r3, [pc, #548]	; (8002438 <HAL_GPIO_Init+0x234>)
 8002214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002216:	e194      	b.n	8002542 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8186 	beq.w	800253c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d005      	beq.n	8002248 <HAL_GPIO_Init+0x44>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d130      	bne.n	80022aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800227e:	2201      	movs	r2, #1
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 0201 	and.w	r2, r3, #1
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d017      	beq.n	80022e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d123      	bne.n	800233a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	69b9      	ldr	r1, [r7, #24]
 8002336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0203 	and.w	r2, r3, #3
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80e0 	beq.w	800253c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237c:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_GPIO_Init+0x238>)
 800237e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002382:	4a2e      	ldr	r2, [pc, #184]	; (800243c <HAL_GPIO_Init+0x238>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_GPIO_Init+0x238>)
 800238e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239a:	4a29      	ldr	r2, [pc, #164]	; (8002440 <HAL_GPIO_Init+0x23c>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a20      	ldr	r2, [pc, #128]	; (8002444 <HAL_GPIO_Init+0x240>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d052      	beq.n	800246c <HAL_GPIO_Init+0x268>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <HAL_GPIO_Init+0x244>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d031      	beq.n	8002432 <HAL_GPIO_Init+0x22e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1e      	ldr	r2, [pc, #120]	; (800244c <HAL_GPIO_Init+0x248>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02b      	beq.n	800242e <HAL_GPIO_Init+0x22a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_GPIO_Init+0x24c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d025      	beq.n	800242a <HAL_GPIO_Init+0x226>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1c      	ldr	r2, [pc, #112]	; (8002454 <HAL_GPIO_Init+0x250>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <HAL_GPIO_Init+0x222>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_GPIO_Init+0x254>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x21e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_GPIO_Init+0x258>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x21a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a19      	ldr	r2, [pc, #100]	; (8002460 <HAL_GPIO_Init+0x25c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x216>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a18      	ldr	r2, [pc, #96]	; (8002464 <HAL_GPIO_Init+0x260>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x212>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a17      	ldr	r2, [pc, #92]	; (8002468 <HAL_GPIO_Init+0x264>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x20e>
 800240e:	2309      	movs	r3, #9
 8002410:	e02d      	b.n	800246e <HAL_GPIO_Init+0x26a>
 8002412:	230a      	movs	r3, #10
 8002414:	e02b      	b.n	800246e <HAL_GPIO_Init+0x26a>
 8002416:	2308      	movs	r3, #8
 8002418:	e029      	b.n	800246e <HAL_GPIO_Init+0x26a>
 800241a:	2307      	movs	r3, #7
 800241c:	e027      	b.n	800246e <HAL_GPIO_Init+0x26a>
 800241e:	2306      	movs	r3, #6
 8002420:	e025      	b.n	800246e <HAL_GPIO_Init+0x26a>
 8002422:	2305      	movs	r3, #5
 8002424:	e023      	b.n	800246e <HAL_GPIO_Init+0x26a>
 8002426:	2304      	movs	r3, #4
 8002428:	e021      	b.n	800246e <HAL_GPIO_Init+0x26a>
 800242a:	2303      	movs	r3, #3
 800242c:	e01f      	b.n	800246e <HAL_GPIO_Init+0x26a>
 800242e:	2302      	movs	r3, #2
 8002430:	e01d      	b.n	800246e <HAL_GPIO_Init+0x26a>
 8002432:	2301      	movs	r3, #1
 8002434:	e01b      	b.n	800246e <HAL_GPIO_Init+0x26a>
 8002436:	bf00      	nop
 8002438:	58000080 	.word	0x58000080
 800243c:	58024400 	.word	0x58024400
 8002440:	58000400 	.word	0x58000400
 8002444:	58020000 	.word	0x58020000
 8002448:	58020400 	.word	0x58020400
 800244c:	58020800 	.word	0x58020800
 8002450:	58020c00 	.word	0x58020c00
 8002454:	58021000 	.word	0x58021000
 8002458:	58021400 	.word	0x58021400
 800245c:	58021800 	.word	0x58021800
 8002460:	58021c00 	.word	0x58021c00
 8002464:	58022000 	.word	0x58022000
 8002468:	58022400 	.word	0x58022400
 800246c:	2300      	movs	r3, #0
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	f002 0203 	and.w	r2, r2, #3
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	4093      	lsls	r3, r2
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247e:	4938      	ldr	r1, [pc, #224]	; (8002560 <HAL_GPIO_Init+0x35c>)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	3301      	adds	r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	f47f ae63 	bne.w	8002218 <HAL_GPIO_Init+0x14>
  }
}
 8002552:	bf00      	nop
 8002554:	bf00      	nop
 8002556:	3724      	adds	r7, #36	; 0x24
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	58000400 	.word	0x58000400

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	58024800 	.word	0x58024800

080025b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <HAL_PWREx_ConfigSupply+0xb0>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d00a      	beq.n	80025e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_PWREx_ConfigSupply+0xb0>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d001      	beq.n	80025de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e040      	b.n	8002660 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e03e      	b.n	8002660 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_PWREx_ConfigSupply+0xb0>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80025ea:	491f      	ldr	r1, [pc, #124]	; (8002668 <HAL_PWREx_ConfigSupply+0xb0>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025f2:	f7fe fe2f 	bl	8001254 <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025f8:	e009      	b.n	800260e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025fa:	f7fe fe2b 	bl	8001254 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002608:	d901      	bls.n	800260e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e028      	b.n	8002660 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_PWREx_ConfigSupply+0xb0>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261a:	d1ee      	bne.n	80025fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b1e      	cmp	r3, #30
 8002620:	d008      	beq.n	8002634 <HAL_PWREx_ConfigSupply+0x7c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b2e      	cmp	r3, #46	; 0x2e
 8002626:	d005      	beq.n	8002634 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b1d      	cmp	r3, #29
 800262c:	d002      	beq.n	8002634 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b2d      	cmp	r3, #45	; 0x2d
 8002632:	d114      	bne.n	800265e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002634:	f7fe fe0e 	bl	8001254 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800263a:	e009      	b.n	8002650 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800263c:	f7fe fe0a 	bl	8001254 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264a:	d901      	bls.n	8002650 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e007      	b.n	8002660 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_PWREx_ConfigSupply+0xb0>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d1ee      	bne.n	800263c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	58024800 	.word	0x58024800

0800266c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	; 0x30
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e3f3      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80b3 	beq.w	80027f2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268c:	4b9e      	ldr	r3, [pc, #632]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002696:	4b9c      	ldr	r3, [pc, #624]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d007      	beq.n	80026b2 <HAL_RCC_OscConfig+0x46>
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	2b18      	cmp	r3, #24
 80026a6:	d112      	bne.n	80026ce <HAL_RCC_OscConfig+0x62>
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d10d      	bne.n	80026ce <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b2:	4b95      	ldr	r3, [pc, #596]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8098 	beq.w	80027f0 <HAL_RCC_OscConfig+0x184>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 8093 	bne.w	80027f0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e3cb      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x7a>
 80026d8:	4b8b      	ldr	r3, [pc, #556]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a8a      	ldr	r2, [pc, #552]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80026de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	e058      	b.n	8002798 <HAL_RCC_OscConfig+0x12c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d112      	bne.n	8002714 <HAL_RCC_OscConfig+0xa8>
 80026ee:	4b86      	ldr	r3, [pc, #536]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a85      	ldr	r2, [pc, #532]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80026f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b83      	ldr	r3, [pc, #524]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a82      	ldr	r2, [pc, #520]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002700:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b80      	ldr	r3, [pc, #512]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a7f      	ldr	r2, [pc, #508]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800270c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e041      	b.n	8002798 <HAL_RCC_OscConfig+0x12c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d112      	bne.n	8002744 <HAL_RCC_OscConfig+0xd8>
 800271e:	4b7a      	ldr	r3, [pc, #488]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a79      	ldr	r2, [pc, #484]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b77      	ldr	r3, [pc, #476]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a76      	ldr	r2, [pc, #472]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002730:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b74      	ldr	r3, [pc, #464]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a73      	ldr	r2, [pc, #460]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e029      	b.n	8002798 <HAL_RCC_OscConfig+0x12c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800274c:	d112      	bne.n	8002774 <HAL_RCC_OscConfig+0x108>
 800274e:	4b6e      	ldr	r3, [pc, #440]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6d      	ldr	r2, [pc, #436]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b6b      	ldr	r3, [pc, #428]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6a      	ldr	r2, [pc, #424]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b68      	ldr	r3, [pc, #416]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a67      	ldr	r2, [pc, #412]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e011      	b.n	8002798 <HAL_RCC_OscConfig+0x12c>
 8002774:	4b64      	ldr	r3, [pc, #400]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a63      	ldr	r2, [pc, #396]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b61      	ldr	r3, [pc, #388]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a60      	ldr	r2, [pc, #384]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b5e      	ldr	r3, [pc, #376]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5d      	ldr	r2, [pc, #372]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002792:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe fd58 	bl	8001254 <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a8:	f7fe fd54 	bl	8001254 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e355      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027ba:	4b53      	ldr	r3, [pc, #332]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x13c>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe fd44 	bl	8001254 <HAL_GetTick>
 80027cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fe fd40 	bl	8001254 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e341      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027e2:	4b49      	ldr	r3, [pc, #292]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x164>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 808c 	beq.w	8002918 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002800:	4b41      	ldr	r3, [pc, #260]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002808:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800280a:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_RCC_OscConfig+0x1ba>
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	2b18      	cmp	r3, #24
 800281a:	d137      	bne.n	800288c <HAL_RCC_OscConfig+0x220>
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d132      	bne.n	800288c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002826:	4b38      	ldr	r3, [pc, #224]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_RCC_OscConfig+0x1d2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e313      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800283e:	4b32      	ldr	r3, [pc, #200]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0219 	bic.w	r2, r3, #25
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	492f      	ldr	r1, [pc, #188]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002850:	f7fe fd00 	bl	8001254 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002858:	f7fe fcfc 	bl	8001254 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e2fd      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	4920      	ldr	r1, [pc, #128]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288a:	e045      	b.n	8002918 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d026      	beq.n	80028e2 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002894:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 0219 	bic.w	r2, r3, #25
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4919      	ldr	r1, [pc, #100]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fcd5 	bl	8001254 <HAL_GetTick>
 80028aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe fcd1 	bl	8001254 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e2d2      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	490b      	ldr	r1, [pc, #44]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	e01a      	b.n	8002918 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a08      	ldr	r2, [pc, #32]	; (8002908 <HAL_RCC_OscConfig+0x29c>)
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fcb1 	bl	8001254 <HAL_GetTick>
 80028f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe fcad 	bl	8001254 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d903      	bls.n	800290c <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e2ae      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
 8002908:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800290c:	4b99      	ldr	r3, [pc, #612]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ee      	bne.n	80028f6 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d06a      	beq.n	80029fa <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002924:	4b93      	ldr	r3, [pc, #588]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800292c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800292e:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b08      	cmp	r3, #8
 8002938:	d007      	beq.n	800294a <HAL_RCC_OscConfig+0x2de>
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b18      	cmp	r3, #24
 800293e:	d11b      	bne.n	8002978 <HAL_RCC_OscConfig+0x30c>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d116      	bne.n	8002978 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800294a:	4b8a      	ldr	r3, [pc, #552]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x2f6>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	2b80      	cmp	r3, #128	; 0x80
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e281      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002962:	4b84      	ldr	r3, [pc, #528]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	061b      	lsls	r3, r3, #24
 8002970:	4980      	ldr	r1, [pc, #512]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002972:	4313      	orrs	r3, r2
 8002974:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002976:	e040      	b.n	80029fa <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002980:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a7b      	ldr	r2, [pc, #492]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fc62 	bl	8001254 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002994:	f7fe fc5e 	bl	8001254 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e25f      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029a6:	4b73      	ldr	r3, [pc, #460]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029b2:	4b70      	ldr	r3, [pc, #448]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	061b      	lsls	r3, r3, #24
 80029c0:	496c      	ldr	r1, [pc, #432]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]
 80029c6:	e018      	b.n	80029fa <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029c8:	4b6a      	ldr	r3, [pc, #424]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a69      	ldr	r2, [pc, #420]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 80029ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fc3e 	bl	8001254 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029dc:	f7fe fc3a 	bl	8001254 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e23b      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d036      	beq.n	8002a74 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a12:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fc1b 	bl	8001254 <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fe fc17 	bl	8001254 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e218      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a34:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x3b6>
 8002a40:	e018      	b.n	8002a74 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fc01 	bl	8001254 <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a56:	f7fe fbfd 	bl	8001254 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e1fe      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a68:	4b42      	ldr	r3, [pc, #264]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d036      	beq.n	8002aee <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d019      	beq.n	8002abc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a88:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a39      	ldr	r2, [pc, #228]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002a8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a94:	f7fe fbde 	bl	8001254 <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a9c:	f7fe fbda 	bl	8001254 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e1db      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aae:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x430>
 8002aba:	e018      	b.n	8002aee <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2c      	ldr	r2, [pc, #176]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fbc4 	bl	8001254 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ad0:	f7fe fbc0 	bl	8001254 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1c1      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ae2:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80af 	beq.w	8002c5a <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002afc:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <HAL_RCC_OscConfig+0x50c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <HAL_RCC_OscConfig+0x50c>)
 8002b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b08:	f7fe fba4 	bl	8001254 <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b10:	f7fe fba0 	bl	8001254 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1a1      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_RCC_OscConfig+0x50c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d106      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4d8>
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6713      	str	r3, [r2, #112]	; 0x70
 8002b42:	e05b      	b.n	8002bfc <HAL_RCC_OscConfig+0x590>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d117      	bne.n	8002b7c <HAL_RCC_OscConfig+0x510>
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b62:	6713      	str	r3, [r2, #112]	; 0x70
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a02      	ldr	r2, [pc, #8]	; (8002b74 <HAL_RCC_OscConfig+0x508>)
 8002b6a:	f023 0304 	bic.w	r3, r3, #4
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	e044      	b.n	8002bfc <HAL_RCC_OscConfig+0x590>
 8002b72:	bf00      	nop
 8002b74:	58024400 	.word	0x58024400
 8002b78:	58024800 	.word	0x58024800
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d112      	bne.n	8002baa <HAL_RCC_OscConfig+0x53e>
 8002b84:	4b95      	ldr	r3, [pc, #596]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a94      	ldr	r2, [pc, #592]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b92      	ldr	r3, [pc, #584]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a91      	ldr	r2, [pc, #580]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9c:	4b8f      	ldr	r3, [pc, #572]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a8e      	ldr	r2, [pc, #568]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	e028      	b.n	8002bfc <HAL_RCC_OscConfig+0x590>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b85      	cmp	r3, #133	; 0x85
 8002bb0:	d112      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x56c>
 8002bb2:	4b8a      	ldr	r3, [pc, #552]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	4a89      	ldr	r2, [pc, #548]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bb8:	f043 0304 	orr.w	r3, r3, #4
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbe:	4b87      	ldr	r3, [pc, #540]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	4a86      	ldr	r2, [pc, #536]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bca:	4b84      	ldr	r3, [pc, #528]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd6:	e011      	b.n	8002bfc <HAL_RCC_OscConfig+0x590>
 8002bd8:	4b80      	ldr	r3, [pc, #512]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	4a7f      	ldr	r2, [pc, #508]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70
 8002be4:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a7c      	ldr	r2, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	4b7a      	ldr	r3, [pc, #488]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	4a79      	ldr	r2, [pc, #484]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d015      	beq.n	8002c30 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fb26 	bl	8001254 <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fb22 	bl	8001254 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e121      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c22:	4b6e      	ldr	r3, [pc, #440]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0ee      	beq.n	8002c0c <HAL_RCC_OscConfig+0x5a0>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe fb10 	bl	8001254 <HAL_GetTick>
 8002c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe fb0c 	bl	8001254 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e10b      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ee      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8100 	beq.w	8002e64 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c64:	4b5d      	ldr	r3, [pc, #372]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c6c:	2b18      	cmp	r3, #24
 8002c6e:	f000 80bb 	beq.w	8002de8 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	f040 8095 	bne.w	8002da6 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	4b57      	ldr	r3, [pc, #348]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fae4 	bl	8001254 <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe fae0 	bl	8001254 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0e1      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca2:	4b4e      	ldr	r3, [pc, #312]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cae:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb2:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <HAL_RCC_OscConfig+0x774>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	4946      	ldr	r1, [pc, #280]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	628b      	str	r3, [r1, #40]	; 0x28
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	025b      	lsls	r3, r3, #9
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	041b      	lsls	r3, r3, #16
 8002ce6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	061b      	lsls	r3, r3, #24
 8002cf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002cf8:	4938      	ldr	r1, [pc, #224]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002cfe:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	4a36      	ldr	r2, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0e:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <HAL_RCC_OscConfig+0x778>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d16:	00d2      	lsls	r2, r2, #3
 8002d18:	4930      	ldr	r1, [pc, #192]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	f023 020c 	bic.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	492c      	ldr	r1, [pc, #176]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d30:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	f023 0202 	bic.w	r2, r3, #2
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	4927      	ldr	r1, [pc, #156]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d66:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d72:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fa69 	bl	8001254 <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d86:	f7fe fa65 	bl	8001254 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e066      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d98:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x71a>
 8002da4:	e05e      	b.n	8002e64 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fa4f 	bl	8001254 <HAL_GetTick>
 8002db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fe fa4b 	bl	8001254 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e04c      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_RCC_OscConfig+0x770>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x74e>
 8002dd8:	e044      	b.n	8002e64 <HAL_RCC_OscConfig+0x7f8>
 8002dda:	bf00      	nop
 8002ddc:	58024400 	.word	0x58024400
 8002de0:	fffffc0c 	.word	0xfffffc0c
 8002de4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002de8:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <HAL_RCC_OscConfig+0x804>)
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_RCC_OscConfig+0x804>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d031      	beq.n	8002e60 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0203 	and.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d12a      	bne.n	8002e60 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d122      	bne.n	8002e60 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d11a      	bne.n	8002e60 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	0a5b      	lsrs	r3, r3, #9
 8002e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d111      	bne.n	8002e60 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d108      	bne.n	8002e60 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	0e1b      	lsrs	r3, r3, #24
 8002e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3730      	adds	r7, #48	; 0x30
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	58024400 	.word	0x58024400

08002e74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e19c      	b.n	80031c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b8a      	ldr	r3, [pc, #552]	; (80030b4 <HAL_RCC_ClockConfig+0x240>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d910      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b87      	ldr	r3, [pc, #540]	; (80030b4 <HAL_RCC_ClockConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 020f 	bic.w	r2, r3, #15
 8002e9e:	4985      	ldr	r1, [pc, #532]	; (80030b4 <HAL_RCC_ClockConfig+0x240>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b83      	ldr	r3, [pc, #524]	; (80030b4 <HAL_RCC_ClockConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e184      	b.n	80031c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	4b7b      	ldr	r3, [pc, #492]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d908      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ed4:	4b78      	ldr	r3, [pc, #480]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	4975      	ldr	r1, [pc, #468]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	4b70      	ldr	r3, [pc, #448]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d908      	bls.n	8002f14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f02:	4b6d      	ldr	r3, [pc, #436]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	496a      	ldr	r1, [pc, #424]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	4b64      	ldr	r3, [pc, #400]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d908      	bls.n	8002f42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f30:	4b61      	ldr	r3, [pc, #388]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	495e      	ldr	r1, [pc, #376]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d908      	bls.n	8002f70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f5e:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4953      	ldr	r1, [pc, #332]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	4b4d      	ldr	r3, [pc, #308]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d908      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f023 020f 	bic.w	r2, r3, #15
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4947      	ldr	r1, [pc, #284]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d055      	beq.n	8003056 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002faa:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4940      	ldr	r1, [pc, #256]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fc4:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d121      	bne.n	8003014 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0f6      	b.n	80031c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fdc:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d115      	bne.n	8003014 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0ea      	b.n	80031c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ff4:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d109      	bne.n	8003014 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0de      	b.n	80031c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003004:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0d6      	b.n	80031c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f023 0207 	bic.w	r2, r3, #7
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4925      	ldr	r1, [pc, #148]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8003022:	4313      	orrs	r3, r2
 8003024:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003026:	f7fe f915 	bl	8001254 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302c:	e00a      	b.n	8003044 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302e:	f7fe f911 	bl	8001254 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0be      	b.n	80031c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	429a      	cmp	r2, r3
 8003054:	d1eb      	bne.n	800302e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d010      	beq.n	8003084 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	429a      	cmp	r2, r3
 8003070:	d208      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f023 020f 	bic.w	r2, r3, #15
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	490e      	ldr	r1, [pc, #56]	; (80030b8 <HAL_RCC_ClockConfig+0x244>)
 8003080:	4313      	orrs	r3, r2
 8003082:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_ClockConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d214      	bcs.n	80030bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_RCC_ClockConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 020f 	bic.w	r2, r3, #15
 800309a:	4906      	ldr	r1, [pc, #24]	; (80030b4 <HAL_RCC_ClockConfig+0x240>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <HAL_RCC_ClockConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e086      	b.n	80031c2 <HAL_RCC_ClockConfig+0x34e>
 80030b4:	52002000 	.word	0x52002000
 80030b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	4b3f      	ldr	r3, [pc, #252]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d208      	bcs.n	80030ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030d8:	4b3c      	ldr	r3, [pc, #240]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	4939      	ldr	r1, [pc, #228]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003102:	429a      	cmp	r2, r3
 8003104:	d208      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003106:	4b31      	ldr	r3, [pc, #196]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	492e      	ldr	r1, [pc, #184]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 8003114:	4313      	orrs	r3, r2
 8003116:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	4b28      	ldr	r3, [pc, #160]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003130:	429a      	cmp	r2, r3
 8003132:	d208      	bcs.n	8003146 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	4922      	ldr	r1, [pc, #136]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 8003142:	4313      	orrs	r3, r2
 8003144:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d010      	beq.n	8003174 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800315e:	429a      	cmp	r2, r3
 8003160:	d208      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003162:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4917      	ldr	r1, [pc, #92]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 8003170:	4313      	orrs	r3, r2
 8003172:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003174:	f000 f834 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	4912      	ldr	r1, [pc, #72]	; (80031d0 <HAL_RCC_ClockConfig+0x35c>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
 8003190:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <HAL_RCC_ClockConfig+0x358>)
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <HAL_RCC_ClockConfig+0x35c>)
 800319c:	5cd3      	ldrb	r3, [r2, r3]
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x360>)
 80031aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031ac:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <HAL_RCC_ClockConfig+0x364>)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_RCC_ClockConfig+0x368>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe f802 	bl	80011c0 <HAL_InitTick>
 80031bc:	4603      	mov	r3, r0
 80031be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	58024400 	.word	0x58024400
 80031d0:	08007570 	.word	0x08007570
 80031d4:	24000018 	.word	0x24000018
 80031d8:	24000014 	.word	0x24000014
 80031dc:	2400001c 	.word	0x2400001c

080031e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e6:	4bb3      	ldr	r3, [pc, #716]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ee:	2b18      	cmp	r3, #24
 80031f0:	f200 8155 	bhi.w	800349e <HAL_RCC_GetSysClockFreq+0x2be>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003261 	.word	0x08003261
 8003200:	0800349f 	.word	0x0800349f
 8003204:	0800349f 	.word	0x0800349f
 8003208:	0800349f 	.word	0x0800349f
 800320c:	0800349f 	.word	0x0800349f
 8003210:	0800349f 	.word	0x0800349f
 8003214:	0800349f 	.word	0x0800349f
 8003218:	0800349f 	.word	0x0800349f
 800321c:	08003287 	.word	0x08003287
 8003220:	0800349f 	.word	0x0800349f
 8003224:	0800349f 	.word	0x0800349f
 8003228:	0800349f 	.word	0x0800349f
 800322c:	0800349f 	.word	0x0800349f
 8003230:	0800349f 	.word	0x0800349f
 8003234:	0800349f 	.word	0x0800349f
 8003238:	0800349f 	.word	0x0800349f
 800323c:	0800328d 	.word	0x0800328d
 8003240:	0800349f 	.word	0x0800349f
 8003244:	0800349f 	.word	0x0800349f
 8003248:	0800349f 	.word	0x0800349f
 800324c:	0800349f 	.word	0x0800349f
 8003250:	0800349f 	.word	0x0800349f
 8003254:	0800349f 	.word	0x0800349f
 8003258:	0800349f 	.word	0x0800349f
 800325c:	08003293 	.word	0x08003293
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003260:	4b94      	ldr	r3, [pc, #592]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d009      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800326c:	4b91      	ldr	r3, [pc, #580]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	08db      	lsrs	r3, r3, #3
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	4a90      	ldr	r2, [pc, #576]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
 800327c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800327e:	e111      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003280:	4b8d      	ldr	r3, [pc, #564]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003282:	61bb      	str	r3, [r7, #24]
    break;
 8003284:	e10e      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003286:	4b8d      	ldr	r3, [pc, #564]	; (80034bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003288:	61bb      	str	r3, [r7, #24]
    break;
 800328a:	e10b      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800328c:	4b8c      	ldr	r3, [pc, #560]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800328e:	61bb      	str	r3, [r7, #24]
    break;
 8003290:	e108      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003292:	4b88      	ldr	r3, [pc, #544]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800329c:	4b85      	ldr	r3, [pc, #532]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032a8:	4b82      	ldr	r3, [pc, #520]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032b2:	4b80      	ldr	r3, [pc, #512]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	08db      	lsrs	r3, r3, #3
 80032b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80e1 	beq.w	8003498 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	f000 8083 	beq.w	80033e4 <HAL_RCC_GetSysClockFreq+0x204>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	f200 80a1 	bhi.w	8003428 <HAL_RCC_GetSysClockFreq+0x248>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x114>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d056      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032f2:	e099      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032f4:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d02d      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003300:	4b6c      	ldr	r3, [pc, #432]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	08db      	lsrs	r3, r3, #3
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	4a6b      	ldr	r2, [pc, #428]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
 8003310:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	ee07 3a90 	vmov	s15, r3
 8003318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b62      	ldr	r3, [pc, #392]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800335a:	e087      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	4b51      	ldr	r3, [pc, #324]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003382:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800339e:	e065      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80033ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b2:	4b40      	ldr	r3, [pc, #256]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033e2:	e043      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f6:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003406:	ed97 6a02 	vldr	s12, [r7, #8]
 800340a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800340e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003426:	e021      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343a:	4b1e      	ldr	r3, [pc, #120]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344a:	ed97 6a02 	vldr	s12, [r7, #8]
 800344e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800345e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800346a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	0a5b      	lsrs	r3, r3, #9
 8003472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003476:	3301      	adds	r3, #1
 8003478:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003484:	edd7 6a07 	vldr	s13, [r7, #28]
 8003488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800348c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003490:	ee17 3a90 	vmov	r3, s15
 8003494:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003496:	e005      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
    break;
 800349c:	e002      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034a0:	61bb      	str	r3, [r7, #24]
    break;
 80034a2:	bf00      	nop
  }

  return sysclockfreq;
 80034a4:	69bb      	ldr	r3, [r7, #24]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	58024400 	.word	0x58024400
 80034b8:	03d09000 	.word	0x03d09000
 80034bc:	003d0900 	.word	0x003d0900
 80034c0:	007a1200 	.word	0x007a1200
 80034c4:	46000000 	.word	0x46000000
 80034c8:	4c742400 	.word	0x4c742400
 80034cc:	4a742400 	.word	0x4a742400
 80034d0:	4af42400 	.word	0x4af42400

080034d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80034da:	f7ff fe81 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 80034de:	4602      	mov	r2, r0
 80034e0:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_RCC_GetHCLKFreq+0x50>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	490f      	ldr	r1, [pc, #60]	; (8003528 <HAL_RCC_GetHCLKFreq+0x54>)
 80034ec:	5ccb      	ldrb	r3, [r1, r3]
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	fa22 f303 	lsr.w	r3, r2, r3
 80034f6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_RCC_GetHCLKFreq+0x50>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	4a09      	ldr	r2, [pc, #36]	; (8003528 <HAL_RCC_GetHCLKFreq+0x54>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <HAL_RCC_GetHCLKFreq+0x58>)
 8003510:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003512:	4a07      	ldr	r2, [pc, #28]	; (8003530 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <HAL_RCC_GetHCLKFreq+0x58>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	58024400 	.word	0x58024400
 8003528:	08007570 	.word	0x08007570
 800352c:	24000018 	.word	0x24000018
 8003530:	24000014 	.word	0x24000014

08003534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003538:	f7ff ffcc 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4904      	ldr	r1, [pc, #16]	; (800355c <HAL_RCC_GetPCLK1Freq+0x28>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	58024400 	.word	0x58024400
 800355c:	08007570 	.word	0x08007570

08003560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003564:	f7ff ffb6 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCC_GetPCLK2Freq+0x24>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4904      	ldr	r1, [pc, #16]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	58024400 	.word	0x58024400
 8003588:	08007570 	.word	0x08007570

0800358c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003594:	2300      	movs	r3, #0
 8003596:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003598:	2300      	movs	r3, #0
 800359a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d03f      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035b0:	d02a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035b6:	d824      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035bc:	d018      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c2:	d81e      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035cc:	d007      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035ce:	e018      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d0:	4ba6      	ldr	r3, [pc, #664]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	4aa5      	ldr	r2, [pc, #660]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035dc:	e015      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2102      	movs	r1, #2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 ff17 	bl	8005418 <RCCEx_PLL2_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035ee:	e00c      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3324      	adds	r3, #36	; 0x24
 80035f4:	2102      	movs	r1, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 ffc0 	bl	800557c <RCCEx_PLL3_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003600:	e003      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
      break;
 8003606:	e000      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003610:	4b96      	ldr	r3, [pc, #600]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361c:	4993      	ldr	r1, [pc, #588]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800361e:	4313      	orrs	r3, r2
 8003620:	650b      	str	r3, [r1, #80]	; 0x50
 8003622:	e001      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d03d      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	2b04      	cmp	r3, #4
 800363a:	d826      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003659 	.word	0x08003659
 8003648:	08003667 	.word	0x08003667
 800364c:	08003679 	.word	0x08003679
 8003650:	08003691 	.word	0x08003691
 8003654:	08003691 	.word	0x08003691
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003658:	4b84      	ldr	r3, [pc, #528]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	4a83      	ldr	r2, [pc, #524]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800365e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003662:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003664:	e015      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fed3 	bl	8005418 <RCCEx_PLL2_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003676:	e00c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3324      	adds	r3, #36	; 0x24
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f001 ff7c 	bl	800557c <RCCEx_PLL3_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
      break;
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003692:	7dfb      	ldrb	r3, [r7, #23]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003698:	4b74      	ldr	r3, [pc, #464]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	f023 0207 	bic.w	r2, r3, #7
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	4971      	ldr	r1, [pc, #452]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	650b      	str	r3, [r1, #80]	; 0x50
 80036aa:	e001      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d04a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036c4:	d031      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80036c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036ca:	d82b      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d0:	d02d      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d6:	d825      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036d8:	2bc0      	cmp	r3, #192	; 0xc0
 80036da:	d02a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036dc:	2bc0      	cmp	r3, #192	; 0xc0
 80036de:	d821      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d016      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d81d      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d007      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80036f0:	e018      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f2:	4b5e      	ldr	r3, [pc, #376]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	4a5d      	ldr	r2, [pc, #372]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80036fe:	e019      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fe86 	bl	8005418 <RCCEx_PLL2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003710:	e010      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3324      	adds	r3, #36	; 0x24
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f001 ff2f 	bl	800557c <RCCEx_PLL3_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003722:	e007      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
      break;
 8003728:	e004      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800372a:	bf00      	nop
 800372c:	e002      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800373a:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800373c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	4949      	ldr	r1, [pc, #292]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003748:	4313      	orrs	r3, r2
 800374a:	650b      	str	r3, [r1, #80]	; 0x50
 800374c:	e001      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d04f      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003766:	d036      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003768:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800376c:	d830      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800376e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003772:	d032      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003778:	d82a      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800377a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800377e:	d02e      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003780:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003784:	d824      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378a:	d018      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x232>
 800378c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003790:	d81e      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379a:	d007      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x220>
 800379c:	e018      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379e:	4b33      	ldr	r3, [pc, #204]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	4a32      	ldr	r2, [pc, #200]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80037aa:	e019      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f001 fe30 	bl	8005418 <RCCEx_PLL2_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80037bc:	e010      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3324      	adds	r3, #36	; 0x24
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 fed9 	bl	800557c <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80037ce:	e007      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	75fb      	strb	r3, [r7, #23]
      break;
 80037d4:	e004      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80037de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80037e6:	4b21      	ldr	r3, [pc, #132]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	491e      	ldr	r1, [pc, #120]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	650b      	str	r3, [r1, #80]	; 0x50
 80037f8:	e001      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d034      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380e:	2b30      	cmp	r3, #48	; 0x30
 8003810:	d01c      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003812:	2b30      	cmp	r3, #48	; 0x30
 8003814:	d817      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003816:	2b20      	cmp	r3, #32
 8003818:	d00c      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d813      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003822:	2b10      	cmp	r3, #16
 8003824:	d10f      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	4a10      	ldr	r2, [pc, #64]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800382c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003830:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003832:	e00e      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	2102      	movs	r1, #2
 800383a:	4618      	mov	r0, r3
 800383c:	f001 fdec 	bl	8005418 <RCCEx_PLL2_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003844:	e005      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
      break;
 800384a:	e002      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10b      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003864:	4901      	ldr	r1, [pc, #4]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	64cb      	str	r3, [r1, #76]	; 0x4c
 800386a:	e003      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800386c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d047      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003888:	d030      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 800388a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800388e:	d82a      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003890:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003894:	d02c      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003896:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800389a:	d824      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a0:	d018      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80038a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a6:	d81e      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b0:	d007      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80038b2:	e018      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b4:	4bb0      	ldr	r3, [pc, #704]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	4aaf      	ldr	r2, [pc, #700]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038c0:	e017      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fda5 	bl	8005418 <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038d2:	e00e      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3324      	adds	r3, #36	; 0x24
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f001 fe4e 	bl	800557c <RCCEx_PLL3_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038e4:	e005      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80038f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038f8:	4b9f      	ldr	r3, [pc, #636]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	499c      	ldr	r1, [pc, #624]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003906:	4313      	orrs	r3, r2
 8003908:	650b      	str	r3, [r1, #80]	; 0x50
 800390a:	e001      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d049      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003924:	d02e      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392a:	d828      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800392c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003930:	d02a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003932:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003936:	d822      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003938:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800393c:	d026      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800393e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003942:	d81c      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003948:	d010      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800394a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800394e:	d816      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01d      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d111      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	2101      	movs	r1, #1
 8003960:	4618      	mov	r0, r3
 8003962:	f001 fd59 	bl	8005418 <RCCEx_PLL2_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800396a:	e012      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f001 fe02 	bl	800557c <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800397c:	e009      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
      break;
 8003982:	e006      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003984:	bf00      	nop
 8003986:	e004      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003988:	bf00      	nop
 800398a:	e002      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003998:	4b77      	ldr	r3, [pc, #476]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800399a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a4:	4974      	ldr	r1, [pc, #464]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	650b      	str	r3, [r1, #80]	; 0x50
 80039aa:	e001      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d053      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039c2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80039c6:	d034      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039c8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80039cc:	d82e      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80039ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d2:	d030      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80039d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d8:	d828      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d02c      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d822      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80039e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ea:	d028      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80039ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039f0:	d81c      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80039f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f6:	d010      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fc:	d816      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01f      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a06:	d111      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 fd02 	bl	8005418 <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a18:	e014      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3324      	adds	r3, #36	; 0x24
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f001 fdab 	bl	800557c <RCCEx_PLL3_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a30:	e008      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a32:	bf00      	nop
 8003a34:	e006      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a36:	bf00      	nop
 8003a38:	e004      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a4a:	4b4b      	ldr	r3, [pc, #300]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a58:	4947      	ldr	r1, [pc, #284]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a5e:	e001      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d02f      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a78:	d00e      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7e:	d814      	bhi.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d015      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003a84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a88:	d10f      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	4a3a      	ldr	r2, [pc, #232]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a96:	e00c      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 fcba 	bl	8005418 <RCCEx_PLL2_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003aa8:	e003      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	75fb      	strb	r3, [r7, #23]
      break;
 8003aae:	e000      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ab8:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac4:	492c      	ldr	r1, [pc, #176]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	650b      	str	r3, [r1, #80]	; 0x50
 8003aca:	e001      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d032      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d81b      	bhi.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b23 	.word	0x08003b23
 8003af0:	08003afd 	.word	0x08003afd
 8003af4:	08003b0b 	.word	0x08003b0b
 8003af8:	08003b23 	.word	0x08003b23
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afc:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b08:	e00c      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2102      	movs	r1, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fc81 	bl	8005418 <RCCEx_PLL2_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b1a:	e003      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	4910      	ldr	r1, [pc, #64]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b3c:	e001      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 808a 	beq.w	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b5c:	f7fd fb7a 	bl	8001254 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b62:	e00d      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b64:	f7fd fb76 	bl	8001254 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d906      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	75fb      	strb	r3, [r7, #23]
        break;
 8003b76:	e009      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b80:	4bba      	ldr	r3, [pc, #744]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0eb      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d166      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b92:	4bb7      	ldr	r3, [pc, #732]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b9c:	4053      	eors	r3, r2
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d013      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba6:	4bb2      	ldr	r3, [pc, #712]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bb0:	4baf      	ldr	r3, [pc, #700]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4aae      	ldr	r2, [pc, #696]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bbc:	4bac      	ldr	r3, [pc, #688]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4aab      	ldr	r2, [pc, #684]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bc8:	4aa9      	ldr	r2, [pc, #676]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd8:	d115      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fd fb3b 	bl	8001254 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be0:	e00b      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fd fb37 	bl	8001254 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d902      	bls.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	75fb      	strb	r3, [r7, #23]
            break;
 8003bf8:	e005      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bfa:	4b9d      	ldr	r3, [pc, #628]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0ed      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d126      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c1a:	d10d      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003c1c:	4b94      	ldr	r3, [pc, #592]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c2a:	0919      	lsrs	r1, r3, #4
 8003c2c:	4b91      	ldr	r3, [pc, #580]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003c2e:	400b      	ands	r3, r1
 8003c30:	498f      	ldr	r1, [pc, #572]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	610b      	str	r3, [r1, #16]
 8003c36:	e005      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003c38:	4b8d      	ldr	r3, [pc, #564]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	4a8c      	ldr	r2, [pc, #560]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c42:	6113      	str	r3, [r2, #16]
 8003c44:	4b8a      	ldr	r3, [pc, #552]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c52:	4987      	ldr	r1, [pc, #540]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	670b      	str	r3, [r1, #112]	; 0x70
 8003c58:	e004      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
 8003c5c:	75bb      	strb	r3, [r7, #22]
 8003c5e:	e001      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d07f      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c76:	2b28      	cmp	r3, #40	; 0x28
 8003c78:	d866      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003c7a:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003d4f 	.word	0x08003d4f
 8003c84:	08003d49 	.word	0x08003d49
 8003c88:	08003d49 	.word	0x08003d49
 8003c8c:	08003d49 	.word	0x08003d49
 8003c90:	08003d49 	.word	0x08003d49
 8003c94:	08003d49 	.word	0x08003d49
 8003c98:	08003d49 	.word	0x08003d49
 8003c9c:	08003d49 	.word	0x08003d49
 8003ca0:	08003d25 	.word	0x08003d25
 8003ca4:	08003d49 	.word	0x08003d49
 8003ca8:	08003d49 	.word	0x08003d49
 8003cac:	08003d49 	.word	0x08003d49
 8003cb0:	08003d49 	.word	0x08003d49
 8003cb4:	08003d49 	.word	0x08003d49
 8003cb8:	08003d49 	.word	0x08003d49
 8003cbc:	08003d49 	.word	0x08003d49
 8003cc0:	08003d37 	.word	0x08003d37
 8003cc4:	08003d49 	.word	0x08003d49
 8003cc8:	08003d49 	.word	0x08003d49
 8003ccc:	08003d49 	.word	0x08003d49
 8003cd0:	08003d49 	.word	0x08003d49
 8003cd4:	08003d49 	.word	0x08003d49
 8003cd8:	08003d49 	.word	0x08003d49
 8003cdc:	08003d49 	.word	0x08003d49
 8003ce0:	08003d4f 	.word	0x08003d4f
 8003ce4:	08003d49 	.word	0x08003d49
 8003ce8:	08003d49 	.word	0x08003d49
 8003cec:	08003d49 	.word	0x08003d49
 8003cf0:	08003d49 	.word	0x08003d49
 8003cf4:	08003d49 	.word	0x08003d49
 8003cf8:	08003d49 	.word	0x08003d49
 8003cfc:	08003d49 	.word	0x08003d49
 8003d00:	08003d4f 	.word	0x08003d4f
 8003d04:	08003d49 	.word	0x08003d49
 8003d08:	08003d49 	.word	0x08003d49
 8003d0c:	08003d49 	.word	0x08003d49
 8003d10:	08003d49 	.word	0x08003d49
 8003d14:	08003d49 	.word	0x08003d49
 8003d18:	08003d49 	.word	0x08003d49
 8003d1c:	08003d49 	.word	0x08003d49
 8003d20:	08003d4f 	.word	0x08003d4f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	2101      	movs	r1, #1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 fb74 	bl	8005418 <RCCEx_PLL2_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d34:	e00c      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3324      	adds	r3, #36	; 0x24
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 fc1d 	bl	800557c <RCCEx_PLL3_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d46:	e003      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d56:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d64:	4942      	ldr	r1, [pc, #264]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	654b      	str	r3, [r1, #84]	; 0x54
 8003d6a:	e001      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d038      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d821      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dcf 	.word	0x08003dcf
 8003d90:	08003da5 	.word	0x08003da5
 8003d94:	08003db7 	.word	0x08003db7
 8003d98:	08003dcf 	.word	0x08003dcf
 8003d9c:	08003dcf 	.word	0x08003dcf
 8003da0:	08003dcf 	.word	0x08003dcf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 fb34 	bl	8005418 <RCCEx_PLL2_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003db4:	e00c      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3324      	adds	r3, #36	; 0x24
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 fbdd 	bl	800557c <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
      break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dd6:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de2:	4923      	ldr	r1, [pc, #140]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	654b      	str	r3, [r1, #84]	; 0x54
 8003de8:	e001      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d040      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d821      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e4f 	.word	0x08003e4f
 8003e10:	08003e25 	.word	0x08003e25
 8003e14:	08003e37 	.word	0x08003e37
 8003e18:	08003e4f 	.word	0x08003e4f
 8003e1c:	08003e4f 	.word	0x08003e4f
 8003e20:	08003e4f 	.word	0x08003e4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 faf4 	bl	8005418 <RCCEx_PLL2_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e34:	e00c      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3324      	adds	r3, #36	; 0x24
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 fb9d 	bl	800557c <RCCEx_PLL3_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e46:	e003      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4c:	e000      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d110      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	f023 0207 	bic.w	r2, r3, #7
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e64:	4902      	ldr	r1, [pc, #8]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	658b      	str	r3, [r1, #88]	; 0x58
 8003e6a:	e007      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003e6c:	58024800 	.word	0x58024800
 8003e70:	58024400 	.word	0x58024400
 8003e74:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d04b      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e92:	d02e      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e98:	d828      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9e:	d02a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d822      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003ea6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003eaa:	d026      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003eac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003eb0:	d81c      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb6:	d010      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ebc:	d816      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01d      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ec6:	d111      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 faa2 	bl	8005418 <RCCEx_PLL2_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ed8:	e012      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3324      	adds	r3, #36	; 0x24
 8003ede:	2102      	movs	r1, #2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 fb4b 	bl	800557c <RCCEx_PLL3_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003eea:	e009      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef0:	e006      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e004      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e002      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003efa:	bf00      	nop
 8003efc:	e000      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f06:	4bb3      	ldr	r3, [pc, #716]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f14:	49af      	ldr	r1, [pc, #700]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	654b      	str	r3, [r1, #84]	; 0x54
 8003f1a:	e001      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d04b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f36:	d02e      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003f38:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f3c:	d828      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f42:	d02a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	d822      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f4e:	d026      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f54:	d81c      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5a:	d010      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f60:	d816      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01d      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d111      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 fa50 	bl	8005418 <RCCEx_PLL2_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f7c:	e012      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3324      	adds	r3, #36	; 0x24
 8003f82:	2102      	movs	r1, #2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 faf9 	bl	800557c <RCCEx_PLL3_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f8e:	e009      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	75fb      	strb	r3, [r7, #23]
      break;
 8003f94:	e006      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f96:	bf00      	nop
 8003f98:	e004      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e002      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e000      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003faa:	4b8a      	ldr	r3, [pc, #552]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fb8:	4986      	ldr	r1, [pc, #536]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	658b      	str	r3, [r1, #88]	; 0x58
 8003fbe:	e001      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d04b      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fd6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fda:	d02e      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003fdc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fe0:	d828      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe6:	d02a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fec:	d822      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003fee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ff2:	d026      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003ff4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ff8:	d81c      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ffe:	d010      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004004:	d816      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01d      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400e:	d111      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f001 f9fe 	bl	8005418 <RCCEx_PLL2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004020:	e012      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3324      	adds	r3, #36	; 0x24
 8004026:	2102      	movs	r1, #2
 8004028:	4618      	mov	r0, r3
 800402a:	f001 faa7 	bl	800557c <RCCEx_PLL3_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004032:	e009      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	75fb      	strb	r3, [r7, #23]
      break;
 8004038:	e006      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800403a:	bf00      	nop
 800403c:	e004      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800403e:	bf00      	nop
 8004040:	e002      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800404e:	4b61      	ldr	r3, [pc, #388]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800405c:	495d      	ldr	r1, [pc, #372]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800405e:	4313      	orrs	r3, r2
 8004060:	658b      	str	r3, [r1, #88]	; 0x58
 8004062:	e001      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	d10a      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3324      	adds	r3, #36	; 0x24
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fa78 	bl	800557c <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004096:	4b4f      	ldr	r3, [pc, #316]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	494b      	ldr	r1, [pc, #300]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c0:	d10a      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3324      	adds	r3, #36	; 0x24
 80040c6:	2102      	movs	r1, #2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 fa57 	bl	800557c <RCCEx_PLL3_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040d8:	4b3e      	ldr	r3, [pc, #248]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e6:	493b      	ldr	r1, [pc, #236]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d034      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004102:	d01d      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004108:	d817      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800410e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004112:	d009      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004114:	e011      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3304      	adds	r3, #4
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f001 f97b 	bl	8005418 <RCCEx_PLL2_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004126:	e00c      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3324      	adds	r3, #36	; 0x24
 800412c:	2102      	movs	r1, #2
 800412e:	4618      	mov	r0, r3
 8004130:	f001 fa24 	bl	800557c <RCCEx_PLL3_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004138:	e003      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	75fb      	strb	r3, [r7, #23]
      break;
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004156:	491f      	ldr	r1, [pc, #124]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004158:	4313      	orrs	r3, r2
 800415a:	658b      	str	r3, [r1, #88]	; 0x58
 800415c:	e001      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d036      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004174:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004178:	d01c      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800417a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800417e:	d816      	bhi.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004184:	d003      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800418a:	d007      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800418c:	e00f      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004198:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800419a:	e00c      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3324      	adds	r3, #36	; 0x24
 80041a0:	2101      	movs	r1, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 f9ea 	bl	800557c <RCCEx_PLL3_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80041ac:	e003      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
      break;
 80041b2:	e000      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80041b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ca:	4902      	ldr	r1, [pc, #8]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	654b      	str	r3, [r1, #84]	; 0x54
 80041d0:	e004      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80041d2:	bf00      	nop
 80041d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d029      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d007      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80041f6:	e00f      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f8:	4b69      	ldr	r3, [pc, #420]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	4a68      	ldr	r2, [pc, #416]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004204:	e00b      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3304      	adds	r3, #4
 800420a:	2102      	movs	r1, #2
 800420c:	4618      	mov	r0, r3
 800420e:	f001 f903 	bl	8005418 <RCCEx_PLL2_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004216:	e002      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	75fb      	strb	r3, [r7, #23]
      break;
 800421c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004224:	4b5e      	ldr	r3, [pc, #376]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004228:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004230:	495b      	ldr	r1, [pc, #364]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004232:	4313      	orrs	r3, r2
 8004234:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004236:	e001      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3324      	adds	r3, #36	; 0x24
 800424c:	2102      	movs	r1, #2
 800424e:	4618      	mov	r0, r3
 8004250:	f001 f994 	bl	800557c <RCCEx_PLL3_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d032      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004274:	d017      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427a:	d811      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800427c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004280:	d013      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004286:	d80b      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d010      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800428c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004290:	d106      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004292:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	4a42      	ldr	r2, [pc, #264]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800429e:	e007      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	75fb      	strb	r3, [r7, #23]
      break;
 80042a4:	e004      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80042a6:	bf00      	nop
 80042a8:	e002      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80042ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042b6:	4b3a      	ldr	r3, [pc, #232]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c4:	4936      	ldr	r1, [pc, #216]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	654b      	str	r3, [r1, #84]	; 0x54
 80042ca:	e001      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042dc:	4b30      	ldr	r3, [pc, #192]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e8:	492d      	ldr	r1, [pc, #180]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042fa:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80042fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004306:	4926      	ldr	r1, [pc, #152]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004308:	4313      	orrs	r3, r2
 800430a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004318:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	491e      	ldr	r1, [pc, #120]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004326:	4313      	orrs	r3, r2
 8004328:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	4a19      	ldr	r2, [pc, #100]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800433c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004340:	6113      	str	r3, [r2, #16]
 8004342:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800434c:	4914      	ldr	r1, [pc, #80]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800434e:	4313      	orrs	r3, r2
 8004350:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	da08      	bge.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	490e      	ldr	r1, [pc, #56]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004368:	4313      	orrs	r3, r2
 800436a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	4906      	ldr	r1, [pc, #24]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004388:	4313      	orrs	r3, r2
 800438a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800438c:	7dbb      	ldrb	r3, [r7, #22]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	58024400 	.word	0x58024400

080043a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b090      	sub	sp, #64	; 0x40
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b2:	f040 8089 	bne.w	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80043b6:	4ba8      	ldr	r3, [pc, #672]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	633b      	str	r3, [r7, #48]	; 0x30
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d87d      	bhi.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	080043e1 	.word	0x080043e1
 80043d0:	08004405 	.word	0x08004405
 80043d4:	08004429 	.word	0x08004429
 80043d8:	080044bd 	.word	0x080044bd
 80043dc:	0800444d 	.word	0x0800444d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80043e0:	4b9d      	ldr	r3, [pc, #628]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ec:	d107      	bne.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 febe 	bl	8005174 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80043fc:	e3f5      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004402:	e3f2      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004404:	4b94      	ldr	r3, [pc, #592]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800440c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004410:	d107      	bne.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004412:	f107 0318 	add.w	r3, r7, #24
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fc04 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004420:	e3e3      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004426:	e3e0      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004428:	4b8b      	ldr	r3, [pc, #556]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004434:	d107      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004436:	f107 030c 	add.w	r3, r7, #12
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fd46 	bl	8004ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004444:	e3d1      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800444a:	e3ce      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800444c:	4b82      	ldr	r3, [pc, #520]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800444e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004454:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004456:	4b80      	ldr	r3, [pc, #512]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d10c      	bne.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004468:	4b7b      	ldr	r3, [pc, #492]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	08db      	lsrs	r3, r3, #3
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	4a7a      	ldr	r2, [pc, #488]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
 8004478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447a:	e01e      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800447c:	4b76      	ldr	r3, [pc, #472]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004488:	d106      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004490:	d102      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004492:	4b73      	ldr	r3, [pc, #460]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004496:	e010      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004498:	4b6f      	ldr	r3, [pc, #444]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a4:	d106      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80044a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ac:	d102      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80044ae:	4b6d      	ldr	r3, [pc, #436]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b2:	e002      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80044b8:	e397      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80044ba:	e396      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80044bc:	4b6a      	ldr	r3, [pc, #424]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80044be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044c0:	e393      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044c6:	e390      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ce:	f040 8095 	bne.w	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80044d2:	4b61      	ldr	r3, [pc, #388]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80044da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e2:	d04d      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ea:	f200 8084 	bhi.w	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	2bc0      	cmp	r3, #192	; 0xc0
 80044f2:	d07d      	beq.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	2bc0      	cmp	r3, #192	; 0xc0
 80044f8:	d87d      	bhi.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	2b80      	cmp	r3, #128	; 0x80
 80044fe:	d02d      	beq.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2b80      	cmp	r3, #128	; 0x80
 8004504:	d877      	bhi.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d012      	beq.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004512:	e070      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004514:	4b50      	ldr	r3, [pc, #320]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004520:	d107      	bne.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fe24 	bl	8005174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004530:	e35b      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004536:	e358      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004538:	4b47      	ldr	r3, [pc, #284]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004544:	d107      	bne.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004546:	f107 0318 	add.w	r3, r7, #24
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fb6a 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004554:	e349      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800455a:	e346      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800455c:	4b3e      	ldr	r3, [pc, #248]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004568:	d107      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800456a:	f107 030c 	add.w	r3, r7, #12
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fcac 	bl	8004ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004578:	e337      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800457e:	e334      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004580:	4b35      	ldr	r3, [pc, #212]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004588:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800458a:	4b33      	ldr	r3, [pc, #204]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b04      	cmp	r3, #4
 8004594:	d10c      	bne.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	2b00      	cmp	r3, #0
 800459a:	d109      	bne.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800459c:	4b2e      	ldr	r3, [pc, #184]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	08db      	lsrs	r3, r3, #3
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	4a2d      	ldr	r2, [pc, #180]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ae:	e01e      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80045b0:	4b29      	ldr	r3, [pc, #164]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045bc:	d106      	bne.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80045be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c4:	d102      	bne.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80045c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ca:	e010      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80045cc:	4b22      	ldr	r3, [pc, #136]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045d8:	d106      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e0:	d102      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80045e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e6:	e002      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80045ec:	e2fd      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80045ee:	e2fc      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80045f0:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045f4:	e2f9      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045fa:	e2f6      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004602:	f040 80a7 	bne.w	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800460e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d05f      	beq.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461e:	f200 8096 	bhi.w	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004628:	f000 808e 	beq.w	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004632:	f200 808c 	bhi.w	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463c:	d03a      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004644:	f200 8083 	bhi.w	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00e      	beq.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004654:	d01c      	beq.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8004656:	e07a      	b.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004658:	58024400 	.word	0x58024400
 800465c:	03d09000 	.word	0x03d09000
 8004660:	003d0900 	.word	0x003d0900
 8004664:	007a1200 	.word	0x007a1200
 8004668:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800466c:	4ba8      	ldr	r3, [pc, #672]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004678:	d107      	bne.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800467a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fd78 	bl	8005174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004688:	e2af      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800468e:	e2ac      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004690:	4b9f      	ldr	r3, [pc, #636]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800469c:	d107      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800469e:	f107 0318 	add.w	r3, r7, #24
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fabe 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046ac:	e29d      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046b2:	e29a      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046b4:	4b96      	ldr	r3, [pc, #600]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c0:	d107      	bne.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046c2:	f107 030c 	add.w	r3, r7, #12
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fc00 	bl	8004ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046d0:	e28b      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046d6:	e288      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80046d8:	4b8d      	ldr	r3, [pc, #564]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80046da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80046e2:	4b8b      	ldr	r3, [pc, #556]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d10c      	bne.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80046ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046f4:	4b86      	ldr	r3, [pc, #536]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	08db      	lsrs	r3, r3, #3
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	4a85      	ldr	r2, [pc, #532]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004706:	e01e      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004708:	4b81      	ldr	r3, [pc, #516]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004714:	d106      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8004716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004718:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800471c:	d102      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800471e:	4b7e      	ldr	r3, [pc, #504]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004722:	e010      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004724:	4b7a      	ldr	r3, [pc, #488]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004730:	d106      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004738:	d102      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800473a:	4b78      	ldr	r3, [pc, #480]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800473c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473e:	e002      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004744:	e251      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004746:	e250      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004748:	4b75      	ldr	r3, [pc, #468]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800474a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800474c:	e24d      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004752:	e24a      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	f040 809c 	bne.w	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800475e:	4b6c      	ldr	r3, [pc, #432]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004766:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800476e:	d054      	beq.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004776:	f200 808b 	bhi.w	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004780:	f000 8083 	beq.w	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800478a:	f200 8081 	bhi.w	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004794:	d02f      	beq.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479c:	d878      	bhi.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047aa:	d012      	beq.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80047ac:	e070      	b.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047ae:	4b58      	ldr	r3, [pc, #352]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ba:	d107      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fcd7 	bl	8005174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047ca:	e20e      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047d0:	e20b      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047d2:	4b4f      	ldr	r3, [pc, #316]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047de:	d107      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e0:	f107 0318 	add.w	r3, r7, #24
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fa1d 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047ee:	e1fc      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047f4:	e1f9      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047f6:	4b46      	ldr	r3, [pc, #280]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004802:	d107      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004804:	f107 030c 	add.w	r3, r7, #12
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fb5f 	bl	8004ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004812:	e1ea      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004818:	e1e7      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004822:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004824:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b04      	cmp	r3, #4
 800482e:	d10c      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004836:	4b36      	ldr	r3, [pc, #216]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	08db      	lsrs	r3, r3, #3
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	4a34      	ldr	r2, [pc, #208]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004848:	e01e      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800484a:	4b31      	ldr	r3, [pc, #196]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004856:	d106      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8004858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800485e:	d102      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004860:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004864:	e010      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004866:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004872:	d106      	bne.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800487a:	d102      	bne.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004880:	e002      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004886:	e1b0      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004888:	e1af      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800488a:	4b25      	ldr	r3, [pc, #148]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800488e:	e1ac      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004894:	e1a9      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800489c:	d17d      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ae:	d039      	beq.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b6:	d86d      	bhi.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c4:	d012      	beq.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80048c6:	e065      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d4:	d107      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048d6:	f107 0318 	add.w	r3, r7, #24
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f9a2 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048e4:	e181      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048ea:	e17e      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048ec:	4b08      	ldr	r3, [pc, #32]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048f8:	d107      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048fa:	f107 030c 	add.w	r3, r7, #12
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fae4 	bl	8004ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004908:	e16f      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800490e:	e16c      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004910:	58024400 	.word	0x58024400
 8004914:	03d09000 	.word	0x03d09000
 8004918:	003d0900 	.word	0x003d0900
 800491c:	007a1200 	.word	0x007a1200
 8004920:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004924:	4ba0      	ldr	r3, [pc, #640]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800492c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800492e:	4b9e      	ldr	r3, [pc, #632]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d10c      	bne.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800493a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004940:	4b99      	ldr	r3, [pc, #612]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	08db      	lsrs	r3, r3, #3
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	4a98      	ldr	r2, [pc, #608]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800494c:	fa22 f303 	lsr.w	r3, r2, r3
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004952:	e01e      	b.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004954:	4b94      	ldr	r3, [pc, #592]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004960:	d106      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004968:	d102      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800496a:	4b91      	ldr	r3, [pc, #580]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800496c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496e:	e010      	b.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004970:	4b8d      	ldr	r3, [pc, #564]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800497c:	d106      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004984:	d102      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004986:	4b8b      	ldr	r3, [pc, #556]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498a:	e002      	b.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004990:	e12b      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004992:	e12a      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004998:	e127      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d133      	bne.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80049a2:	4b81      	ldr	r3, [pc, #516]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d004      	beq.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d012      	beq.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80049ba:	e023      	b.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049bc:	4b7a      	ldr	r3, [pc, #488]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049c8:	d107      	bne.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fbd0 	bl	8005174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80049d8:	e107      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049de:	e104      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049e0:	4b71      	ldr	r3, [pc, #452]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ec:	d107      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ee:	f107 0318 	add.w	r3, r7, #24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f916 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80049fc:	e0f5      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a02:	e0f2      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a08:	e0ef      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a10:	f040 8091 	bne.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004a14:	4b64      	ldr	r3, [pc, #400]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a18:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004a1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004a24:	f000 8081 	beq.w	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004a2e:	d87f      	bhi.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a36:	d06b      	beq.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a3e:	d877      	bhi.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d056      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d86f      	bhi.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a56:	d03b      	beq.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a5e:	d867      	bhi.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a66:	d021      	beq.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6e:	d85f      	bhi.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d004      	beq.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7c:	d004      	beq.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004a7e:	e057      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004a80:	f000 f8ba 	bl	8004bf8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a84:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004a86:	e0b0      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a88:	4b47      	ldr	r3, [pc, #284]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a96:	f107 0318 	add.w	r3, r7, #24
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f8c2 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004aa4:	e0a1      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004aaa:	e09e      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004aac:	4b3e      	ldr	r3, [pc, #248]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab8:	d107      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004aba:	f107 030c 	add.w	r3, r7, #12
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fa04 	bl	8004ecc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ac8:	e08f      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ace:	e08c      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ad0:	4b35      	ldr	r3, [pc, #212]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d109      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004adc:	4b32      	ldr	r3, [pc, #200]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	08db      	lsrs	r3, r3, #3
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	4a31      	ldr	r2, [pc, #196]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004aee:	e07c      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af4:	e079      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004af6:	4b2c      	ldr	r3, [pc, #176]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	d102      	bne.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8004b04:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b08:	e06f      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b0e:	e06c      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b10:	4b25      	ldr	r3, [pc, #148]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b1c:	d102      	bne.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8004b1e:	4b25      	ldr	r3, [pc, #148]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b22:	e062      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b28:	e05f      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b2a:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b2e:	e05c      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b34:	e059      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3c:	d153      	bne.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b4e:	d035      	beq.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b56:	d843      	bhi.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b64:	d00d      	beq.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8004b66:	e03b      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b68:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b74:	d102      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b7a:	e036      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b80:	e033      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 faed 	bl	8005174 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b9e:	e024      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ba4:	e021      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004ba6:	bf00      	nop
 8004ba8:	58024400 	.word	0x58024400
 8004bac:	03d09000 	.word	0x03d09000
 8004bb0:	003d0900 	.word	0x003d0900
 8004bb4:	007a1200 	.word	0x007a1200
 8004bb8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc8:	d107      	bne.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bca:	f107 0318 	add.w	r3, r7, #24
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f828 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004bd8:	e007      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bde:	e004      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004be4:	e001      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3740      	adds	r7, #64	; 0x40
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	58024400 	.word	0x58024400

08004bf8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004bfc:	f7fe fc6a 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	4904      	ldr	r1, [pc, #16]	; (8004c20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c0e:	5ccb      	ldrb	r3, [r1, r3]
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	08007570 	.word	0x08007570

08004c24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	; 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c2c:	4ba1      	ldr	r3, [pc, #644]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004c36:	4b9f      	ldr	r3, [pc, #636]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	0b1b      	lsrs	r3, r3, #12
 8004c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c42:	4b9c      	ldr	r3, [pc, #624]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	091b      	lsrs	r3, r3, #4
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c4e:	4b99      	ldr	r3, [pc, #612]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	08db      	lsrs	r3, r3, #3
 8004c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8111 	beq.w	8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	f000 8083 	beq.w	8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	f200 80a1 	bhi.w	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d056      	beq.n	8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c8e:	e099      	b.n	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c90:	4b88      	ldr	r3, [pc, #544]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d02d      	beq.n	8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c9c:	4b85      	ldr	r3, [pc, #532]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	08db      	lsrs	r3, r3, #3
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	4a84      	ldr	r2, [pc, #528]	; (8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	ee07 3a90 	vmov	s15, r3
 8004cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b7b      	ldr	r3, [pc, #492]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cda:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004cf6:	e087      	b.n	8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b6a      	ldr	r3, [pc, #424]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d3a:	e065      	b.n	8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d7e:	e043      	b.n	8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b48      	ldr	r3, [pc, #288]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dc2:	e021      	b.n	8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004e08:	4b2a      	ldr	r3, [pc, #168]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	0a5b      	lsrs	r3, r3, #9
 8004e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2e:	ee17 2a90 	vmov	r2, s15
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004e36:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	0c1b      	lsrs	r3, r3, #16
 8004e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e5c:	ee17 2a90 	vmov	r2, s15
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004e64:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	0e1b      	lsrs	r3, r3, #24
 8004e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8a:	ee17 2a90 	vmov	r2, s15
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e92:	e008      	b.n	8004ea6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
}
 8004ea6:	bf00      	nop
 8004ea8:	3724      	adds	r7, #36	; 0x24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	03d09000 	.word	0x03d09000
 8004ebc:	46000000 	.word	0x46000000
 8004ec0:	4c742400 	.word	0x4c742400
 8004ec4:	4a742400 	.word	0x4a742400
 8004ec8:	4af42400 	.word	0x4af42400

08004ecc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	; 0x24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ed4:	4ba1      	ldr	r3, [pc, #644]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ede:	4b9f      	ldr	r3, [pc, #636]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	0d1b      	lsrs	r3, r3, #20
 8004ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004eea:	4b9c      	ldr	r3, [pc, #624]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004ef6:	4b99      	ldr	r3, [pc, #612]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efa:	08db      	lsrs	r3, r3, #3
 8004efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8111 	beq.w	800513c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	f000 8083 	beq.w	8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	f200 80a1 	bhi.w	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d056      	beq.n	8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f36:	e099      	b.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f38:	4b88      	ldr	r3, [pc, #544]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d02d      	beq.n	8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f44:	4b85      	ldr	r3, [pc, #532]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	08db      	lsrs	r3, r3, #3
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	4a84      	ldr	r2, [pc, #528]	; (8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
 8004f54:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	4b7b      	ldr	r3, [pc, #492]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f9e:	e087      	b.n	80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	4b6a      	ldr	r3, [pc, #424]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fe2:	e065      	b.n	80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800516c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff6:	4b59      	ldr	r3, [pc, #356]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	ed97 6a03 	vldr	s12, [r7, #12]
 800500a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800500e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800501a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005026:	e043      	b.n	80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b48      	ldr	r3, [pc, #288]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a03 	vldr	s12, [r7, #12]
 800504e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800506a:	e021      	b.n	80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800516c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800507a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507e:	4b37      	ldr	r3, [pc, #220]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005092:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005164 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80050b0:	4b2a      	ldr	r3, [pc, #168]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	0a5b      	lsrs	r3, r3, #9
 80050b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d6:	ee17 2a90 	vmov	r2, s15
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80050de:	4b1f      	ldr	r3, [pc, #124]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e8:	ee07 3a90 	vmov	s15, r3
 80050ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005104:	ee17 2a90 	vmov	r2, s15
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800510c:	4b13      	ldr	r3, [pc, #76]	; (800515c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	0e1b      	lsrs	r3, r3, #24
 8005112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005126:	edd7 6a07 	vldr	s13, [r7, #28]
 800512a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800512e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005132:	ee17 2a90 	vmov	r2, s15
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800513a:	e008      	b.n	800514e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	609a      	str	r2, [r3, #8]
}
 800514e:	bf00      	nop
 8005150:	3724      	adds	r7, #36	; 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	58024400 	.word	0x58024400
 8005160:	03d09000 	.word	0x03d09000
 8005164:	46000000 	.word	0x46000000
 8005168:	4c742400 	.word	0x4c742400
 800516c:	4a742400 	.word	0x4a742400
 8005170:	4af42400 	.word	0x4af42400

08005174 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005174:	b480      	push	{r7}
 8005176:	b089      	sub	sp, #36	; 0x24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800517c:	4ba0      	ldr	r3, [pc, #640]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005186:	4b9e      	ldr	r3, [pc, #632]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005190:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005192:	4b9b      	ldr	r3, [pc, #620]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800519c:	4b98      	ldr	r3, [pc, #608]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	08db      	lsrs	r3, r3, #3
 80051a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
 80051ac:	ee07 3a90 	vmov	s15, r3
 80051b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8111 	beq.w	80053e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	f000 8083 	beq.w	80052ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	f200 80a1 	bhi.w	8005312 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d056      	beq.n	800528a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80051dc:	e099      	b.n	8005312 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051de:	4b88      	ldr	r3, [pc, #544]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d02d      	beq.n	8005246 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051ea:	4b85      	ldr	r3, [pc, #532]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	08db      	lsrs	r3, r3, #3
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	4a83      	ldr	r2, [pc, #524]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80051f6:	fa22 f303 	lsr.w	r3, r2, r3
 80051fa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005214:	4b7a      	ldr	r3, [pc, #488]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005224:	ed97 6a03 	vldr	s12, [r7, #12]
 8005228:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800522c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005240:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005244:	e087      	b.n	8005356 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005250:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800540c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005258:	4b69      	ldr	r3, [pc, #420]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005260:	ee07 3a90 	vmov	s15, r3
 8005264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005268:	ed97 6a03 	vldr	s12, [r7, #12]
 800526c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005270:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005274:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005278:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800527c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005284:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005288:	e065      	b.n	8005356 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005294:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005410 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529c:	4b58      	ldr	r3, [pc, #352]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a4:	ee07 3a90 	vmov	s15, r3
 80052a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80052b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80052b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052cc:	e043      	b.n	8005356 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	ee07 3a90 	vmov	s15, r3
 80052d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80052dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e0:	4b47      	ldr	r3, [pc, #284]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80052f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80052f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005310:	e021      	b.n	8005356 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	ee07 3a90 	vmov	s15, r3
 8005318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800540c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005324:	4b36      	ldr	r3, [pc, #216]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532c:	ee07 3a90 	vmov	s15, r3
 8005330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005334:	ed97 6a03 	vldr	s12, [r7, #12]
 8005338:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800533c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005344:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005350:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005354:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005356:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	0a5b      	lsrs	r3, r3, #9
 800535c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005360:	ee07 3a90 	vmov	s15, r3
 8005364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800536c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005370:	edd7 6a07 	vldr	s13, [r7, #28]
 8005374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800537c:	ee17 2a90 	vmov	r2, s15
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005384:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800539a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800539e:	edd7 6a07 	vldr	s13, [r7, #28]
 80053a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053aa:	ee17 2a90 	vmov	r2, s15
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80053b2:	4b13      	ldr	r3, [pc, #76]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	0e1b      	lsrs	r3, r3, #24
 80053b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80053d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053d8:	ee17 2a90 	vmov	r2, s15
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80053e0:	e008      	b.n	80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	3724      	adds	r7, #36	; 0x24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	58024400 	.word	0x58024400
 8005404:	03d09000 	.word	0x03d09000
 8005408:	46000000 	.word	0x46000000
 800540c:	4c742400 	.word	0x4c742400
 8005410:	4a742400 	.word	0x4a742400
 8005414:	4af42400 	.word	0x4af42400

08005418 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005426:	4b53      	ldr	r3, [pc, #332]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b03      	cmp	r3, #3
 8005430:	d101      	bne.n	8005436 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e099      	b.n	800556a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005436:	4b4f      	ldr	r3, [pc, #316]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a4e      	ldr	r2, [pc, #312]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 800543c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005442:	f7fb ff07 	bl	8001254 <HAL_GetTick>
 8005446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005448:	e008      	b.n	800545c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800544a:	f7fb ff03 	bl	8001254 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e086      	b.n	800556a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800545c:	4b45      	ldr	r3, [pc, #276]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005468:	4b42      	ldr	r3, [pc, #264]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	031b      	lsls	r3, r3, #12
 8005476:	493f      	ldr	r1, [pc, #252]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 8005478:	4313      	orrs	r3, r2
 800547a:	628b      	str	r3, [r1, #40]	; 0x28
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	3b01      	subs	r3, #1
 8005482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	3b01      	subs	r3, #1
 800548c:	025b      	lsls	r3, r3, #9
 800548e:	b29b      	uxth	r3, r3
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	3b01      	subs	r3, #1
 8005498:	041b      	lsls	r3, r3, #16
 800549a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	061b      	lsls	r3, r3, #24
 80054a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054ac:	4931      	ldr	r1, [pc, #196]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054b2:	4b30      	ldr	r3, [pc, #192]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	492d      	ldr	r1, [pc, #180]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054c4:	4b2b      	ldr	r3, [pc, #172]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	f023 0220 	bic.w	r2, r3, #32
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	4928      	ldr	r1, [pc, #160]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054d6:	4b27      	ldr	r3, [pc, #156]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	4a26      	ldr	r2, [pc, #152]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054dc:	f023 0310 	bic.w	r3, r3, #16
 80054e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054e2:	4b24      	ldr	r3, [pc, #144]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e6:	4b24      	ldr	r3, [pc, #144]	; (8005578 <RCCEx_PLL2_Config+0x160>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	69d2      	ldr	r2, [r2, #28]
 80054ee:	00d2      	lsls	r2, r2, #3
 80054f0:	4920      	ldr	r1, [pc, #128]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054f6:	4b1f      	ldr	r3, [pc, #124]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 80054fc:	f043 0310 	orr.w	r3, r3, #16
 8005500:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	4a19      	ldr	r2, [pc, #100]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 800550e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005512:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005514:	e00f      	b.n	8005536 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d106      	bne.n	800552a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800551c:	4b15      	ldr	r3, [pc, #84]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	4a14      	ldr	r2, [pc, #80]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 8005522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005526:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005528:	e005      	b.n	8005536 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800552a:	4b12      	ldr	r3, [pc, #72]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	4a11      	ldr	r2, [pc, #68]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 8005530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005534:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005536:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a0e      	ldr	r2, [pc, #56]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 800553c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005542:	f7fb fe87 	bl	8001254 <HAL_GetTick>
 8005546:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005548:	e008      	b.n	800555c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800554a:	f7fb fe83 	bl	8001254 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e006      	b.n	800556a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <RCCEx_PLL2_Config+0x15c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	58024400 	.word	0x58024400
 8005578:	ffff0007 	.word	0xffff0007

0800557c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800558a:	4b53      	ldr	r3, [pc, #332]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b03      	cmp	r3, #3
 8005594:	d101      	bne.n	800559a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e099      	b.n	80056ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800559a:	4b4f      	ldr	r3, [pc, #316]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a4e      	ldr	r2, [pc, #312]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 80055a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a6:	f7fb fe55 	bl	8001254 <HAL_GetTick>
 80055aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055ac:	e008      	b.n	80055c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80055ae:	f7fb fe51 	bl	8001254 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e086      	b.n	80056ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055c0:	4b45      	ldr	r3, [pc, #276]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f0      	bne.n	80055ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055cc:	4b42      	ldr	r3, [pc, #264]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	051b      	lsls	r3, r3, #20
 80055da:	493f      	ldr	r1, [pc, #252]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	628b      	str	r3, [r1, #40]	; 0x28
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	025b      	lsls	r3, r3, #9
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	3b01      	subs	r3, #1
 800560a:	061b      	lsls	r3, r3, #24
 800560c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005610:	4931      	ldr	r1, [pc, #196]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005616:	4b30      	ldr	r3, [pc, #192]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	492d      	ldr	r1, [pc, #180]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005624:	4313      	orrs	r3, r2
 8005626:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005628:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	4928      	ldr	r1, [pc, #160]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005636:	4313      	orrs	r3, r2
 8005638:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800563a:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	4a26      	ldr	r2, [pc, #152]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564a:	4b24      	ldr	r3, [pc, #144]	; (80056dc <RCCEx_PLL3_Config+0x160>)
 800564c:	4013      	ands	r3, r2
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	69d2      	ldr	r2, [r2, #28]
 8005652:	00d2      	lsls	r2, r2, #3
 8005654:	4920      	ldr	r1, [pc, #128]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005656:	4313      	orrs	r3, r2
 8005658:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800565a:	4b1f      	ldr	r3, [pc, #124]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	4a1e      	ldr	r2, [pc, #120]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005664:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d106      	bne.n	800567a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800566c:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005672:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005676:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005678:	e00f      	b.n	800569a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d106      	bne.n	800568e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005680:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005686:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800568a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800568c:	e005      	b.n	800569a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800568e:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 8005694:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005698:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a0e      	ldr	r2, [pc, #56]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 80056a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a6:	f7fb fdd5 	bl	8001254 <HAL_GetTick>
 80056aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056ac:	e008      	b.n	80056c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056ae:	f7fb fdd1 	bl	8001254 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e006      	b.n	80056ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <RCCEx_PLL3_Config+0x15c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	58024400 	.word	0x58024400
 80056dc:	ffff0007 	.word	0xffff0007

080056e0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e091      	b.n	8005816 <HAL_RNG_Init+0x136>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	7a5b      	ldrb	r3, [r3, #9]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fb fb52 	bl	8000dac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0204 	bic.w	r2, r2, #4
 800571c:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	4b3e      	ldr	r3, [pc, #248]	; (8005820 <HAL_RNG_Init+0x140>)
 8005726:	4013      	ands	r3, r2
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6852      	ldr	r2, [r2, #4]
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005736:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a39      	ldr	r2, [pc, #228]	; (8005824 <HAL_RNG_Init+0x144>)
 800573e:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a38      	ldr	r2, [pc, #224]	; (8005828 <HAL_RNG_Init+0x148>)
 8005746:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005758:	f7fb fd7c 	bl	8001254 <HAL_GetTick>
 800575c:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800575e:	e016      	b.n	800578e <HAL_RNG_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005760:	f7fb fd78 	bl	8001254 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d90f      	bls.n	800578e <HAL_RNG_Init+0xae>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577c:	d107      	bne.n	800578e <HAL_RNG_Init+0xae>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e043      	b.n	8005816 <HAL_RNG_Init+0x136>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579c:	d0e0      	beq.n	8005760 <HAL_RNG_Init+0x80>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0204 	orr.w	r2, r2, #4
 80057ac:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d104      	bne.n	80057c6 <HAL_RNG_Init+0xe6>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2204      	movs	r2, #4
 80057c0:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e027      	b.n	8005816 <HAL_RNG_Init+0x136>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80057c6:	f7fb fd45 	bl	8001254 <HAL_GetTick>
 80057ca:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80057cc:	e015      	b.n	80057fa <HAL_RNG_Init+0x11a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80057ce:	f7fb fd41 	bl	8001254 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d90e      	bls.n	80057fa <HAL_RNG_Init+0x11a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d107      	bne.n	80057fa <HAL_RNG_Init+0x11a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2204      	movs	r2, #4
 80057ee:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e00d      	b.n	8005816 <HAL_RNG_Init+0x136>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b04      	cmp	r3, #4
 8005806:	d0e2      	beq.n	80057ce <HAL_RNG_Init+0xee>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	bfffffdf 	.word	0xbfffffdf
 8005824:	17590abc 	.word	0x17590abc
 8005828:	000caa74 	.word	0x000caa74

0800582c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d06a      	beq.n	8005914 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fb fae2 	bl	8000e1c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	22ca      	movs	r2, #202	; 0xca
 8005866:	625a      	str	r2, [r3, #36]	; 0x24
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2253      	movs	r2, #83	; 0x53
 800586e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fb0d 	bl	8005e90 <RTC_EnterInitMode>
 8005876:	4603      	mov	r3, r0
 8005878:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d13e      	bne.n	80058fe <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6999      	ldr	r1, [r3, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b25      	ldr	r3, [pc, #148]	; (8005920 <HAL_RTC_Init+0xf4>)
 800588c:	400b      	ands	r3, r1
 800588e:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6999      	ldr	r1, [r3, #24]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0419      	lsls	r1, r3, #16
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fb1b 	bl	8005efc <RTC_ExitInitMode>
 80058c6:	4603      	mov	r3, r0
 80058c8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d116      	bne.n	80058fe <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80058de:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6999      	ldr	r1, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1a      	ldr	r2, [r3, #32]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	22ff      	movs	r2, #255	; 0xff
 8005904:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d103      	bne.n	8005914 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	fb8fffbf 	.word	0xfb8fffbf

08005924 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005924:	b590      	push	{r4, r7, lr}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_RTC_SetTime+0x1a>
 800593a:	2302      	movs	r3, #2
 800593c:	e089      	b.n	8005a52 <HAL_RTC_SetTime+0x12e>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	22ca      	movs	r2, #202	; 0xca
 8005954:	625a      	str	r2, [r3, #36]	; 0x24
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2253      	movs	r2, #83	; 0x53
 800595c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fa96 	bl	8005e90 <RTC_EnterInitMode>
 8005964:	4603      	mov	r3, r0
 8005966:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005968:	7cfb      	ldrb	r3, [r7, #19]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d161      	bne.n	8005a32 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d126      	bne.n	80059c2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 faf3 	bl	8005f78 <RTC_ByteToBcd2>
 8005992:	4603      	mov	r3, r0
 8005994:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 faec 	bl	8005f78 <RTC_ByteToBcd2>
 80059a0:	4603      	mov	r3, r0
 80059a2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059a4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	789b      	ldrb	r3, [r3, #2]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fae4 	bl	8005f78 <RTC_ByteToBcd2>
 80059b0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059b2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	78db      	ldrb	r3, [r3, #3]
 80059ba:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e018      	b.n	80059f4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059e2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059e8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	78db      	ldrb	r3, [r3, #3]
 80059ee:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	6979      	ldr	r1, [r7, #20]
 80059fa:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <HAL_RTC_SetTime+0x138>)
 80059fc:	400b      	ands	r3, r1
 80059fe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a0e:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6999      	ldr	r1, [r3, #24]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 fa67 	bl	8005efc <RTC_ExitInitMode>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005a3a:	7cfb      	ldrb	r3, [r7, #19]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d103      	bne.n	8005a48 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd90      	pop	{r4, r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	007f7f7f 	.word	0x007f7f7f

08005a60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a60:	b590      	push	{r4, r7, lr}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_RTC_SetDate+0x1a>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e073      	b.n	8005b62 <HAL_RTC_SetDate+0x102>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10e      	bne.n	8005aae <HAL_RTC_SetDate+0x4e>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	f023 0310 	bic.w	r3, r3, #16
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	330a      	adds	r3, #10
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11c      	bne.n	8005aee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fa5d 	bl	8005f78 <RTC_ByteToBcd2>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fa56 	bl	8005f78 <RTC_ByteToBcd2>
 8005acc:	4603      	mov	r3, r0
 8005ace:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ad0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	789b      	ldrb	r3, [r3, #2]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fa4e 	bl	8005f78 <RTC_ByteToBcd2>
 8005adc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ade:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e00e      	b.n	8005b0c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	78db      	ldrb	r3, [r3, #3]
 8005af2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005afa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b00:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	22ca      	movs	r2, #202	; 0xca
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2253      	movs	r2, #83	; 0x53
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f9b7 	bl	8005e90 <RTC_EnterInitMode>
 8005b22:	4603      	mov	r3, r0
 8005b24:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005b26:	7cfb      	ldrb	r3, [r7, #19]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	6979      	ldr	r1, [r7, #20]
 8005b32:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <HAL_RTC_SetDate+0x10c>)
 8005b34:	400b      	ands	r3, r1
 8005b36:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f9df 	bl	8005efc <RTC_ExitInitMode>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	22ff      	movs	r2, #255	; 0xff
 8005b48:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005b4a:	7cfb      	ldrb	r3, [r7, #19]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005b60:	7cfb      	ldrb	r3, [r7, #19]


}
 8005b62:	4618      	mov	r0, r3
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd90      	pop	{r4, r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	00ffff3f 	.word	0x00ffff3f

08005b70 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b089      	sub	sp, #36	; 0x24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_RTC_SetAlarm_IT+0x1a>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e127      	b.n	8005dda <HAL_RTC_SetAlarm_IT+0x26a>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2202      	movs	r2, #2
 8005b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if(Format == RTC_FORMAT_BIN)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d137      	bne.n	8005c10 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d102      	bne.n	8005bb4 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 f9dd 	bl	8005f78 <RTC_ByteToBcd2>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f9d6 	bl	8005f78 <RTC_ByteToBcd2>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005bd0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	789b      	ldrb	r3, [r3, #2]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 f9ce 	bl	8005f78 <RTC_ByteToBcd2>
 8005bdc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005bde:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	78db      	ldrb	r3, [r3, #3]
 8005be6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8005be8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f9c0 	bl	8005f78 <RTC_ByteToBcd2>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8005bfc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005c04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	e023      	b.n	8005c58 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2200      	movs	r2, #0
 8005c22:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005c30:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8005c36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	78db      	ldrb	r3, [r3, #3]
 8005c3c:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8005c3e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c46:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8005c48:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8005c4e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	22ca      	movs	r2, #202	; 0xca
 8005c6a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2253      	movs	r2, #83	; 0x53
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7c:	d149      	bne.n	8005d12 <HAL_RTC_SetAlarm_IT+0x1a2>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699a      	ldr	r2, [r3, #24]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c8c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0201 	orr.w	r2, r2, #1
 8005c9c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005c9e:	f7fb fad9 	bl	8001254 <HAL_GetTick>
 8005ca2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
 8005ca4:	e015      	b.n	8005cd2 <HAL_RTC_SetAlarm_IT+0x162>
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ca6:	f7fb fad5 	bl	8001254 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cb4:	d90d      	bls.n	8005cd2 <HAL_RTC_SetAlarm_IT+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	22ff      	movs	r2, #255	; 0xff
 8005cbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e083      	b.n	8005dda <HAL_RTC_SetAlarm_IT+0x26a>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0e2      	beq.n	8005ca6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cfe:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d0e:	619a      	str	r2, [r3, #24]
 8005d10:	e048      	b.n	8005da4 <HAL_RTC_SetAlarm_IT+0x234>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699a      	ldr	r2, [r3, #24]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d20:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0202 	orr.w	r2, r2, #2
 8005d30:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005d32:	f7fb fa8f 	bl	8001254 <HAL_GetTick>
 8005d36:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
 8005d38:	e015      	b.n	8005d66 <HAL_RTC_SetAlarm_IT+0x1f6>
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d3a:	f7fb fa8b 	bl	8001254 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d48:	d90d      	bls.n	8005d66 <HAL_RTC_SetAlarm_IT+0x1f6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	22ff      	movs	r2, #255	; 0xff
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2203      	movs	r2, #3
 8005d56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e039      	b.n	8005dda <HAL_RTC_SetAlarm_IT+0x26a>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0e2      	beq.n	8005d3a <HAL_RTC_SetAlarm_IT+0x1ca>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d92:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005da2:	619a      	str	r2, [r3, #24]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005da4:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <HAL_RTC_SetAlarm_IT+0x274>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a0e      	ldr	r2, [pc, #56]	; (8005de4 <HAL_RTC_SetAlarm_IT+0x274>)
 8005daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dae:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dbe:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	22ff      	movs	r2, #255	; 0xff
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3724      	adds	r7, #36	; 0x24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd90      	pop	{r4, r7, pc}
 8005de2:	bf00      	nop
 8005de4:	58000080 	.word	0x58000080

08005de8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <HAL_RTC_AlarmIRQHandler+0x58>)
 8005df2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005df6:	609a      	str	r2, [r3, #8]
#endif /* DUAL_CORE */

#if defined(RTC_MISR_ALRAMF)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	60fb      	str	r3, [r7, #12]

  if((tmp & RTC_MISR_ALRAMF) != 0u)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d006      	beq.n	8005e18 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fa ff4c 	bl	8000cb0 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }
#endif /* RTC_MISR_ALRAMF */

#if defined(RTC_MISR_ALRBMF)
  if((tmp & RTC_MISR_ALRBMF) != 0u)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d006      	beq.n	8005e30 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2202      	movs	r2, #2
 8005e28:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f8c4 	bl	8005fb8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8005e38:	bf00      	nop
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	58000080 	.word	0x58000080

08005e44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e5a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8005e5c:	f7fb f9fa 	bl	8001254 <HAL_GetTick>
 8005e60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e62:	e009      	b.n	8005e78 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e64:	f7fb f9f6 	bl	8001254 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e72:	d901      	bls.n	8005e78 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e007      	b.n	8005e88 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0ee      	beq.n	8005e64 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d123      	bne.n	8005ef2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005eb8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005eba:	f7fb f9cb 	bl	8001254 <HAL_GetTick>
 8005ebe:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ec0:	e00d      	b.n	8005ede <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005ec2:	f7fb f9c7 	bl	8001254 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ed0:	d905      	bls.n	8005ede <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2203      	movs	r2, #3
 8005eda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <RTC_EnterInitMode+0x62>
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d1e7      	bne.n	8005ec2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <RTC_ExitInitMode+0x78>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <RTC_ExitInitMode+0x78>)
 8005f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f12:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f14:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <RTC_ExitInitMode+0x78>)
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10c      	bne.n	8005f3a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff8f 	bl	8005e44 <HAL_RTC_WaitForSynchro>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01e      	beq.n	8005f6a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2203      	movs	r2, #3
 8005f30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	73fb      	strb	r3, [r7, #15]
 8005f38:	e017      	b.n	8005f6a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f3a:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <RTC_ExitInitMode+0x78>)
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <RTC_ExitInitMode+0x78>)
 8005f40:	f023 0320 	bic.w	r3, r3, #32
 8005f44:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff ff7c 	bl	8005e44 <HAL_RTC_WaitForSynchro>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2203      	movs	r2, #3
 8005f56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f5e:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <RTC_ExitInitMode+0x78>)
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	4a04      	ldr	r2, [pc, #16]	; (8005f74 <RTC_ExitInitMode+0x78>)
 8005f64:	f043 0320 	orr.w	r3, r3, #32
 8005f68:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	58004000 	.word	0x58004000

08005f78 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8005f8a:	e005      	b.n	8005f98 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8005f92:	7afb      	ldrb	r3, [r7, #11]
 8005f94:	3b0a      	subs	r3, #10
 8005f96:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8005f98:	7afb      	ldrb	r3, [r7, #11]
 8005f9a:	2b09      	cmp	r3, #9
 8005f9c:	d8f6      	bhi.n	8005f8c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	b2db      	uxtb	r3, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e042      	b.n	8006064 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7fa ff4b 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2224      	movs	r2, #36	; 0x24
 8005ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f8c2 	bl	8006198 <UART_SetConfig>
 8006014:	4603      	mov	r3, r0
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e022      	b.n	8006064 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 ff14 	bl	8006e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800603a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800604a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 ff9b 	bl	8006f98 <UART_CheckIdleState>
 8006062:	4603      	mov	r3, r0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4613      	mov	r3, r2
 800607a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006082:	2b20      	cmp	r3, #32
 8006084:	f040 8083 	bne.w	800618e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_UART_Transmit+0x28>
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e07b      	b.n	8006190 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_UART_Transmit+0x3a>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e074      	b.n	8006190 <HAL_UART_Transmit+0x124>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2221      	movs	r2, #33	; 0x21
 80060ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060be:	f7fb f8c9 	bl	8001254 <HAL_GetTick>
 80060c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	88fa      	ldrh	r2, [r7, #6]
 80060c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	88fa      	ldrh	r2, [r7, #6]
 80060d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060dc:	d108      	bne.n	80060f0 <HAL_UART_Transmit+0x84>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	e003      	b.n	80060f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006100:	e02c      	b.n	800615c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2200      	movs	r2, #0
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 ff8e 	bl	800702e <UART_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e039      	b.n	8006190 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	3302      	adds	r3, #2
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	e007      	b.n	800614a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	3301      	adds	r3, #1
 8006148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1cc      	bne.n	8006102 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2200      	movs	r2, #0
 8006170:	2140      	movs	r1, #64	; 0x40
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 ff5b 	bl	800702e <UART_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e006      	b.n	8006190 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e000      	b.n	8006190 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800618e:	2302      	movs	r3, #2
  }
}
 8006190:	4618      	mov	r0, r3
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006198:	b5b0      	push	{r4, r5, r7, lr}
 800619a:	b08e      	sub	sp, #56	; 0x38
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4bbf      	ldr	r3, [pc, #764]	; (80064c4 <UART_SetConfig+0x32c>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6812      	ldr	r2, [r2, #0]
 80061cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061ce:	430b      	orrs	r3, r1
 80061d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4ab5      	ldr	r2, [pc, #724]	; (80064c8 <UART_SetConfig+0x330>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d004      	beq.n	8006202 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061fe:	4313      	orrs	r3, r2
 8006200:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	4bb0      	ldr	r3, [pc, #704]	; (80064cc <UART_SetConfig+0x334>)
 800620a:	4013      	ands	r3, r2
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006212:	430b      	orrs	r3, r1
 8006214:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	f023 010f 	bic.w	r1, r3, #15
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4aa7      	ldr	r2, [pc, #668]	; (80064d0 <UART_SetConfig+0x338>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d176      	bne.n	8006324 <UART_SetConfig+0x18c>
 8006236:	4ba7      	ldr	r3, [pc, #668]	; (80064d4 <UART_SetConfig+0x33c>)
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800623e:	2b28      	cmp	r3, #40	; 0x28
 8006240:	d86c      	bhi.n	800631c <UART_SetConfig+0x184>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0xb0>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	080062ed 	.word	0x080062ed
 800624c:	0800631d 	.word	0x0800631d
 8006250:	0800631d 	.word	0x0800631d
 8006254:	0800631d 	.word	0x0800631d
 8006258:	0800631d 	.word	0x0800631d
 800625c:	0800631d 	.word	0x0800631d
 8006260:	0800631d 	.word	0x0800631d
 8006264:	0800631d 	.word	0x0800631d
 8006268:	080062f5 	.word	0x080062f5
 800626c:	0800631d 	.word	0x0800631d
 8006270:	0800631d 	.word	0x0800631d
 8006274:	0800631d 	.word	0x0800631d
 8006278:	0800631d 	.word	0x0800631d
 800627c:	0800631d 	.word	0x0800631d
 8006280:	0800631d 	.word	0x0800631d
 8006284:	0800631d 	.word	0x0800631d
 8006288:	080062fd 	.word	0x080062fd
 800628c:	0800631d 	.word	0x0800631d
 8006290:	0800631d 	.word	0x0800631d
 8006294:	0800631d 	.word	0x0800631d
 8006298:	0800631d 	.word	0x0800631d
 800629c:	0800631d 	.word	0x0800631d
 80062a0:	0800631d 	.word	0x0800631d
 80062a4:	0800631d 	.word	0x0800631d
 80062a8:	08006305 	.word	0x08006305
 80062ac:	0800631d 	.word	0x0800631d
 80062b0:	0800631d 	.word	0x0800631d
 80062b4:	0800631d 	.word	0x0800631d
 80062b8:	0800631d 	.word	0x0800631d
 80062bc:	0800631d 	.word	0x0800631d
 80062c0:	0800631d 	.word	0x0800631d
 80062c4:	0800631d 	.word	0x0800631d
 80062c8:	0800630d 	.word	0x0800630d
 80062cc:	0800631d 	.word	0x0800631d
 80062d0:	0800631d 	.word	0x0800631d
 80062d4:	0800631d 	.word	0x0800631d
 80062d8:	0800631d 	.word	0x0800631d
 80062dc:	0800631d 	.word	0x0800631d
 80062e0:	0800631d 	.word	0x0800631d
 80062e4:	0800631d 	.word	0x0800631d
 80062e8:	08006315 	.word	0x08006315
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f2:	e326      	b.n	8006942 <UART_SetConfig+0x7aa>
 80062f4:	2304      	movs	r3, #4
 80062f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fa:	e322      	b.n	8006942 <UART_SetConfig+0x7aa>
 80062fc:	2308      	movs	r3, #8
 80062fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006302:	e31e      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006304:	2310      	movs	r3, #16
 8006306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630a:	e31a      	b.n	8006942 <UART_SetConfig+0x7aa>
 800630c:	2320      	movs	r3, #32
 800630e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006312:	e316      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006314:	2340      	movs	r3, #64	; 0x40
 8006316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631a:	e312      	b.n	8006942 <UART_SetConfig+0x7aa>
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006322:	e30e      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a6b      	ldr	r2, [pc, #428]	; (80064d8 <UART_SetConfig+0x340>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d130      	bne.n	8006390 <UART_SetConfig+0x1f8>
 800632e:	4b69      	ldr	r3, [pc, #420]	; (80064d4 <UART_SetConfig+0x33c>)
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b05      	cmp	r3, #5
 8006338:	d826      	bhi.n	8006388 <UART_SetConfig+0x1f0>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0x1a8>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006359 	.word	0x08006359
 8006344:	08006361 	.word	0x08006361
 8006348:	08006369 	.word	0x08006369
 800634c:	08006371 	.word	0x08006371
 8006350:	08006379 	.word	0x08006379
 8006354:	08006381 	.word	0x08006381
 8006358:	2300      	movs	r3, #0
 800635a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800635e:	e2f0      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006360:	2304      	movs	r3, #4
 8006362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006366:	e2ec      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006368:	2308      	movs	r3, #8
 800636a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800636e:	e2e8      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006370:	2310      	movs	r3, #16
 8006372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006376:	e2e4      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006378:	2320      	movs	r3, #32
 800637a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800637e:	e2e0      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006380:	2340      	movs	r3, #64	; 0x40
 8006382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006386:	e2dc      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006388:	2380      	movs	r3, #128	; 0x80
 800638a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800638e:	e2d8      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a51      	ldr	r2, [pc, #324]	; (80064dc <UART_SetConfig+0x344>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d130      	bne.n	80063fc <UART_SetConfig+0x264>
 800639a:	4b4e      	ldr	r3, [pc, #312]	; (80064d4 <UART_SetConfig+0x33c>)
 800639c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	d826      	bhi.n	80063f4 <UART_SetConfig+0x25c>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <UART_SetConfig+0x214>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063c5 	.word	0x080063c5
 80063b0:	080063cd 	.word	0x080063cd
 80063b4:	080063d5 	.word	0x080063d5
 80063b8:	080063dd 	.word	0x080063dd
 80063bc:	080063e5 	.word	0x080063e5
 80063c0:	080063ed 	.word	0x080063ed
 80063c4:	2300      	movs	r3, #0
 80063c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ca:	e2ba      	b.n	8006942 <UART_SetConfig+0x7aa>
 80063cc:	2304      	movs	r3, #4
 80063ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063d2:	e2b6      	b.n	8006942 <UART_SetConfig+0x7aa>
 80063d4:	2308      	movs	r3, #8
 80063d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063da:	e2b2      	b.n	8006942 <UART_SetConfig+0x7aa>
 80063dc:	2310      	movs	r3, #16
 80063de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063e2:	e2ae      	b.n	8006942 <UART_SetConfig+0x7aa>
 80063e4:	2320      	movs	r3, #32
 80063e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ea:	e2aa      	b.n	8006942 <UART_SetConfig+0x7aa>
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063f2:	e2a6      	b.n	8006942 <UART_SetConfig+0x7aa>
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063fa:	e2a2      	b.n	8006942 <UART_SetConfig+0x7aa>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a37      	ldr	r2, [pc, #220]	; (80064e0 <UART_SetConfig+0x348>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d130      	bne.n	8006468 <UART_SetConfig+0x2d0>
 8006406:	4b33      	ldr	r3, [pc, #204]	; (80064d4 <UART_SetConfig+0x33c>)
 8006408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	2b05      	cmp	r3, #5
 8006410:	d826      	bhi.n	8006460 <UART_SetConfig+0x2c8>
 8006412:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <UART_SetConfig+0x280>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	08006431 	.word	0x08006431
 800641c:	08006439 	.word	0x08006439
 8006420:	08006441 	.word	0x08006441
 8006424:	08006449 	.word	0x08006449
 8006428:	08006451 	.word	0x08006451
 800642c:	08006459 	.word	0x08006459
 8006430:	2300      	movs	r3, #0
 8006432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006436:	e284      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006438:	2304      	movs	r3, #4
 800643a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800643e:	e280      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006440:	2308      	movs	r3, #8
 8006442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006446:	e27c      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006448:	2310      	movs	r3, #16
 800644a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800644e:	e278      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006450:	2320      	movs	r3, #32
 8006452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006456:	e274      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006458:	2340      	movs	r3, #64	; 0x40
 800645a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800645e:	e270      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006466:	e26c      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <UART_SetConfig+0x34c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d142      	bne.n	80064f8 <UART_SetConfig+0x360>
 8006472:	4b18      	ldr	r3, [pc, #96]	; (80064d4 <UART_SetConfig+0x33c>)
 8006474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	2b05      	cmp	r3, #5
 800647c:	d838      	bhi.n	80064f0 <UART_SetConfig+0x358>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <UART_SetConfig+0x2ec>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	0800649d 	.word	0x0800649d
 8006488:	080064a5 	.word	0x080064a5
 800648c:	080064ad 	.word	0x080064ad
 8006490:	080064b5 	.word	0x080064b5
 8006494:	080064bd 	.word	0x080064bd
 8006498:	080064e9 	.word	0x080064e9
 800649c:	2300      	movs	r3, #0
 800649e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064a2:	e24e      	b.n	8006942 <UART_SetConfig+0x7aa>
 80064a4:	2304      	movs	r3, #4
 80064a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064aa:	e24a      	b.n	8006942 <UART_SetConfig+0x7aa>
 80064ac:	2308      	movs	r3, #8
 80064ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064b2:	e246      	b.n	8006942 <UART_SetConfig+0x7aa>
 80064b4:	2310      	movs	r3, #16
 80064b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ba:	e242      	b.n	8006942 <UART_SetConfig+0x7aa>
 80064bc:	2320      	movs	r3, #32
 80064be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064c2:	e23e      	b.n	8006942 <UART_SetConfig+0x7aa>
 80064c4:	cfff69f3 	.word	0xcfff69f3
 80064c8:	58000c00 	.word	0x58000c00
 80064cc:	11fff4ff 	.word	0x11fff4ff
 80064d0:	40011000 	.word	0x40011000
 80064d4:	58024400 	.word	0x58024400
 80064d8:	40004400 	.word	0x40004400
 80064dc:	40004800 	.word	0x40004800
 80064e0:	40004c00 	.word	0x40004c00
 80064e4:	40005000 	.word	0x40005000
 80064e8:	2340      	movs	r3, #64	; 0x40
 80064ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ee:	e228      	b.n	8006942 <UART_SetConfig+0x7aa>
 80064f0:	2380      	movs	r3, #128	; 0x80
 80064f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f6:	e224      	b.n	8006942 <UART_SetConfig+0x7aa>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4ab1      	ldr	r2, [pc, #708]	; (80067c4 <UART_SetConfig+0x62c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d176      	bne.n	80065f0 <UART_SetConfig+0x458>
 8006502:	4bb1      	ldr	r3, [pc, #708]	; (80067c8 <UART_SetConfig+0x630>)
 8006504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800650a:	2b28      	cmp	r3, #40	; 0x28
 800650c:	d86c      	bhi.n	80065e8 <UART_SetConfig+0x450>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <UART_SetConfig+0x37c>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	080065b9 	.word	0x080065b9
 8006518:	080065e9 	.word	0x080065e9
 800651c:	080065e9 	.word	0x080065e9
 8006520:	080065e9 	.word	0x080065e9
 8006524:	080065e9 	.word	0x080065e9
 8006528:	080065e9 	.word	0x080065e9
 800652c:	080065e9 	.word	0x080065e9
 8006530:	080065e9 	.word	0x080065e9
 8006534:	080065c1 	.word	0x080065c1
 8006538:	080065e9 	.word	0x080065e9
 800653c:	080065e9 	.word	0x080065e9
 8006540:	080065e9 	.word	0x080065e9
 8006544:	080065e9 	.word	0x080065e9
 8006548:	080065e9 	.word	0x080065e9
 800654c:	080065e9 	.word	0x080065e9
 8006550:	080065e9 	.word	0x080065e9
 8006554:	080065c9 	.word	0x080065c9
 8006558:	080065e9 	.word	0x080065e9
 800655c:	080065e9 	.word	0x080065e9
 8006560:	080065e9 	.word	0x080065e9
 8006564:	080065e9 	.word	0x080065e9
 8006568:	080065e9 	.word	0x080065e9
 800656c:	080065e9 	.word	0x080065e9
 8006570:	080065e9 	.word	0x080065e9
 8006574:	080065d1 	.word	0x080065d1
 8006578:	080065e9 	.word	0x080065e9
 800657c:	080065e9 	.word	0x080065e9
 8006580:	080065e9 	.word	0x080065e9
 8006584:	080065e9 	.word	0x080065e9
 8006588:	080065e9 	.word	0x080065e9
 800658c:	080065e9 	.word	0x080065e9
 8006590:	080065e9 	.word	0x080065e9
 8006594:	080065d9 	.word	0x080065d9
 8006598:	080065e9 	.word	0x080065e9
 800659c:	080065e9 	.word	0x080065e9
 80065a0:	080065e9 	.word	0x080065e9
 80065a4:	080065e9 	.word	0x080065e9
 80065a8:	080065e9 	.word	0x080065e9
 80065ac:	080065e9 	.word	0x080065e9
 80065b0:	080065e9 	.word	0x080065e9
 80065b4:	080065e1 	.word	0x080065e1
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065be:	e1c0      	b.n	8006942 <UART_SetConfig+0x7aa>
 80065c0:	2304      	movs	r3, #4
 80065c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c6:	e1bc      	b.n	8006942 <UART_SetConfig+0x7aa>
 80065c8:	2308      	movs	r3, #8
 80065ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ce:	e1b8      	b.n	8006942 <UART_SetConfig+0x7aa>
 80065d0:	2310      	movs	r3, #16
 80065d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065d6:	e1b4      	b.n	8006942 <UART_SetConfig+0x7aa>
 80065d8:	2320      	movs	r3, #32
 80065da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065de:	e1b0      	b.n	8006942 <UART_SetConfig+0x7aa>
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065e6:	e1ac      	b.n	8006942 <UART_SetConfig+0x7aa>
 80065e8:	2380      	movs	r3, #128	; 0x80
 80065ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ee:	e1a8      	b.n	8006942 <UART_SetConfig+0x7aa>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a75      	ldr	r2, [pc, #468]	; (80067cc <UART_SetConfig+0x634>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d130      	bne.n	800665c <UART_SetConfig+0x4c4>
 80065fa:	4b73      	ldr	r3, [pc, #460]	; (80067c8 <UART_SetConfig+0x630>)
 80065fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	2b05      	cmp	r3, #5
 8006604:	d826      	bhi.n	8006654 <UART_SetConfig+0x4bc>
 8006606:	a201      	add	r2, pc, #4	; (adr r2, 800660c <UART_SetConfig+0x474>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	08006625 	.word	0x08006625
 8006610:	0800662d 	.word	0x0800662d
 8006614:	08006635 	.word	0x08006635
 8006618:	0800663d 	.word	0x0800663d
 800661c:	08006645 	.word	0x08006645
 8006620:	0800664d 	.word	0x0800664d
 8006624:	2300      	movs	r3, #0
 8006626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662a:	e18a      	b.n	8006942 <UART_SetConfig+0x7aa>
 800662c:	2304      	movs	r3, #4
 800662e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006632:	e186      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006634:	2308      	movs	r3, #8
 8006636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663a:	e182      	b.n	8006942 <UART_SetConfig+0x7aa>
 800663c:	2310      	movs	r3, #16
 800663e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006642:	e17e      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006644:	2320      	movs	r3, #32
 8006646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664a:	e17a      	b.n	8006942 <UART_SetConfig+0x7aa>
 800664c:	2340      	movs	r3, #64	; 0x40
 800664e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006652:	e176      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800665a:	e172      	b.n	8006942 <UART_SetConfig+0x7aa>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5b      	ldr	r2, [pc, #364]	; (80067d0 <UART_SetConfig+0x638>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d130      	bne.n	80066c8 <UART_SetConfig+0x530>
 8006666:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <UART_SetConfig+0x630>)
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	2b05      	cmp	r3, #5
 8006670:	d826      	bhi.n	80066c0 <UART_SetConfig+0x528>
 8006672:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <UART_SetConfig+0x4e0>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	08006691 	.word	0x08006691
 800667c:	08006699 	.word	0x08006699
 8006680:	080066a1 	.word	0x080066a1
 8006684:	080066a9 	.word	0x080066a9
 8006688:	080066b1 	.word	0x080066b1
 800668c:	080066b9 	.word	0x080066b9
 8006690:	2300      	movs	r3, #0
 8006692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006696:	e154      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006698:	2304      	movs	r3, #4
 800669a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800669e:	e150      	b.n	8006942 <UART_SetConfig+0x7aa>
 80066a0:	2308      	movs	r3, #8
 80066a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066a6:	e14c      	b.n	8006942 <UART_SetConfig+0x7aa>
 80066a8:	2310      	movs	r3, #16
 80066aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ae:	e148      	b.n	8006942 <UART_SetConfig+0x7aa>
 80066b0:	2320      	movs	r3, #32
 80066b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066b6:	e144      	b.n	8006942 <UART_SetConfig+0x7aa>
 80066b8:	2340      	movs	r3, #64	; 0x40
 80066ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066be:	e140      	b.n	8006942 <UART_SetConfig+0x7aa>
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066c6:	e13c      	b.n	8006942 <UART_SetConfig+0x7aa>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a41      	ldr	r2, [pc, #260]	; (80067d4 <UART_SetConfig+0x63c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	f040 8082 	bne.w	80067d8 <UART_SetConfig+0x640>
 80066d4:	4b3c      	ldr	r3, [pc, #240]	; (80067c8 <UART_SetConfig+0x630>)
 80066d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066dc:	2b28      	cmp	r3, #40	; 0x28
 80066de:	d86d      	bhi.n	80067bc <UART_SetConfig+0x624>
 80066e0:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <UART_SetConfig+0x550>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	0800678d 	.word	0x0800678d
 80066ec:	080067bd 	.word	0x080067bd
 80066f0:	080067bd 	.word	0x080067bd
 80066f4:	080067bd 	.word	0x080067bd
 80066f8:	080067bd 	.word	0x080067bd
 80066fc:	080067bd 	.word	0x080067bd
 8006700:	080067bd 	.word	0x080067bd
 8006704:	080067bd 	.word	0x080067bd
 8006708:	08006795 	.word	0x08006795
 800670c:	080067bd 	.word	0x080067bd
 8006710:	080067bd 	.word	0x080067bd
 8006714:	080067bd 	.word	0x080067bd
 8006718:	080067bd 	.word	0x080067bd
 800671c:	080067bd 	.word	0x080067bd
 8006720:	080067bd 	.word	0x080067bd
 8006724:	080067bd 	.word	0x080067bd
 8006728:	0800679d 	.word	0x0800679d
 800672c:	080067bd 	.word	0x080067bd
 8006730:	080067bd 	.word	0x080067bd
 8006734:	080067bd 	.word	0x080067bd
 8006738:	080067bd 	.word	0x080067bd
 800673c:	080067bd 	.word	0x080067bd
 8006740:	080067bd 	.word	0x080067bd
 8006744:	080067bd 	.word	0x080067bd
 8006748:	080067a5 	.word	0x080067a5
 800674c:	080067bd 	.word	0x080067bd
 8006750:	080067bd 	.word	0x080067bd
 8006754:	080067bd 	.word	0x080067bd
 8006758:	080067bd 	.word	0x080067bd
 800675c:	080067bd 	.word	0x080067bd
 8006760:	080067bd 	.word	0x080067bd
 8006764:	080067bd 	.word	0x080067bd
 8006768:	080067ad 	.word	0x080067ad
 800676c:	080067bd 	.word	0x080067bd
 8006770:	080067bd 	.word	0x080067bd
 8006774:	080067bd 	.word	0x080067bd
 8006778:	080067bd 	.word	0x080067bd
 800677c:	080067bd 	.word	0x080067bd
 8006780:	080067bd 	.word	0x080067bd
 8006784:	080067bd 	.word	0x080067bd
 8006788:	080067b5 	.word	0x080067b5
 800678c:	2301      	movs	r3, #1
 800678e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006792:	e0d6      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006794:	2304      	movs	r3, #4
 8006796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800679a:	e0d2      	b.n	8006942 <UART_SetConfig+0x7aa>
 800679c:	2308      	movs	r3, #8
 800679e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a2:	e0ce      	b.n	8006942 <UART_SetConfig+0x7aa>
 80067a4:	2310      	movs	r3, #16
 80067a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067aa:	e0ca      	b.n	8006942 <UART_SetConfig+0x7aa>
 80067ac:	2320      	movs	r3, #32
 80067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b2:	e0c6      	b.n	8006942 <UART_SetConfig+0x7aa>
 80067b4:	2340      	movs	r3, #64	; 0x40
 80067b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ba:	e0c2      	b.n	8006942 <UART_SetConfig+0x7aa>
 80067bc:	2380      	movs	r3, #128	; 0x80
 80067be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c2:	e0be      	b.n	8006942 <UART_SetConfig+0x7aa>
 80067c4:	40011400 	.word	0x40011400
 80067c8:	58024400 	.word	0x58024400
 80067cc:	40007800 	.word	0x40007800
 80067d0:	40007c00 	.word	0x40007c00
 80067d4:	40011800 	.word	0x40011800
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4aad      	ldr	r2, [pc, #692]	; (8006a94 <UART_SetConfig+0x8fc>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d176      	bne.n	80068d0 <UART_SetConfig+0x738>
 80067e2:	4bad      	ldr	r3, [pc, #692]	; (8006a98 <UART_SetConfig+0x900>)
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ea:	2b28      	cmp	r3, #40	; 0x28
 80067ec:	d86c      	bhi.n	80068c8 <UART_SetConfig+0x730>
 80067ee:	a201      	add	r2, pc, #4	; (adr r2, 80067f4 <UART_SetConfig+0x65c>)
 80067f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f4:	08006899 	.word	0x08006899
 80067f8:	080068c9 	.word	0x080068c9
 80067fc:	080068c9 	.word	0x080068c9
 8006800:	080068c9 	.word	0x080068c9
 8006804:	080068c9 	.word	0x080068c9
 8006808:	080068c9 	.word	0x080068c9
 800680c:	080068c9 	.word	0x080068c9
 8006810:	080068c9 	.word	0x080068c9
 8006814:	080068a1 	.word	0x080068a1
 8006818:	080068c9 	.word	0x080068c9
 800681c:	080068c9 	.word	0x080068c9
 8006820:	080068c9 	.word	0x080068c9
 8006824:	080068c9 	.word	0x080068c9
 8006828:	080068c9 	.word	0x080068c9
 800682c:	080068c9 	.word	0x080068c9
 8006830:	080068c9 	.word	0x080068c9
 8006834:	080068a9 	.word	0x080068a9
 8006838:	080068c9 	.word	0x080068c9
 800683c:	080068c9 	.word	0x080068c9
 8006840:	080068c9 	.word	0x080068c9
 8006844:	080068c9 	.word	0x080068c9
 8006848:	080068c9 	.word	0x080068c9
 800684c:	080068c9 	.word	0x080068c9
 8006850:	080068c9 	.word	0x080068c9
 8006854:	080068b1 	.word	0x080068b1
 8006858:	080068c9 	.word	0x080068c9
 800685c:	080068c9 	.word	0x080068c9
 8006860:	080068c9 	.word	0x080068c9
 8006864:	080068c9 	.word	0x080068c9
 8006868:	080068c9 	.word	0x080068c9
 800686c:	080068c9 	.word	0x080068c9
 8006870:	080068c9 	.word	0x080068c9
 8006874:	080068b9 	.word	0x080068b9
 8006878:	080068c9 	.word	0x080068c9
 800687c:	080068c9 	.word	0x080068c9
 8006880:	080068c9 	.word	0x080068c9
 8006884:	080068c9 	.word	0x080068c9
 8006888:	080068c9 	.word	0x080068c9
 800688c:	080068c9 	.word	0x080068c9
 8006890:	080068c9 	.word	0x080068c9
 8006894:	080068c1 	.word	0x080068c1
 8006898:	2301      	movs	r3, #1
 800689a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689e:	e050      	b.n	8006942 <UART_SetConfig+0x7aa>
 80068a0:	2304      	movs	r3, #4
 80068a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a6:	e04c      	b.n	8006942 <UART_SetConfig+0x7aa>
 80068a8:	2308      	movs	r3, #8
 80068aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ae:	e048      	b.n	8006942 <UART_SetConfig+0x7aa>
 80068b0:	2310      	movs	r3, #16
 80068b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b6:	e044      	b.n	8006942 <UART_SetConfig+0x7aa>
 80068b8:	2320      	movs	r3, #32
 80068ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068be:	e040      	b.n	8006942 <UART_SetConfig+0x7aa>
 80068c0:	2340      	movs	r3, #64	; 0x40
 80068c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c6:	e03c      	b.n	8006942 <UART_SetConfig+0x7aa>
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ce:	e038      	b.n	8006942 <UART_SetConfig+0x7aa>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a71      	ldr	r2, [pc, #452]	; (8006a9c <UART_SetConfig+0x904>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d130      	bne.n	800693c <UART_SetConfig+0x7a4>
 80068da:	4b6f      	ldr	r3, [pc, #444]	; (8006a98 <UART_SetConfig+0x900>)
 80068dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	2b05      	cmp	r3, #5
 80068e4:	d826      	bhi.n	8006934 <UART_SetConfig+0x79c>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <UART_SetConfig+0x754>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006905 	.word	0x08006905
 80068f0:	0800690d 	.word	0x0800690d
 80068f4:	08006915 	.word	0x08006915
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	08006925 	.word	0x08006925
 8006900:	0800692d 	.word	0x0800692d
 8006904:	2302      	movs	r3, #2
 8006906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690a:	e01a      	b.n	8006942 <UART_SetConfig+0x7aa>
 800690c:	2304      	movs	r3, #4
 800690e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006912:	e016      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006914:	2308      	movs	r3, #8
 8006916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800691a:	e012      	b.n	8006942 <UART_SetConfig+0x7aa>
 800691c:	2310      	movs	r3, #16
 800691e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006922:	e00e      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006924:	2320      	movs	r3, #32
 8006926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800692a:	e00a      	b.n	8006942 <UART_SetConfig+0x7aa>
 800692c:	2340      	movs	r3, #64	; 0x40
 800692e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006932:	e006      	b.n	8006942 <UART_SetConfig+0x7aa>
 8006934:	2380      	movs	r3, #128	; 0x80
 8006936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800693a:	e002      	b.n	8006942 <UART_SetConfig+0x7aa>
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a55      	ldr	r2, [pc, #340]	; (8006a9c <UART_SetConfig+0x904>)
 8006948:	4293      	cmp	r3, r2
 800694a:	f040 80f0 	bne.w	8006b2e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800694e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006952:	2b20      	cmp	r3, #32
 8006954:	dc46      	bgt.n	80069e4 <UART_SetConfig+0x84c>
 8006956:	2b02      	cmp	r3, #2
 8006958:	db75      	blt.n	8006a46 <UART_SetConfig+0x8ae>
 800695a:	3b02      	subs	r3, #2
 800695c:	2b1e      	cmp	r3, #30
 800695e:	d872      	bhi.n	8006a46 <UART_SetConfig+0x8ae>
 8006960:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <UART_SetConfig+0x7d0>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	080069eb 	.word	0x080069eb
 800696c:	08006a47 	.word	0x08006a47
 8006970:	080069f3 	.word	0x080069f3
 8006974:	08006a47 	.word	0x08006a47
 8006978:	08006a47 	.word	0x08006a47
 800697c:	08006a47 	.word	0x08006a47
 8006980:	08006a03 	.word	0x08006a03
 8006984:	08006a47 	.word	0x08006a47
 8006988:	08006a47 	.word	0x08006a47
 800698c:	08006a47 	.word	0x08006a47
 8006990:	08006a47 	.word	0x08006a47
 8006994:	08006a47 	.word	0x08006a47
 8006998:	08006a47 	.word	0x08006a47
 800699c:	08006a47 	.word	0x08006a47
 80069a0:	08006a13 	.word	0x08006a13
 80069a4:	08006a47 	.word	0x08006a47
 80069a8:	08006a47 	.word	0x08006a47
 80069ac:	08006a47 	.word	0x08006a47
 80069b0:	08006a47 	.word	0x08006a47
 80069b4:	08006a47 	.word	0x08006a47
 80069b8:	08006a47 	.word	0x08006a47
 80069bc:	08006a47 	.word	0x08006a47
 80069c0:	08006a47 	.word	0x08006a47
 80069c4:	08006a47 	.word	0x08006a47
 80069c8:	08006a47 	.word	0x08006a47
 80069cc:	08006a47 	.word	0x08006a47
 80069d0:	08006a47 	.word	0x08006a47
 80069d4:	08006a47 	.word	0x08006a47
 80069d8:	08006a47 	.word	0x08006a47
 80069dc:	08006a47 	.word	0x08006a47
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	d02a      	beq.n	8006a3e <UART_SetConfig+0x8a6>
 80069e8:	e02d      	b.n	8006a46 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069ea:	f7fe f905 	bl	8004bf8 <HAL_RCCEx_GetD3PCLK1Freq>
 80069ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80069f0:	e02f      	b.n	8006a52 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f2:	f107 0314 	add.w	r3, r7, #20
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe f914 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a00:	e027      	b.n	8006a52 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a02:	f107 0308 	add.w	r3, r7, #8
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fa60 	bl	8004ecc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a10:	e01f      	b.n	8006a52 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a12:	4b21      	ldr	r3, [pc, #132]	; (8006a98 <UART_SetConfig+0x900>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a1e:	4b1e      	ldr	r3, [pc, #120]	; (8006a98 <UART_SetConfig+0x900>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	08db      	lsrs	r3, r3, #3
 8006a24:	f003 0303 	and.w	r3, r3, #3
 8006a28:	4a1d      	ldr	r2, [pc, #116]	; (8006aa0 <UART_SetConfig+0x908>)
 8006a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a30:	e00f      	b.n	8006a52 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006a32:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <UART_SetConfig+0x908>)
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a36:	e00c      	b.n	8006a52 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a38:	4b1a      	ldr	r3, [pc, #104]	; (8006aa4 <UART_SetConfig+0x90c>)
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a3c:	e009      	b.n	8006a52 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a44:	e005      	b.n	8006a52 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006a50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 81e6 	beq.w	8006e26 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	4a12      	ldr	r2, [pc, #72]	; (8006aa8 <UART_SetConfig+0x910>)
 8006a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a64:	461a      	mov	r2, r3
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a6c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	4413      	add	r3, r2
 8006a78:	6a3a      	ldr	r2, [r7, #32]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d305      	bcc.n	8006a8a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a84:	6a3a      	ldr	r2, [r7, #32]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d910      	bls.n	8006aac <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a90:	e1c9      	b.n	8006e26 <UART_SetConfig+0xc8e>
 8006a92:	bf00      	nop
 8006a94:	40011c00 	.word	0x40011c00
 8006a98:	58024400 	.word	0x58024400
 8006a9c:	58000c00 	.word	0x58000c00
 8006aa0:	03d09000 	.word	0x03d09000
 8006aa4:	003d0900 	.word	0x003d0900
 8006aa8:	08007580 	.word	0x08007580
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f04f 0100 	mov.w	r1, #0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	4ac1      	ldr	r2, [pc, #772]	; (8006dc0 <UART_SetConfig+0xc28>)
 8006aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	f7f9 fc1a 	bl	80002fc <__aeabi_uldivmod>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f04f 0200 	mov.w	r2, #0
 8006ad4:	f04f 0300 	mov.w	r3, #0
 8006ad8:	020b      	lsls	r3, r1, #8
 8006ada:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ade:	0202      	lsls	r2, r0, #8
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	6849      	ldr	r1, [r1, #4]
 8006ae4:	0849      	lsrs	r1, r1, #1
 8006ae6:	4608      	mov	r0, r1
 8006ae8:	f04f 0100 	mov.w	r1, #0
 8006aec:	1814      	adds	r4, r2, r0
 8006aee:	eb43 0501 	adc.w	r5, r3, r1
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7f9 fbfc 	bl	80002fc <__aeabi_uldivmod>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4613      	mov	r3, r2
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b12:	d308      	bcc.n	8006b26 <UART_SetConfig+0x98e>
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b1a:	d204      	bcs.n	8006b26 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b22:	60da      	str	r2, [r3, #12]
 8006b24:	e17f      	b.n	8006e26 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006b2c:	e17b      	b.n	8006e26 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b36:	f040 80bd 	bne.w	8006cb4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8006b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	dc48      	bgt.n	8006bd4 <UART_SetConfig+0xa3c>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	db7b      	blt.n	8006c3e <UART_SetConfig+0xaa6>
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d879      	bhi.n	8006c3e <UART_SetConfig+0xaa6>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0x9b8>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006bdb 	.word	0x08006bdb
 8006b54:	08006be3 	.word	0x08006be3
 8006b58:	08006c3f 	.word	0x08006c3f
 8006b5c:	08006c3f 	.word	0x08006c3f
 8006b60:	08006beb 	.word	0x08006beb
 8006b64:	08006c3f 	.word	0x08006c3f
 8006b68:	08006c3f 	.word	0x08006c3f
 8006b6c:	08006c3f 	.word	0x08006c3f
 8006b70:	08006bfb 	.word	0x08006bfb
 8006b74:	08006c3f 	.word	0x08006c3f
 8006b78:	08006c3f 	.word	0x08006c3f
 8006b7c:	08006c3f 	.word	0x08006c3f
 8006b80:	08006c3f 	.word	0x08006c3f
 8006b84:	08006c3f 	.word	0x08006c3f
 8006b88:	08006c3f 	.word	0x08006c3f
 8006b8c:	08006c3f 	.word	0x08006c3f
 8006b90:	08006c0b 	.word	0x08006c0b
 8006b94:	08006c3f 	.word	0x08006c3f
 8006b98:	08006c3f 	.word	0x08006c3f
 8006b9c:	08006c3f 	.word	0x08006c3f
 8006ba0:	08006c3f 	.word	0x08006c3f
 8006ba4:	08006c3f 	.word	0x08006c3f
 8006ba8:	08006c3f 	.word	0x08006c3f
 8006bac:	08006c3f 	.word	0x08006c3f
 8006bb0:	08006c3f 	.word	0x08006c3f
 8006bb4:	08006c3f 	.word	0x08006c3f
 8006bb8:	08006c3f 	.word	0x08006c3f
 8006bbc:	08006c3f 	.word	0x08006c3f
 8006bc0:	08006c3f 	.word	0x08006c3f
 8006bc4:	08006c3f 	.word	0x08006c3f
 8006bc8:	08006c3f 	.word	0x08006c3f
 8006bcc:	08006c3f 	.word	0x08006c3f
 8006bd0:	08006c31 	.word	0x08006c31
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d02e      	beq.n	8006c36 <UART_SetConfig+0xa9e>
 8006bd8:	e031      	b.n	8006c3e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bda:	f7fc fcab 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 8006bde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006be0:	e033      	b.n	8006c4a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be2:	f7fc fcbd 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 8006be6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006be8:	e02f      	b.n	8006c4a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bea:	f107 0314 	add.w	r3, r7, #20
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe f818 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bf8:	e027      	b.n	8006c4a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bfa:	f107 0308 	add.w	r3, r7, #8
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe f964 	bl	8004ecc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c08:	e01f      	b.n	8006c4a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c0a:	4b6e      	ldr	r3, [pc, #440]	; (8006dc4 <UART_SetConfig+0xc2c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c16:	4b6b      	ldr	r3, [pc, #428]	; (8006dc4 <UART_SetConfig+0xc2c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	08db      	lsrs	r3, r3, #3
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	4a69      	ldr	r2, [pc, #420]	; (8006dc8 <UART_SetConfig+0xc30>)
 8006c22:	fa22 f303 	lsr.w	r3, r2, r3
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c28:	e00f      	b.n	8006c4a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006c2a:	4b67      	ldr	r3, [pc, #412]	; (8006dc8 <UART_SetConfig+0xc30>)
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c2e:	e00c      	b.n	8006c4a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c30:	4b66      	ldr	r3, [pc, #408]	; (8006dcc <UART_SetConfig+0xc34>)
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c34:	e009      	b.n	8006c4a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c3c:	e005      	b.n	8006c4a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80ea 	beq.w	8006e26 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	4a5a      	ldr	r2, [pc, #360]	; (8006dc0 <UART_SetConfig+0xc28>)
 8006c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c64:	005a      	lsls	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	441a      	add	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d916      	bls.n	8006cac <UART_SetConfig+0xb14>
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c84:	d212      	bcs.n	8006cac <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f023 030f 	bic.w	r3, r3, #15
 8006c8e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ca8:	60da      	str	r2, [r3, #12]
 8006caa:	e0bc      	b.n	8006e26 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006cb2:	e0b8      	b.n	8006e26 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	dc4b      	bgt.n	8006d54 <UART_SetConfig+0xbbc>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f2c0 8087 	blt.w	8006dd0 <UART_SetConfig+0xc38>
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	f200 8084 	bhi.w	8006dd0 <UART_SetConfig+0xc38>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <UART_SetConfig+0xb38>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d5b 	.word	0x08006d5b
 8006cd4:	08006d63 	.word	0x08006d63
 8006cd8:	08006dd1 	.word	0x08006dd1
 8006cdc:	08006dd1 	.word	0x08006dd1
 8006ce0:	08006d6b 	.word	0x08006d6b
 8006ce4:	08006dd1 	.word	0x08006dd1
 8006ce8:	08006dd1 	.word	0x08006dd1
 8006cec:	08006dd1 	.word	0x08006dd1
 8006cf0:	08006d7b 	.word	0x08006d7b
 8006cf4:	08006dd1 	.word	0x08006dd1
 8006cf8:	08006dd1 	.word	0x08006dd1
 8006cfc:	08006dd1 	.word	0x08006dd1
 8006d00:	08006dd1 	.word	0x08006dd1
 8006d04:	08006dd1 	.word	0x08006dd1
 8006d08:	08006dd1 	.word	0x08006dd1
 8006d0c:	08006dd1 	.word	0x08006dd1
 8006d10:	08006d8b 	.word	0x08006d8b
 8006d14:	08006dd1 	.word	0x08006dd1
 8006d18:	08006dd1 	.word	0x08006dd1
 8006d1c:	08006dd1 	.word	0x08006dd1
 8006d20:	08006dd1 	.word	0x08006dd1
 8006d24:	08006dd1 	.word	0x08006dd1
 8006d28:	08006dd1 	.word	0x08006dd1
 8006d2c:	08006dd1 	.word	0x08006dd1
 8006d30:	08006dd1 	.word	0x08006dd1
 8006d34:	08006dd1 	.word	0x08006dd1
 8006d38:	08006dd1 	.word	0x08006dd1
 8006d3c:	08006dd1 	.word	0x08006dd1
 8006d40:	08006dd1 	.word	0x08006dd1
 8006d44:	08006dd1 	.word	0x08006dd1
 8006d48:	08006dd1 	.word	0x08006dd1
 8006d4c:	08006dd1 	.word	0x08006dd1
 8006d50:	08006db1 	.word	0x08006db1
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d02e      	beq.n	8006db6 <UART_SetConfig+0xc1e>
 8006d58:	e03a      	b.n	8006dd0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d5a:	f7fc fbeb 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 8006d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d60:	e03c      	b.n	8006ddc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d62:	f7fc fbfd 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 8006d66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d68:	e038      	b.n	8006ddc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d6a:	f107 0314 	add.w	r3, r7, #20
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fd ff58 	bl	8004c24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d78:	e030      	b.n	8006ddc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d7a:	f107 0308 	add.w	r3, r7, #8
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe f8a4 	bl	8004ecc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d88:	e028      	b.n	8006ddc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <UART_SetConfig+0xc2c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <UART_SetConfig+0xc2c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	08db      	lsrs	r3, r3, #3
 8006d9c:	f003 0303 	and.w	r3, r3, #3
 8006da0:	4a09      	ldr	r2, [pc, #36]	; (8006dc8 <UART_SetConfig+0xc30>)
 8006da2:	fa22 f303 	lsr.w	r3, r2, r3
 8006da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006da8:	e018      	b.n	8006ddc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006daa:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <UART_SetConfig+0xc30>)
 8006dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dae:	e015      	b.n	8006ddc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <UART_SetConfig+0xc34>)
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006db4:	e012      	b.n	8006ddc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dbc:	e00e      	b.n	8006ddc <UART_SetConfig+0xc44>
 8006dbe:	bf00      	nop
 8006dc0:	08007580 	.word	0x08007580
 8006dc4:	58024400 	.word	0x58024400
 8006dc8:	03d09000 	.word	0x03d09000
 8006dcc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006dda:	bf00      	nop
    }

    if (pclk != 0U)
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d021      	beq.n	8006e26 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <UART_SetConfig+0xcb8>)
 8006de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	441a      	add	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e04:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e08:	2b0f      	cmp	r3, #15
 8006e0a:	d909      	bls.n	8006e20 <UART_SetConfig+0xc88>
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e12:	d205      	bcs.n	8006e20 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	e002      	b.n	8006e26 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006e42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3738      	adds	r7, #56	; 0x38
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	08007580 	.word	0x08007580

08006e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00a      	beq.n	8006ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01a      	beq.n	8006f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f52:	d10a      	bne.n	8006f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fa8:	f7fa f954 	bl	8001254 <HAL_GetTick>
 8006fac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d10e      	bne.n	8006fda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f82f 	bl	800702e <UART_WaitOnFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e025      	b.n	8007026 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d10e      	bne.n	8007006 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f819 	bl	800702e <UART_WaitOnFlagUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e00f      	b.n	8007026 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b09c      	sub	sp, #112	; 0x70
 8007032:	af00      	add	r7, sp, #0
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	603b      	str	r3, [r7, #0]
 800703a:	4613      	mov	r3, r2
 800703c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703e:	e0a9      	b.n	8007194 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	f000 80a5 	beq.w	8007194 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704a:	f7fa f903 	bl	8001254 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007056:	429a      	cmp	r2, r3
 8007058:	d302      	bcc.n	8007060 <UART_WaitOnFlagUntilTimeout+0x32>
 800705a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800705c:	2b00      	cmp	r3, #0
 800705e:	d140      	bne.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800706e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007074:	667b      	str	r3, [r7, #100]	; 0x64
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800707e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007080:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007084:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800708c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e6      	bne.n	8007060 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	f023 0301 	bic.w	r3, r3, #1
 80070a8:	663b      	str	r3, [r7, #96]	; 0x60
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80070b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e5      	bne.n	8007092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e069      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d051      	beq.n	8007194 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070fe:	d149      	bne.n	8007194 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007108:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800711e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
 800712a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800712e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e6      	bne.n	800710a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3308      	adds	r3, #8
 8007142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	613b      	str	r3, [r7, #16]
   return(result);
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	66bb      	str	r3, [r7, #104]	; 0x68
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800715c:	623a      	str	r2, [r7, #32]
 800715e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	69f9      	ldr	r1, [r7, #28]
 8007162:	6a3a      	ldr	r2, [r7, #32]
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	61bb      	str	r3, [r7, #24]
   return(result);
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e5      	bne.n	800713c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2220      	movs	r2, #32
 8007184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e010      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69da      	ldr	r2, [r3, #28]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	4013      	ands	r3, r2
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	bf0c      	ite	eq
 80071a4:	2301      	moveq	r3, #1
 80071a6:	2300      	movne	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	f43f af46 	beq.w	8007040 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3770      	adds	r7, #112	; 0x70
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e027      	b.n	8007224 <HAL_UARTEx_DisableFifoMode+0x66>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2224      	movs	r2, #36	; 0x24
 80071e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007202:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007244:	2302      	movs	r3, #2
 8007246:	e02d      	b.n	80072a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2224      	movs	r2, #36	; 0x24
 8007254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0201 	bic.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f84f 	bl	8007328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e02d      	b.n	8007320 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	; 0x24
 80072d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0201 	bic.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f811 	bl	8007328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007348:	e031      	b.n	80073ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800734a:	2310      	movs	r3, #16
 800734c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800734e:	2310      	movs	r3, #16
 8007350:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	0e5b      	lsrs	r3, r3, #25
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	0f5b      	lsrs	r3, r3, #29
 800736a:	b2db      	uxtb	r3, r3
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	7b3a      	ldrb	r2, [r7, #12]
 8007376:	4911      	ldr	r1, [pc, #68]	; (80073bc <UARTEx_SetNbDataToProcess+0x94>)
 8007378:	5c8a      	ldrb	r2, [r1, r2]
 800737a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800737e:	7b3a      	ldrb	r2, [r7, #12]
 8007380:	490f      	ldr	r1, [pc, #60]	; (80073c0 <UARTEx_SetNbDataToProcess+0x98>)
 8007382:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007384:	fb93 f3f2 	sdiv	r3, r3, r2
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	7b7a      	ldrb	r2, [r7, #13]
 8007394:	4909      	ldr	r1, [pc, #36]	; (80073bc <UARTEx_SetNbDataToProcess+0x94>)
 8007396:	5c8a      	ldrb	r2, [r1, r2]
 8007398:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800739c:	7b7a      	ldrb	r2, [r7, #13]
 800739e:	4908      	ldr	r1, [pc, #32]	; (80073c0 <UARTEx_SetNbDataToProcess+0x98>)
 80073a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	08007598 	.word	0x08007598
 80073c0:	080075a0 	.word	0x080075a0

080073c4 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e016      	b.n	8007404 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7f9 fdbe 	bl	8000f58 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073e8:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	ea42 0103 	orr.w	r1, r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	68d2      	ldr	r2, [r2, #12]
 800741c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <__libc_init_array>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	4d0d      	ldr	r5, [pc, #52]	; (8007464 <__libc_init_array+0x38>)
 8007430:	4c0d      	ldr	r4, [pc, #52]	; (8007468 <__libc_init_array+0x3c>)
 8007432:	1b64      	subs	r4, r4, r5
 8007434:	10a4      	asrs	r4, r4, #2
 8007436:	2600      	movs	r6, #0
 8007438:	42a6      	cmp	r6, r4
 800743a:	d109      	bne.n	8007450 <__libc_init_array+0x24>
 800743c:	4d0b      	ldr	r5, [pc, #44]	; (800746c <__libc_init_array+0x40>)
 800743e:	4c0c      	ldr	r4, [pc, #48]	; (8007470 <__libc_init_array+0x44>)
 8007440:	f000 f820 	bl	8007484 <_init>
 8007444:	1b64      	subs	r4, r4, r5
 8007446:	10a4      	asrs	r4, r4, #2
 8007448:	2600      	movs	r6, #0
 800744a:	42a6      	cmp	r6, r4
 800744c:	d105      	bne.n	800745a <__libc_init_array+0x2e>
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	f855 3b04 	ldr.w	r3, [r5], #4
 8007454:	4798      	blx	r3
 8007456:	3601      	adds	r6, #1
 8007458:	e7ee      	b.n	8007438 <__libc_init_array+0xc>
 800745a:	f855 3b04 	ldr.w	r3, [r5], #4
 800745e:	4798      	blx	r3
 8007460:	3601      	adds	r6, #1
 8007462:	e7f2      	b.n	800744a <__libc_init_array+0x1e>
 8007464:	080075b0 	.word	0x080075b0
 8007468:	080075b0 	.word	0x080075b0
 800746c:	080075b0 	.word	0x080075b0
 8007470:	080075b4 	.word	0x080075b4

08007474 <memset>:
 8007474:	4402      	add	r2, r0
 8007476:	4603      	mov	r3, r0
 8007478:	4293      	cmp	r3, r2
 800747a:	d100      	bne.n	800747e <memset+0xa>
 800747c:	4770      	bx	lr
 800747e:	f803 1b01 	strb.w	r1, [r3], #1
 8007482:	e7f9      	b.n	8007478 <memset+0x4>

08007484 <_init>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	bf00      	nop
 8007488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748a:	bc08      	pop	{r3}
 800748c:	469e      	mov	lr, r3
 800748e:	4770      	bx	lr

08007490 <_fini>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	bf00      	nop
 8007494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007496:	bc08      	pop	{r3}
 8007498:	469e      	mov	lr, r3
 800749a:	4770      	bx	lr
