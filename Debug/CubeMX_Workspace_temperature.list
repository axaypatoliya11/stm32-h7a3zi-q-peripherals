
CubeMX_Workspace_temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f0c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008238  08008238  00018238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008240  08008240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008244  08008244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08008248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000304  2400007c  080082c4  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000380  080082c4  00020380  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000257ab  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d2f  00000000  00000000  00045855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001258  00000000  00000000  00049588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001130  00000000  00000000  0004a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033789  00000000  00000000  0004b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000178c6  00000000  00000000  0007f099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151c0e  00000000  00000000  0009695f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e856d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005094  00000000  00000000  001e85c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080081a4 	.word	0x080081a4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	080081a4 	.word	0x080081a4

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b96e 	b.w	8000694 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468c      	mov	ip, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8083 	bne.w	80004e6 <__udivmoddi4+0x116>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d947      	bls.n	8000476 <__udivmoddi4+0xa6>
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	b142      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ec:	f1c2 0020 	rsb	r0, r2, #32
 80003f0:	fa24 f000 	lsr.w	r0, r4, r0
 80003f4:	4091      	lsls	r1, r2
 80003f6:	4097      	lsls	r7, r2
 80003f8:	ea40 0c01 	orr.w	ip, r0, r1
 80003fc:	4094      	lsls	r4, r2
 80003fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fbbc f6f8 	udiv	r6, ip, r8
 8000408:	fa1f fe87 	uxth.w	lr, r7
 800040c:	fb08 c116 	mls	r1, r8, r6, ip
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb06 f10e 	mul.w	r1, r6, lr
 8000418:	4299      	cmp	r1, r3
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x60>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000422:	f080 8119 	bcs.w	8000658 <__udivmoddi4+0x288>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 8116 	bls.w	8000658 <__udivmoddi4+0x288>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3310 	mls	r3, r8, r0, r3
 800043c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x8c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	f080 8105 	bcs.w	800065c <__udivmoddi4+0x28c>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f240 8102 	bls.w	800065c <__udivmoddi4+0x28c>
 8000458:	3802      	subs	r0, #2
 800045a:	443c      	add	r4, r7
 800045c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	2600      	movs	r6, #0
 8000466:	b11d      	cbz	r5, 8000470 <__udivmoddi4+0xa0>
 8000468:	40d4      	lsrs	r4, r2
 800046a:	2300      	movs	r3, #0
 800046c:	e9c5 4300 	strd	r4, r3, [r5]
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	b902      	cbnz	r2, 800047a <__udivmoddi4+0xaa>
 8000478:	deff      	udf	#255	; 0xff
 800047a:	fab2 f282 	clz	r2, r2
 800047e:	2a00      	cmp	r2, #0
 8000480:	d150      	bne.n	8000524 <__udivmoddi4+0x154>
 8000482:	1bcb      	subs	r3, r1, r7
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	fa1f f887 	uxth.w	r8, r7
 800048c:	2601      	movs	r6, #1
 800048e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000492:	0c21      	lsrs	r1, r4, #16
 8000494:	fb0e 331c 	mls	r3, lr, ip, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb08 f30c 	mul.w	r3, r8, ip
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0xe4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0xe2>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	f200 80e9 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004b2:	4684      	mov	ip, r0
 80004b4:	1ac9      	subs	r1, r1, r3
 80004b6:	b2a3      	uxth	r3, r4
 80004b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004c4:	fb08 f800 	mul.w	r8, r8, r0
 80004c8:	45a0      	cmp	r8, r4
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x10c>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x10a>
 80004d4:	45a0      	cmp	r8, r4
 80004d6:	f200 80d9 	bhi.w	800068c <__udivmoddi4+0x2bc>
 80004da:	4618      	mov	r0, r3
 80004dc:	eba4 0408 	sub.w	r4, r4, r8
 80004e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004e4:	e7bf      	b.n	8000466 <__udivmoddi4+0x96>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d909      	bls.n	80004fe <__udivmoddi4+0x12e>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	f000 80b1 	beq.w	8000652 <__udivmoddi4+0x282>
 80004f0:	2600      	movs	r6, #0
 80004f2:	e9c5 0100 	strd	r0, r1, [r5]
 80004f6:	4630      	mov	r0, r6
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	fab3 f683 	clz	r6, r3
 8000502:	2e00      	cmp	r6, #0
 8000504:	d14a      	bne.n	800059c <__udivmoddi4+0x1cc>
 8000506:	428b      	cmp	r3, r1
 8000508:	d302      	bcc.n	8000510 <__udivmoddi4+0x140>
 800050a:	4282      	cmp	r2, r0
 800050c:	f200 80b8 	bhi.w	8000680 <__udivmoddi4+0x2b0>
 8000510:	1a84      	subs	r4, r0, r2
 8000512:	eb61 0103 	sbc.w	r1, r1, r3
 8000516:	2001      	movs	r0, #1
 8000518:	468c      	mov	ip, r1
 800051a:	2d00      	cmp	r5, #0
 800051c:	d0a8      	beq.n	8000470 <__udivmoddi4+0xa0>
 800051e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000522:	e7a5      	b.n	8000470 <__udivmoddi4+0xa0>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f603 	lsr.w	r6, r0, r3
 800052c:	4097      	lsls	r7, r2
 800052e:	fa01 f002 	lsl.w	r0, r1, r2
 8000532:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000536:	40d9      	lsrs	r1, r3
 8000538:	4330      	orrs	r0, r6
 800053a:	0c03      	lsrs	r3, r0, #16
 800053c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000540:	fa1f f887 	uxth.w	r8, r7
 8000544:	fb0e 1116 	mls	r1, lr, r6, r1
 8000548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054c:	fb06 f108 	mul.w	r1, r6, r8
 8000550:	4299      	cmp	r1, r3
 8000552:	fa04 f402 	lsl.w	r4, r4, r2
 8000556:	d909      	bls.n	800056c <__udivmoddi4+0x19c>
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	f106 3cff 	add.w	ip, r6, #4294967295
 800055e:	f080 808d 	bcs.w	800067c <__udivmoddi4+0x2ac>
 8000562:	4299      	cmp	r1, r3
 8000564:	f240 808a 	bls.w	800067c <__udivmoddi4+0x2ac>
 8000568:	3e02      	subs	r6, #2
 800056a:	443b      	add	r3, r7
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b281      	uxth	r1, r0
 8000570:	fbb3 f0fe 	udiv	r0, r3, lr
 8000574:	fb0e 3310 	mls	r3, lr, r0, r3
 8000578:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057c:	fb00 f308 	mul.w	r3, r0, r8
 8000580:	428b      	cmp	r3, r1
 8000582:	d907      	bls.n	8000594 <__udivmoddi4+0x1c4>
 8000584:	1879      	adds	r1, r7, r1
 8000586:	f100 3cff 	add.w	ip, r0, #4294967295
 800058a:	d273      	bcs.n	8000674 <__udivmoddi4+0x2a4>
 800058c:	428b      	cmp	r3, r1
 800058e:	d971      	bls.n	8000674 <__udivmoddi4+0x2a4>
 8000590:	3802      	subs	r0, #2
 8000592:	4439      	add	r1, r7
 8000594:	1acb      	subs	r3, r1, r3
 8000596:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800059a:	e778      	b.n	800048e <__udivmoddi4+0xbe>
 800059c:	f1c6 0c20 	rsb	ip, r6, #32
 80005a0:	fa03 f406 	lsl.w	r4, r3, r6
 80005a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005a8:	431c      	orrs	r4, r3
 80005aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ae:	fa01 f306 	lsl.w	r3, r1, r6
 80005b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ba:	431f      	orrs	r7, r3
 80005bc:	0c3b      	lsrs	r3, r7, #16
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fa1f f884 	uxth.w	r8, r4
 80005c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ce:	fb09 fa08 	mul.w	sl, r9, r8
 80005d2:	458a      	cmp	sl, r1
 80005d4:	fa02 f206 	lsl.w	r2, r2, r6
 80005d8:	fa00 f306 	lsl.w	r3, r0, r6
 80005dc:	d908      	bls.n	80005f0 <__udivmoddi4+0x220>
 80005de:	1861      	adds	r1, r4, r1
 80005e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005e4:	d248      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 80005e6:	458a      	cmp	sl, r1
 80005e8:	d946      	bls.n	8000678 <__udivmoddi4+0x2a8>
 80005ea:	f1a9 0902 	sub.w	r9, r9, #2
 80005ee:	4421      	add	r1, r4
 80005f0:	eba1 010a 	sub.w	r1, r1, sl
 80005f4:	b2bf      	uxth	r7, r7
 80005f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000602:	fb00 f808 	mul.w	r8, r0, r8
 8000606:	45b8      	cmp	r8, r7
 8000608:	d907      	bls.n	800061a <__udivmoddi4+0x24a>
 800060a:	19e7      	adds	r7, r4, r7
 800060c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000610:	d22e      	bcs.n	8000670 <__udivmoddi4+0x2a0>
 8000612:	45b8      	cmp	r8, r7
 8000614:	d92c      	bls.n	8000670 <__udivmoddi4+0x2a0>
 8000616:	3802      	subs	r0, #2
 8000618:	4427      	add	r7, r4
 800061a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800061e:	eba7 0708 	sub.w	r7, r7, r8
 8000622:	fba0 8902 	umull	r8, r9, r0, r2
 8000626:	454f      	cmp	r7, r9
 8000628:	46c6      	mov	lr, r8
 800062a:	4649      	mov	r1, r9
 800062c:	d31a      	bcc.n	8000664 <__udivmoddi4+0x294>
 800062e:	d017      	beq.n	8000660 <__udivmoddi4+0x290>
 8000630:	b15d      	cbz	r5, 800064a <__udivmoddi4+0x27a>
 8000632:	ebb3 020e 	subs.w	r2, r3, lr
 8000636:	eb67 0701 	sbc.w	r7, r7, r1
 800063a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800063e:	40f2      	lsrs	r2, r6
 8000640:	ea4c 0202 	orr.w	r2, ip, r2
 8000644:	40f7      	lsrs	r7, r6
 8000646:	e9c5 2700 	strd	r2, r7, [r5]
 800064a:	2600      	movs	r6, #0
 800064c:	4631      	mov	r1, r6
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e70b      	b.n	8000470 <__udivmoddi4+0xa0>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e9      	b.n	8000430 <__udivmoddi4+0x60>
 800065c:	4618      	mov	r0, r3
 800065e:	e6fd      	b.n	800045c <__udivmoddi4+0x8c>
 8000660:	4543      	cmp	r3, r8
 8000662:	d2e5      	bcs.n	8000630 <__udivmoddi4+0x260>
 8000664:	ebb8 0e02 	subs.w	lr, r8, r2
 8000668:	eb69 0104 	sbc.w	r1, r9, r4
 800066c:	3801      	subs	r0, #1
 800066e:	e7df      	b.n	8000630 <__udivmoddi4+0x260>
 8000670:	4608      	mov	r0, r1
 8000672:	e7d2      	b.n	800061a <__udivmoddi4+0x24a>
 8000674:	4660      	mov	r0, ip
 8000676:	e78d      	b.n	8000594 <__udivmoddi4+0x1c4>
 8000678:	4681      	mov	r9, r0
 800067a:	e7b9      	b.n	80005f0 <__udivmoddi4+0x220>
 800067c:	4666      	mov	r6, ip
 800067e:	e775      	b.n	800056c <__udivmoddi4+0x19c>
 8000680:	4630      	mov	r0, r6
 8000682:	e74a      	b.n	800051a <__udivmoddi4+0x14a>
 8000684:	f1ac 0c02 	sub.w	ip, ip, #2
 8000688:	4439      	add	r1, r7
 800068a:	e713      	b.n	80004b4 <__udivmoddi4+0xe4>
 800068c:	3802      	subs	r0, #2
 800068e:	443c      	add	r4, r7
 8000690:	e724      	b.n	80004dc <__udivmoddi4+0x10c>
 8000692:	bf00      	nop

08000694 <__aeabi_idiv0>:
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0c2      	sub	sp, #264	; 0x108
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  HAL_Init();
 800069e:	f000 fdf9 	bl	8001294 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 80006a2:	f000 f841 	bl	8000728 <SystemClock_Config>
	#define WINDOW_VAL				(COUNTER_VAL - ((MIN_WINDOW_VAL*APB3_PERI_CLK_VAL*1000000)/(4096*PRESCALAR_WWDG)))+1
#endif

	// Use local
#ifdef __FLASH__
	uint32_t holdMultipleRead[DATA_READ_LOOP] = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ae:	461a      	mov	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f007 f941 	bl	8007938 <memset>

	for(int i=0; i<DATA_TRANSMIT_LENGTH; i++){
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006bc:	e00c      	b.n	80006d8 <main+0x40>
		buffer_tfs[i] = i;
 80006be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006c2:	b299      	uxth	r1, r3
 80006c4:	4a15      	ldr	r2, [pc, #84]	; (800071c <main+0x84>)
 80006c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<DATA_TRANSMIT_LENGTH; i++){
 80006ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006d2:	3301      	adds	r3, #1
 80006d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80006dc:	2b7f      	cmp	r3, #127	; 0x7f
 80006de:	ddee      	ble.n	80006be <main+0x26>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f994 	bl	8000a0c <MX_GPIO_Init>
  MX_ADC2_Init();
 80006e4:	f000 f89e 	bl	8000824 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 80006e8:	f000 f944 	bl	8000974 <MX_USART3_UART_Init>
  MX_RNG_Init();
 80006ec:	f000 f900 	bl	80008f0 <MX_RNG_Init>
  MX_RTC_Init();
 80006f0:	f000 f914 	bl	800091c <MX_RTC_Init>
	  HAL_UART_Transmit(&huart3, "5 seconds\n", 10, 500);
	  HAL_IWDG_Refresh(&hiwdg1);
  }
#endif

  HAL_ADC_Start(&hadc2);
 80006f4:	480a      	ldr	r0, [pc, #40]	; (8000720 <main+0x88>)
 80006f6:	f001 f97b 	bl	80019f0 <HAL_ADC_Start>
  set_alarm_custom();
#endif

#ifdef __FLASH__
  /* clear the flash */
  FLASH_clear();
 80006fa:	f000 fb3b 	bl	8000d74 <FLASH_clear>

  /* write the flash */
  FLASH_write();
 80006fe:	f000 faef 	bl	8000ce0 <FLASH_write>

  /* Read from the flash memory */
  FLASH_Read(rcv_address, &holdMultipleRead[0], DATA_READ_LOOP);
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <main+0x8c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	1d39      	adds	r1, r7, #4
 8000708:	2240      	movs	r2, #64	; 0x40
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fa8a 	bl	8000c24 <FLASH_Read>

  /* print the readed data */
  Print_readed_data(holdMultipleRead);
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f000 faa6 	bl	8000c64 <Print_readed_data>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x80>
 800071a:	bf00      	nop
 800071c:	24000098 	.word	0x24000098
 8000720:	2400026c 	.word	0x2400026c
 8000724:	24000004 	.word	0x24000004

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09c      	sub	sp, #112	; 0x70
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000732:	224c      	movs	r2, #76	; 0x4c
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f007 f8fe 	bl	8007938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2220      	movs	r2, #32
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f007 f8f8 	bl	8007938 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000748:	4b34      	ldr	r3, [pc, #208]	; (800081c <SystemClock_Config+0xf4>)
 800074a:	f04f 32ff 	mov.w	r2, #4294967295
 800074e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000752:	2004      	movs	r0, #4
 8000754:	f002 fc0e 	bl	8002f74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <SystemClock_Config+0xf8>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <SystemClock_Config+0xf8>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <SystemClock_Config+0xf8>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000774:	bf00      	nop
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <SystemClock_Config+0xf8>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800077e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000782:	d1f8      	bne.n	8000776 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <SystemClock_Config+0xf4>)
 8000786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000788:	4a24      	ldr	r2, [pc, #144]	; (800081c <SystemClock_Config+0xf4>)
 800078a:	f023 0303 	bic.w	r3, r3, #3
 800078e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000794:	2301      	movs	r3, #1
 8000796:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2340      	movs	r3, #64	; 0x40
 800079a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007b0:	230a      	movs	r3, #10
 80007b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c0:	230c      	movs	r3, #12
 80007c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fc29 	bl	8003028 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007dc:	f000 fb06 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	233f      	movs	r3, #63	; 0x3f
 80007e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2303      	movs	r3, #3
 80007e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV16;
 80007f0:	2370      	movs	r3, #112	; 0x70
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2101      	movs	r1, #1
 8000804:	4618      	mov	r0, r3
 8000806:	f003 f813 	bl	8003830 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000810:	f000 faec 	bl	8000dec <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3770      	adds	r7, #112	; 0x70
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	58024400 	.word	0x58024400
 8000820:	58024800 	.word	0x58024800

08000824 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <MX_ADC2_Init+0xc0>)
 800083e:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <MX_ADC2_Init+0xc4>)
 8000840:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <MX_ADC2_Init+0xc0>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <MX_ADC2_Init+0xc0>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <MX_ADC2_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <MX_ADC2_Init+0xc0>)
 8000856:	2204      	movs	r2, #4
 8000858:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_ADC2_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MX_ADC2_Init+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_ADC2_Init+0xc0>)
 8000868:	2201      	movs	r2, #1
 800086a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_ADC2_Init+0xc0>)
 800086e:	2200      	movs	r2, #0
 8000870:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_ADC2_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_ADC2_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_ADC2_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_ADC2_Init+0xc0>)
 8000886:	2200      	movs	r2, #0
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_ADC2_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_ADC2_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000898:	4812      	ldr	r0, [pc, #72]	; (80008e4 <MX_ADC2_Init+0xc0>)
 800089a:	f000 ff4f 	bl	800173c <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80008a4:	f000 faa2 	bl	8000dec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_ADC2_Init+0xc8>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80008b0:	2305      	movs	r3, #5
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_ADC2_Init+0xc0>)
 80008cc:	f001 f94a 	bl	8001b64 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80008d6:	f000 fa89 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2400026c 	.word	0x2400026c
 80008e8:	40022100 	.word	0x40022100
 80008ec:	cb840000 	.word	0xcb840000

080008f0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_RNG_Init+0x24>)
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <MX_RNG_Init+0x28>)
 80008f8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_RNG_Init+0x24>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_RNG_Init+0x24>)
 8000902:	f005 fbcb 	bl	800609c <HAL_RNG_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800090c:	f000 fa6e 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24000314 	.word	0x24000314
 8000918:	48021800 	.word	0x48021800

0800091c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_RTC_Init+0x50>)
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MX_RTC_Init+0x54>)
 8000924:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_RTC_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_RTC_Init+0x50>)
 800092e:	227f      	movs	r2, #127	; 0x7f
 8000930:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_RTC_Init+0x50>)
 8000934:	22ff      	movs	r2, #255	; 0xff
 8000936:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_RTC_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_RTC_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_RTC_Init+0x50>)
 8000946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_RTC_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_RTC_Init+0x50>)
 8000954:	f005 fc48 	bl	80061e8 <HAL_RTC_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800095e:	f000 fa45 	bl	8000dec <Error_Handler>
//  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
  /* USER CODE BEGIN RTC_Init 2 */
	HAL_PWR_EnableBkUpAccess();
 8000962:	f002 faf7 	bl	8002f54 <HAL_PWR_EnableBkUpAccess>
  /* USER CODE END RTC_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	240002ec 	.word	0x240002ec
 8000970:	58004000 	.word	0x58004000

08000974 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 800097a:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <MX_USART3_UART_Init+0x94>)
 800097c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009bc:	4811      	ldr	r0, [pc, #68]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009be:	f005 fd6b 	bl	8006498 <HAL_UART_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009c8:	f000 fa10 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009d0:	f006 fe94 	bl	80076fc <HAL_UARTEx_SetTxFifoThreshold>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 fa07 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009e2:	f006 fec9 	bl	8007778 <HAL_UARTEx_SetRxFifoThreshold>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009ec:	f000 f9fe 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009f2:	f006 fe4a 	bl	800768a <HAL_UARTEx_DisableFifoMode>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009fc:	f000 f9f6 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	240001dc 	.word	0x240001dc
 8000a08:	40004800 	.word	0x40004800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08e      	sub	sp, #56	; 0x38
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b79      	ldr	r3, [pc, #484]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a28:	4a77      	ldr	r2, [pc, #476]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a32:	4b75      	ldr	r3, [pc, #468]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	623b      	str	r3, [r7, #32]
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a40:	4b71      	ldr	r3, [pc, #452]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a46:	4a70      	ldr	r2, [pc, #448]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a48:	f043 0320 	orr.w	r3, r3, #32
 8000a4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a50:	4b6d      	ldr	r3, [pc, #436]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a56:	f003 0320 	and.w	r3, r3, #32
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5e:	4b6a      	ldr	r3, [pc, #424]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a64:	4a68      	ldr	r2, [pc, #416]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a6e:	4b66      	ldr	r3, [pc, #408]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b62      	ldr	r3, [pc, #392]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a82:	4a61      	ldr	r2, [pc, #388]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a8c:	4b5e      	ldr	r3, [pc, #376]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	4b5b      	ldr	r3, [pc, #364]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000a9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa0:	4a59      	ldr	r2, [pc, #356]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aaa:	4b57      	ldr	r3, [pc, #348]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000aac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab8:	4b53      	ldr	r3, [pc, #332]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000aba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000abe:	4a52      	ldr	r2, [pc, #328]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ac8:	4b4f      	ldr	r3, [pc, #316]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000aca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b4c      	ldr	r3, [pc, #304]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000ad8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000adc:	4a4a      	ldr	r2, [pc, #296]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ae6:	4b48      	ldr	r3, [pc, #288]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000ae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af4:	4b44      	ldr	r3, [pc, #272]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000af6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000afa:	4a43      	ldr	r2, [pc, #268]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b04:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000b06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b18:	483c      	ldr	r0, [pc, #240]	; (8000c0c <MX_GPIO_Init+0x200>)
 8000b1a:	f002 fa01 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b24:	483a      	ldr	r0, [pc, #232]	; (8000c10 <MX_GPIO_Init+0x204>)
 8000b26:	f002 f9fb 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4839      	ldr	r0, [pc, #228]	; (8000c14 <MX_GPIO_Init+0x208>)
 8000b30:	f002 f9f6 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4833      	ldr	r0, [pc, #204]	; (8000c18 <MX_GPIO_Init+0x20c>)
 8000b4a:	f002 f839 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	4829      	ldr	r0, [pc, #164]	; (8000c0c <MX_GPIO_Init+0x200>)
 8000b68:	f002 f82a 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b6c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	4822      	ldr	r0, [pc, #136]	; (8000c10 <MX_GPIO_Init+0x204>)
 8000b86:	f002 f81b 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	481f      	ldr	r0, [pc, #124]	; (8000c1c <MX_GPIO_Init+0x210>)
 8000ba0:	f002 f80e 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4817      	ldr	r0, [pc, #92]	; (8000c20 <MX_GPIO_Init+0x214>)
 8000bc2:	f001 fffd 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000bc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4810      	ldr	r0, [pc, #64]	; (8000c20 <MX_GPIO_Init+0x214>)
 8000be0:	f001 ffee 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000be4:	2302      	movs	r3, #2
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <MX_GPIO_Init+0x208>)
 8000bfc:	f001 ffe0 	bl	8002bc0 <HAL_GPIO_Init>

}
 8000c00:	bf00      	nop
 8000c02:	3738      	adds	r7, #56	; 0x38
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58021400 	.word	0x58021400
 8000c10:	58020400 	.word	0x58020400
 8000c14:	58021000 	.word	0x58021000
 8000c18:	58020800 	.word	0x58020800
 8000c1c:	58021800 	.word	0x58021800
 8000c20:	58020000 	.word	0x58020000

08000c24 <FLASH_Read>:
	HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp), 5*UART_TIMEOUT);
}
#endif

#ifdef __FLASH__
void FLASH_Read(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords){
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	while (1)
		{
			*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	601a      	str	r2, [r3, #0]
			StartPageAddress+=4;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	60fb      	str	r3, [r7, #12]
			RxBuf++;
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	3304      	adds	r3, #4
 8000c44:	60bb      	str	r3, [r7, #8]
			if (!(--numberofwords)) break;
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	80fb      	strh	r3, [r7, #6]
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d000      	beq.n	8000c54 <FLASH_Read+0x30>
			*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000c52:	e7ee      	b.n	8000c32 <FLASH_Read+0xe>
			if (!(--numberofwords)) break;
 8000c54:	bf00      	nop
		}
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <Print_readed_data>:

void Print_readed_data(uint32_t holdMultipleRead[]){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	uint8_t temp_data[10] = {0};
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	809a      	strh	r2, [r3, #4]
	uint16_t a,b;
	for(int i=0; i<DATA_READ_LOOP; i++){
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	e023      	b.n	8000cc8 <Print_readed_data+0x64>
	  a = holdMultipleRead[i]>>16;
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	0c1b      	lsrs	r3, r3, #16
 8000c8c:	837b      	strh	r3, [r7, #26]
	  b = holdMultipleRead[i] & 0x0000ffff;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	833b      	strh	r3, [r7, #24]
	  sprintf(temp_data, "%d\n%d\n", b,a);
 8000c9a:	8b3a      	ldrh	r2, [r7, #24]
 8000c9c:	8b7b      	ldrh	r3, [r7, #26]
 8000c9e:	f107 000c 	add.w	r0, r7, #12
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <Print_readed_data+0x74>)
 8000ca4:	f006 fe50 	bl	8007948 <siprintf>
	  HAL_UART_Transmit(&huart3, temp_data, strlen(temp_data), UART_TIMEOUT);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fb1f 	bl	80002f0 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	f107 010c 	add.w	r1, r7, #12
 8000cba:	2364      	movs	r3, #100	; 0x64
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <Print_readed_data+0x78>)
 8000cbe:	f005 fc3b 	bl	8006538 <HAL_UART_Transmit>
	for(int i=0; i<DATA_READ_LOOP; i++){
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	2b3f      	cmp	r3, #63	; 0x3f
 8000ccc:	ddd8      	ble.n	8000c80 <Print_readed_data+0x1c>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	080081bc 	.word	0x080081bc
 8000cdc:	240001dc 	.word	0x240001dc

08000ce0 <FLASH_write>:

void FLASH_write(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	// unlock the flash to write
	  if(HAL_FLASH_Unlock() != HAL_OK){
 8000ce6:	f001 fd35 	bl	8002754 <HAL_FLASH_Unlock>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <FLASH_write+0x1e>
		  HAL_UART_Transmit(&huart3, "fail" ,4, 5*UART_TIMEOUT);
 8000cf0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	491b      	ldr	r1, [pc, #108]	; (8000d64 <FLASH_write+0x84>)
 8000cf8:	481b      	ldr	r0, [pc, #108]	; (8000d68 <FLASH_write+0x88>)
 8000cfa:	f005 fc1d 	bl	8006538 <HAL_UART_Transmit>
	  }
	  for(int i=0; i<DATA_TRANSMIT_LOOP; i++){
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	e01c      	b.n	8000d3e <FLASH_write+0x5e>
		  if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, (uint32_t)send_address, &buffer_tfs[i*8]) != HAL_OK)
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <FLASH_write+0x8c>)
 8000d06:	6819      	ldr	r1, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <FLASH_write+0x90>)
 8000d10:	4413      	add	r3, r2
 8000d12:	461a      	mov	r2, r3
 8000d14:	2001      	movs	r0, #1
 8000d16:	f001 fc63 	bl	80025e0 <HAL_FLASH_Program>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <FLASH_write+0x4e>
		  {
			  HAL_UART_Transmit(&huart3, "fail" ,4, 5*UART_TIMEOUT);
 8000d20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d24:	2204      	movs	r2, #4
 8000d26:	490f      	ldr	r1, [pc, #60]	; (8000d64 <FLASH_write+0x84>)
 8000d28:	480f      	ldr	r0, [pc, #60]	; (8000d68 <FLASH_write+0x88>)
 8000d2a:	f005 fc05 	bl	8006538 <HAL_UART_Transmit>
		  }
	  send_address+=16;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <FLASH_write+0x8c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3310      	adds	r3, #16
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <FLASH_write+0x8c>)
 8000d36:	6013      	str	r3, [r2, #0]
	  for(int i=0; i<DATA_TRANSMIT_LOOP; i++){
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	dddf      	ble.n	8000d04 <FLASH_write+0x24>
	}
	// lock the flash once done writing
	if(HAL_FLASH_Lock() != HAL_OK){
 8000d44:	f001 fd40 	bl	80027c8 <HAL_FLASH_Lock>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d006      	beq.n	8000d5c <FLASH_write+0x7c>
	  HAL_UART_Transmit(&huart3, "fail" ,4, 5*UART_TIMEOUT);
 8000d4e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d52:	2204      	movs	r2, #4
 8000d54:	4903      	ldr	r1, [pc, #12]	; (8000d64 <FLASH_write+0x84>)
 8000d56:	4804      	ldr	r0, [pc, #16]	; (8000d68 <FLASH_write+0x88>)
 8000d58:	f005 fbee 	bl	8006538 <HAL_UART_Transmit>
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	080081c4 	.word	0x080081c4
 8000d68:	240001dc 	.word	0x240001dc
 8000d6c:	24000000 	.word	0x24000000
 8000d70:	24000098 	.word	0x24000098

08000d74 <FLASH_clear>:

void FLASH_clear(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
	if(HAL_FLASH_Unlock() != HAL_OK){
 8000d7a:	f001 fceb 	bl	8002754 <HAL_FLASH_Unlock>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <FLASH_clear+0x1e>
		  HAL_UART_Transmit(&huart3, "fail" ,4, 5*UART_TIMEOUT);
 8000d84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d88:	2204      	movs	r2, #4
 8000d8a:	4916      	ldr	r1, [pc, #88]	; (8000de4 <FLASH_clear+0x70>)
 8000d8c:	4816      	ldr	r0, [pc, #88]	; (8000de8 <FLASH_clear+0x74>)
 8000d8e:	f005 fbd3 	bl	8006538 <HAL_UART_Transmit>
	  }
	  uint32_t PAGEError;
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
	  EraseInitStruct.NbSectors = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
	  EraseInitStruct.Banks = FLASH_BANK_1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	607b      	str	r3, [r7, #4]
	  EraseInitStruct.Sector = FLASH_SECTOR_127;
 8000d9e:	237f      	movs	r3, #127	; 0x7f
 8000da0:	60bb      	str	r3, [r7, #8]
	  if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000da2:	f107 0214 	add.w	r2, r7, #20
 8000da6:	463b      	mov	r3, r7
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fdd2 	bl	8002954 <HAL_FLASHEx_Erase>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <FLASH_clear+0x50>
	  {
		  HAL_UART_Transmit(&huart3, "fail" ,4, 5*UART_TIMEOUT);
 8000db6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000dba:	2204      	movs	r2, #4
 8000dbc:	4909      	ldr	r1, [pc, #36]	; (8000de4 <FLASH_clear+0x70>)
 8000dbe:	480a      	ldr	r0, [pc, #40]	; (8000de8 <FLASH_clear+0x74>)
 8000dc0:	f005 fbba 	bl	8006538 <HAL_UART_Transmit>
	  }
	  if(HAL_FLASH_Lock() != HAL_OK){
 8000dc4:	f001 fd00 	bl	80027c8 <HAL_FLASH_Lock>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <FLASH_clear+0x68>
	    HAL_UART_Transmit(&huart3, "fail" ,4, 5*UART_TIMEOUT);
 8000dce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4903      	ldr	r1, [pc, #12]	; (8000de4 <FLASH_clear+0x70>)
 8000dd6:	4804      	ldr	r0, [pc, #16]	; (8000de8 <FLASH_clear+0x74>)
 8000dd8:	f005 fbae 	bl	8006538 <HAL_UART_Transmit>
	  }
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	080081c4 	.word	0x080081c4
 8000de8:	240001dc 	.word	0x240001dc

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_MspInit+0x30>)
 8000e00:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e04:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_MspInit+0x30>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_MspInit+0x30>)
 8000e10:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	58024400 	.word	0x58024400

08000e2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0b2      	sub	sp, #200	; 0xc8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	22b8      	movs	r2, #184	; 0xb8
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 fd7b 	bl	8007938 <memset>
  if(hadc->Instance==ADC2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <HAL_ADC_MspInit+0x88>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d12e      	bne.n	8000eaa <HAL_ADC_MspInit+0x7e>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000e52:	2304      	movs	r3, #4
 8000e54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000e56:	2308      	movs	r3, #8
 8000e58:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e66:	23c0      	movs	r3, #192	; 0xc0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 f863 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000e88:	f7ff ffb0 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_ADC_MspInit+0x8c>)
 8000e8e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_ADC_MspInit+0x8c>)
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_ADC_MspInit+0x8c>)
 8000e9e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	37c8      	adds	r7, #200	; 0xc8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022100 	.word	0x40022100
 8000eb8:	58024400 	.word	0x58024400

08000ebc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0b2      	sub	sp, #200	; 0xc8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	22b8      	movs	r2, #184	; 0xb8
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f006 fd33 	bl	8007938 <memset>
  if(hrng->Instance==RNG)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <HAL_RNG_MspInit+0x68>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d11e      	bne.n	8000f1a <HAL_RNG_MspInit+0x5e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 f82b 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000ef8:	f7ff ff78 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_RNG_MspInit+0x6c>)
 8000efe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <HAL_RNG_MspInit+0x6c>)
 8000f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f08:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_RNG_MspInit+0x6c>)
 8000f0e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	37c8      	adds	r7, #200	; 0xc8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	48021800 	.word	0x48021800
 8000f28:	58024400 	.word	0x58024400

08000f2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0b0      	sub	sp, #192	; 0xc0
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	22b8      	movs	r2, #184	; 0xb8
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 fcfb 	bl	8007938 <memset>
  if(hrtc->Instance==RTC)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <HAL_RTC_MspInit+0x68>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d11e      	bne.n	8000f8a <HAL_RTC_MspInit+0x5e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f50:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fff2 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f6a:	f7ff ff3f 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_RTC_MspInit+0x6c>)
 8000f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_RTC_MspInit+0x6c>)
 8000f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2029      	movs	r0, #41	; 0x29
 8000f80:	f001 faf9 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000f84:	2029      	movs	r0, #41	; 0x29
 8000f86:	f001 fb10 	bl	80025aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	37c0      	adds	r7, #192	; 0xc0
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58004000 	.word	0x58004000
 8000f98:	58024400 	.word	0x58024400

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0b8      	sub	sp, #224	; 0xe0
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	22b8      	movs	r2, #184	; 0xb8
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f006 fcbb 	bl	8007938 <memset>
  if(huart->Instance==USART3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <HAL_UART_MspInit+0xc0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d142      	bne.n	8001052 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 ffb4 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fe6:	f7ff ff01 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_UART_MspInit+0xc4>)
 8000fec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <HAL_UART_MspInit+0xc4>)
 8000ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_UART_MspInit+0xc4>)
 8000ffc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_UART_MspInit+0xc4>)
 800100a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_UART_MspInit+0xc4>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_UART_MspInit+0xc4>)
 800101a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001040:	2307      	movs	r3, #7
 8001042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001046:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_UART_MspInit+0xc8>)
 800104e:	f001 fdb7 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	37e0      	adds	r7, #224	; 0xe0
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40004800 	.word	0x40004800
 8001060:	58024400 	.word	0x58024400
 8001064:	58020c00 	.word	0x58020c00

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 f960 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <WWDG_IRQHandler+0x10>)
 80010c2:	f006 fbe5 	bl	8007890 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2400033c 	.word	0x2400033c

080010d0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line.
  */
void RTC_Alarm_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <RTC_Alarm_IRQHandler+0x10>)
 80010d6:	f005 f903 	bl	80062e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	240002ec 	.word	0x240002ec

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f006 fbe6 	bl	80078e4 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	24100000 	.word	0x24100000
 8001144:	00000400 	.word	0x00000400
 8001148:	24000198 	.word	0x24000198
 800114c:	24000380 	.word	0x24000380

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001154:	4b32      	ldr	r3, [pc, #200]	; (8001220 <SystemInit+0xd0>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a31      	ldr	r2, [pc, #196]	; (8001220 <SystemInit+0xd0>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <SystemInit+0xd4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 030f 	and.w	r3, r3, #15
 800116c:	2b02      	cmp	r3, #2
 800116e:	d807      	bhi.n	8001180 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <SystemInit+0xd4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 030f 	bic.w	r3, r3, #15
 8001178:	4a2a      	ldr	r2, [pc, #168]	; (8001224 <SystemInit+0xd4>)
 800117a:	f043 0303 	orr.w	r3, r3, #3
 800117e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <SystemInit+0xd8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a28      	ldr	r2, [pc, #160]	; (8001228 <SystemInit+0xd8>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <SystemInit+0xd8>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <SystemInit+0xd8>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4924      	ldr	r1, [pc, #144]	; (8001228 <SystemInit+0xd8>)
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <SystemInit+0xdc>)
 800119a:	4013      	ands	r3, r2
 800119c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <SystemInit+0xd4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <SystemInit+0xd4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 030f 	bic.w	r3, r3, #15
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <SystemInit+0xd4>)
 80011b4:	f043 0303 	orr.w	r3, r3, #3
 80011b8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <SystemInit+0xd8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <SystemInit+0xd8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <SystemInit+0xd8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <SystemInit+0xd8>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <SystemInit+0xe0>)
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <SystemInit+0xd8>)
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <SystemInit+0xe4>)
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <SystemInit+0xd8>)
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <SystemInit+0xe8>)
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <SystemInit+0xd8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <SystemInit+0xd8>)
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <SystemInit+0xe8>)
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <SystemInit+0xd8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <SystemInit+0xd8>)
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <SystemInit+0xe8>)
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <SystemInit+0xd8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <SystemInit+0xd8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <SystemInit+0xd8>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <SystemInit+0xd8>)
 800120a:	2200      	movs	r2, #0
 800120c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <SystemInit+0xec>)
 8001210:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001214:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	52002000 	.word	0x52002000
 8001228:	58024400 	.word	0x58024400
 800122c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001230:	02020200 	.word	0x02020200
 8001234:	01ff0000 	.word	0x01ff0000
 8001238:	01010280 	.word	0x01010280
 800123c:	52004000 	.word	0x52004000

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001278 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001244:	f7ff ff84 	bl	8001150 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124a:	490d      	ldr	r1, [pc, #52]	; (8001280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001260:	4c0a      	ldr	r4, [pc, #40]	; (800128c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800126e:	f006 fb3f 	bl	80078f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff fa11 	bl	8000698 <main>
  bx  lr
 8001276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800127c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001280:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001284:	08008248 	.word	0x08008248
  ldr r2, =_sbss
 8001288:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 800128c:	24000380 	.word	0x24000380

08001290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC_IRQHandler>
	...

08001294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
 800129c:	f001 f960 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012a0:	f002 fc7c 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_Init+0x68>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	4913      	ldr	r1, [pc, #76]	; (8001300 <HAL_Init+0x6c>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_Init+0x68>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_Init+0x6c>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <HAL_Init+0x70>)
 80012d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012d8:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <HAL_Init+0x74>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f814 	bl	800130c <HAL_InitTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e002      	b.n	80012f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ee:	f7ff fd83 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58024400 	.word	0x58024400
 8001300:	080081cc 	.word	0x080081cc
 8001304:	2400000c 	.word	0x2400000c
 8001308:	24000008 	.word	0x24000008

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_InitTick+0x60>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e021      	b.n	8001364 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_InitTick+0x64>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_InitTick+0x60>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f001 f945 	bl	80025c6 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f001 f90f 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x68>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	24000014 	.word	0x24000014
 8001370:	24000008 	.word	0x24000008
 8001374:	24000010 	.word	0x24000010

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	24000014 	.word	0x24000014
 800139c:	24000350 	.word	0x24000350

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	24000350 	.word	0x24000350

080013b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	609a      	str	r2, [r3, #8]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3360      	adds	r3, #96	; 0x60
 8001432:	461a      	mov	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	430b      	orrs	r3, r1
 800144e:	431a      	orrs	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	431a      	orrs	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	611a      	str	r2, [r3, #16]
}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001492:	b480      	push	{r7}
 8001494:	b087      	sub	sp, #28
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3360      	adds	r3, #96	; 0x60
 80014a2:	461a      	mov	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	601a      	str	r2, [r3, #0]
  }
}
 80014bc:	bf00      	nop
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3330      	adds	r3, #48	; 0x30
 80014d8:	461a      	mov	r2, r3
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	4413      	add	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	211f      	movs	r1, #31
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	401a      	ands	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	0e9b      	lsrs	r3, r3, #26
 8001500:	f003 011f 	and.w	r1, r3, #31
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	431a      	orrs	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001514:	bf00      	nop
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3314      	adds	r3, #20
 8001530:	461a      	mov	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	0e5b      	lsrs	r3, r3, #25
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	4413      	add	r3, r2
 800153e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	0d1b      	lsrs	r3, r3, #20
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	2107      	movs	r1, #7
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	401a      	ands	r2, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	0d1b      	lsrs	r3, r3, #20
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	431a      	orrs	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800156a:	bf00      	nop
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0318 	and.w	r3, r3, #24
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800159c:	40d9      	lsrs	r1, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	400b      	ands	r3, r1
 80015a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015a6:	431a      	orrs	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	000fffff 	.word	0x000fffff

080015c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 031f 	and.w	r3, r3, #31
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <LL_ADC_DisableDeepPowerDown+0x20>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6093      	str	r3, [r2, #8]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	5fffffc0 	.word	0x5fffffc0

08001600 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001614:	d101      	bne.n	800161a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <LL_ADC_EnableInternalRegulator+0x24>)
 8001636:	4013      	ands	r3, r2
 8001638:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	6fffffc0 	.word	0x6fffffc0

08001650 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001664:	d101      	bne.n	800166a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <LL_ADC_Enable+0x24>)
 8001686:	4013      	ands	r3, r2
 8001688:	f043 0201 	orr.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	7fffffc0 	.word	0x7fffffc0

080016a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <LL_ADC_IsEnabled+0x18>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <LL_ADC_IsEnabled+0x1a>
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <LL_ADC_REG_StartConversion+0x24>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	f043 0204 	orr.w	r2, r3, #4
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	7fffffc0 	.word	0x7fffffc0

080016f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b04      	cmp	r3, #4
 8001702:	d101      	bne.n	8001708 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b08      	cmp	r3, #8
 8001728:	d101      	bne.n	800172e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e138      	b.n	80019c8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fb61 	bl	8000e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff3f 	bl	8001600 <LL_ADC_IsDeepPowerDownEnabled>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff25 	bl	80015dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff5a 	bl	8001650 <LL_ADC_IsInternalRegulatorEnabled>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d114      	bne.n	80017cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff3e 	bl	8001628 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017ac:	4b88      	ldr	r3, [pc, #544]	; (80019d0 <HAL_ADC_Init+0x294>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	4a88      	ldr	r2, [pc, #544]	; (80019d4 <HAL_ADC_Init+0x298>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	3301      	adds	r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017be:	e002      	b.n	80017c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f9      	bne.n	80017c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff3d 	bl	8001650 <LL_ADC_IsInternalRegulatorEnabled>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e0:	f043 0210 	orr.w	r2, r3, #16
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff77 	bl	80016f0 <LL_ADC_REG_IsConversionOngoing>
 8001802:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	f040 80d2 	bne.w	80019b6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 80ce 	bne.w	80019b6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001822:	f043 0202 	orr.w	r2, r3, #2
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff36 	bl	80016a0 <LL_ADC_IsEnabled>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d110      	bne.n	800185c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800183a:	4867      	ldr	r0, [pc, #412]	; (80019d8 <HAL_ADC_Init+0x29c>)
 800183c:	f7ff ff30 	bl	80016a0 <LL_ADC_IsEnabled>
 8001840:	4604      	mov	r4, r0
 8001842:	4866      	ldr	r0, [pc, #408]	; (80019dc <HAL_ADC_Init+0x2a0>)
 8001844:	f7ff ff2c 	bl	80016a0 <LL_ADC_IsEnabled>
 8001848:	4603      	mov	r3, r0
 800184a:	4323      	orrs	r3, r4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4619      	mov	r1, r3
 8001856:	4862      	ldr	r0, [pc, #392]	; (80019e0 <HAL_ADC_Init+0x2a4>)
 8001858:	f7ff fdae 	bl	80013b8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7d5b      	ldrb	r3, [r3, #21]
 8001860:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001866:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800186c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7f1b      	ldrb	r3, [r3, #28]
 8001872:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7f1b      	ldrb	r3, [r3, #28]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d106      	bne.n	800188e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	3b01      	subs	r3, #1
 8001886:	045b      	lsls	r3, r3, #17
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <HAL_ADC_Init+0x2a8>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	69b9      	ldr	r1, [r7, #24]
 80018ba:	430b      	orrs	r3, r1
 80018bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff14 	bl	80016f0 <LL_ADC_REG_IsConversionOngoing>
 80018c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff21 	bl	8001716 <LL_ADC_INJ_IsConversionOngoing>
 80018d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d14a      	bne.n	8001972 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d147      	bne.n	8001972 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7d1b      	ldrb	r3, [r3, #20]
 80018e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	4b3c      	ldr	r3, [pc, #240]	; (80019e8 <HAL_ADC_Init+0x2ac>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	69b9      	ldr	r1, [r7, #24]
 8001900:	430b      	orrs	r3, r1
 8001902:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800190a:	2b01      	cmp	r3, #1
 800190c:	d11b      	bne.n	8001946 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_ADC_Init+0x2b0>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001922:	3a01      	subs	r2, #1
 8001924:	0411      	lsls	r1, r2, #16
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001936:	430a      	orrs	r2, r1
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	e007      	b.n	8001956 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fc5b 	bl	8002228 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d10c      	bne.n	8001994 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	f023 010f 	bic.w	r1, r3, #15
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
 8001992:	e007      	b.n	80019a4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 020f 	bic.w	r2, r2, #15
 80019a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a8:	f023 0303 	bic.w	r3, r3, #3
 80019ac:	f043 0201 	orr.w	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	655a      	str	r2, [r3, #84]	; 0x54
 80019b4:	e007      	b.n	80019c6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	f043 0210 	orr.w	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3724      	adds	r7, #36	; 0x24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	24000008 	.word	0x24000008
 80019d4:	053e2d63 	.word	0x053e2d63
 80019d8:	40022000 	.word	0x40022000
 80019dc:	40022100 	.word	0x40022100
 80019e0:	40022300 	.word	0x40022300
 80019e4:	fff0c003 	.word	0xfff0c003
 80019e8:	ffffbffc 	.word	0xffffbffc
 80019ec:	fc00f81e 	.word	0xfc00f81e

080019f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019f8:	4856      	ldr	r0, [pc, #344]	; (8001b54 <HAL_ADC_Start+0x164>)
 80019fa:	f7ff fde1 	bl	80015c0 <LL_ADC_GetMultimode>
 80019fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fe73 	bl	80016f0 <LL_ADC_REG_IsConversionOngoing>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f040 809a 	bne.w	8001b46 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_Start+0x30>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e095      	b.n	8001b4c <HAL_ADC_Start+0x15c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 fb81 	bl	8002130 <ADC_Enable>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f040 8081 	bne.w	8001b3c <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a3e:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <HAL_ADC_Start+0x168>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a43      	ldr	r2, [pc, #268]	; (8001b5c <HAL_ADC_Start+0x16c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d002      	beq.n	8001a5a <HAL_ADC_Start+0x6a>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	e000      	b.n	8001a5c <HAL_ADC_Start+0x6c>
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_ADC_Start+0x170>)
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d002      	beq.n	8001a6a <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a82:	d106      	bne.n	8001a92 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	f023 0206 	bic.w	r2, r3, #6
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a90:	e002      	b.n	8001a98 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	221c      	movs	r2, #28
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a2b      	ldr	r2, [pc, #172]	; (8001b5c <HAL_ADC_Start+0x16c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d002      	beq.n	8001ab8 <HAL_ADC_Start+0xc8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	e000      	b.n	8001aba <HAL_ADC_Start+0xca>
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_ADC_Start+0x170>)
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d008      	beq.n	8001ad4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d002      	beq.n	8001ad4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b09      	cmp	r3, #9
 8001ad2:	d114      	bne.n	8001afe <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fde6 	bl	80016c8 <LL_ADC_REG_StartConversion>
 8001afc:	e025      	b.n	8001b4a <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <HAL_ADC_Start+0x16c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d002      	beq.n	8001b1a <HAL_ADC_Start+0x12a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	e000      	b.n	8001b1c <HAL_ADC_Start+0x12c>
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_ADC_Start+0x170>)
 8001b1c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00f      	beq.n	8001b4a <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
 8001b3a:	e006      	b.n	8001b4a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b44:	e001      	b.n	8001b4a <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b46:	2302      	movs	r3, #2
 8001b48:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40022300 	.word	0x40022300
 8001b58:	fffff0fe 	.word	0xfffff0fe
 8001b5c:	40022100 	.word	0x40022100
 8001b60:	40022000 	.word	0x40022000

08001b64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b0a1      	sub	sp, #132	; 0x84
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a9a      	ldr	r2, [pc, #616]	; (8001de8 <HAL_ADC_ConfigChannel+0x284>)
 8001b7e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x2a>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e2bc      	b.n	8002108 <HAL_ADC_ConfigChannel+0x5a4>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fda8 	bl	80016f0 <LL_ADC_REG_IsConversionOngoing>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 82a1 	bne.w	80020ea <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d108      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x62>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0e9b      	lsrs	r3, r3, #26
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	e016      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x90>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bd6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001bde:	2320      	movs	r3, #32
 8001be0:	e003      	b.n	8001bea <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	2201      	movs	r2, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	69d1      	ldr	r1, [r2, #28]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6859      	ldr	r1, [r3, #4]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f7ff fc5a 	bl	80014c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fd69 	bl	80016f0 <LL_ADC_REG_IsConversionOngoing>
 8001c1e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fd76 	bl	8001716 <LL_ADC_INJ_IsConversionOngoing>
 8001c2a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 80a0 	bne.w	8001d74 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 809c 	bne.w	8001d74 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6819      	ldr	r1, [r3, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f7ff fc69 	bl	8001520 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x110>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	e00a      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x126>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d027      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6919      	ldr	r1, [r3, #16]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ca2:	f7ff fbbd 	bl	8001420 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6919      	ldr	r1, [r3, #16]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	7e5b      	ldrb	r3, [r3, #25]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x158>
 8001cb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001cba:	e000      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x15a>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f7ff fbe7 	bl	8001492 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6919      	ldr	r1, [r3, #16]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	7e1b      	ldrb	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d102      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x176>
 8001cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cd8:	e000      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x178>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f7ff fbbf 	bl	8001460 <LL_ADC_SetDataRightShift>
 8001ce2:	e047      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	069b      	lsls	r3, r3, #26
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d06:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	069b      	lsls	r3, r3, #26
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d107      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d2a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	069b      	lsls	r3, r3, #26
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d107      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d4e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	069b      	lsls	r3, r3, #26
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d107      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d72:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fc91 	bl	80016a0 <LL_ADC_IsEnabled>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 81bb 	bne.w	80020fc <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f7ff fbf0 	bl	8001578 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <HAL_ADC_ConfigChannel+0x284>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	f040 8130 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10b      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x268>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0e9b      	lsrs	r3, r3, #26
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	bf94      	ite	ls
 8001dc4:	2301      	movls	r3, #1
 8001dc6:	2300      	movhi	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e01b      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x2a0>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d103      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001de4:	2320      	movs	r3, #32
 8001de6:	e005      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x290>
 8001de8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	2b09      	cmp	r3, #9
 8001dfc:	bf94      	ite	ls
 8001dfe:	2301      	movls	r3, #1
 8001e00:	2300      	movhi	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d079      	beq.n	8001efc <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x2c0>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	069b      	lsls	r3, r3, #26
 8001e1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e22:	e015      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x2ec>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e34:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	e003      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	069b      	lsls	r3, r3, #26
 8001e4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x30c>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	3301      	adds	r3, #1
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	e017      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x33c>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e80:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	e003      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	ea42 0103 	orr.w	r1, r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10a      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x362>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	051b      	lsls	r3, r3, #20
 8001ec4:	e018      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x394>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001ede:	2320      	movs	r3, #32
 8001ee0:	e003      	b.n	8001eea <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	e07e      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x3b4>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	3301      	adds	r3, #1
 8001f10:	069b      	lsls	r3, r3, #26
 8001f12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f16:	e015      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x3e0>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	069b      	lsls	r3, r3, #26
 8001f40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x400>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0e9b      	lsrs	r3, r3, #26
 8001f56:	3301      	adds	r3, #1
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	e017      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x430>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	61bb      	str	r3, [r7, #24]
  return result;
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	e003      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	ea42 0103 	orr.w	r1, r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10d      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x45c>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	3301      	adds	r3, #1
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3b1e      	subs	r3, #30
 8001fb8:	051b      	lsls	r3, r3, #20
 8001fba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	e01b      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x494>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	60fb      	str	r3, [r7, #12]
  return result;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	e003      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f003 021f 	and.w	r2, r3, #31
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b1e      	subs	r3, #30
 8001ff2:	051b      	lsls	r3, r3, #20
 8001ff4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	6892      	ldr	r2, [r2, #8]
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7ff fa8e 	bl	8001520 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	da77      	bge.n	80020fc <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800200c:	4840      	ldr	r0, [pc, #256]	; (8002110 <HAL_ADC_ConfigChannel+0x5ac>)
 800200e:	f7ff f9f9 	bl	8001404 <LL_ADC_GetCommonPathInternalCh>
 8002012:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002014:	483f      	ldr	r0, [pc, #252]	; (8002114 <HAL_ADC_ConfigChannel+0x5b0>)
 8002016:	f7ff fb43 	bl	80016a0 <LL_ADC_IsEnabled>
 800201a:	4604      	mov	r4, r0
 800201c:	483e      	ldr	r0, [pc, #248]	; (8002118 <HAL_ADC_ConfigChannel+0x5b4>)
 800201e:	f7ff fb3f 	bl	80016a0 <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	4323      	orrs	r3, r4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d155      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a3b      	ldr	r2, [pc, #236]	; (800211c <HAL_ADC_ConfigChannel+0x5b8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d122      	bne.n	800207a <HAL_ADC_ConfigChannel+0x516>
 8002034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11d      	bne.n	800207a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a35      	ldr	r2, [pc, #212]	; (8002118 <HAL_ADC_ConfigChannel+0x5b4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d159      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800204e:	4619      	mov	r1, r3
 8002050:	482f      	ldr	r0, [pc, #188]	; (8002110 <HAL_ADC_ConfigChannel+0x5ac>)
 8002052:	f7ff f9c4 	bl	80013de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002056:	4b32      	ldr	r3, [pc, #200]	; (8002120 <HAL_ADC_ConfigChannel+0x5bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	099b      	lsrs	r3, r3, #6
 800205c:	4a31      	ldr	r2, [pc, #196]	; (8002124 <HAL_ADC_ConfigChannel+0x5c0>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	099b      	lsrs	r3, r3, #6
 8002064:	3301      	adds	r3, #1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800206a:	e002      	b.n	8002072 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3b01      	subs	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f9      	bne.n	800206c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002078:	e040      	b.n	80020fc <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a2a      	ldr	r2, [pc, #168]	; (8002128 <HAL_ADC_ConfigChannel+0x5c4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d111      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x544>
 8002084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a21      	ldr	r2, [pc, #132]	; (8002118 <HAL_ADC_ConfigChannel+0x5b4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d131      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209e:	4619      	mov	r1, r3
 80020a0:	481b      	ldr	r0, [pc, #108]	; (8002110 <HAL_ADC_ConfigChannel+0x5ac>)
 80020a2:	f7ff f99c 	bl	80013de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020a6:	e029      	b.n	80020fc <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1f      	ldr	r2, [pc, #124]	; (800212c <HAL_ADC_ConfigChannel+0x5c8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d124      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x598>
 80020b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11f      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a15      	ldr	r2, [pc, #84]	; (8002118 <HAL_ADC_ConfigChannel+0x5b4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d11a      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80020c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020cc:	4619      	mov	r1, r3
 80020ce:	4810      	ldr	r0, [pc, #64]	; (8002110 <HAL_ADC_ConfigChannel+0x5ac>)
 80020d0:	f7ff f985 	bl	80013de <LL_ADC_SetCommonPathInternalCh>
 80020d4:	e012      	b.n	80020fc <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f043 0220 	orr.w	r2, r3, #32
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80020e8:	e008      	b.n	80020fc <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002104:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002108:	4618      	mov	r0, r3
 800210a:	3784      	adds	r7, #132	; 0x84
 800210c:	46bd      	mov	sp, r7
 800210e:	bd90      	pop	{r4, r7, pc}
 8002110:	40022300 	.word	0x40022300
 8002114:	40022000 	.word	0x40022000
 8002118:	40022100 	.word	0x40022100
 800211c:	cb840000 	.word	0xcb840000
 8002120:	24000008 	.word	0x24000008
 8002124:	053e2d63 	.word	0x053e2d63
 8002128:	bac04000 	.word	0xbac04000
 800212c:	cfb80000 	.word	0xcfb80000

08002130 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff faaf 	bl	80016a0 <LL_ADC_IsEnabled>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d161      	bne.n	800220c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	4b32      	ldr	r3, [pc, #200]	; (8002218 <ADC_Enable+0xe8>)
 8002150:	4013      	ands	r3, r2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00d      	beq.n	8002172 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f043 0210 	orr.w	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e04d      	b.n	800220e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fa7e 	bl	8001678 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800217c:	f7ff f910 	bl	80013a0 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002182:	4826      	ldr	r0, [pc, #152]	; (800221c <ADC_Enable+0xec>)
 8002184:	f7ff fa1c 	bl	80015c0 <LL_ADC_GetMultimode>
 8002188:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a24      	ldr	r2, [pc, #144]	; (8002220 <ADC_Enable+0xf0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d002      	beq.n	800219a <ADC_Enable+0x6a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	e000      	b.n	800219c <ADC_Enable+0x6c>
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <ADC_Enable+0xf4>)
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d02c      	beq.n	80021fe <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d130      	bne.n	800220c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021aa:	e028      	b.n	80021fe <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fa75 	bl	80016a0 <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fa59 	bl	8001678 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021c6:	f7ff f8eb 	bl	80013a0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d914      	bls.n	80021fe <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d00d      	beq.n	80021fe <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f043 0210 	orr.w	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e007      	b.n	800220e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d1cf      	bne.n	80021ac <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	8000003f 	.word	0x8000003f
 800221c:	40022300 	.word	0x40022300
 8002220:	40022100 	.word	0x40022100
 8002224:	40022000 	.word	0x40022000

08002228 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002230:	4b5f      	ldr	r3, [pc, #380]	; (80023b0 <ADC_ConfigureBoostMode+0x188>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01c      	beq.n	8002276 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800223c:	f001 fe28 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8002240:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800224a:	d010      	beq.n	800226e <ADC_ConfigureBoostMode+0x46>
 800224c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002250:	d871      	bhi.n	8002336 <ADC_ConfigureBoostMode+0x10e>
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d002      	beq.n	800225e <ADC_ConfigureBoostMode+0x36>
 8002258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800225c:	d16b      	bne.n	8002336 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	60fb      	str	r3, [r7, #12]
        break;
 800226c:	e066      	b.n	800233c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
        break;
 8002274:	e062      	b.n	800233c <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002276:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800227a:	f002 fd71 	bl	8004d60 <HAL_RCCEx_GetPeriphCLKFreq>
 800227e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002288:	d051      	beq.n	800232e <ADC_ConfigureBoostMode+0x106>
 800228a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800228e:	d854      	bhi.n	800233a <ADC_ConfigureBoostMode+0x112>
 8002290:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002294:	d047      	beq.n	8002326 <ADC_ConfigureBoostMode+0xfe>
 8002296:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800229a:	d84e      	bhi.n	800233a <ADC_ConfigureBoostMode+0x112>
 800229c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80022a0:	d03d      	beq.n	800231e <ADC_ConfigureBoostMode+0xf6>
 80022a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80022a6:	d848      	bhi.n	800233a <ADC_ConfigureBoostMode+0x112>
 80022a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ac:	d033      	beq.n	8002316 <ADC_ConfigureBoostMode+0xee>
 80022ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022b2:	d842      	bhi.n	800233a <ADC_ConfigureBoostMode+0x112>
 80022b4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80022b8:	d029      	beq.n	800230e <ADC_ConfigureBoostMode+0xe6>
 80022ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80022be:	d83c      	bhi.n	800233a <ADC_ConfigureBoostMode+0x112>
 80022c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80022c4:	d01a      	beq.n	80022fc <ADC_ConfigureBoostMode+0xd4>
 80022c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80022ca:	d836      	bhi.n	800233a <ADC_ConfigureBoostMode+0x112>
 80022cc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80022d0:	d014      	beq.n	80022fc <ADC_ConfigureBoostMode+0xd4>
 80022d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80022d6:	d830      	bhi.n	800233a <ADC_ConfigureBoostMode+0x112>
 80022d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022dc:	d00e      	beq.n	80022fc <ADC_ConfigureBoostMode+0xd4>
 80022de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022e2:	d82a      	bhi.n	800233a <ADC_ConfigureBoostMode+0x112>
 80022e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80022e8:	d008      	beq.n	80022fc <ADC_ConfigureBoostMode+0xd4>
 80022ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80022ee:	d824      	bhi.n	800233a <ADC_ConfigureBoostMode+0x112>
 80022f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022f4:	d002      	beq.n	80022fc <ADC_ConfigureBoostMode+0xd4>
 80022f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022fa:	d11e      	bne.n	800233a <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0c9b      	lsrs	r3, r3, #18
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	60fb      	str	r3, [r7, #12]
        break;
 800230c:	e016      	b.n	800233c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	60fb      	str	r3, [r7, #12]
        break;
 8002314:	e012      	b.n	800233c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	60fb      	str	r3, [r7, #12]
        break;
 800231c:	e00e      	b.n	800233c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	60fb      	str	r3, [r7, #12]
        break;
 8002324:	e00a      	b.n	800233c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	09db      	lsrs	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]
        break;
 800232c:	e006      	b.n	800233c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	60fb      	str	r3, [r7, #12]
        break;
 8002334:	e002      	b.n	800233c <ADC_ConfigureBoostMode+0x114>
        break;
 8002336:	bf00      	nop
 8002338:	e000      	b.n	800233c <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 800233a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	085b      	lsrs	r3, r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a1b      	ldr	r2, [pc, #108]	; (80023b4 <ADC_ConfigureBoostMode+0x18c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d808      	bhi.n	800235c <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002358:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800235a:	e025      	b.n	80023a8 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <ADC_ConfigureBoostMode+0x190>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d80a      	bhi.n	800237a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002376:	609a      	str	r2, [r3, #8]
}
 8002378:	e016      	b.n	80023a8 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <ADC_ConfigureBoostMode+0x194>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d80a      	bhi.n	8002398 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002394:	609a      	str	r2, [r3, #8]
}
 8002396:	e007      	b.n	80023a8 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80023a6:	609a      	str	r2, [r3, #8]
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40022300 	.word	0x40022300
 80023b4:	005f5e10 	.word	0x005f5e10
 80023b8:	00bebc20 	.word	0x00bebc20
 80023bc:	017d7840 	.word	0x017d7840

080023c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <__NVIC_SetPriorityGrouping+0x40>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ee:	4a04      	ldr	r2, [pc, #16]	; (8002400 <__NVIC_SetPriorityGrouping+0x40>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	60d3      	str	r3, [r2, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00
 8002404:	05fa0000 	.word	0x05fa0000

08002408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800242e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002432:	2b00      	cmp	r3, #0
 8002434:	db0b      	blt.n	800244e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <__NVIC_EnableIRQ+0x38>)
 800243e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	; (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff29 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff40 	bl	8002408 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff90 	bl	80024b4 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5f 	bl	8002460 <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff33 	bl	8002424 <__NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ffa4 	bl	800251c <SysTick_Config>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80025f4:	2304      	movs	r3, #4
 80025f6:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025f8:	4b52      	ldr	r3, [pc, #328]	; (8002744 <HAL_FLASH_Program+0x164>)
 80025fa:	7d1b      	ldrb	r3, [r3, #20]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_FLASH_Program+0x24>
 8002600:	2302      	movs	r3, #2
 8002602:	e09b      	b.n	800273c <HAL_FLASH_Program+0x15c>
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <HAL_FLASH_Program+0x164>)
 8002606:	2201      	movs	r2, #1
 8002608:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002610:	d303      	bcc.n	800261a <HAL_FLASH_Program+0x3a>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8002618:	d307      	bcc.n	800262a <HAL_FLASH_Program+0x4a>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <HAL_FLASH_Program+0x168>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d906      	bls.n	8002630 <HAL_FLASH_Program+0x50>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4a49      	ldr	r2, [pc, #292]	; (800274c <HAL_FLASH_Program+0x16c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d802      	bhi.n	8002630 <HAL_FLASH_Program+0x50>
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800262a:	2301      	movs	r3, #1
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	e00c      	b.n	800264a <HAL_FLASH_Program+0x6a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8002636:	d306      	bcc.n	8002646 <HAL_FLASH_Program+0x66>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800263e:	d202      	bcs.n	8002646 <HAL_FLASH_Program+0x66>
  {
    bank = FLASH_BANK_2;
 8002640:	2302      	movs	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	e001      	b.n	800264a <HAL_FLASH_Program+0x6a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e078      	b.n	800273c <HAL_FLASH_Program+0x15c>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_FLASH_Program+0x164>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8002650:	69b9      	ldr	r1, [r7, #24]
 8002652:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002656:	f000 f8e1 	bl	800281c <FLASH_WaitForLastOperation>
 800265a:	4603      	mov	r3, r0
 800265c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8002660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002664:	2b00      	cmp	r3, #0
 8002666:	d164      	bne.n	8002732 <HAL_FLASH_Program+0x152>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d110      	bne.n	8002690 <HAL_FLASH_Program+0xb0>
    {
#if defined (FLASH_OPTCR_PG_OTP)
      if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d106      	bne.n	8002682 <HAL_FLASH_Program+0xa2>
      {
        /* Set OTP_PG bit */
        SET_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <HAL_FLASH_Program+0x170>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4a35      	ldr	r2, [pc, #212]	; (8002750 <HAL_FLASH_Program+0x170>)
 800267a:	f043 0320 	orr.w	r3, r3, #32
 800267e:	6193      	str	r3, [r2, #24]
 8002680:	e00e      	b.n	80026a0 <HAL_FLASH_Program+0xc0>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8002682:	4b33      	ldr	r3, [pc, #204]	; (8002750 <HAL_FLASH_Program+0x170>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4a32      	ldr	r2, [pc, #200]	; (8002750 <HAL_FLASH_Program+0x170>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	60d3      	str	r3, [r2, #12]
 800268e:	e007      	b.n	80026a0 <HAL_FLASH_Program+0xc0>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <HAL_FLASH_Program+0x170>)
 8002692:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002696:	4a2e      	ldr	r2, [pc, #184]	; (8002750 <HAL_FLASH_Program+0x170>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 80026a0:	f3bf 8f6f 	isb	sy
}
 80026a4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80026a6:	f3bf 8f4f 	dsb	sy
}
 80026aa:	bf00      	nop

    __ISB();
    __DSB();

#if defined (FLASH_OPTCR_PG_OTP)
    if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d105      	bne.n	80026be <HAL_FLASH_Program+0xde>
    {
      /* Program an OTP word (16 bits) */
      *(__IO uint16_t *)FlashAddress = *(__IO uint16_t*)DataAddress;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	8812      	ldrh	r2, [r2, #0]
 80026b8:	b292      	uxth	r2, r2
 80026ba:	801a      	strh	r2, [r3, #0]
 80026bc:	e00f      	b.n	80026de <HAL_FLASH_Program+0xfe>
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	3304      	adds	r3, #4
 80026ca:	623b      	str	r3, [r7, #32]
        src_addr++;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	3304      	adds	r3, #4
 80026d0:	61fb      	str	r3, [r7, #28]
        row_index--;
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ef      	bne.n	80026be <HAL_FLASH_Program+0xde>
  __ASM volatile ("isb 0xF":::"memory");
 80026de:	f3bf 8f6f 	isb	sy
}
 80026e2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80026e4:	f3bf 8f4f 	dsb	sy
}
 80026e8:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80026ea:	69b9      	ldr	r1, [r7, #24]
 80026ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026f0:	f000 f894 	bl	800281c <FLASH_WaitForLastOperation>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

#if defined (DUAL_BANK)
#if defined (FLASH_OPTCR_PG_OTP)
    if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d106      	bne.n	800270e <HAL_FLASH_Program+0x12e>
    {
      /* If the program operation is completed, disable the OTP_PG */
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 8002700:	4b13      	ldr	r3, [pc, #76]	; (8002750 <HAL_FLASH_Program+0x170>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <HAL_FLASH_Program+0x170>)
 8002706:	f023 0320 	bic.w	r3, r3, #32
 800270a:	6193      	str	r3, [r2, #24]
 800270c:	e011      	b.n	8002732 <HAL_FLASH_Program+0x152>
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_FLASH_Program+0x142>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_FLASH_Program+0x170>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <HAL_FLASH_Program+0x170>)
 800271a:	f023 0302 	bic.w	r3, r3, #2
 800271e:	60d3      	str	r3, [r2, #12]
 8002720:	e007      	b.n	8002732 <HAL_FLASH_Program+0x152>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_FLASH_Program+0x170>)
 8002724:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002728:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_FLASH_Program+0x170>)
 800272a:	f023 0302 	bic.w	r3, r3, #2
 800272e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <HAL_FLASH_Program+0x164>)
 8002734:	2200      	movs	r2, #0
 8002736:	751a      	strb	r2, [r3, #20]

  return status;
 8002738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800273c:	4618      	mov	r0, r3
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	24000354 	.word	0x24000354
 8002748:	08ffefff 	.word	0x08ffefff
 800274c:	08fff3ff 	.word	0x08fff3ff
 8002750:	52002000 	.word	0x52002000

08002754 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_FLASH_Unlock+0x68>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00d      	beq.n	8002780 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_FLASH_Unlock+0x68>)
 8002766:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <HAL_FLASH_Unlock+0x6c>)
 8002768:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_FLASH_Unlock+0x68>)
 800276c:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <HAL_FLASH_Unlock+0x70>)
 800276e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_FLASH_Unlock+0x68>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e018      	b.n	80027b2 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_FLASH_Unlock+0x68>)
 8002782:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d010      	beq.n	80027b0 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_FLASH_Unlock+0x68>)
 8002790:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_FLASH_Unlock+0x6c>)
 8002792:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_FLASH_Unlock+0x68>)
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_FLASH_Unlock+0x70>)
 800279a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_FLASH_Unlock+0x68>)
 80027a0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	52002000 	.word	0x52002000
 80027c0:	45670123 	.word	0x45670123
 80027c4:	cdef89ab 	.word	0xcdef89ab

080027c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_FLASH_Lock+0x50>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a11      	ldr	r2, [pc, #68]	; (8002818 <HAL_FLASH_Lock+0x50>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_FLASH_Lock+0x50>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e011      	b.n	800280c <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_FLASH_Lock+0x50>)
 80027ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <HAL_FLASH_Lock+0x50>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_FLASH_Lock+0x50>)
 80027fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	52002000 	.word	0x52002000

0800281c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8002826:	2304      	movs	r3, #4
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800282e:	f7fe fdb7 	bl	80013a0 <HAL_GetTick>
 8002832:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d113      	bne.n	8002862 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <FLASH_WaitForLastOperation+0x124>)
 800283c:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800283e:	e010      	b.n	8002862 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002846:	d00c      	beq.n	8002862 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002848:	f7fe fdaa 	bl	80013a0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	429a      	cmp	r2, r3
 8002856:	d302      	bcc.n	800285e <FLASH_WaitForLastOperation+0x42>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e06a      	b.n	8002938 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4b37      	ldr	r3, [pc, #220]	; (8002944 <FLASH_WaitForLastOperation+0x128>)
 8002866:	4013      	ands	r3, r2
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	429a      	cmp	r2, r3
 800286c:	d10a      	bne.n	8002884 <FLASH_WaitForLastOperation+0x68>
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <FLASH_WaitForLastOperation+0x12c>)
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	4013      	ands	r3, r2
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e00c      	b.n	800289e <FLASH_WaitForLastOperation+0x82>
 8002884:	4b30      	ldr	r3, [pc, #192]	; (8002948 <FLASH_WaitForLastOperation+0x12c>)
 8002886:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800288a:	43da      	mvns	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4013      	ands	r3, r2
 8002890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ce      	bne.n	8002840 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <FLASH_WaitForLastOperation+0x12c>)
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <FLASH_WaitForLastOperation+0x130>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	e007      	b.n	80028c4 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <FLASH_WaitForLastOperation+0x12c>)
 80028b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <FLASH_WaitForLastOperation+0x130>)
 80028bc:	4013      	ands	r3, r2
 80028be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028c2:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d017      	beq.n	80028fe <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <FLASH_WaitForLastOperation+0x134>)
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	4a1e      	ldr	r2, [pc, #120]	; (8002950 <FLASH_WaitForLastOperation+0x134>)
 80028d8:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <FLASH_WaitForLastOperation+0x128>)
 80028de:	4013      	ands	r3, r2
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d103      	bne.n	80028ee <FLASH_WaitForLastOperation+0xd2>
 80028e6:	4a18      	ldr	r2, [pc, #96]	; (8002948 <FLASH_WaitForLastOperation+0x12c>)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	6153      	str	r3, [r2, #20]
 80028ec:	e005      	b.n	80028fa <FLASH_WaitForLastOperation+0xde>
 80028ee:	4a16      	ldr	r2, [pc, #88]	; (8002948 <FLASH_WaitForLastOperation+0x12c>)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028f6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e01c      	b.n	8002938 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10b      	bne.n	800291c <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <FLASH_WaitForLastOperation+0x12c>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002910:	d111      	bne.n	8002936 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <FLASH_WaitForLastOperation+0x12c>)
 8002914:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002918:	615a      	str	r2, [r3, #20]
 800291a:	e00c      	b.n	8002936 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <FLASH_WaitForLastOperation+0x12c>)
 800291e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292a:	d104      	bne.n	8002936 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <FLASH_WaitForLastOperation+0x12c>)
 800292e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002932:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	80000004 	.word	0x80000004
 8002944:	1faf000f 	.word	0x1faf000f
 8002948:	52002000 	.word	0x52002000
 800294c:	17ae0000 	.word	0x17ae0000
 8002950:	24000354 	.word	0x24000354

08002954 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002962:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_FLASHEx_Erase+0x188>)
 8002964:	7d1b      	ldrb	r3, [r3, #20]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_FLASHEx_Erase+0x1a>
 800296a:	2302      	movs	r3, #2
 800296c:	e0b2      	b.n	8002ad4 <HAL_FLASHEx_Erase+0x180>
 800296e:	4b5b      	ldr	r3, [pc, #364]	; (8002adc <HAL_FLASHEx_Erase+0x188>)
 8002970:	2201      	movs	r2, #1
 8002972:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002974:	4b59      	ldr	r3, [pc, #356]	; (8002adc <HAL_FLASHEx_Erase+0x188>)
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8002986:	2101      	movs	r1, #1
 8002988:	f24c 3050 	movw	r0, #50000	; 0xc350
 800298c:	f7ff ff46 	bl	800281c <FLASH_WaitForLastOperation>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80029a6:	2102      	movs	r1, #2
 80029a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029ac:	f7ff ff36 	bl	800281c <FLASH_WaitForLastOperation>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 8085 	bne.w	8002acc <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d136      	bne.n	8002a38 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f000 f887 	bl	8002ae8 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00f      	beq.n	8002a06 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80029e6:	2101      	movs	r1, #1
 80029e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029ec:	f7ff ff16 	bl	800281c <FLASH_WaitForLastOperation>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_FLASHEx_Erase+0x18c>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4a38      	ldr	r2, [pc, #224]	; (8002ae0 <HAL_FLASHEx_Erase+0x18c>)
 8002a00:	f023 0308 	bic.w	r3, r3, #8
 8002a04:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d05c      	beq.n	8002acc <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002a12:	2102      	movs	r1, #2
 8002a14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a18:	f7ff ff00 	bl	800281c <FLASH_WaitForLastOperation>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8002a26:	4b2e      	ldr	r3, [pc, #184]	; (8002ae0 <HAL_FLASHEx_Erase+0x18c>)
 8002a28:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002a2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <HAL_FLASHEx_Erase+0x18c>)
 8002a2e:	f023 0308 	bic.w	r3, r3, #8
 8002a32:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8002a36:	e049      	b.n	8002acc <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	e039      	b.n	8002abc <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	461a      	mov	r2, r3
 8002a52:	68b8      	ldr	r0, [r7, #8]
 8002a54:	f000 f87a 	bl	8002b4c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00c      	beq.n	8002a7e <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8002a64:	2101      	movs	r1, #1
 8002a66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a6a:	f7ff fed7 	bl	800281c <FLASH_WaitForLastOperation>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_FLASHEx_Erase+0x18c>)
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	491a      	ldr	r1, [pc, #104]	; (8002ae0 <HAL_FLASHEx_Erase+0x18c>)
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_FLASHEx_Erase+0x190>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00e      	beq.n	8002aa8 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a90:	f7ff fec4 	bl	800281c <FLASH_WaitForLastOperation>
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_FLASHEx_Erase+0x18c>)
 8002a9a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002a9e:	4910      	ldr	r1, [pc, #64]	; (8002ae0 <HAL_FLASHEx_Erase+0x18c>)
 8002aa0:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_FLASHEx_Erase+0x190>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	601a      	str	r2, [r3, #0]
          break;
 8002ab4:	e00a      	b.n	8002acc <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d3bd      	bcc.n	8002a48 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_FLASHEx_Erase+0x188>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	751a      	strb	r2, [r3, #20]

  return status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	24000354 	.word	0x24000354
 8002ae0:	52002000 	.word	0x52002000
 8002ae4:	ffffe03b 	.word	0xffffe03b

08002ae8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d106      	bne.n	8002b0a <FLASH_MassErase+0x22>
    FLASH->CR1 |= VoltageRange;
    FLASH->CR2 |= VoltageRange;
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <FLASH_MassErase+0x60>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <FLASH_MassErase+0x60>)
 8002b02:	f043 0310 	orr.w	r3, r3, #16
 8002b06:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8002b08:	e017      	b.n	8002b3a <FLASH_MassErase+0x52>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <FLASH_MassErase+0x38>
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <FLASH_MassErase+0x60>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <FLASH_MassErase+0x60>)
 8002b1a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002b1e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <FLASH_MassErase+0x52>
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8002b2a:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <FLASH_MassErase+0x60>)
 8002b2c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002b30:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <FLASH_MassErase+0x60>)
 8002b32:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002b36:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	52002000 	.word	0x52002000

08002b4c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00e      	beq.n	8002b80 <FLASH_Erase_Sector+0x34>
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#else
    /* Reset Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_SNB);
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <FLASH_Erase_Sector+0x70>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <FLASH_Erase_Sector+0x70>)
 8002b68:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8002b6c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <FLASH_Erase_Sector+0x70>)
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	019b      	lsls	r3, r3, #6
 8002b76:	4313      	orrs	r3, r2
 8002b78:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <FLASH_Erase_Sector+0x70>)
 8002b7a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8002b7e:	60d3      	str	r3, [r2, #12]
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <FLASH_Erase_Sector+0x64>
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#else
    /* Reset Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_SNB);
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <FLASH_Erase_Sector+0x70>)
 8002b8c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <FLASH_Erase_Sector+0x70>)
 8002b92:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8002b96:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <FLASH_Erase_Sector+0x70>)
 8002b9c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	019b      	lsls	r3, r3, #6
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <FLASH_Erase_Sector+0x70>)
 8002ba8:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8002bac:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	52002000 	.word	0x52002000

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002bce:	4b89      	ldr	r3, [pc, #548]	; (8002df4 <HAL_GPIO_Init+0x234>)
 8002bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bd2:	e194      	b.n	8002efe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8186 	beq.w	8002ef8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d005      	beq.n	8002c04 <HAL_GPIO_Init+0x44>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d130      	bne.n	8002c66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	f003 0201 	and.w	r2, r3, #1
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d017      	beq.n	8002ca2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d123      	bne.n	8002cf6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	08da      	lsrs	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3208      	adds	r2, #8
 8002cf0:	69b9      	ldr	r1, [r7, #24]
 8002cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2203      	movs	r2, #3
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0203 	and.w	r2, r3, #3
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80e0 	beq.w	8002ef8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d38:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <HAL_GPIO_Init+0x238>)
 8002d3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002d3e:	4a2e      	ldr	r2, [pc, #184]	; (8002df8 <HAL_GPIO_Init+0x238>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002d48:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_GPIO_Init+0x238>)
 8002d4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d56:	4a29      	ldr	r2, [pc, #164]	; (8002dfc <HAL_GPIO_Init+0x23c>)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <HAL_GPIO_Init+0x240>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d052      	beq.n	8002e28 <HAL_GPIO_Init+0x268>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1f      	ldr	r2, [pc, #124]	; (8002e04 <HAL_GPIO_Init+0x244>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d031      	beq.n	8002dee <HAL_GPIO_Init+0x22e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <HAL_GPIO_Init+0x248>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d02b      	beq.n	8002dea <HAL_GPIO_Init+0x22a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_GPIO_Init+0x24c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d025      	beq.n	8002de6 <HAL_GPIO_Init+0x226>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_GPIO_Init+0x250>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01f      	beq.n	8002de2 <HAL_GPIO_Init+0x222>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a1b      	ldr	r2, [pc, #108]	; (8002e14 <HAL_GPIO_Init+0x254>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d019      	beq.n	8002dde <HAL_GPIO_Init+0x21e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <HAL_GPIO_Init+0x258>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0x21a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a19      	ldr	r2, [pc, #100]	; (8002e1c <HAL_GPIO_Init+0x25c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00d      	beq.n	8002dd6 <HAL_GPIO_Init+0x216>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <HAL_GPIO_Init+0x260>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_Init+0x212>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <HAL_GPIO_Init+0x264>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_GPIO_Init+0x20e>
 8002dca:	2309      	movs	r3, #9
 8002dcc:	e02d      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dce:	230a      	movs	r3, #10
 8002dd0:	e02b      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	e029      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dd6:	2307      	movs	r3, #7
 8002dd8:	e027      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dda:	2306      	movs	r3, #6
 8002ddc:	e025      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dde:	2305      	movs	r3, #5
 8002de0:	e023      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002de2:	2304      	movs	r3, #4
 8002de4:	e021      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002de6:	2303      	movs	r3, #3
 8002de8:	e01f      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e01d      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e01b      	b.n	8002e2a <HAL_GPIO_Init+0x26a>
 8002df2:	bf00      	nop
 8002df4:	58000080 	.word	0x58000080
 8002df8:	58024400 	.word	0x58024400
 8002dfc:	58000400 	.word	0x58000400
 8002e00:	58020000 	.word	0x58020000
 8002e04:	58020400 	.word	0x58020400
 8002e08:	58020800 	.word	0x58020800
 8002e0c:	58020c00 	.word	0x58020c00
 8002e10:	58021000 	.word	0x58021000
 8002e14:	58021400 	.word	0x58021400
 8002e18:	58021800 	.word	0x58021800
 8002e1c:	58021c00 	.word	0x58021c00
 8002e20:	58022000 	.word	0x58022000
 8002e24:	58022400 	.word	0x58022400
 8002e28:	2300      	movs	r3, #0
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	f002 0203 	and.w	r2, r2, #3
 8002e30:	0092      	lsls	r2, r2, #2
 8002e32:	4093      	lsls	r3, r2
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e3a:	4938      	ldr	r1, [pc, #224]	; (8002f1c <HAL_GPIO_Init+0x35c>)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	3302      	adds	r3, #2
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f47f ae63 	bne.w	8002bd4 <HAL_GPIO_Init+0x14>
  }
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	3724      	adds	r7, #36	; 0x24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	58000400 	.word	0x58000400

08002f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f30:	787b      	ldrb	r3, [r7, #1]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f3c:	e003      	b.n	8002f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	041a      	lsls	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	619a      	str	r2, [r3, #24]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	6013      	str	r3, [r2, #0]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	58024800 	.word	0x58024800

08002f74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f7c:	4b29      	ldr	r3, [pc, #164]	; (8003024 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d00a      	beq.n	8002f9e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f88:	4b26      	ldr	r3, [pc, #152]	; (8003024 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e040      	b.n	800301c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e03e      	b.n	800301c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f9e:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_PWREx_ConfigSupply+0xb0>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002fa6:	491f      	ldr	r1, [pc, #124]	; (8003024 <HAL_PWREx_ConfigSupply+0xb0>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fae:	f7fe f9f7 	bl	80013a0 <HAL_GetTick>
 8002fb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fb4:	e009      	b.n	8002fca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fb6:	f7fe f9f3 	bl	80013a0 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc4:	d901      	bls.n	8002fca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e028      	b.n	800301c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fca:	4b16      	ldr	r3, [pc, #88]	; (8003024 <HAL_PWREx_ConfigSupply+0xb0>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	d1ee      	bne.n	8002fb6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b1e      	cmp	r3, #30
 8002fdc:	d008      	beq.n	8002ff0 <HAL_PWREx_ConfigSupply+0x7c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8002fe2:	d005      	beq.n	8002ff0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b1d      	cmp	r3, #29
 8002fe8:	d002      	beq.n	8002ff0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b2d      	cmp	r3, #45	; 0x2d
 8002fee:	d114      	bne.n	800301a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ff0:	f7fe f9d6 	bl	80013a0 <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ff6:	e009      	b.n	800300c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ff8:	f7fe f9d2 	bl	80013a0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003006:	d901      	bls.n	800300c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_PWREx_ConfigSupply+0xb0>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003018:	d1ee      	bne.n	8002ff8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	58024800 	.word	0x58024800

08003028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08c      	sub	sp, #48	; 0x30
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e3f3      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80b3 	beq.w	80031ae <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003048:	4b9e      	ldr	r3, [pc, #632]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003052:	4b9c      	ldr	r3, [pc, #624]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	2b10      	cmp	r3, #16
 800305c:	d007      	beq.n	800306e <HAL_RCC_OscConfig+0x46>
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	2b18      	cmp	r3, #24
 8003062:	d112      	bne.n	800308a <HAL_RCC_OscConfig+0x62>
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d10d      	bne.n	800308a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306e:	4b95      	ldr	r3, [pc, #596]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8098 	beq.w	80031ac <HAL_RCC_OscConfig+0x184>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 8093 	bne.w	80031ac <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e3cb      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x7a>
 8003094:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a8a      	ldr	r2, [pc, #552]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	e058      	b.n	8003154 <HAL_RCC_OscConfig+0x12c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d112      	bne.n	80030d0 <HAL_RCC_OscConfig+0xa8>
 80030aa:	4b86      	ldr	r3, [pc, #536]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a85      	ldr	r2, [pc, #532]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b83      	ldr	r3, [pc, #524]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a82      	ldr	r2, [pc, #520]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b80      	ldr	r3, [pc, #512]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a7f      	ldr	r2, [pc, #508]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e041      	b.n	8003154 <HAL_RCC_OscConfig+0x12c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0xd8>
 80030da:	4b7a      	ldr	r3, [pc, #488]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a79      	ldr	r2, [pc, #484]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b77      	ldr	r3, [pc, #476]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a76      	ldr	r2, [pc, #472]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b74      	ldr	r3, [pc, #464]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a73      	ldr	r2, [pc, #460]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e029      	b.n	8003154 <HAL_RCC_OscConfig+0x12c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003108:	d112      	bne.n	8003130 <HAL_RCC_OscConfig+0x108>
 800310a:	4b6e      	ldr	r3, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6d      	ldr	r2, [pc, #436]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b6b      	ldr	r3, [pc, #428]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6a      	ldr	r2, [pc, #424]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800311c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b68      	ldr	r3, [pc, #416]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a67      	ldr	r2, [pc, #412]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e011      	b.n	8003154 <HAL_RCC_OscConfig+0x12c>
 8003130:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a63      	ldr	r2, [pc, #396]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a60      	ldr	r2, [pc, #384]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b5e      	ldr	r3, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800314e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe f920 	bl	80013a0 <HAL_GetTick>
 8003160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7fe f91c 	bl	80013a0 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e355      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003176:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x13c>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe f90c 	bl	80013a0 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe f908 	bl	80013a0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e341      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800319e:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x164>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 808c 	beq.w	80032d4 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031c6:	4b3f      	ldr	r3, [pc, #252]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1ba>
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	2b18      	cmp	r3, #24
 80031d6:	d137      	bne.n	8003248 <HAL_RCC_OscConfig+0x220>
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d132      	bne.n	8003248 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_RCC_OscConfig+0x1d2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e313      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031fa:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 0219 	bic.w	r2, r3, #25
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	492f      	ldr	r1, [pc, #188]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800320c:	f7fe f8c8 	bl	80013a0 <HAL_GetTick>
 8003210:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003214:	f7fe f8c4 	bl	80013a0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e2fd      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	061b      	lsls	r3, r3, #24
 8003240:	4920      	ldr	r1, [pc, #128]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003246:	e045      	b.n	80032d4 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d026      	beq.n	800329e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003250:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 0219 	bic.w	r2, r3, #25
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4919      	ldr	r1, [pc, #100]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe f89d 	bl	80013a0 <HAL_GetTick>
 8003266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326a:	f7fe f899 	bl	80013a0 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e2d2      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	490b      	ldr	r1, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
 800329c:	e01a      	b.n	80032d4 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <HAL_RCC_OscConfig+0x29c>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fe f879 	bl	80013a0 <HAL_GetTick>
 80032ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fe f875 	bl	80013a0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d903      	bls.n	80032c8 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e2ae      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
 80032c4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032c8:	4b99      	ldr	r3, [pc, #612]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ee      	bne.n	80032b2 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d06a      	beq.n	80033b6 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e0:	4b93      	ldr	r3, [pc, #588]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032e8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032ea:	4b91      	ldr	r3, [pc, #580]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d007      	beq.n	8003306 <HAL_RCC_OscConfig+0x2de>
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b18      	cmp	r3, #24
 80032fa:	d11b      	bne.n	8003334 <HAL_RCC_OscConfig+0x30c>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d116      	bne.n	8003334 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003306:	4b8a      	ldr	r3, [pc, #552]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x2f6>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	2b80      	cmp	r3, #128	; 0x80
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e281      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800331e:	4b84      	ldr	r3, [pc, #528]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	061b      	lsls	r3, r3, #24
 800332c:	4980      	ldr	r1, [pc, #512]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800332e:	4313      	orrs	r3, r2
 8003330:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003332:	e040      	b.n	80033b6 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d023      	beq.n	8003384 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800333c:	4b7c      	ldr	r3, [pc, #496]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a7b      	ldr	r2, [pc, #492]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe f82a 	bl	80013a0 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003350:	f7fe f826 	bl	80013a0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e25f      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003362:	4b73      	ldr	r3, [pc, #460]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800336e:	4b70      	ldr	r3, [pc, #448]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	061b      	lsls	r3, r3, #24
 800337c:	496c      	ldr	r1, [pc, #432]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800337e:	4313      	orrs	r3, r2
 8003380:	60cb      	str	r3, [r1, #12]
 8003382:	e018      	b.n	80033b6 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003384:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a69      	ldr	r2, [pc, #420]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800338a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe f806 	bl	80013a0 <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003398:	f7fe f802 	bl	80013a0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e23b      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033aa:	4b61      	ldr	r3, [pc, #388]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d036      	beq.n	8003430 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d019      	beq.n	80033fe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ca:	4b59      	ldr	r3, [pc, #356]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80033cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ce:	4a58      	ldr	r2, [pc, #352]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fd ffe3 	bl	80013a0 <HAL_GetTick>
 80033da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033de:	f7fd ffdf 	bl	80013a0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e218      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033f0:	4b4f      	ldr	r3, [pc, #316]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80033f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x3b6>
 80033fc:	e018      	b.n	8003430 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033fe:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	4a4b      	ldr	r2, [pc, #300]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fd ffc9 	bl	80013a0 <HAL_GetTick>
 800340e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003412:	f7fd ffc5 	bl	80013a0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1fe      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003424:	4b42      	ldr	r3, [pc, #264]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d036      	beq.n	80034aa <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d019      	beq.n	8003478 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003444:	4b3a      	ldr	r3, [pc, #232]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a39      	ldr	r2, [pc, #228]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800344a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800344e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003450:	f7fd ffa6 	bl	80013a0 <HAL_GetTick>
 8003454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003458:	f7fd ffa2 	bl	80013a0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1db      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800346a:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x430>
 8003476:	e018      	b.n	80034aa <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003478:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800347e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003482:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003484:	f7fd ff8c 	bl	80013a0 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800348c:	f7fd ff88 	bl	80013a0 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e1c1      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80af 	beq.w	8003616 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034b8:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <HAL_RCC_OscConfig+0x50c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_RCC_OscConfig+0x50c>)
 80034be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034c4:	f7fd ff6c 	bl	80013a0 <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034cc:	f7fd ff68 	bl	80013a0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1a1      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_RCC_OscConfig+0x50c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <HAL_RCC_OscConfig+0x4d8>
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a0e      	ldr	r2, [pc, #56]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
 80034fe:	e05b      	b.n	80035b8 <HAL_RCC_OscConfig+0x590>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d117      	bne.n	8003538 <HAL_RCC_OscConfig+0x510>
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a08      	ldr	r2, [pc, #32]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a05      	ldr	r2, [pc, #20]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 800351a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a02      	ldr	r2, [pc, #8]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 8003526:	f023 0304 	bic.w	r3, r3, #4
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	e044      	b.n	80035b8 <HAL_RCC_OscConfig+0x590>
 800352e:	bf00      	nop
 8003530:	58024400 	.word	0x58024400
 8003534:	58024800 	.word	0x58024800
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d112      	bne.n	8003566 <HAL_RCC_OscConfig+0x53e>
 8003540:	4b95      	ldr	r3, [pc, #596]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a94      	ldr	r2, [pc, #592]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a91      	ldr	r2, [pc, #580]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
 8003558:	4b8f      	ldr	r3, [pc, #572]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	4a8e      	ldr	r2, [pc, #568]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6713      	str	r3, [r2, #112]	; 0x70
 8003564:	e028      	b.n	80035b8 <HAL_RCC_OscConfig+0x590>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b85      	cmp	r3, #133	; 0x85
 800356c:	d112      	bne.n	8003594 <HAL_RCC_OscConfig+0x56c>
 800356e:	4b8a      	ldr	r3, [pc, #552]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	4a89      	ldr	r2, [pc, #548]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003574:	f043 0304 	orr.w	r3, r3, #4
 8003578:	6713      	str	r3, [r2, #112]	; 0x70
 800357a:	4b87      	ldr	r3, [pc, #540]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a86      	ldr	r2, [pc, #536]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
 8003586:	4b84      	ldr	r3, [pc, #528]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	4a83      	ldr	r2, [pc, #524]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6713      	str	r3, [r2, #112]	; 0x70
 8003592:	e011      	b.n	80035b8 <HAL_RCC_OscConfig+0x590>
 8003594:	4b80      	ldr	r3, [pc, #512]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4a7f      	ldr	r2, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6713      	str	r3, [r2, #112]	; 0x70
 80035a0:	4b7d      	ldr	r3, [pc, #500]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a7c      	ldr	r2, [pc, #496]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80035a6:	f023 0304 	bic.w	r3, r3, #4
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a79      	ldr	r2, [pc, #484]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80035b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d015      	beq.n	80035ec <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7fd feee 	bl	80013a0 <HAL_GetTick>
 80035c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035c6:	e00a      	b.n	80035de <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7fd feea 	bl	80013a0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e121      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035de:	4b6e      	ldr	r3, [pc, #440]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0ee      	beq.n	80035c8 <HAL_RCC_OscConfig+0x5a0>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fd fed8 	bl	80013a0 <HAL_GetTick>
 80035f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fd fed4 	bl	80013a0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e10b      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800360a:	4b63      	ldr	r3, [pc, #396]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ee      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8100 	beq.w	8003820 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003620:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003628:	2b18      	cmp	r3, #24
 800362a:	f000 80bb 	beq.w	80037a4 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b02      	cmp	r3, #2
 8003634:	f040 8095 	bne.w	8003762 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003638:	4b57      	ldr	r3, [pc, #348]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a56      	ldr	r2, [pc, #344]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fd feac 	bl	80013a0 <HAL_GetTick>
 8003648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7fd fea8 	bl	80013a0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0e1      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800365e:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800366a:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800366c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <HAL_RCC_OscConfig+0x774>)
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800367a:	0112      	lsls	r2, r2, #4
 800367c:	430a      	orrs	r2, r1
 800367e:	4946      	ldr	r1, [pc, #280]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003680:	4313      	orrs	r3, r2
 8003682:	628b      	str	r3, [r1, #40]	; 0x28
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	3b01      	subs	r3, #1
 800368a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	3b01      	subs	r3, #1
 8003694:	025b      	lsls	r3, r3, #9
 8003696:	b29b      	uxth	r3, r3
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	3b01      	subs	r3, #1
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	3b01      	subs	r3, #1
 80036ae:	061b      	lsls	r3, r3, #24
 80036b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036b4:	4938      	ldr	r1, [pc, #224]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80036ba:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	4a36      	ldr	r2, [pc, #216]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036c6:	4b34      	ldr	r3, [pc, #208]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80036c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ca:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036d2:	00d2      	lsls	r2, r2, #3
 80036d4:	4930      	ldr	r1, [pc, #192]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036da:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f023 020c 	bic.w	r2, r3, #12
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	492c      	ldr	r1, [pc, #176]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036ec:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	f023 0202 	bic.w	r2, r3, #2
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	4927      	ldr	r1, [pc, #156]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	4a25      	ldr	r2, [pc, #148]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	4a22      	ldr	r2, [pc, #136]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800371c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003720:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	4a1c      	ldr	r2, [pc, #112]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372e:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fd fe31 	bl	80013a0 <HAL_GetTick>
 800373e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003742:	f7fd fe2d 	bl	80013a0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e066      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x71a>
 8003760:	e05e      	b.n	8003820 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 8003768:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800376c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd fe17 	bl	80013a0 <HAL_GetTick>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fd fe13 	bl	80013a0 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e04c      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_RCC_OscConfig+0x770>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x74e>
 8003794:	e044      	b.n	8003820 <HAL_RCC_OscConfig+0x7f8>
 8003796:	bf00      	nop
 8003798:	58024400 	.word	0x58024400
 800379c:	fffffc0c 	.word	0xfffffc0c
 80037a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037a4:	4b21      	ldr	r3, [pc, #132]	; (800382c <HAL_RCC_OscConfig+0x804>)
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037aa:	4b20      	ldr	r3, [pc, #128]	; (800382c <HAL_RCC_OscConfig+0x804>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d031      	beq.n	800381c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f003 0203 	and.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d12a      	bne.n	800381c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d122      	bne.n	800381c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d11a      	bne.n	800381c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	0a5b      	lsrs	r3, r3, #9
 80037ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d111      	bne.n	800381c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d108      	bne.n	800381c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	0e1b      	lsrs	r3, r3, #24
 800380e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3730      	adds	r7, #48	; 0x30
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	58024400 	.word	0x58024400

08003830 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e19c      	b.n	8003b7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003844:	4b8a      	ldr	r3, [pc, #552]	; (8003a70 <HAL_RCC_ClockConfig+0x240>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d910      	bls.n	8003874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b87      	ldr	r3, [pc, #540]	; (8003a70 <HAL_RCC_ClockConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 020f 	bic.w	r2, r3, #15
 800385a:	4985      	ldr	r1, [pc, #532]	; (8003a70 <HAL_RCC_ClockConfig+0x240>)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b83      	ldr	r3, [pc, #524]	; (8003a70 <HAL_RCC_ClockConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e184      	b.n	8003b7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	4b7b      	ldr	r3, [pc, #492]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800388c:	429a      	cmp	r2, r3
 800388e:	d908      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003890:	4b78      	ldr	r3, [pc, #480]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	4975      	ldr	r1, [pc, #468]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d010      	beq.n	80038d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	4b70      	ldr	r3, [pc, #448]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d908      	bls.n	80038d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038be:	4b6d      	ldr	r3, [pc, #436]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	496a      	ldr	r1, [pc, #424]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d010      	beq.n	80038fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	4b64      	ldr	r3, [pc, #400]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d908      	bls.n	80038fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038ec:	4b61      	ldr	r3, [pc, #388]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	495e      	ldr	r1, [pc, #376]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	4b59      	ldr	r3, [pc, #356]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003916:	429a      	cmp	r2, r3
 8003918:	d908      	bls.n	800392c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800391a:	4b56      	ldr	r3, [pc, #344]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4953      	ldr	r1, [pc, #332]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003928:	4313      	orrs	r3, r2
 800392a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d010      	beq.n	800395a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	4b4d      	ldr	r3, [pc, #308]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	429a      	cmp	r2, r3
 8003946:	d908      	bls.n	800395a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003948:	4b4a      	ldr	r3, [pc, #296]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f023 020f 	bic.w	r2, r3, #15
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4947      	ldr	r1, [pc, #284]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003956:	4313      	orrs	r3, r2
 8003958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d055      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003966:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4940      	ldr	r1, [pc, #256]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003974:	4313      	orrs	r3, r2
 8003976:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d107      	bne.n	8003990 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003980:	4b3c      	ldr	r3, [pc, #240]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d121      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0f6      	b.n	8003b7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003998:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d115      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0ea      	b.n	8003b7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039b0:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0de      	b.n	8003b7e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039c0:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0d6      	b.n	8003b7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039d0:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f023 0207 	bic.w	r2, r3, #7
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4925      	ldr	r1, [pc, #148]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fd fcdd 	bl	80013a0 <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ea:	f7fd fcd9 	bl	80013a0 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e0be      	b.n	8003b7e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a00:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d1eb      	bne.n	80039ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d010      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d208      	bcs.n	8003a40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f023 020f 	bic.w	r2, r3, #15
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	490e      	ldr	r1, [pc, #56]	; (8003a74 <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_ClockConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d214      	bcs.n	8003a78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_RCC_ClockConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 020f 	bic.w	r2, r3, #15
 8003a56:	4906      	ldr	r1, [pc, #24]	; (8003a70 <HAL_RCC_ClockConfig+0x240>)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <HAL_RCC_ClockConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e086      	b.n	8003b7e <HAL_RCC_ClockConfig+0x34e>
 8003a70:	52002000 	.word	0x52002000
 8003a74:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d208      	bcs.n	8003aa6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a94:	4b3c      	ldr	r3, [pc, #240]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	4939      	ldr	r1, [pc, #228]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d010      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	4b34      	ldr	r3, [pc, #208]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d208      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ac2:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	492e      	ldr	r1, [pc, #184]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699a      	ldr	r2, [r3, #24]
 8003ae4:	4b28      	ldr	r3, [pc, #160]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d208      	bcs.n	8003b02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003af0:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	4922      	ldr	r1, [pc, #136]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d010      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d208      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b1e:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	4917      	ldr	r1, [pc, #92]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003b30:	f000 f834 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	4912      	ldr	r1, [pc, #72]	; (8003b8c <HAL_RCC_ClockConfig+0x35c>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x358>)
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	4a0d      	ldr	r2, [pc, #52]	; (8003b8c <HAL_RCC_ClockConfig+0x35c>)
 8003b58:	5cd3      	ldrb	r3, [r2, r3]
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
 8003b64:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <HAL_RCC_ClockConfig+0x360>)
 8003b66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b68:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <HAL_RCC_ClockConfig+0x364>)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_RCC_ClockConfig+0x368>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd fbca 	bl	800130c <HAL_InitTick>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	58024400 	.word	0x58024400
 8003b8c:	080081cc 	.word	0x080081cc
 8003b90:	2400000c 	.word	0x2400000c
 8003b94:	24000008 	.word	0x24000008
 8003b98:	24000010 	.word	0x24000010

08003b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	; 0x24
 8003ba0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba2:	4bb3      	ldr	r3, [pc, #716]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003baa:	2b18      	cmp	r3, #24
 8003bac:	f200 8155 	bhi.w	8003e5a <HAL_RCC_GetSysClockFreq+0x2be>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003c1d 	.word	0x08003c1d
 8003bbc:	08003e5b 	.word	0x08003e5b
 8003bc0:	08003e5b 	.word	0x08003e5b
 8003bc4:	08003e5b 	.word	0x08003e5b
 8003bc8:	08003e5b 	.word	0x08003e5b
 8003bcc:	08003e5b 	.word	0x08003e5b
 8003bd0:	08003e5b 	.word	0x08003e5b
 8003bd4:	08003e5b 	.word	0x08003e5b
 8003bd8:	08003c43 	.word	0x08003c43
 8003bdc:	08003e5b 	.word	0x08003e5b
 8003be0:	08003e5b 	.word	0x08003e5b
 8003be4:	08003e5b 	.word	0x08003e5b
 8003be8:	08003e5b 	.word	0x08003e5b
 8003bec:	08003e5b 	.word	0x08003e5b
 8003bf0:	08003e5b 	.word	0x08003e5b
 8003bf4:	08003e5b 	.word	0x08003e5b
 8003bf8:	08003c49 	.word	0x08003c49
 8003bfc:	08003e5b 	.word	0x08003e5b
 8003c00:	08003e5b 	.word	0x08003e5b
 8003c04:	08003e5b 	.word	0x08003e5b
 8003c08:	08003e5b 	.word	0x08003e5b
 8003c0c:	08003e5b 	.word	0x08003e5b
 8003c10:	08003e5b 	.word	0x08003e5b
 8003c14:	08003e5b 	.word	0x08003e5b
 8003c18:	08003c4f 	.word	0x08003c4f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c1c:	4b94      	ldr	r3, [pc, #592]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c28:	4b91      	ldr	r3, [pc, #580]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	08db      	lsrs	r3, r3, #3
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	4a90      	ldr	r2, [pc, #576]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
 8003c38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003c3a:	e111      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c3c:	4b8d      	ldr	r3, [pc, #564]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c3e:	61bb      	str	r3, [r7, #24]
    break;
 8003c40:	e10e      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c42:	4b8d      	ldr	r3, [pc, #564]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c44:	61bb      	str	r3, [r7, #24]
    break;
 8003c46:	e10b      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003c48:	4b8c      	ldr	r3, [pc, #560]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c4a:	61bb      	str	r3, [r7, #24]
    break;
 8003c4c:	e108      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c4e:	4b88      	ldr	r3, [pc, #544]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c58:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c64:	4b82      	ldr	r3, [pc, #520]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c6e:	4b80      	ldr	r3, [pc, #512]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	08db      	lsrs	r3, r3, #3
 8003c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80e1 	beq.w	8003e54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	f000 8083 	beq.w	8003da0 <HAL_RCC_GetSysClockFreq+0x204>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	f200 80a1 	bhi.w	8003de4 <HAL_RCC_GetSysClockFreq+0x248>
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x114>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d056      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003cae:	e099      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cb0:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d02d      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cbc:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	4a6b      	ldr	r2, [pc, #428]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	ee07 3a90 	vmov	s15, r3
 8003cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce6:	4b62      	ldr	r3, [pc, #392]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cfa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003d16:	e087      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2a:	4b51      	ldr	r3, [pc, #324]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d5a:	e065      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6e:	4b40      	ldr	r3, [pc, #256]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9e:	e043      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db2:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dc6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003de2:	e021      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df6:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e26:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	0a5b      	lsrs	r3, r3, #9
 8003e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e32:	3301      	adds	r3, #1
 8003e34:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e4c:	ee17 3a90 	vmov	r3, s15
 8003e50:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003e52:	e005      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]
    break;
 8003e58:	e002      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e5c:	61bb      	str	r3, [r7, #24]
    break;
 8003e5e:	bf00      	nop
  }

  return sysclockfreq;
 8003e60:	69bb      	ldr	r3, [r7, #24]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3724      	adds	r7, #36	; 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	58024400 	.word	0x58024400
 8003e74:	03d09000 	.word	0x03d09000
 8003e78:	003d0900 	.word	0x003d0900
 8003e7c:	007a1200 	.word	0x007a1200
 8003e80:	46000000 	.word	0x46000000
 8003e84:	4c742400 	.word	0x4c742400
 8003e88:	4a742400 	.word	0x4a742400
 8003e8c:	4af42400 	.word	0x4af42400

08003e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003e96:	f7ff fe81 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	490f      	ldr	r1, [pc, #60]	; (8003ee4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ea8:	5ccb      	ldrb	r3, [r1, r3]
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ebe:	5cd3      	ldrb	r3, [r2, r3]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eca:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ecc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ece:	4a07      	ldr	r2, [pc, #28]	; (8003eec <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	080081cc 	.word	0x080081cc
 8003ee8:	2400000c 	.word	0x2400000c
 8003eec:	24000008 	.word	0x24000008

08003ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003ef4:	f7ff ffcc 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4904      	ldr	r1, [pc, #16]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	58024400 	.word	0x58024400
 8003f18:	080081cc 	.word	0x080081cc

08003f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003f20:	f7ff ffb6 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4904      	ldr	r1, [pc, #16]	; (8003f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	58024400 	.word	0x58024400
 8003f44:	080081cc 	.word	0x080081cc

08003f48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f50:	2300      	movs	r3, #0
 8003f52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f54:	2300      	movs	r3, #0
 8003f56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d03f      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f6c:	d02a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f72:	d824      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f78:	d018      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f7e:	d81e      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f88:	d007      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f8a:	e018      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8c:	4ba6      	ldr	r3, [pc, #664]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	4aa5      	ldr	r2, [pc, #660]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f98:	e015      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 ff17 	bl	8005dd4 <RCCEx_PLL2_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003faa:	e00c      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3324      	adds	r3, #36	; 0x24
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 ffc0 	bl	8005f38 <RCCEx_PLL3_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003fbc:	e003      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003fcc:	4b96      	ldr	r3, [pc, #600]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd8:	4993      	ldr	r1, [pc, #588]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	650b      	str	r3, [r1, #80]	; 0x50
 8003fde:	e001      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d03d      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d826      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004015 	.word	0x08004015
 8004004:	08004023 	.word	0x08004023
 8004008:	08004035 	.word	0x08004035
 800400c:	0800404d 	.word	0x0800404d
 8004010:	0800404d 	.word	0x0800404d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004014:	4b84      	ldr	r3, [pc, #528]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	4a83      	ldr	r2, [pc, #524]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800401a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004020:	e015      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f001 fed3 	bl	8005dd4 <RCCEx_PLL2_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004032:	e00c      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3324      	adds	r3, #36	; 0x24
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f001 ff7c 	bl	8005f38 <RCCEx_PLL3_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004044:	e003      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
      break;
 800404a:	e000      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800404c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004054:	4b74      	ldr	r3, [pc, #464]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004058:	f023 0207 	bic.w	r2, r3, #7
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	4971      	ldr	r1, [pc, #452]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	650b      	str	r3, [r1, #80]	; 0x50
 8004066:	e001      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004074:	2b00      	cmp	r3, #0
 8004076:	d04a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004080:	d031      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004082:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004086:	d82b      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408c:	d02d      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800408e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004092:	d825      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004094:	2bc0      	cmp	r3, #192	; 0xc0
 8004096:	d02a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004098:	2bc0      	cmp	r3, #192	; 0xc0
 800409a:	d821      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d016      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x186>
 80040a0:	2b80      	cmp	r3, #128	; 0x80
 80040a2:	d81d      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040a8:	2b40      	cmp	r3, #64	; 0x40
 80040aa:	d007      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80040ac:	e018      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ae:	4b5e      	ldr	r3, [pc, #376]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4a5d      	ldr	r2, [pc, #372]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80040ba:	e019      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 fe86 	bl	8005dd4 <RCCEx_PLL2_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80040cc:	e010      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3324      	adds	r3, #36	; 0x24
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 ff2f 	bl	8005f38 <RCCEx_PLL3_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80040de:	e007      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	75fb      	strb	r3, [r7, #23]
      break;
 80040e4:	e004      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80040e6:	bf00      	nop
 80040e8:	e002      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80040ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80040f6:	4b4c      	ldr	r3, [pc, #304]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	4949      	ldr	r1, [pc, #292]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	650b      	str	r3, [r1, #80]	; 0x50
 8004108:	e001      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	2b00      	cmp	r3, #0
 8004118:	d04f      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004122:	d036      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004124:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004128:	d830      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800412a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412e:	d032      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004134:	d82a      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004136:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800413a:	d02e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x252>
 800413c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004140:	d824      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004146:	d018      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414c:	d81e      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004156:	d007      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004158:	e018      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415a:	4b33      	ldr	r3, [pc, #204]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	4a32      	ldr	r2, [pc, #200]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004164:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004166:	e019      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f001 fe30 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004178:	e010      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3324      	adds	r3, #36	; 0x24
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f001 fed9 	bl	8005f38 <RCCEx_PLL3_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800418a:	e007      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	75fb      	strb	r3, [r7, #23]
      break;
 8004190:	e004      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004192:	bf00      	nop
 8004194:	e002      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800419a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ae:	491e      	ldr	r1, [pc, #120]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	650b      	str	r3, [r1, #80]	; 0x50
 80041b4:	e001      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d034      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ca:	2b30      	cmp	r3, #48	; 0x30
 80041cc:	d01c      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80041ce:	2b30      	cmp	r3, #48	; 0x30
 80041d0:	d817      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d00c      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d813      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d10f      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	4a10      	ldr	r2, [pc, #64]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80041ee:	e00e      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	2102      	movs	r1, #2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fdec 	bl	8005dd4 <RCCEx_PLL2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004200:	e005      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
      break;
 8004206:	e002      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004208:	bf00      	nop
 800420a:	e000      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800420c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004218:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004220:	4901      	ldr	r1, [pc, #4]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004226:	e003      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d047      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004244:	d030      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800424a:	d82a      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800424c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004250:	d02c      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004252:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004256:	d824      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425c:	d018      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800425e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004262:	d81e      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426c:	d007      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800426e:	e018      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004270:	4bb0      	ldr	r3, [pc, #704]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	4aaf      	ldr	r2, [pc, #700]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800427c:	e017      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f001 fda5 	bl	8005dd4 <RCCEx_PLL2_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800428e:	e00e      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3324      	adds	r3, #36	; 0x24
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f001 fe4e 	bl	8005f38 <RCCEx_PLL3_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042a0:	e005      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	75fb      	strb	r3, [r7, #23]
      break;
 80042a6:	e002      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80042ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042b4:	4b9f      	ldr	r3, [pc, #636]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c0:	499c      	ldr	r1, [pc, #624]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	650b      	str	r3, [r1, #80]	; 0x50
 80042c6:	e001      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
 80042ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d049      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e0:	d02e      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80042e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e6:	d828      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80042e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ec:	d02a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80042ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042f2:	d822      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80042f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f8:	d026      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80042fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042fe:	d81c      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004304:	d010      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800430a:	d816      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01d      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004314:	d111      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3304      	adds	r3, #4
 800431a:	2101      	movs	r1, #1
 800431c:	4618      	mov	r0, r3
 800431e:	f001 fd59 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004326:	e012      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3324      	adds	r3, #36	; 0x24
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f001 fe02 	bl	8005f38 <RCCEx_PLL3_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004338:	e009      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	75fb      	strb	r3, [r7, #23]
      break;
 800433e:	e006      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004340:	bf00      	nop
 8004342:	e004      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004344:	bf00      	nop
 8004346:	e002      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004348:	bf00      	nop
 800434a:	e000      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800434c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004354:	4b77      	ldr	r3, [pc, #476]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004358:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004360:	4974      	ldr	r1, [pc, #464]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004362:	4313      	orrs	r3, r2
 8004364:	650b      	str	r3, [r1, #80]	; 0x50
 8004366:	e001      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d053      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800437e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004382:	d034      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004384:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004388:	d82e      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800438a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800438e:	d030      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004394:	d828      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439a:	d02c      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d822      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80043a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043a6:	d028      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80043a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043ac:	d81c      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80043ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b2:	d010      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80043b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b8:	d816      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01f      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80043be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c2:	d111      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	2101      	movs	r1, #1
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 fd02 	bl	8005dd4 <RCCEx_PLL2_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043d4:	e014      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3324      	adds	r3, #36	; 0x24
 80043da:	2101      	movs	r1, #1
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 fdab 	bl	8005f38 <RCCEx_PLL3_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043e6:	e00b      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	75fb      	strb	r3, [r7, #23]
      break;
 80043ec:	e008      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043ee:	bf00      	nop
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043f2:	bf00      	nop
 80043f4:	e004      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004406:	4b4b      	ldr	r3, [pc, #300]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004414:	4947      	ldr	r1, [pc, #284]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004416:	4313      	orrs	r3, r2
 8004418:	658b      	str	r3, [r1, #88]	; 0x58
 800441a:	e001      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d02f      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004434:	d00e      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443a:	d814      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d015      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004444:	d10f      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004446:	4b3b      	ldr	r3, [pc, #236]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	4a3a      	ldr	r2, [pc, #232]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800444c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004450:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004452:	e00c      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f001 fcba 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004464:	e003      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	75fb      	strb	r3, [r7, #23]
      break;
 800446a:	e000      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800446c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004474:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004478:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004480:	492c      	ldr	r1, [pc, #176]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004482:	4313      	orrs	r3, r2
 8004484:	650b      	str	r3, [r1, #80]	; 0x50
 8004486:	e001      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d032      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	2b03      	cmp	r3, #3
 800449e:	d81b      	bhi.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044df 	.word	0x080044df
 80044ac:	080044b9 	.word	0x080044b9
 80044b0:	080044c7 	.word	0x080044c7
 80044b4:	080044df 	.word	0x080044df
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b8:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044c4:	e00c      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3304      	adds	r3, #4
 80044ca:	2102      	movs	r1, #2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f001 fc81 	bl	8005dd4 <RCCEx_PLL2_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044d6:	e003      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
      break;
 80044dc:	e000      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80044de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	f023 0203 	bic.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	4910      	ldr	r1, [pc, #64]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044f8:	e001      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 808a 	beq.w	8004620 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a09      	ldr	r2, [pc, #36]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004518:	f7fc ff42 	bl	80013a0 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451e:	e00d      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004520:	f7fc ff3e 	bl	80013a0 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	; 0x64
 800452c:	d906      	bls.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	75fb      	strb	r3, [r7, #23]
        break;
 8004532:	e009      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8004534:	58024400 	.word	0x58024400
 8004538:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800453c:	4bba      	ldr	r3, [pc, #744]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0eb      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d166      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800454e:	4bb7      	ldr	r3, [pc, #732]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004558:	4053      	eors	r3, r2
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d013      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004562:	4bb2      	ldr	r3, [pc, #712]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800456c:	4baf      	ldr	r3, [pc, #700]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	4aae      	ldr	r2, [pc, #696]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004576:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004578:	4bac      	ldr	r3, [pc, #688]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4aab      	ldr	r2, [pc, #684]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800457e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004584:	4aa9      	ldr	r2, [pc, #676]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004594:	d115      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004596:	f7fc ff03 	bl	80013a0 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800459c:	e00b      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7fc feff 	bl	80013a0 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d902      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	75fb      	strb	r3, [r7, #23]
            break;
 80045b4:	e005      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045b6:	4b9d      	ldr	r3, [pc, #628]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0ed      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80045c2:	7dfb      	ldrb	r3, [r7, #23]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d126      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d6:	d10d      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80045d8:	4b94      	ldr	r3, [pc, #592]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045e6:	0919      	lsrs	r1, r3, #4
 80045e8:	4b91      	ldr	r3, [pc, #580]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045ea:	400b      	ands	r3, r1
 80045ec:	498f      	ldr	r1, [pc, #572]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	610b      	str	r3, [r1, #16]
 80045f2:	e005      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80045f4:	4b8d      	ldr	r3, [pc, #564]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	4a8c      	ldr	r2, [pc, #560]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045fe:	6113      	str	r3, [r2, #16]
 8004600:	4b8a      	ldr	r3, [pc, #552]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800460a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460e:	4987      	ldr	r1, [pc, #540]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004610:	4313      	orrs	r3, r2
 8004612:	670b      	str	r3, [r1, #112]	; 0x70
 8004614:	e004      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	75bb      	strb	r3, [r7, #22]
 800461a:	e001      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d07f      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004632:	2b28      	cmp	r3, #40	; 0x28
 8004634:	d866      	bhi.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004636:	a201      	add	r2, pc, #4	; (adr r2, 800463c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	0800470b 	.word	0x0800470b
 8004640:	08004705 	.word	0x08004705
 8004644:	08004705 	.word	0x08004705
 8004648:	08004705 	.word	0x08004705
 800464c:	08004705 	.word	0x08004705
 8004650:	08004705 	.word	0x08004705
 8004654:	08004705 	.word	0x08004705
 8004658:	08004705 	.word	0x08004705
 800465c:	080046e1 	.word	0x080046e1
 8004660:	08004705 	.word	0x08004705
 8004664:	08004705 	.word	0x08004705
 8004668:	08004705 	.word	0x08004705
 800466c:	08004705 	.word	0x08004705
 8004670:	08004705 	.word	0x08004705
 8004674:	08004705 	.word	0x08004705
 8004678:	08004705 	.word	0x08004705
 800467c:	080046f3 	.word	0x080046f3
 8004680:	08004705 	.word	0x08004705
 8004684:	08004705 	.word	0x08004705
 8004688:	08004705 	.word	0x08004705
 800468c:	08004705 	.word	0x08004705
 8004690:	08004705 	.word	0x08004705
 8004694:	08004705 	.word	0x08004705
 8004698:	08004705 	.word	0x08004705
 800469c:	0800470b 	.word	0x0800470b
 80046a0:	08004705 	.word	0x08004705
 80046a4:	08004705 	.word	0x08004705
 80046a8:	08004705 	.word	0x08004705
 80046ac:	08004705 	.word	0x08004705
 80046b0:	08004705 	.word	0x08004705
 80046b4:	08004705 	.word	0x08004705
 80046b8:	08004705 	.word	0x08004705
 80046bc:	0800470b 	.word	0x0800470b
 80046c0:	08004705 	.word	0x08004705
 80046c4:	08004705 	.word	0x08004705
 80046c8:	08004705 	.word	0x08004705
 80046cc:	08004705 	.word	0x08004705
 80046d0:	08004705 	.word	0x08004705
 80046d4:	08004705 	.word	0x08004705
 80046d8:	08004705 	.word	0x08004705
 80046dc:	0800470b 	.word	0x0800470b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3304      	adds	r3, #4
 80046e4:	2101      	movs	r1, #1
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 fb74 	bl	8005dd4 <RCCEx_PLL2_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046f0:	e00c      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3324      	adds	r3, #36	; 0x24
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 fc1d 	bl	8005f38 <RCCEx_PLL3_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004702:	e003      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	75fb      	strb	r3, [r7, #23]
      break;
 8004708:	e000      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800470a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004712:	4b46      	ldr	r3, [pc, #280]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004720:	4942      	ldr	r1, [pc, #264]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	654b      	str	r3, [r1, #84]	; 0x54
 8004726:	e001      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d038      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800473c:	2b05      	cmp	r3, #5
 800473e:	d821      	bhi.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800478b 	.word	0x0800478b
 800474c:	08004761 	.word	0x08004761
 8004750:	08004773 	.word	0x08004773
 8004754:	0800478b 	.word	0x0800478b
 8004758:	0800478b 	.word	0x0800478b
 800475c:	0800478b 	.word	0x0800478b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f001 fb34 	bl	8005dd4 <RCCEx_PLL2_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004770:	e00c      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3324      	adds	r3, #36	; 0x24
 8004776:	2101      	movs	r1, #1
 8004778:	4618      	mov	r0, r3
 800477a:	f001 fbdd 	bl	8005f38 <RCCEx_PLL3_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004782:	e003      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	75fb      	strb	r3, [r7, #23]
      break;
 8004788:	e000      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800478a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004796:	f023 0207 	bic.w	r2, r3, #7
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479e:	4923      	ldr	r1, [pc, #140]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	654b      	str	r3, [r1, #84]	; 0x54
 80047a4:	e001      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
 80047a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d040      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047bc:	2b05      	cmp	r3, #5
 80047be:	d821      	bhi.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	0800480b 	.word	0x0800480b
 80047cc:	080047e1 	.word	0x080047e1
 80047d0:	080047f3 	.word	0x080047f3
 80047d4:	0800480b 	.word	0x0800480b
 80047d8:	0800480b 	.word	0x0800480b
 80047dc:	0800480b 	.word	0x0800480b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	2101      	movs	r1, #1
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 faf4 	bl	8005dd4 <RCCEx_PLL2_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047f0:	e00c      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3324      	adds	r3, #36	; 0x24
 80047f6:	2101      	movs	r1, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 fb9d 	bl	8005f38 <RCCEx_PLL3_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004802:	e003      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	75fb      	strb	r3, [r7, #23]
      break;
 8004808:	e000      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800480a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d110      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004812:	4b06      	ldr	r3, [pc, #24]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	f023 0207 	bic.w	r2, r3, #7
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004820:	4902      	ldr	r1, [pc, #8]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004822:	4313      	orrs	r3, r2
 8004824:	658b      	str	r3, [r1, #88]	; 0x58
 8004826:	e007      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004828:	58024800 	.word	0x58024800
 800482c:	58024400 	.word	0x58024400
 8004830:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d04b      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800484e:	d02e      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004854:	d828      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d02a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d822      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004862:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004866:	d026      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800486c:	d81c      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800486e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004872:	d010      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004878:	d816      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01d      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x972>
 800487e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004882:	d111      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f001 faa2 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004894:	e012      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3324      	adds	r3, #36	; 0x24
 800489a:	2102      	movs	r1, #2
 800489c:	4618      	mov	r0, r3
 800489e:	f001 fb4b 	bl	8005f38 <RCCEx_PLL3_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80048a6:	e009      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
      break;
 80048ac:	e006      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80048ae:	bf00      	nop
 80048b0:	e004      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80048b2:	bf00      	nop
 80048b4:	e002      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80048b6:	bf00      	nop
 80048b8:	e000      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80048ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048c2:	4bb3      	ldr	r3, [pc, #716]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d0:	49af      	ldr	r1, [pc, #700]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	654b      	str	r3, [r1, #84]	; 0x54
 80048d6:	e001      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d04b      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048f2:	d02e      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80048f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048f8:	d828      	bhi.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fe:	d02a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004904:	d822      	bhi.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004906:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800490a:	d026      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800490c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004910:	d81c      	bhi.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004916:	d010      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491c:	d816      	bhi.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01d      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004926:	d111      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	2100      	movs	r1, #0
 800492e:	4618      	mov	r0, r3
 8004930:	f001 fa50 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004938:	e012      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3324      	adds	r3, #36	; 0x24
 800493e:	2102      	movs	r1, #2
 8004940:	4618      	mov	r0, r3
 8004942:	f001 faf9 	bl	8005f38 <RCCEx_PLL3_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800494a:	e009      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	75fb      	strb	r3, [r7, #23]
      break;
 8004950:	e006      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004952:	bf00      	nop
 8004954:	e004      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800495e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004966:	4b8a      	ldr	r3, [pc, #552]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004974:	4986      	ldr	r1, [pc, #536]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004976:	4313      	orrs	r3, r2
 8004978:	658b      	str	r3, [r1, #88]	; 0x58
 800497a:	e001      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	2b00      	cmp	r3, #0
 800498a:	d04b      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004992:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004996:	d02e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004998:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800499c:	d828      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800499e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a2:	d02a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80049a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a8:	d822      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80049aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049ae:	d026      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80049b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049b4:	d81c      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80049b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ba:	d010      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80049bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049c0:	d816      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01d      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80049c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ca:	d111      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	2100      	movs	r1, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 f9fe 	bl	8005dd4 <RCCEx_PLL2_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049dc:	e012      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3324      	adds	r3, #36	; 0x24
 80049e2:	2102      	movs	r1, #2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 faa7 	bl	8005f38 <RCCEx_PLL3_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049ee:	e009      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
      break;
 80049f4:	e006      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049f6:	bf00      	nop
 80049f8:	e004      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049fa:	bf00      	nop
 80049fc:	e002      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a0a:	4b61      	ldr	r3, [pc, #388]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a18:	495d      	ldr	r1, [pc, #372]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8004a1e:	e001      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d10a      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3324      	adds	r3, #36	; 0x24
 8004a40:	2102      	movs	r1, #2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 fa78 	bl	8005f38 <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a52:	4b4f      	ldr	r3, [pc, #316]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	494b      	ldr	r1, [pc, #300]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7c:	d10a      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3324      	adds	r3, #36	; 0x24
 8004a82:	2102      	movs	r1, #2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 fa57 	bl	8005f38 <RCCEx_PLL3_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a94:	4b3e      	ldr	r3, [pc, #248]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aa2:	493b      	ldr	r1, [pc, #236]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d034      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004abe:	d01d      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ac4:	d817      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	d009      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004ad0:	e011      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 f97b 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ae2:	e00c      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3324      	adds	r3, #36	; 0x24
 8004ae8:	2102      	movs	r1, #2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 fa24 	bl	8005f38 <RCCEx_PLL3_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004af4:	e003      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
      break;
 8004afa:	e000      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10a      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b04:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b12:	491f      	ldr	r1, [pc, #124]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	658b      	str	r3, [r1, #88]	; 0x58
 8004b18:	e001      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
 8004b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d036      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b34:	d01c      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b3a:	d816      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b40:	d003      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b46:	d007      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004b48:	e00f      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	4a10      	ldr	r2, [pc, #64]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b56:	e00c      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3324      	adds	r3, #36	; 0x24
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 f9ea 	bl	8005f38 <RCCEx_PLL3_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b68:	e003      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b6e:	e000      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10d      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b86:	4902      	ldr	r1, [pc, #8]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	654b      	str	r3, [r1, #84]	; 0x54
 8004b8c:	e004      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d029      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb0:	d007      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004bb2:	e00f      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb4:	4b69      	ldr	r3, [pc, #420]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4a68      	ldr	r2, [pc, #416]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bc0:	e00b      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 f903 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d109      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004be0:	4b5e      	ldr	r3, [pc, #376]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bec:	495b      	ldr	r1, [pc, #364]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bf2:	e001      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3324      	adds	r3, #36	; 0x24
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 f994 	bl	8005f38 <RCCEx_PLL3_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d032      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c30:	d017      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c36:	d811      	bhi.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3c:	d013      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c42:	d80b      	bhi.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d010      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4c:	d106      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4e:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	4a42      	ldr	r2, [pc, #264]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004c5a:	e007      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c60:	e004      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c72:	4b3a      	ldr	r3, [pc, #232]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c80:	4936      	ldr	r1, [pc, #216]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	654b      	str	r3, [r1, #84]	; 0x54
 8004c86:	e001      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
 8004c8a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ca4:	492d      	ldr	r1, [pc, #180]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cb6:	4b29      	ldr	r3, [pc, #164]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc2:	4926      	ldr	r1, [pc, #152]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004cd4:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	491e      	ldr	r1, [pc, #120]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cf2:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cfc:	6113      	str	r3, [r2, #16]
 8004cfe:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d08:	4914      	ldr	r1, [pc, #80]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	da08      	bge.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d22:	490e      	ldr	r1, [pc, #56]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d009      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d34:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	4906      	ldr	r1, [pc, #24]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d48:	7dbb      	ldrb	r3, [r7, #22]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e000      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	58024400 	.word	0x58024400

08004d60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b090      	sub	sp, #64	; 0x40
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6e:	f040 8089 	bne.w	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004d72:	4ba8      	ldr	r3, [pc, #672]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d87d      	bhi.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004d9d 	.word	0x08004d9d
 8004d8c:	08004dc1 	.word	0x08004dc1
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004e79 	.word	0x08004e79
 8004d98:	08004e09 	.word	0x08004e09

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d9c:	4b9d      	ldr	r3, [pc, #628]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004da8:	d107      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 febe 	bl	8005b30 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004db8:	e3f5      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dbe:	e3f2      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dc0:	4b94      	ldr	r3, [pc, #592]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dcc:	d107      	bne.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dce:	f107 0318 	add.w	r3, r7, #24
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fc04 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ddc:	e3e3      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004de2:	e3e0      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004de4:	4b8b      	ldr	r3, [pc, #556]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df0:	d107      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004df2:	f107 030c 	add.w	r3, r7, #12
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fd46 	bl	8005888 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e00:	e3d1      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e06:	e3ce      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e08:	4b82      	ldr	r3, [pc, #520]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e12:	4b80      	ldr	r3, [pc, #512]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e24:	4b7b      	ldr	r3, [pc, #492]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	08db      	lsrs	r3, r3, #3
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	4a7a      	ldr	r2, [pc, #488]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e36:	e01e      	b.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e38:	4b76      	ldr	r3, [pc, #472]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e44:	d106      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e4e:	4b73      	ldr	r3, [pc, #460]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e52:	e010      	b.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e54:	4b6f      	ldr	r3, [pc, #444]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e60:	d106      	bne.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e68:	d102      	bne.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e6a:	4b6d      	ldr	r3, [pc, #436]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e6e:	e002      	b.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e74:	e397      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004e76:	e396      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e78:	4b6a      	ldr	r3, [pc, #424]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e7c:	e393      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e82:	e390      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8a:	f040 8095 	bne.w	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8004e8e:	4b61      	ldr	r3, [pc, #388]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004e96:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e9e:	d04d      	beq.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea6:	f200 8084 	bhi.w	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	2bc0      	cmp	r3, #192	; 0xc0
 8004eae:	d07d      	beq.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb4:	d87d      	bhi.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	2b80      	cmp	r3, #128	; 0x80
 8004eba:	d02d      	beq.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d877      	bhi.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d012      	beq.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004ece:	e070      	b.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ed0:	4b50      	ldr	r3, [pc, #320]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004edc:	d107      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fe24 	bl	8005b30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004eec:	e35b      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ef2:	e358      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ef4:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f00:	d107      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f02:	f107 0318 	add.w	r3, r7, #24
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fb6a 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f10:	e349      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f16:	e346      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f18:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f24:	d107      	bne.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f26:	f107 030c 	add.w	r3, r7, #12
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fcac 	bl	8005888 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f34:	e337      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f3a:	e334      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f3c:	4b35      	ldr	r3, [pc, #212]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f46:	4b33      	ldr	r3, [pc, #204]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d109      	bne.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f58:	4b2e      	ldr	r3, [pc, #184]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	08db      	lsrs	r3, r3, #3
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	4a2d      	ldr	r2, [pc, #180]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6a:	e01e      	b.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f6c:	4b29      	ldr	r3, [pc, #164]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f78:	d106      	bne.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8004f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f80:	d102      	bne.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f82:	4b26      	ldr	r3, [pc, #152]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f86:	e010      	b.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f88:	4b22      	ldr	r3, [pc, #136]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f94:	d106      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9c:	d102      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004f9e:	4b20      	ldr	r3, [pc, #128]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa2:	e002      	b.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004fa8:	e2fd      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004faa:	e2fc      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fac:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fb0:	e2f9      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fb6:	e2f6      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbe:	f040 80a7 	bne.w	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004fc2:	4b14      	ldr	r3, [pc, #80]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004fca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd2:	d05f      	beq.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fda:	f200 8096 	bhi.w	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fe4:	f000 808e 	beq.w	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fee:	f200 808c 	bhi.w	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff8:	d03a      	beq.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005000:	f200 8083 	bhi.w	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00e      	beq.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005010:	d01c      	beq.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8005012:	e07a      	b.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005014:	58024400 	.word	0x58024400
 8005018:	03d09000 	.word	0x03d09000
 800501c:	003d0900 	.word	0x003d0900
 8005020:	007a1200 	.word	0x007a1200
 8005024:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005028:	4ba8      	ldr	r3, [pc, #672]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005034:	d107      	bne.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fd78 	bl	8005b30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005044:	e2af      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800504a:	e2ac      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800504c:	4b9f      	ldr	r3, [pc, #636]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005058:	d107      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800505a:	f107 0318 	add.w	r3, r7, #24
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fabe 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005068:	e29d      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800506e:	e29a      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005070:	4b96      	ldr	r3, [pc, #600]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507c:	d107      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fc00 	bl	8005888 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800508c:	e28b      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005092:	e288      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005094:	4b8d      	ldr	r3, [pc, #564]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800509c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800509e:	4b8b      	ldr	r3, [pc, #556]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80050aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050b0:	4b86      	ldr	r3, [pc, #536]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	08db      	lsrs	r3, r3, #3
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	4a85      	ldr	r2, [pc, #532]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c2:	e01e      	b.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050c4:	4b81      	ldr	r3, [pc, #516]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d0:	d106      	bne.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050d8:	d102      	bne.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80050da:	4b7e      	ldr	r3, [pc, #504]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050de:	e010      	b.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050e0:	4b7a      	ldr	r3, [pc, #488]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ec:	d106      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f4:	d102      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80050f6:	4b78      	ldr	r3, [pc, #480]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fa:	e002      	b.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8005100:	e251      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005102:	e250      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005104:	4b75      	ldr	r3, [pc, #468]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005108:	e24d      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800510e:	e24a      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	f040 809c 	bne.w	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800511a:	4b6c      	ldr	r3, [pc, #432]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800511c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005122:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800512a:	d054      	beq.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005132:	f200 808b 	bhi.w	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800513c:	f000 8083 	beq.w	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005146:	f200 8081 	bhi.w	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005150:	d02f      	beq.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005158:	d878      	bhi.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	d012      	beq.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8005168:	e070      	b.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800516a:	4b58      	ldr	r3, [pc, #352]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005176:	d107      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fcd7 	bl	8005b30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005186:	e20e      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800518c:	e20b      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800518e:	4b4f      	ldr	r3, [pc, #316]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800519a:	d107      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800519c:	f107 0318 	add.w	r3, r7, #24
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fa1d 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051aa:	e1fc      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051b0:	e1f9      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051b2:	4b46      	ldr	r3, [pc, #280]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051be:	d107      	bne.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051c0:	f107 030c 	add.w	r3, r7, #12
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fb5f 	bl	8005888 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051ce:	e1ea      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051d4:	e1e7      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80051d6:	4b3d      	ldr	r3, [pc, #244]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80051d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051de:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051e0:	4b3a      	ldr	r3, [pc, #232]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d10c      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80051ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051f2:	4b36      	ldr	r3, [pc, #216]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	08db      	lsrs	r3, r3, #3
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	4a34      	ldr	r2, [pc, #208]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80051fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005204:	e01e      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005206:	4b31      	ldr	r3, [pc, #196]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005212:	d106      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800521a:	d102      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800521c:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005220:	e010      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005222:	4b2a      	ldr	r3, [pc, #168]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800522e:	d106      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005236:	d102      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005238:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523c:	e002      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005242:	e1b0      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005244:	e1af      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005246:	4b25      	ldr	r3, [pc, #148]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005248:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800524a:	e1ac      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005250:	e1a9      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005258:	d17d      	bne.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800525a:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800525c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005262:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800526a:	d039      	beq.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005272:	d86d      	bhi.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 800527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d012      	beq.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8005282:	e065      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005284:	4b11      	ldr	r3, [pc, #68]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800528c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005290:	d107      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005292:	f107 0318 	add.w	r3, r7, #24
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f9a2 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052a0:	e181      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052a6:	e17e      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052a8:	4b08      	ldr	r3, [pc, #32]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052b4:	d107      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052b6:	f107 030c 	add.w	r3, r7, #12
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fae4 	bl	8005888 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052c4:	e16f      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ca:	e16c      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80052cc:	58024400 	.word	0x58024400
 80052d0:	03d09000 	.word	0x03d09000
 80052d4:	003d0900 	.word	0x003d0900
 80052d8:	007a1200 	.word	0x007a1200
 80052dc:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052e0:	4ba0      	ldr	r3, [pc, #640]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80052e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052e8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052ea:	4b9e      	ldr	r3, [pc, #632]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d10c      	bne.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80052f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052fc:	4b99      	ldr	r3, [pc, #612]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	4a98      	ldr	r2, [pc, #608]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
 800530c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800530e:	e01e      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005310:	4b94      	ldr	r3, [pc, #592]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531c:	d106      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005324:	d102      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005326:	4b91      	ldr	r3, [pc, #580]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800532a:	e010      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800532c:	4b8d      	ldr	r3, [pc, #564]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005338:	d106      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005340:	d102      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005342:	4b8b      	ldr	r3, [pc, #556]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005346:	e002      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800534c:	e12b      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800534e:	e12a      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005354:	e127      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535c:	d133      	bne.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800535e:	4b81      	ldr	r3, [pc, #516]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005366:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005374:	d012      	beq.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005376:	e023      	b.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005378:	4b7a      	ldr	r3, [pc, #488]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005384:	d107      	bne.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fbd0 	bl	8005b30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005394:	e107      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800539a:	e104      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800539c:	4b71      	ldr	r3, [pc, #452]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a8:	d107      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053aa:	f107 0318 	add.w	r3, r7, #24
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f916 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80053b8:	e0f5      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053be:	e0f2      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053c4:	e0ef      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053cc:	f040 8091 	bne.w	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80053d0:	4b64      	ldr	r3, [pc, #400]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80053d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80053e0:	f000 8081 	beq.w	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80053ea:	d87f      	bhi.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053f2:	d06b      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053fa:	d877      	bhi.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005402:	d056      	beq.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540a:	d86f      	bhi.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005412:	d03b      	beq.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800541a:	d867      	bhi.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005422:	d021      	beq.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542a:	d85f      	bhi.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005438:	d004      	beq.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 800543a:	e057      	b.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800543c:	f000 f8ba 	bl	80055b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005440:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005442:	e0b0      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005444:	4b47      	ldr	r3, [pc, #284]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800544c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005450:	d107      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005452:	f107 0318 	add.w	r3, r7, #24
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f8c2 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005460:	e0a1      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005466:	e09e      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005468:	4b3e      	ldr	r3, [pc, #248]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005474:	d107      	bne.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005476:	f107 030c 	add.w	r3, r7, #12
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fa04 	bl	8005888 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005484:	e08f      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800548a:	e08c      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800548c:	4b35      	ldr	r3, [pc, #212]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b04      	cmp	r3, #4
 8005496:	d109      	bne.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005498:	4b32      	ldr	r3, [pc, #200]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	08db      	lsrs	r3, r3, #3
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	4a31      	ldr	r2, [pc, #196]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054aa:	e07c      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054b0:	e079      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80054b2:	4b2c      	ldr	r3, [pc, #176]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054be:	d102      	bne.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 80054c0:	4b2a      	ldr	r3, [pc, #168]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80054c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054c4:	e06f      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ca:	e06c      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054cc:	4b25      	ldr	r3, [pc, #148]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054d8:	d102      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 80054da:	4b25      	ldr	r3, [pc, #148]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80054dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054de:	e062      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054e4:	e05f      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80054e6:	4b23      	ldr	r3, [pc, #140]	; (8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ea:	e05c      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f0:	e059      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f8:	d153      	bne.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80054fa:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80054fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005502:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800550a:	d035      	beq.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005512:	d843      	bhi.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005520:	d00d      	beq.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8005522:	e03b      	b.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005524:	4b0f      	ldr	r3, [pc, #60]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005530:	d102      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005536:	e036      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800553c:	e033      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800554a:	d107      	bne.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800554c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005550:	4618      	mov	r0, r3
 8005552:	f000 faed 	bl	8005b30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800555a:	e024      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005560:	e021      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005562:	bf00      	nop
 8005564:	58024400 	.word	0x58024400
 8005568:	03d09000 	.word	0x03d09000
 800556c:	003d0900 	.word	0x003d0900
 8005570:	007a1200 	.word	0x007a1200
 8005574:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005578:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005584:	d107      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005586:	f107 0318 	add.w	r3, r7, #24
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f828 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005594:	e007      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005596:	2300      	movs	r3, #0
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800559a:	e004      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055a0:	e001      	b.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 80055a2:	2300      	movs	r3, #0
 80055a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80055a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3740      	adds	r7, #64	; 0x40
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	58024400 	.word	0x58024400

080055b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80055b8:	f7fe fc6a 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 80055bc:	4602      	mov	r2, r0
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	091b      	lsrs	r3, r3, #4
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	4904      	ldr	r1, [pc, #16]	; (80055dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80055ca:	5ccb      	ldrb	r3, [r1, r3]
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	58024400 	.word	0x58024400
 80055dc:	080081cc 	.word	0x080081cc

080055e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b089      	sub	sp, #36	; 0x24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055e8:	4ba1      	ldr	r3, [pc, #644]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80055f2:	4b9f      	ldr	r3, [pc, #636]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	0b1b      	lsrs	r3, r3, #12
 80055f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055fe:	4b9c      	ldr	r3, [pc, #624]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	091b      	lsrs	r3, r3, #4
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800560a:	4b99      	ldr	r3, [pc, #612]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	08db      	lsrs	r3, r3, #3
 8005610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8111 	beq.w	8005850 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b02      	cmp	r3, #2
 8005632:	f000 8083 	beq.w	800573c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b02      	cmp	r3, #2
 800563a:	f200 80a1 	bhi.w	8005780 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d056      	beq.n	80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800564a:	e099      	b.n	8005780 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800564c:	4b88      	ldr	r3, [pc, #544]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d02d      	beq.n	80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005658:	4b85      	ldr	r3, [pc, #532]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	08db      	lsrs	r3, r3, #3
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	4a84      	ldr	r2, [pc, #528]	; (8005874 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
 8005668:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005682:	4b7b      	ldr	r3, [pc, #492]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005692:	ed97 6a03 	vldr	s12, [r7, #12]
 8005696:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800569a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056b2:	e087      	b.n	80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800587c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80056c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c6:	4b6a      	ldr	r3, [pc, #424]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056f6:	e065      	b.n	80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005702:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570a:	4b59      	ldr	r3, [pc, #356]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571a:	ed97 6a03 	vldr	s12, [r7, #12]
 800571e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800572e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800573a:	e043      	b.n	80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005746:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005884 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800574a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574e:	4b48      	ldr	r3, [pc, #288]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005762:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800577e:	e021      	b.n	80057c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800578e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005792:	4b37      	ldr	r3, [pc, #220]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80057c4:	4b2a      	ldr	r3, [pc, #168]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	0a5b      	lsrs	r3, r3, #9
 80057ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057de:	edd7 6a07 	vldr	s13, [r7, #28]
 80057e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ea:	ee17 2a90 	vmov	r2, s15
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80057f2:	4b1f      	ldr	r3, [pc, #124]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	0c1b      	lsrs	r3, r3, #16
 80057f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005808:	ee37 7a87 	vadd.f32	s14, s15, s14
 800580c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005818:	ee17 2a90 	vmov	r2, s15
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005820:	4b13      	ldr	r3, [pc, #76]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	0e1b      	lsrs	r3, r3, #24
 8005826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800583a:	edd7 6a07 	vldr	s13, [r7, #28]
 800583e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005846:	ee17 2a90 	vmov	r2, s15
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800584e:	e008      	b.n	8005862 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	609a      	str	r2, [r3, #8]
}
 8005862:	bf00      	nop
 8005864:	3724      	adds	r7, #36	; 0x24
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	58024400 	.word	0x58024400
 8005874:	03d09000 	.word	0x03d09000
 8005878:	46000000 	.word	0x46000000
 800587c:	4c742400 	.word	0x4c742400
 8005880:	4a742400 	.word	0x4a742400
 8005884:	4af42400 	.word	0x4af42400

08005888 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005888:	b480      	push	{r7}
 800588a:	b089      	sub	sp, #36	; 0x24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005890:	4ba1      	ldr	r3, [pc, #644]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800589a:	4b9f      	ldr	r3, [pc, #636]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	0d1b      	lsrs	r3, r3, #20
 80058a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80058a6:	4b9c      	ldr	r3, [pc, #624]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	0a1b      	lsrs	r3, r3, #8
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80058b2:	4b99      	ldr	r3, [pc, #612]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	08db      	lsrs	r3, r3, #3
 80058b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8111 	beq.w	8005af8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	f000 8083 	beq.w	80059e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	f200 80a1 	bhi.w	8005a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d056      	beq.n	80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80058f2:	e099      	b.n	8005a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f4:	4b88      	ldr	r3, [pc, #544]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d02d      	beq.n	800595c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005900:	4b85      	ldr	r3, [pc, #532]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	08db      	lsrs	r3, r3, #3
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	4a84      	ldr	r2, [pc, #528]	; (8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	ee07 3a90 	vmov	s15, r3
 8005918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592a:	4b7b      	ldr	r3, [pc, #492]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593a:	ed97 6a03 	vldr	s12, [r7, #12]
 800593e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005956:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800595a:	e087      	b.n	8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005966:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800596a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596e:	4b6a      	ldr	r3, [pc, #424]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005982:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800599e:	e065      	b.n	8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b2:	4b59      	ldr	r3, [pc, #356]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059e2:	e043      	b.n	8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80059f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f6:	4b48      	ldr	r3, [pc, #288]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a26:	e021      	b.n	8005a6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3a:	4b37      	ldr	r3, [pc, #220]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005a6c:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	0a5b      	lsrs	r3, r3, #9
 8005a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a92:	ee17 2a90 	vmov	r2, s15
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005a9a:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	0c1b      	lsrs	r3, r3, #16
 8005aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ab4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac0:	ee17 2a90 	vmov	r2, s15
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005ac8:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	0e1b      	lsrs	r3, r3, #24
 8005ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aee:	ee17 2a90 	vmov	r2, s15
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005af6:	e008      	b.n	8005b0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	609a      	str	r2, [r3, #8]
}
 8005b0a:	bf00      	nop
 8005b0c:	3724      	adds	r7, #36	; 0x24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	58024400 	.word	0x58024400
 8005b1c:	03d09000 	.word	0x03d09000
 8005b20:	46000000 	.word	0x46000000
 8005b24:	4c742400 	.word	0x4c742400
 8005b28:	4a742400 	.word	0x4a742400
 8005b2c:	4af42400 	.word	0x4af42400

08005b30 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b089      	sub	sp, #36	; 0x24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b38:	4ba0      	ldr	r3, [pc, #640]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005b42:	4b9e      	ldr	r3, [pc, #632]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	091b      	lsrs	r3, r3, #4
 8005b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b4c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005b4e:	4b9b      	ldr	r3, [pc, #620]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005b58:	4b98      	ldr	r3, [pc, #608]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	08db      	lsrs	r3, r3, #3
 8005b5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	fb02 f303 	mul.w	r3, r2, r3
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b70:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8111 	beq.w	8005d9e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	f000 8083 	beq.w	8005c8a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	f200 80a1 	bhi.w	8005cce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d056      	beq.n	8005c46 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005b98:	e099      	b.n	8005cce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b9a:	4b88      	ldr	r3, [pc, #544]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d02d      	beq.n	8005c02 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ba6:	4b85      	ldr	r3, [pc, #532]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	08db      	lsrs	r3, r3, #3
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	4a83      	ldr	r2, [pc, #524]	; (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	ee07 3a90 	vmov	s15, r3
 8005bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd0:	4b7a      	ldr	r3, [pc, #488]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c00:	e087      	b.n	8005d12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	ee07 3a90 	vmov	s15, r3
 8005c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c14:	4b69      	ldr	r3, [pc, #420]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c24:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c28:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c44:	e065      	b.n	8005d12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c50:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005dcc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c58:	4b58      	ldr	r3, [pc, #352]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c60:	ee07 3a90 	vmov	s15, r3
 8005c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c88:	e043      	b.n	8005d12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c94:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9c:	4b47      	ldr	r3, [pc, #284]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca4:	ee07 3a90 	vmov	s15, r3
 8005ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cb0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ccc:	e021      	b.n	8005d12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce0:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d10:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005d12:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	0a5b      	lsrs	r3, r3, #9
 8005d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d1c:	ee07 3a90 	vmov	s15, r3
 8005d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d38:	ee17 2a90 	vmov	r2, s15
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d66:	ee17 2a90 	vmov	r2, s15
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d72:	0e1b      	lsrs	r3, r3, #24
 8005d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d94:	ee17 2a90 	vmov	r2, s15
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005d9c:	e008      	b.n	8005db0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	3724      	adds	r7, #36	; 0x24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	58024400 	.word	0x58024400
 8005dc0:	03d09000 	.word	0x03d09000
 8005dc4:	46000000 	.word	0x46000000
 8005dc8:	4c742400 	.word	0x4c742400
 8005dcc:	4a742400 	.word	0x4a742400
 8005dd0:	4af42400 	.word	0x4af42400

08005dd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005de2:	4b53      	ldr	r3, [pc, #332]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d101      	bne.n	8005df2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e099      	b.n	8005f26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005df2:	4b4f      	ldr	r3, [pc, #316]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a4e      	ldr	r2, [pc, #312]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005df8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfe:	f7fb facf 	bl	80013a0 <HAL_GetTick>
 8005e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e04:	e008      	b.n	8005e18 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e06:	f7fb facb 	bl	80013a0 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e086      	b.n	8005f26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e18:	4b45      	ldr	r3, [pc, #276]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f0      	bne.n	8005e06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e24:	4b42      	ldr	r3, [pc, #264]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	031b      	lsls	r3, r3, #12
 8005e32:	493f      	ldr	r1, [pc, #252]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	628b      	str	r3, [r1, #40]	; 0x28
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	025b      	lsls	r3, r3, #9
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	061b      	lsls	r3, r3, #24
 8005e64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e68:	4931      	ldr	r1, [pc, #196]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e6e:	4b30      	ldr	r3, [pc, #192]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	492d      	ldr	r1, [pc, #180]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e80:	4b2b      	ldr	r3, [pc, #172]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f023 0220 	bic.w	r2, r3, #32
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	4928      	ldr	r1, [pc, #160]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e92:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	4a26      	ldr	r2, [pc, #152]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e98:	f023 0310 	bic.w	r3, r3, #16
 8005e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e9e:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea2:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <RCCEx_PLL2_Config+0x160>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	69d2      	ldr	r2, [r2, #28]
 8005eaa:	00d2      	lsls	r2, r2, #3
 8005eac:	4920      	ldr	r1, [pc, #128]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	f043 0310 	orr.w	r3, r3, #16
 8005ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a19      	ldr	r2, [pc, #100]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ed0:	e00f      	b.n	8005ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d106      	bne.n	8005ee6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ed8:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ee4:	e005      	b.n	8005ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ee6:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	4a11      	ldr	r2, [pc, #68]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ef2:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a0e      	ldr	r2, [pc, #56]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ef8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005efe:	f7fb fa4f 	bl	80013a0 <HAL_GetTick>
 8005f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f04:	e008      	b.n	8005f18 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f06:	f7fb fa4b 	bl	80013a0 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e006      	b.n	8005f26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	58024400 	.word	0x58024400
 8005f34:	ffff0007 	.word	0xffff0007

08005f38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f46:	4b53      	ldr	r3, [pc, #332]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d101      	bne.n	8005f56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e099      	b.n	800608a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f56:	4b4f      	ldr	r3, [pc, #316]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a4e      	ldr	r2, [pc, #312]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f62:	f7fb fa1d 	bl	80013a0 <HAL_GetTick>
 8005f66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f68:	e008      	b.n	8005f7c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f6a:	f7fb fa19 	bl	80013a0 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e086      	b.n	800608a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f7c:	4b45      	ldr	r3, [pc, #276]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f0      	bne.n	8005f6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f88:	4b42      	ldr	r3, [pc, #264]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	051b      	lsls	r3, r3, #20
 8005f96:	493f      	ldr	r1, [pc, #252]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	025b      	lsls	r3, r3, #9
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fcc:	4931      	ldr	r1, [pc, #196]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005fd2:	4b30      	ldr	r3, [pc, #192]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	492d      	ldr	r1, [pc, #180]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fe4:	4b2b      	ldr	r3, [pc, #172]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	4928      	ldr	r1, [pc, #160]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ff6:	4b27      	ldr	r3, [pc, #156]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	4a26      	ldr	r2, [pc, #152]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006002:	4b24      	ldr	r3, [pc, #144]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <RCCEx_PLL3_Config+0x160>)
 8006008:	4013      	ands	r3, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	69d2      	ldr	r2, [r2, #28]
 800600e:	00d2      	lsls	r2, r2, #3
 8006010:	4920      	ldr	r1, [pc, #128]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006016:	4b1f      	ldr	r3, [pc, #124]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800601c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006028:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a19      	ldr	r2, [pc, #100]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800602e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006034:	e00f      	b.n	8006056 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d106      	bne.n	800604a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800603c:	4b15      	ldr	r3, [pc, #84]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006042:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006046:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006048:	e005      	b.n	8006056 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800604a:	4b12      	ldr	r3, [pc, #72]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	4a11      	ldr	r2, [pc, #68]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006054:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a0e      	ldr	r2, [pc, #56]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800605c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006062:	f7fb f99d 	bl	80013a0 <HAL_GetTick>
 8006066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006068:	e008      	b.n	800607c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800606a:	f7fb f999 	bl	80013a0 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e006      	b.n	800608a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	58024400 	.word	0x58024400
 8006098:	ffff0007 	.word	0xffff0007

0800609c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e091      	b.n	80061d2 <HAL_RNG_Init+0x136>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7a5b      	ldrb	r3, [r3, #9]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d105      	bne.n	80060c4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fa fefc 	bl	8000ebc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0204 	bic.w	r2, r2, #4
 80060d8:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b3e      	ldr	r3, [pc, #248]	; (80061dc <HAL_RNG_Init+0x140>)
 80060e2:	4013      	ands	r3, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6852      	ldr	r2, [r2, #4]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060f2:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a39      	ldr	r2, [pc, #228]	; (80061e0 <HAL_RNG_Init+0x144>)
 80060fa:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a38      	ldr	r2, [pc, #224]	; (80061e4 <HAL_RNG_Init+0x148>)
 8006102:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8006112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006114:	f7fb f944 	bl	80013a0 <HAL_GetTick>
 8006118:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800611a:	e016      	b.n	800614a <HAL_RNG_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800611c:	f7fb f940 	bl	80013a0 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d90f      	bls.n	800614a <HAL_RNG_Init+0xae>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006138:	d107      	bne.n	800614a <HAL_RNG_Init+0xae>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e043      	b.n	80061d2 <HAL_RNG_Init+0x136>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006158:	d0e0      	beq.n	800611c <HAL_RNG_Init+0x80>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0204 	orr.w	r2, r2, #4
 8006168:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d104      	bne.n	8006182 <HAL_RNG_Init+0xe6>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2204      	movs	r2, #4
 800617c:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e027      	b.n	80061d2 <HAL_RNG_Init+0x136>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8006182:	f7fb f90d 	bl	80013a0 <HAL_GetTick>
 8006186:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006188:	e015      	b.n	80061b6 <HAL_RNG_Init+0x11a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800618a:	f7fb f909 	bl	80013a0 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d90e      	bls.n	80061b6 <HAL_RNG_Init+0x11a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d107      	bne.n	80061b6 <HAL_RNG_Init+0x11a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2204      	movs	r2, #4
 80061aa:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e00d      	b.n	80061d2 <HAL_RNG_Init+0x136>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d0e2      	beq.n	800618a <HAL_RNG_Init+0xee>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	bfffffdf 	.word	0xbfffffdf
 80061e0:	17590abc 	.word	0x17590abc
 80061e4:	000caa74 	.word	0x000caa74

080061e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d06a      	beq.n	80062d0 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fa fe8c 	bl	8000f2c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	22ca      	movs	r2, #202	; 0xca
 8006222:	625a      	str	r2, [r3, #36]	; 0x24
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2253      	movs	r2, #83	; 0x53
 800622a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8b5 	bl	800639c <RTC_EnterInitMode>
 8006232:	4603      	mov	r3, r0
 8006234:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d13e      	bne.n	80062ba <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6999      	ldr	r1, [r3, #24]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b25      	ldr	r3, [pc, #148]	; (80062dc <HAL_RTC_Init+0xf4>)
 8006248:	400b      	ands	r3, r1
 800624a:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6999      	ldr	r1, [r3, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	0419      	lsls	r1, r3, #16
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f8c3 	bl	8006408 <RTC_ExitInitMode>
 8006282:	4603      	mov	r3, r0
 8006284:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d116      	bne.n	80062ba <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800629a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6999      	ldr	r1, [r3, #24]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	22ff      	movs	r2, #255	; 0xff
 80062c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d103      	bne.n	80062d0 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	fb8fffbf 	.word	0xfb8fffbf

080062e0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80062e8:	4b13      	ldr	r3, [pc, #76]	; (8006338 <HAL_RTC_AlarmIRQHandler+0x58>)
 80062ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062ee:	609a      	str	r2, [r3, #8]
#endif /* DUAL_CORE */

#if defined(RTC_MISR_ALRAMF)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	60fb      	str	r3, [r7, #12]

  if((tmp & RTC_MISR_ALRAMF) != 0u)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d006      	beq.n	8006310 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2201      	movs	r2, #1
 8006308:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f816 	bl	800633c <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }
#endif /* RTC_MISR_ALRAMF */

#if defined(RTC_MISR_ALRBMF)
  if((tmp & RTC_MISR_ALRBMF) != 0u)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d006      	beq.n	8006328 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2202      	movs	r2, #2
 8006320:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f8ae 	bl	8006484 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8006330:	bf00      	nop
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	58000080 	.word	0x58000080

0800633c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006366:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8006368:	f7fb f81a 	bl	80013a0 <HAL_GetTick>
 800636c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800636e:	e009      	b.n	8006384 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006370:	f7fb f816 	bl	80013a0 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800637e:	d901      	bls.n	8006384 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e007      	b.n	8006394 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0ee      	beq.n	8006370 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d123      	bne.n	80063fe <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80063c6:	f7fa ffeb 	bl	80013a0 <HAL_GetTick>
 80063ca:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80063cc:	e00d      	b.n	80063ea <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80063ce:	f7fa ffe7 	bl	80013a0 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063dc:	d905      	bls.n	80063ea <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2203      	movs	r2, #3
 80063e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <RTC_EnterInitMode+0x62>
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d1e7      	bne.n	80063ce <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006414:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <RTC_ExitInitMode+0x78>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4a19      	ldr	r2, [pc, #100]	; (8006480 <RTC_ExitInitMode+0x78>)
 800641a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800641e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006420:	4b17      	ldr	r3, [pc, #92]	; (8006480 <RTC_ExitInitMode+0x78>)
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10c      	bne.n	8006446 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7ff ff8f 	bl	8006350 <HAL_RTC_WaitForSynchro>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01e      	beq.n	8006476 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2203      	movs	r2, #3
 800643c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	73fb      	strb	r3, [r7, #15]
 8006444:	e017      	b.n	8006476 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006446:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <RTC_ExitInitMode+0x78>)
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	4a0d      	ldr	r2, [pc, #52]	; (8006480 <RTC_ExitInitMode+0x78>)
 800644c:	f023 0320 	bic.w	r3, r3, #32
 8006450:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff ff7c 	bl	8006350 <HAL_RTC_WaitForSynchro>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d005      	beq.n	800646a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2203      	movs	r2, #3
 8006462:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <RTC_ExitInitMode+0x78>)
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	4a04      	ldr	r2, [pc, #16]	; (8006480 <RTC_ExitInitMode+0x78>)
 8006470:	f043 0320 	orr.w	r3, r3, #32
 8006474:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006476:	7bfb      	ldrb	r3, [r7, #15]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	58004000 	.word	0x58004000

08006484 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e042      	b.n	8006530 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fa fd6d 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2224      	movs	r2, #36	; 0x24
 80064c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0201 	bic.w	r2, r2, #1
 80064d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8c2 	bl	8006664 <UART_SetConfig>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e022      	b.n	8006530 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 ff14 	bl	8007320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689a      	ldr	r2, [r3, #8]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006516:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 ff9b 	bl	8007464 <UART_CheckIdleState>
 800652e:	4603      	mov	r3, r0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	; 0x28
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654e:	2b20      	cmp	r3, #32
 8006550:	f040 8083 	bne.w	800665a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <HAL_UART_Transmit+0x28>
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e07b      	b.n	800665c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800656a:	2b01      	cmp	r3, #1
 800656c:	d101      	bne.n	8006572 <HAL_UART_Transmit+0x3a>
 800656e:	2302      	movs	r3, #2
 8006570:	e074      	b.n	800665c <HAL_UART_Transmit+0x124>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2221      	movs	r2, #33	; 0x21
 8006586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800658a:	f7fa ff09 	bl	80013a0 <HAL_GetTick>
 800658e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	88fa      	ldrh	r2, [r7, #6]
 8006594:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	88fa      	ldrh	r2, [r7, #6]
 800659c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a8:	d108      	bne.n	80065bc <HAL_UART_Transmit+0x84>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	e003      	b.n	80065c4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80065cc:	e02c      	b.n	8006628 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2200      	movs	r2, #0
 80065d6:	2180      	movs	r1, #128	; 0x80
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 ff8e 	bl	80074fa <UART_WaitOnFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e039      	b.n	800665c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	3302      	adds	r3, #2
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	e007      	b.n	8006616 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	3301      	adds	r3, #1
 8006614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1cc      	bne.n	80065ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2200      	movs	r2, #0
 800663c:	2140      	movs	r1, #64	; 0x40
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 ff5b 	bl	80074fa <UART_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e006      	b.n	800665c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	e000      	b.n	800665c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800665a:	2302      	movs	r3, #2
  }
}
 800665c:	4618      	mov	r0, r3
 800665e:	3720      	adds	r7, #32
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006664:	b5b0      	push	{r4, r5, r7, lr}
 8006666:	b08e      	sub	sp, #56	; 0x38
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	4313      	orrs	r3, r2
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4bbf      	ldr	r3, [pc, #764]	; (8006990 <UART_SetConfig+0x32c>)
 8006692:	4013      	ands	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6812      	ldr	r2, [r2, #0]
 8006698:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800669a:	430b      	orrs	r3, r1
 800669c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4ab5      	ldr	r2, [pc, #724]	; (8006994 <UART_SetConfig+0x330>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d004      	beq.n	80066ce <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066ca:	4313      	orrs	r3, r2
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	4bb0      	ldr	r3, [pc, #704]	; (8006998 <UART_SetConfig+0x334>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066de:	430b      	orrs	r3, r1
 80066e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f023 010f 	bic.w	r1, r3, #15
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4aa7      	ldr	r2, [pc, #668]	; (800699c <UART_SetConfig+0x338>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d176      	bne.n	80067f0 <UART_SetConfig+0x18c>
 8006702:	4ba7      	ldr	r3, [pc, #668]	; (80069a0 <UART_SetConfig+0x33c>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800670a:	2b28      	cmp	r3, #40	; 0x28
 800670c:	d86c      	bhi.n	80067e8 <UART_SetConfig+0x184>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <UART_SetConfig+0xb0>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	080067b9 	.word	0x080067b9
 8006718:	080067e9 	.word	0x080067e9
 800671c:	080067e9 	.word	0x080067e9
 8006720:	080067e9 	.word	0x080067e9
 8006724:	080067e9 	.word	0x080067e9
 8006728:	080067e9 	.word	0x080067e9
 800672c:	080067e9 	.word	0x080067e9
 8006730:	080067e9 	.word	0x080067e9
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067e9 	.word	0x080067e9
 800673c:	080067e9 	.word	0x080067e9
 8006740:	080067e9 	.word	0x080067e9
 8006744:	080067e9 	.word	0x080067e9
 8006748:	080067e9 	.word	0x080067e9
 800674c:	080067e9 	.word	0x080067e9
 8006750:	080067e9 	.word	0x080067e9
 8006754:	080067c9 	.word	0x080067c9
 8006758:	080067e9 	.word	0x080067e9
 800675c:	080067e9 	.word	0x080067e9
 8006760:	080067e9 	.word	0x080067e9
 8006764:	080067e9 	.word	0x080067e9
 8006768:	080067e9 	.word	0x080067e9
 800676c:	080067e9 	.word	0x080067e9
 8006770:	080067e9 	.word	0x080067e9
 8006774:	080067d1 	.word	0x080067d1
 8006778:	080067e9 	.word	0x080067e9
 800677c:	080067e9 	.word	0x080067e9
 8006780:	080067e9 	.word	0x080067e9
 8006784:	080067e9 	.word	0x080067e9
 8006788:	080067e9 	.word	0x080067e9
 800678c:	080067e9 	.word	0x080067e9
 8006790:	080067e9 	.word	0x080067e9
 8006794:	080067d9 	.word	0x080067d9
 8006798:	080067e9 	.word	0x080067e9
 800679c:	080067e9 	.word	0x080067e9
 80067a0:	080067e9 	.word	0x080067e9
 80067a4:	080067e9 	.word	0x080067e9
 80067a8:	080067e9 	.word	0x080067e9
 80067ac:	080067e9 	.word	0x080067e9
 80067b0:	080067e9 	.word	0x080067e9
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067be:	e326      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c6:	e322      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ce:	e31e      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d6:	e31a      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80067d8:	2320      	movs	r3, #32
 80067da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067de:	e316      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067e6:	e312      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ee:	e30e      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a6b      	ldr	r2, [pc, #428]	; (80069a4 <UART_SetConfig+0x340>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d130      	bne.n	800685c <UART_SetConfig+0x1f8>
 80067fa:	4b69      	ldr	r3, [pc, #420]	; (80069a0 <UART_SetConfig+0x33c>)
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b05      	cmp	r3, #5
 8006804:	d826      	bhi.n	8006854 <UART_SetConfig+0x1f0>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <UART_SetConfig+0x1a8>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006825 	.word	0x08006825
 8006810:	0800682d 	.word	0x0800682d
 8006814:	08006835 	.word	0x08006835
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006845 	.word	0x08006845
 8006820:	0800684d 	.word	0x0800684d
 8006824:	2300      	movs	r3, #0
 8006826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800682a:	e2f0      	b.n	8006e0e <UART_SetConfig+0x7aa>
 800682c:	2304      	movs	r3, #4
 800682e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006832:	e2ec      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006834:	2308      	movs	r3, #8
 8006836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800683a:	e2e8      	b.n	8006e0e <UART_SetConfig+0x7aa>
 800683c:	2310      	movs	r3, #16
 800683e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006842:	e2e4      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006844:	2320      	movs	r3, #32
 8006846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800684a:	e2e0      	b.n	8006e0e <UART_SetConfig+0x7aa>
 800684c:	2340      	movs	r3, #64	; 0x40
 800684e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006852:	e2dc      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006854:	2380      	movs	r3, #128	; 0x80
 8006856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800685a:	e2d8      	b.n	8006e0e <UART_SetConfig+0x7aa>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a51      	ldr	r2, [pc, #324]	; (80069a8 <UART_SetConfig+0x344>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d130      	bne.n	80068c8 <UART_SetConfig+0x264>
 8006866:	4b4e      	ldr	r3, [pc, #312]	; (80069a0 <UART_SetConfig+0x33c>)
 8006868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	2b05      	cmp	r3, #5
 8006870:	d826      	bhi.n	80068c0 <UART_SetConfig+0x25c>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0x214>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	08006891 	.word	0x08006891
 800687c:	08006899 	.word	0x08006899
 8006880:	080068a1 	.word	0x080068a1
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068b1 	.word	0x080068b1
 800688c:	080068b9 	.word	0x080068b9
 8006890:	2300      	movs	r3, #0
 8006892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006896:	e2ba      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006898:	2304      	movs	r3, #4
 800689a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689e:	e2b6      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80068a0:	2308      	movs	r3, #8
 80068a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a6:	e2b2      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80068a8:	2310      	movs	r3, #16
 80068aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ae:	e2ae      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80068b0:	2320      	movs	r3, #32
 80068b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b6:	e2aa      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80068b8:	2340      	movs	r3, #64	; 0x40
 80068ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068be:	e2a6      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80068c0:	2380      	movs	r3, #128	; 0x80
 80068c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c6:	e2a2      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a37      	ldr	r2, [pc, #220]	; (80069ac <UART_SetConfig+0x348>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d130      	bne.n	8006934 <UART_SetConfig+0x2d0>
 80068d2:	4b33      	ldr	r3, [pc, #204]	; (80069a0 <UART_SetConfig+0x33c>)
 80068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d826      	bhi.n	800692c <UART_SetConfig+0x2c8>
 80068de:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <UART_SetConfig+0x280>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	080068fd 	.word	0x080068fd
 80068e8:	08006905 	.word	0x08006905
 80068ec:	0800690d 	.word	0x0800690d
 80068f0:	08006915 	.word	0x08006915
 80068f4:	0800691d 	.word	0x0800691d
 80068f8:	08006925 	.word	0x08006925
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006902:	e284      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006904:	2304      	movs	r3, #4
 8006906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690a:	e280      	b.n	8006e0e <UART_SetConfig+0x7aa>
 800690c:	2308      	movs	r3, #8
 800690e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006912:	e27c      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006914:	2310      	movs	r3, #16
 8006916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800691a:	e278      	b.n	8006e0e <UART_SetConfig+0x7aa>
 800691c:	2320      	movs	r3, #32
 800691e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006922:	e274      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006924:	2340      	movs	r3, #64	; 0x40
 8006926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800692a:	e270      	b.n	8006e0e <UART_SetConfig+0x7aa>
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006932:	e26c      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <UART_SetConfig+0x34c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d142      	bne.n	80069c4 <UART_SetConfig+0x360>
 800693e:	4b18      	ldr	r3, [pc, #96]	; (80069a0 <UART_SetConfig+0x33c>)
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b05      	cmp	r3, #5
 8006948:	d838      	bhi.n	80069bc <UART_SetConfig+0x358>
 800694a:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <UART_SetConfig+0x2ec>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	08006969 	.word	0x08006969
 8006954:	08006971 	.word	0x08006971
 8006958:	08006979 	.word	0x08006979
 800695c:	08006981 	.word	0x08006981
 8006960:	08006989 	.word	0x08006989
 8006964:	080069b5 	.word	0x080069b5
 8006968:	2300      	movs	r3, #0
 800696a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800696e:	e24e      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006970:	2304      	movs	r3, #4
 8006972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006976:	e24a      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006978:	2308      	movs	r3, #8
 800697a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800697e:	e246      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006980:	2310      	movs	r3, #16
 8006982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006986:	e242      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006988:	2320      	movs	r3, #32
 800698a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800698e:	e23e      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006990:	cfff69f3 	.word	0xcfff69f3
 8006994:	58000c00 	.word	0x58000c00
 8006998:	11fff4ff 	.word	0x11fff4ff
 800699c:	40011000 	.word	0x40011000
 80069a0:	58024400 	.word	0x58024400
 80069a4:	40004400 	.word	0x40004400
 80069a8:	40004800 	.word	0x40004800
 80069ac:	40004c00 	.word	0x40004c00
 80069b0:	40005000 	.word	0x40005000
 80069b4:	2340      	movs	r3, #64	; 0x40
 80069b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ba:	e228      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80069bc:	2380      	movs	r3, #128	; 0x80
 80069be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069c2:	e224      	b.n	8006e0e <UART_SetConfig+0x7aa>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4ab1      	ldr	r2, [pc, #708]	; (8006c90 <UART_SetConfig+0x62c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d176      	bne.n	8006abc <UART_SetConfig+0x458>
 80069ce:	4bb1      	ldr	r3, [pc, #708]	; (8006c94 <UART_SetConfig+0x630>)
 80069d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d6:	2b28      	cmp	r3, #40	; 0x28
 80069d8:	d86c      	bhi.n	8006ab4 <UART_SetConfig+0x450>
 80069da:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <UART_SetConfig+0x37c>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	08006a85 	.word	0x08006a85
 80069e4:	08006ab5 	.word	0x08006ab5
 80069e8:	08006ab5 	.word	0x08006ab5
 80069ec:	08006ab5 	.word	0x08006ab5
 80069f0:	08006ab5 	.word	0x08006ab5
 80069f4:	08006ab5 	.word	0x08006ab5
 80069f8:	08006ab5 	.word	0x08006ab5
 80069fc:	08006ab5 	.word	0x08006ab5
 8006a00:	08006a8d 	.word	0x08006a8d
 8006a04:	08006ab5 	.word	0x08006ab5
 8006a08:	08006ab5 	.word	0x08006ab5
 8006a0c:	08006ab5 	.word	0x08006ab5
 8006a10:	08006ab5 	.word	0x08006ab5
 8006a14:	08006ab5 	.word	0x08006ab5
 8006a18:	08006ab5 	.word	0x08006ab5
 8006a1c:	08006ab5 	.word	0x08006ab5
 8006a20:	08006a95 	.word	0x08006a95
 8006a24:	08006ab5 	.word	0x08006ab5
 8006a28:	08006ab5 	.word	0x08006ab5
 8006a2c:	08006ab5 	.word	0x08006ab5
 8006a30:	08006ab5 	.word	0x08006ab5
 8006a34:	08006ab5 	.word	0x08006ab5
 8006a38:	08006ab5 	.word	0x08006ab5
 8006a3c:	08006ab5 	.word	0x08006ab5
 8006a40:	08006a9d 	.word	0x08006a9d
 8006a44:	08006ab5 	.word	0x08006ab5
 8006a48:	08006ab5 	.word	0x08006ab5
 8006a4c:	08006ab5 	.word	0x08006ab5
 8006a50:	08006ab5 	.word	0x08006ab5
 8006a54:	08006ab5 	.word	0x08006ab5
 8006a58:	08006ab5 	.word	0x08006ab5
 8006a5c:	08006ab5 	.word	0x08006ab5
 8006a60:	08006aa5 	.word	0x08006aa5
 8006a64:	08006ab5 	.word	0x08006ab5
 8006a68:	08006ab5 	.word	0x08006ab5
 8006a6c:	08006ab5 	.word	0x08006ab5
 8006a70:	08006ab5 	.word	0x08006ab5
 8006a74:	08006ab5 	.word	0x08006ab5
 8006a78:	08006ab5 	.word	0x08006ab5
 8006a7c:	08006ab5 	.word	0x08006ab5
 8006a80:	08006aad 	.word	0x08006aad
 8006a84:	2301      	movs	r3, #1
 8006a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a8a:	e1c0      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006a8c:	2304      	movs	r3, #4
 8006a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a92:	e1bc      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006a94:	2308      	movs	r3, #8
 8006a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a9a:	e1b8      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa2:	e1b4      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006aa4:	2320      	movs	r3, #32
 8006aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aaa:	e1b0      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006aac:	2340      	movs	r3, #64	; 0x40
 8006aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ab2:	e1ac      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aba:	e1a8      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a75      	ldr	r2, [pc, #468]	; (8006c98 <UART_SetConfig+0x634>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d130      	bne.n	8006b28 <UART_SetConfig+0x4c4>
 8006ac6:	4b73      	ldr	r3, [pc, #460]	; (8006c94 <UART_SetConfig+0x630>)
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	f003 0307 	and.w	r3, r3, #7
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d826      	bhi.n	8006b20 <UART_SetConfig+0x4bc>
 8006ad2:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <UART_SetConfig+0x474>)
 8006ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad8:	08006af1 	.word	0x08006af1
 8006adc:	08006af9 	.word	0x08006af9
 8006ae0:	08006b01 	.word	0x08006b01
 8006ae4:	08006b09 	.word	0x08006b09
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b19 	.word	0x08006b19
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006af6:	e18a      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006af8:	2304      	movs	r3, #4
 8006afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006afe:	e186      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b00:	2308      	movs	r3, #8
 8006b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b06:	e182      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b08:	2310      	movs	r3, #16
 8006b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b0e:	e17e      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b10:	2320      	movs	r3, #32
 8006b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b16:	e17a      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b18:	2340      	movs	r3, #64	; 0x40
 8006b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b1e:	e176      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b20:	2380      	movs	r3, #128	; 0x80
 8006b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b26:	e172      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a5b      	ldr	r2, [pc, #364]	; (8006c9c <UART_SetConfig+0x638>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d130      	bne.n	8006b94 <UART_SetConfig+0x530>
 8006b32:	4b58      	ldr	r3, [pc, #352]	; (8006c94 <UART_SetConfig+0x630>)
 8006b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	2b05      	cmp	r3, #5
 8006b3c:	d826      	bhi.n	8006b8c <UART_SetConfig+0x528>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <UART_SetConfig+0x4e0>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b5d 	.word	0x08006b5d
 8006b48:	08006b65 	.word	0x08006b65
 8006b4c:	08006b6d 	.word	0x08006b6d
 8006b50:	08006b75 	.word	0x08006b75
 8006b54:	08006b7d 	.word	0x08006b7d
 8006b58:	08006b85 	.word	0x08006b85
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b62:	e154      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b64:	2304      	movs	r3, #4
 8006b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b6a:	e150      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b72:	e14c      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b74:	2310      	movs	r3, #16
 8006b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b7a:	e148      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b7c:	2320      	movs	r3, #32
 8006b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b82:	e144      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b84:	2340      	movs	r3, #64	; 0x40
 8006b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b8a:	e140      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b8c:	2380      	movs	r3, #128	; 0x80
 8006b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b92:	e13c      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a41      	ldr	r2, [pc, #260]	; (8006ca0 <UART_SetConfig+0x63c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	f040 8082 	bne.w	8006ca4 <UART_SetConfig+0x640>
 8006ba0:	4b3c      	ldr	r3, [pc, #240]	; (8006c94 <UART_SetConfig+0x630>)
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ba8:	2b28      	cmp	r3, #40	; 0x28
 8006baa:	d86d      	bhi.n	8006c88 <UART_SetConfig+0x624>
 8006bac:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <UART_SetConfig+0x550>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006c59 	.word	0x08006c59
 8006bb8:	08006c89 	.word	0x08006c89
 8006bbc:	08006c89 	.word	0x08006c89
 8006bc0:	08006c89 	.word	0x08006c89
 8006bc4:	08006c89 	.word	0x08006c89
 8006bc8:	08006c89 	.word	0x08006c89
 8006bcc:	08006c89 	.word	0x08006c89
 8006bd0:	08006c89 	.word	0x08006c89
 8006bd4:	08006c61 	.word	0x08006c61
 8006bd8:	08006c89 	.word	0x08006c89
 8006bdc:	08006c89 	.word	0x08006c89
 8006be0:	08006c89 	.word	0x08006c89
 8006be4:	08006c89 	.word	0x08006c89
 8006be8:	08006c89 	.word	0x08006c89
 8006bec:	08006c89 	.word	0x08006c89
 8006bf0:	08006c89 	.word	0x08006c89
 8006bf4:	08006c69 	.word	0x08006c69
 8006bf8:	08006c89 	.word	0x08006c89
 8006bfc:	08006c89 	.word	0x08006c89
 8006c00:	08006c89 	.word	0x08006c89
 8006c04:	08006c89 	.word	0x08006c89
 8006c08:	08006c89 	.word	0x08006c89
 8006c0c:	08006c89 	.word	0x08006c89
 8006c10:	08006c89 	.word	0x08006c89
 8006c14:	08006c71 	.word	0x08006c71
 8006c18:	08006c89 	.word	0x08006c89
 8006c1c:	08006c89 	.word	0x08006c89
 8006c20:	08006c89 	.word	0x08006c89
 8006c24:	08006c89 	.word	0x08006c89
 8006c28:	08006c89 	.word	0x08006c89
 8006c2c:	08006c89 	.word	0x08006c89
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c79 	.word	0x08006c79
 8006c38:	08006c89 	.word	0x08006c89
 8006c3c:	08006c89 	.word	0x08006c89
 8006c40:	08006c89 	.word	0x08006c89
 8006c44:	08006c89 	.word	0x08006c89
 8006c48:	08006c89 	.word	0x08006c89
 8006c4c:	08006c89 	.word	0x08006c89
 8006c50:	08006c89 	.word	0x08006c89
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c5e:	e0d6      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006c60:	2304      	movs	r3, #4
 8006c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c66:	e0d2      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006c68:	2308      	movs	r3, #8
 8006c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c6e:	e0ce      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006c70:	2310      	movs	r3, #16
 8006c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c76:	e0ca      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006c78:	2320      	movs	r3, #32
 8006c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c7e:	e0c6      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c86:	e0c2      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006c88:	2380      	movs	r3, #128	; 0x80
 8006c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c8e:	e0be      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006c90:	40011400 	.word	0x40011400
 8006c94:	58024400 	.word	0x58024400
 8006c98:	40007800 	.word	0x40007800
 8006c9c:	40007c00 	.word	0x40007c00
 8006ca0:	40011800 	.word	0x40011800
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4aad      	ldr	r2, [pc, #692]	; (8006f60 <UART_SetConfig+0x8fc>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d176      	bne.n	8006d9c <UART_SetConfig+0x738>
 8006cae:	4bad      	ldr	r3, [pc, #692]	; (8006f64 <UART_SetConfig+0x900>)
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cb6:	2b28      	cmp	r3, #40	; 0x28
 8006cb8:	d86c      	bhi.n	8006d94 <UART_SetConfig+0x730>
 8006cba:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <UART_SetConfig+0x65c>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006d65 	.word	0x08006d65
 8006cc4:	08006d95 	.word	0x08006d95
 8006cc8:	08006d95 	.word	0x08006d95
 8006ccc:	08006d95 	.word	0x08006d95
 8006cd0:	08006d95 	.word	0x08006d95
 8006cd4:	08006d95 	.word	0x08006d95
 8006cd8:	08006d95 	.word	0x08006d95
 8006cdc:	08006d95 	.word	0x08006d95
 8006ce0:	08006d6d 	.word	0x08006d6d
 8006ce4:	08006d95 	.word	0x08006d95
 8006ce8:	08006d95 	.word	0x08006d95
 8006cec:	08006d95 	.word	0x08006d95
 8006cf0:	08006d95 	.word	0x08006d95
 8006cf4:	08006d95 	.word	0x08006d95
 8006cf8:	08006d95 	.word	0x08006d95
 8006cfc:	08006d95 	.word	0x08006d95
 8006d00:	08006d75 	.word	0x08006d75
 8006d04:	08006d95 	.word	0x08006d95
 8006d08:	08006d95 	.word	0x08006d95
 8006d0c:	08006d95 	.word	0x08006d95
 8006d10:	08006d95 	.word	0x08006d95
 8006d14:	08006d95 	.word	0x08006d95
 8006d18:	08006d95 	.word	0x08006d95
 8006d1c:	08006d95 	.word	0x08006d95
 8006d20:	08006d7d 	.word	0x08006d7d
 8006d24:	08006d95 	.word	0x08006d95
 8006d28:	08006d95 	.word	0x08006d95
 8006d2c:	08006d95 	.word	0x08006d95
 8006d30:	08006d95 	.word	0x08006d95
 8006d34:	08006d95 	.word	0x08006d95
 8006d38:	08006d95 	.word	0x08006d95
 8006d3c:	08006d95 	.word	0x08006d95
 8006d40:	08006d85 	.word	0x08006d85
 8006d44:	08006d95 	.word	0x08006d95
 8006d48:	08006d95 	.word	0x08006d95
 8006d4c:	08006d95 	.word	0x08006d95
 8006d50:	08006d95 	.word	0x08006d95
 8006d54:	08006d95 	.word	0x08006d95
 8006d58:	08006d95 	.word	0x08006d95
 8006d5c:	08006d95 	.word	0x08006d95
 8006d60:	08006d8d 	.word	0x08006d8d
 8006d64:	2301      	movs	r3, #1
 8006d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d6a:	e050      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d72:	e04c      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006d74:	2308      	movs	r3, #8
 8006d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d7a:	e048      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d82:	e044      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006d84:	2320      	movs	r3, #32
 8006d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d8a:	e040      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006d8c:	2340      	movs	r3, #64	; 0x40
 8006d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d92:	e03c      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006d94:	2380      	movs	r3, #128	; 0x80
 8006d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d9a:	e038      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a71      	ldr	r2, [pc, #452]	; (8006f68 <UART_SetConfig+0x904>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d130      	bne.n	8006e08 <UART_SetConfig+0x7a4>
 8006da6:	4b6f      	ldr	r3, [pc, #444]	; (8006f64 <UART_SetConfig+0x900>)
 8006da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	2b05      	cmp	r3, #5
 8006db0:	d826      	bhi.n	8006e00 <UART_SetConfig+0x79c>
 8006db2:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <UART_SetConfig+0x754>)
 8006db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db8:	08006dd1 	.word	0x08006dd1
 8006dbc:	08006dd9 	.word	0x08006dd9
 8006dc0:	08006de1 	.word	0x08006de1
 8006dc4:	08006de9 	.word	0x08006de9
 8006dc8:	08006df1 	.word	0x08006df1
 8006dcc:	08006df9 	.word	0x08006df9
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dd6:	e01a      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dde:	e016      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006de0:	2308      	movs	r3, #8
 8006de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006de6:	e012      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006de8:	2310      	movs	r3, #16
 8006dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dee:	e00e      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006df0:	2320      	movs	r3, #32
 8006df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006df6:	e00a      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006df8:	2340      	movs	r3, #64	; 0x40
 8006dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dfe:	e006      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006e00:	2380      	movs	r3, #128	; 0x80
 8006e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e06:	e002      	b.n	8006e0e <UART_SetConfig+0x7aa>
 8006e08:	2380      	movs	r3, #128	; 0x80
 8006e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a55      	ldr	r2, [pc, #340]	; (8006f68 <UART_SetConfig+0x904>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	f040 80f0 	bne.w	8006ffa <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e1e:	2b20      	cmp	r3, #32
 8006e20:	dc46      	bgt.n	8006eb0 <UART_SetConfig+0x84c>
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	db75      	blt.n	8006f12 <UART_SetConfig+0x8ae>
 8006e26:	3b02      	subs	r3, #2
 8006e28:	2b1e      	cmp	r3, #30
 8006e2a:	d872      	bhi.n	8006f12 <UART_SetConfig+0x8ae>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x7d0>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006eb7 	.word	0x08006eb7
 8006e38:	08006f13 	.word	0x08006f13
 8006e3c:	08006ebf 	.word	0x08006ebf
 8006e40:	08006f13 	.word	0x08006f13
 8006e44:	08006f13 	.word	0x08006f13
 8006e48:	08006f13 	.word	0x08006f13
 8006e4c:	08006ecf 	.word	0x08006ecf
 8006e50:	08006f13 	.word	0x08006f13
 8006e54:	08006f13 	.word	0x08006f13
 8006e58:	08006f13 	.word	0x08006f13
 8006e5c:	08006f13 	.word	0x08006f13
 8006e60:	08006f13 	.word	0x08006f13
 8006e64:	08006f13 	.word	0x08006f13
 8006e68:	08006f13 	.word	0x08006f13
 8006e6c:	08006edf 	.word	0x08006edf
 8006e70:	08006f13 	.word	0x08006f13
 8006e74:	08006f13 	.word	0x08006f13
 8006e78:	08006f13 	.word	0x08006f13
 8006e7c:	08006f13 	.word	0x08006f13
 8006e80:	08006f13 	.word	0x08006f13
 8006e84:	08006f13 	.word	0x08006f13
 8006e88:	08006f13 	.word	0x08006f13
 8006e8c:	08006f13 	.word	0x08006f13
 8006e90:	08006f13 	.word	0x08006f13
 8006e94:	08006f13 	.word	0x08006f13
 8006e98:	08006f13 	.word	0x08006f13
 8006e9c:	08006f13 	.word	0x08006f13
 8006ea0:	08006f13 	.word	0x08006f13
 8006ea4:	08006f13 	.word	0x08006f13
 8006ea8:	08006f13 	.word	0x08006f13
 8006eac:	08006f05 	.word	0x08006f05
 8006eb0:	2b40      	cmp	r3, #64	; 0x40
 8006eb2:	d02a      	beq.n	8006f0a <UART_SetConfig+0x8a6>
 8006eb4:	e02d      	b.n	8006f12 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006eb6:	f7fe fb7d 	bl	80055b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006eba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ebc:	e02f      	b.n	8006f1e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ebe:	f107 0314 	add.w	r3, r7, #20
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fb8c 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ecc:	e027      	b.n	8006f1e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ece:	f107 0308 	add.w	r3, r7, #8
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe fcd8 	bl	8005888 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006edc:	e01f      	b.n	8006f1e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ede:	4b21      	ldr	r3, [pc, #132]	; (8006f64 <UART_SetConfig+0x900>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006eea:	4b1e      	ldr	r3, [pc, #120]	; (8006f64 <UART_SetConfig+0x900>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	08db      	lsrs	r3, r3, #3
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	4a1d      	ldr	r2, [pc, #116]	; (8006f6c <UART_SetConfig+0x908>)
 8006ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006efc:	e00f      	b.n	8006f1e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006efe:	4b1b      	ldr	r3, [pc, #108]	; (8006f6c <UART_SetConfig+0x908>)
 8006f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f02:	e00c      	b.n	8006f1e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <UART_SetConfig+0x90c>)
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f08:	e009      	b.n	8006f1e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f10:	e005      	b.n	8006f1e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006f1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 81e6 	beq.w	80072f2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	4a12      	ldr	r2, [pc, #72]	; (8006f74 <UART_SetConfig+0x910>)
 8006f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f30:	461a      	mov	r2, r3
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f38:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	4413      	add	r3, r2
 8006f44:	6a3a      	ldr	r2, [r7, #32]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d305      	bcc.n	8006f56 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f50:	6a3a      	ldr	r2, [r7, #32]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d910      	bls.n	8006f78 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006f5c:	e1c9      	b.n	80072f2 <UART_SetConfig+0xc8e>
 8006f5e:	bf00      	nop
 8006f60:	40011c00 	.word	0x40011c00
 8006f64:	58024400 	.word	0x58024400
 8006f68:	58000c00 	.word	0x58000c00
 8006f6c:	03d09000 	.word	0x03d09000
 8006f70:	003d0900 	.word	0x003d0900
 8006f74:	080081dc 	.word	0x080081dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f04f 0100 	mov.w	r1, #0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	4ac1      	ldr	r2, [pc, #772]	; (800728c <UART_SetConfig+0xc28>)
 8006f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	f7f9 fa06 	bl	80003a0 <__aeabi_uldivmod>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	020b      	lsls	r3, r1, #8
 8006fa6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006faa:	0202      	lsls	r2, r0, #8
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	6849      	ldr	r1, [r1, #4]
 8006fb0:	0849      	lsrs	r1, r1, #1
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	f04f 0100 	mov.w	r1, #0
 8006fb8:	1814      	adds	r4, r2, r0
 8006fba:	eb43 0501 	adc.w	r5, r3, r1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	4620      	mov	r0, r4
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f7f9 f9e8 	bl	80003a0 <__aeabi_uldivmod>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fde:	d308      	bcc.n	8006ff2 <UART_SetConfig+0x98e>
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fe6:	d204      	bcs.n	8006ff2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fee:	60da      	str	r2, [r3, #12]
 8006ff0:	e17f      	b.n	80072f2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ff8:	e17b      	b.n	80072f2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007002:	f040 80bd 	bne.w	8007180 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8007006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800700a:	2b20      	cmp	r3, #32
 800700c:	dc48      	bgt.n	80070a0 <UART_SetConfig+0xa3c>
 800700e:	2b00      	cmp	r3, #0
 8007010:	db7b      	blt.n	800710a <UART_SetConfig+0xaa6>
 8007012:	2b20      	cmp	r3, #32
 8007014:	d879      	bhi.n	800710a <UART_SetConfig+0xaa6>
 8007016:	a201      	add	r2, pc, #4	; (adr r2, 800701c <UART_SetConfig+0x9b8>)
 8007018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701c:	080070a7 	.word	0x080070a7
 8007020:	080070af 	.word	0x080070af
 8007024:	0800710b 	.word	0x0800710b
 8007028:	0800710b 	.word	0x0800710b
 800702c:	080070b7 	.word	0x080070b7
 8007030:	0800710b 	.word	0x0800710b
 8007034:	0800710b 	.word	0x0800710b
 8007038:	0800710b 	.word	0x0800710b
 800703c:	080070c7 	.word	0x080070c7
 8007040:	0800710b 	.word	0x0800710b
 8007044:	0800710b 	.word	0x0800710b
 8007048:	0800710b 	.word	0x0800710b
 800704c:	0800710b 	.word	0x0800710b
 8007050:	0800710b 	.word	0x0800710b
 8007054:	0800710b 	.word	0x0800710b
 8007058:	0800710b 	.word	0x0800710b
 800705c:	080070d7 	.word	0x080070d7
 8007060:	0800710b 	.word	0x0800710b
 8007064:	0800710b 	.word	0x0800710b
 8007068:	0800710b 	.word	0x0800710b
 800706c:	0800710b 	.word	0x0800710b
 8007070:	0800710b 	.word	0x0800710b
 8007074:	0800710b 	.word	0x0800710b
 8007078:	0800710b 	.word	0x0800710b
 800707c:	0800710b 	.word	0x0800710b
 8007080:	0800710b 	.word	0x0800710b
 8007084:	0800710b 	.word	0x0800710b
 8007088:	0800710b 	.word	0x0800710b
 800708c:	0800710b 	.word	0x0800710b
 8007090:	0800710b 	.word	0x0800710b
 8007094:	0800710b 	.word	0x0800710b
 8007098:	0800710b 	.word	0x0800710b
 800709c:	080070fd 	.word	0x080070fd
 80070a0:	2b40      	cmp	r3, #64	; 0x40
 80070a2:	d02e      	beq.n	8007102 <UART_SetConfig+0xa9e>
 80070a4:	e031      	b.n	800710a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a6:	f7fc ff23 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 80070aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80070ac:	e033      	b.n	8007116 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070ae:	f7fc ff35 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 80070b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80070b4:	e02f      	b.n	8007116 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b6:	f107 0314 	add.w	r3, r7, #20
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fa90 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070c4:	e027      	b.n	8007116 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070c6:	f107 0308 	add.w	r3, r7, #8
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fbdc 	bl	8005888 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070d4:	e01f      	b.n	8007116 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070d6:	4b6e      	ldr	r3, [pc, #440]	; (8007290 <UART_SetConfig+0xc2c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070e2:	4b6b      	ldr	r3, [pc, #428]	; (8007290 <UART_SetConfig+0xc2c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	08db      	lsrs	r3, r3, #3
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	4a69      	ldr	r2, [pc, #420]	; (8007294 <UART_SetConfig+0xc30>)
 80070ee:	fa22 f303 	lsr.w	r3, r2, r3
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070f4:	e00f      	b.n	8007116 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80070f6:	4b67      	ldr	r3, [pc, #412]	; (8007294 <UART_SetConfig+0xc30>)
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070fa:	e00c      	b.n	8007116 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070fc:	4b66      	ldr	r3, [pc, #408]	; (8007298 <UART_SetConfig+0xc34>)
 80070fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007100:	e009      	b.n	8007116 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007108:	e005      	b.n	8007116 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 80ea 	beq.w	80072f2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	4a5a      	ldr	r2, [pc, #360]	; (800728c <UART_SetConfig+0xc28>)
 8007124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007128:	461a      	mov	r2, r3
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007130:	005a      	lsls	r2, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	085b      	lsrs	r3, r3, #1
 8007138:	441a      	add	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	2b0f      	cmp	r3, #15
 8007148:	d916      	bls.n	8007178 <UART_SetConfig+0xb14>
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007150:	d212      	bcs.n	8007178 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	b29b      	uxth	r3, r3
 8007156:	f023 030f 	bic.w	r3, r3, #15
 800715a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	085b      	lsrs	r3, r3, #1
 8007160:	b29b      	uxth	r3, r3
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	b29a      	uxth	r2, r3
 8007168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800716a:	4313      	orrs	r3, r2
 800716c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007174:	60da      	str	r2, [r3, #12]
 8007176:	e0bc      	b.n	80072f2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800717e:	e0b8      	b.n	80072f2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007180:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007184:	2b20      	cmp	r3, #32
 8007186:	dc4b      	bgt.n	8007220 <UART_SetConfig+0xbbc>
 8007188:	2b00      	cmp	r3, #0
 800718a:	f2c0 8087 	blt.w	800729c <UART_SetConfig+0xc38>
 800718e:	2b20      	cmp	r3, #32
 8007190:	f200 8084 	bhi.w	800729c <UART_SetConfig+0xc38>
 8007194:	a201      	add	r2, pc, #4	; (adr r2, 800719c <UART_SetConfig+0xb38>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	08007227 	.word	0x08007227
 80071a0:	0800722f 	.word	0x0800722f
 80071a4:	0800729d 	.word	0x0800729d
 80071a8:	0800729d 	.word	0x0800729d
 80071ac:	08007237 	.word	0x08007237
 80071b0:	0800729d 	.word	0x0800729d
 80071b4:	0800729d 	.word	0x0800729d
 80071b8:	0800729d 	.word	0x0800729d
 80071bc:	08007247 	.word	0x08007247
 80071c0:	0800729d 	.word	0x0800729d
 80071c4:	0800729d 	.word	0x0800729d
 80071c8:	0800729d 	.word	0x0800729d
 80071cc:	0800729d 	.word	0x0800729d
 80071d0:	0800729d 	.word	0x0800729d
 80071d4:	0800729d 	.word	0x0800729d
 80071d8:	0800729d 	.word	0x0800729d
 80071dc:	08007257 	.word	0x08007257
 80071e0:	0800729d 	.word	0x0800729d
 80071e4:	0800729d 	.word	0x0800729d
 80071e8:	0800729d 	.word	0x0800729d
 80071ec:	0800729d 	.word	0x0800729d
 80071f0:	0800729d 	.word	0x0800729d
 80071f4:	0800729d 	.word	0x0800729d
 80071f8:	0800729d 	.word	0x0800729d
 80071fc:	0800729d 	.word	0x0800729d
 8007200:	0800729d 	.word	0x0800729d
 8007204:	0800729d 	.word	0x0800729d
 8007208:	0800729d 	.word	0x0800729d
 800720c:	0800729d 	.word	0x0800729d
 8007210:	0800729d 	.word	0x0800729d
 8007214:	0800729d 	.word	0x0800729d
 8007218:	0800729d 	.word	0x0800729d
 800721c:	0800727d 	.word	0x0800727d
 8007220:	2b40      	cmp	r3, #64	; 0x40
 8007222:	d02e      	beq.n	8007282 <UART_SetConfig+0xc1e>
 8007224:	e03a      	b.n	800729c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007226:	f7fc fe63 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 800722a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800722c:	e03c      	b.n	80072a8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800722e:	f7fc fe75 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8007232:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007234:	e038      	b.n	80072a8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007236:	f107 0314 	add.w	r3, r7, #20
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe f9d0 	bl	80055e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007244:	e030      	b.n	80072a8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007246:	f107 0308 	add.w	r3, r7, #8
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe fb1c 	bl	8005888 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007254:	e028      	b.n	80072a8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007256:	4b0e      	ldr	r3, [pc, #56]	; (8007290 <UART_SetConfig+0xc2c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0320 	and.w	r3, r3, #32
 800725e:	2b00      	cmp	r3, #0
 8007260:	d009      	beq.n	8007276 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007262:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <UART_SetConfig+0xc2c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	08db      	lsrs	r3, r3, #3
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	4a09      	ldr	r2, [pc, #36]	; (8007294 <UART_SetConfig+0xc30>)
 800726e:	fa22 f303 	lsr.w	r3, r2, r3
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007274:	e018      	b.n	80072a8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <UART_SetConfig+0xc30>)
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800727a:	e015      	b.n	80072a8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <UART_SetConfig+0xc34>)
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007280:	e012      	b.n	80072a8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007288:	e00e      	b.n	80072a8 <UART_SetConfig+0xc44>
 800728a:	bf00      	nop
 800728c:	080081dc 	.word	0x080081dc
 8007290:	58024400 	.word	0x58024400
 8007294:	03d09000 	.word	0x03d09000
 8007298:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80072a6:	bf00      	nop
    }

    if (pclk != 0U)
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d021      	beq.n	80072f2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	4a1a      	ldr	r2, [pc, #104]	; (800731c <UART_SetConfig+0xcb8>)
 80072b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072b8:	461a      	mov	r2, r3
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	085b      	lsrs	r3, r3, #1
 80072c6:	441a      	add	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	2b0f      	cmp	r3, #15
 80072d6:	d909      	bls.n	80072ec <UART_SetConfig+0xc88>
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072de:	d205      	bcs.n	80072ec <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60da      	str	r2, [r3, #12]
 80072ea:	e002      	b.n	80072f2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800730e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007312:	4618      	mov	r0, r3
 8007314:	3738      	adds	r7, #56	; 0x38
 8007316:	46bd      	mov	sp, r7
 8007318:	bdb0      	pop	{r4, r5, r7, pc}
 800731a:	bf00      	nop
 800731c:	080081dc 	.word	0x080081dc

08007320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01a      	beq.n	8007436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741e:	d10a      	bne.n	8007436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
  }
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af02      	add	r7, sp, #8
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007474:	f7f9 ff94 	bl	80013a0 <HAL_GetTick>
 8007478:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b08      	cmp	r3, #8
 8007486:	d10e      	bne.n	80074a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f82f 	bl	80074fa <UART_WaitOnFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e025      	b.n	80074f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d10e      	bne.n	80074d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f819 	bl	80074fa <UART_WaitOnFlagUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e00f      	b.n	80074f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b09c      	sub	sp, #112	; 0x70
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	603b      	str	r3, [r7, #0]
 8007506:	4613      	mov	r3, r2
 8007508:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750a:	e0a9      	b.n	8007660 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800750c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800750e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007512:	f000 80a5 	beq.w	8007660 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007516:	f7f9 ff43 	bl	80013a0 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007522:	429a      	cmp	r2, r3
 8007524:	d302      	bcc.n	800752c <UART_WaitOnFlagUntilTimeout+0x32>
 8007526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007528:	2b00      	cmp	r3, #0
 800752a:	d140      	bne.n	80075ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800753a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007540:	667b      	str	r3, [r7, #100]	; 0x64
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800754a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800754c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007550:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e6      	bne.n	800752c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3308      	adds	r3, #8
 8007564:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	f023 0301 	bic.w	r3, r3, #1
 8007574:	663b      	str	r3, [r7, #96]	; 0x60
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3308      	adds	r3, #8
 800757c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800757e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007580:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007584:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800758c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e5      	bne.n	800755e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2220      	movs	r2, #32
 8007596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2220      	movs	r2, #32
 800759e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e069      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d051      	beq.n	8007660 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ca:	d149      	bne.n	8007660 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	e853 3f00 	ldrex	r3, [r3]
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
 80075f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e6      	bne.n	80075d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3308      	adds	r3, #8
 800760e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	613b      	str	r3, [r7, #16]
   return(result);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3308      	adds	r3, #8
 8007626:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007628:	623a      	str	r2, [r7, #32]
 800762a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	69f9      	ldr	r1, [r7, #28]
 800762e:	6a3a      	ldr	r2, [r7, #32]
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	61bb      	str	r3, [r7, #24]
   return(result);
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e5      	bne.n	8007608 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2220      	movs	r2, #32
 8007640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e010      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	69da      	ldr	r2, [r3, #28]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4013      	ands	r3, r2
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	429a      	cmp	r2, r3
 800766e:	bf0c      	ite	eq
 8007670:	2301      	moveq	r3, #1
 8007672:	2300      	movne	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	461a      	mov	r2, r3
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	429a      	cmp	r2, r3
 800767c:	f43f af46 	beq.w	800750c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3770      	adds	r7, #112	; 0x70
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800769c:	2302      	movs	r3, #2
 800769e:	e027      	b.n	80076f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2224      	movs	r2, #36	; 0x24
 80076ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0201 	bic.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007710:	2302      	movs	r3, #2
 8007712:	e02d      	b.n	8007770 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2224      	movs	r2, #36	; 0x24
 8007720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0201 	bic.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f84f 	bl	80077f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800778c:	2302      	movs	r3, #2
 800778e:	e02d      	b.n	80077ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2224      	movs	r2, #36	; 0x24
 800779c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f811 	bl	80077f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007800:	2b00      	cmp	r3, #0
 8007802:	d108      	bne.n	8007816 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007814:	e031      	b.n	800787a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007816:	2310      	movs	r3, #16
 8007818:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800781a:	2310      	movs	r3, #16
 800781c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	0e5b      	lsrs	r3, r3, #25
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	0f5b      	lsrs	r3, r3, #29
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	7b3a      	ldrb	r2, [r7, #12]
 8007842:	4911      	ldr	r1, [pc, #68]	; (8007888 <UARTEx_SetNbDataToProcess+0x94>)
 8007844:	5c8a      	ldrb	r2, [r1, r2]
 8007846:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800784a:	7b3a      	ldrb	r2, [r7, #12]
 800784c:	490f      	ldr	r1, [pc, #60]	; (800788c <UARTEx_SetNbDataToProcess+0x98>)
 800784e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007850:	fb93 f3f2 	sdiv	r3, r3, r2
 8007854:	b29a      	uxth	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	7b7a      	ldrb	r2, [r7, #13]
 8007860:	4909      	ldr	r1, [pc, #36]	; (8007888 <UARTEx_SetNbDataToProcess+0x94>)
 8007862:	5c8a      	ldrb	r2, [r1, r2]
 8007864:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007868:	7b7a      	ldrb	r2, [r7, #13]
 800786a:	4908      	ldr	r1, [pc, #32]	; (800788c <UARTEx_SetNbDataToProcess+0x98>)
 800786c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800786e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007872:	b29a      	uxth	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	080081f4 	.word	0x080081f4
 800788c:	080081fc 	.word	0x080081fc

08007890 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a6:	d10e      	bne.n	80078c6 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d107      	bne.n	80078c6 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f06f 0201 	mvn.w	r2, #1
 80078be:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f804 	bl	80078ce <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <__errno>:
 80078e4:	4b01      	ldr	r3, [pc, #4]	; (80078ec <__errno+0x8>)
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	24000018 	.word	0x24000018

080078f0 <__libc_init_array>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4d0d      	ldr	r5, [pc, #52]	; (8007928 <__libc_init_array+0x38>)
 80078f4:	4c0d      	ldr	r4, [pc, #52]	; (800792c <__libc_init_array+0x3c>)
 80078f6:	1b64      	subs	r4, r4, r5
 80078f8:	10a4      	asrs	r4, r4, #2
 80078fa:	2600      	movs	r6, #0
 80078fc:	42a6      	cmp	r6, r4
 80078fe:	d109      	bne.n	8007914 <__libc_init_array+0x24>
 8007900:	4d0b      	ldr	r5, [pc, #44]	; (8007930 <__libc_init_array+0x40>)
 8007902:	4c0c      	ldr	r4, [pc, #48]	; (8007934 <__libc_init_array+0x44>)
 8007904:	f000 fc4e 	bl	80081a4 <_init>
 8007908:	1b64      	subs	r4, r4, r5
 800790a:	10a4      	asrs	r4, r4, #2
 800790c:	2600      	movs	r6, #0
 800790e:	42a6      	cmp	r6, r4
 8007910:	d105      	bne.n	800791e <__libc_init_array+0x2e>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	f855 3b04 	ldr.w	r3, [r5], #4
 8007918:	4798      	blx	r3
 800791a:	3601      	adds	r6, #1
 800791c:	e7ee      	b.n	80078fc <__libc_init_array+0xc>
 800791e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007922:	4798      	blx	r3
 8007924:	3601      	adds	r6, #1
 8007926:	e7f2      	b.n	800790e <__libc_init_array+0x1e>
 8007928:	08008240 	.word	0x08008240
 800792c:	08008240 	.word	0x08008240
 8007930:	08008240 	.word	0x08008240
 8007934:	08008244 	.word	0x08008244

08007938 <memset>:
 8007938:	4402      	add	r2, r0
 800793a:	4603      	mov	r3, r0
 800793c:	4293      	cmp	r3, r2
 800793e:	d100      	bne.n	8007942 <memset+0xa>
 8007940:	4770      	bx	lr
 8007942:	f803 1b01 	strb.w	r1, [r3], #1
 8007946:	e7f9      	b.n	800793c <memset+0x4>

08007948 <siprintf>:
 8007948:	b40e      	push	{r1, r2, r3}
 800794a:	b500      	push	{lr}
 800794c:	b09c      	sub	sp, #112	; 0x70
 800794e:	ab1d      	add	r3, sp, #116	; 0x74
 8007950:	9002      	str	r0, [sp, #8]
 8007952:	9006      	str	r0, [sp, #24]
 8007954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007958:	4809      	ldr	r0, [pc, #36]	; (8007980 <siprintf+0x38>)
 800795a:	9107      	str	r1, [sp, #28]
 800795c:	9104      	str	r1, [sp, #16]
 800795e:	4909      	ldr	r1, [pc, #36]	; (8007984 <siprintf+0x3c>)
 8007960:	f853 2b04 	ldr.w	r2, [r3], #4
 8007964:	9105      	str	r1, [sp, #20]
 8007966:	6800      	ldr	r0, [r0, #0]
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	a902      	add	r1, sp, #8
 800796c:	f000 f868 	bl	8007a40 <_svfiprintf_r>
 8007970:	9b02      	ldr	r3, [sp, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	b01c      	add	sp, #112	; 0x70
 8007978:	f85d eb04 	ldr.w	lr, [sp], #4
 800797c:	b003      	add	sp, #12
 800797e:	4770      	bx	lr
 8007980:	24000018 	.word	0x24000018
 8007984:	ffff0208 	.word	0xffff0208

08007988 <__ssputs_r>:
 8007988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	688e      	ldr	r6, [r1, #8]
 800798e:	429e      	cmp	r6, r3
 8007990:	4682      	mov	sl, r0
 8007992:	460c      	mov	r4, r1
 8007994:	4690      	mov	r8, r2
 8007996:	461f      	mov	r7, r3
 8007998:	d838      	bhi.n	8007a0c <__ssputs_r+0x84>
 800799a:	898a      	ldrh	r2, [r1, #12]
 800799c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079a0:	d032      	beq.n	8007a08 <__ssputs_r+0x80>
 80079a2:	6825      	ldr	r5, [r4, #0]
 80079a4:	6909      	ldr	r1, [r1, #16]
 80079a6:	eba5 0901 	sub.w	r9, r5, r1
 80079aa:	6965      	ldr	r5, [r4, #20]
 80079ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079b4:	3301      	adds	r3, #1
 80079b6:	444b      	add	r3, r9
 80079b8:	106d      	asrs	r5, r5, #1
 80079ba:	429d      	cmp	r5, r3
 80079bc:	bf38      	it	cc
 80079be:	461d      	movcc	r5, r3
 80079c0:	0553      	lsls	r3, r2, #21
 80079c2:	d531      	bpl.n	8007a28 <__ssputs_r+0xa0>
 80079c4:	4629      	mov	r1, r5
 80079c6:	f000 fb47 	bl	8008058 <_malloc_r>
 80079ca:	4606      	mov	r6, r0
 80079cc:	b950      	cbnz	r0, 80079e4 <__ssputs_r+0x5c>
 80079ce:	230c      	movs	r3, #12
 80079d0:	f8ca 3000 	str.w	r3, [sl]
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e4:	6921      	ldr	r1, [r4, #16]
 80079e6:	464a      	mov	r2, r9
 80079e8:	f000 fabe 	bl	8007f68 <memcpy>
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f6:	81a3      	strh	r3, [r4, #12]
 80079f8:	6126      	str	r6, [r4, #16]
 80079fa:	6165      	str	r5, [r4, #20]
 80079fc:	444e      	add	r6, r9
 80079fe:	eba5 0509 	sub.w	r5, r5, r9
 8007a02:	6026      	str	r6, [r4, #0]
 8007a04:	60a5      	str	r5, [r4, #8]
 8007a06:	463e      	mov	r6, r7
 8007a08:	42be      	cmp	r6, r7
 8007a0a:	d900      	bls.n	8007a0e <__ssputs_r+0x86>
 8007a0c:	463e      	mov	r6, r7
 8007a0e:	4632      	mov	r2, r6
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	4641      	mov	r1, r8
 8007a14:	f000 fab6 	bl	8007f84 <memmove>
 8007a18:	68a3      	ldr	r3, [r4, #8]
 8007a1a:	6822      	ldr	r2, [r4, #0]
 8007a1c:	1b9b      	subs	r3, r3, r6
 8007a1e:	4432      	add	r2, r6
 8007a20:	60a3      	str	r3, [r4, #8]
 8007a22:	6022      	str	r2, [r4, #0]
 8007a24:	2000      	movs	r0, #0
 8007a26:	e7db      	b.n	80079e0 <__ssputs_r+0x58>
 8007a28:	462a      	mov	r2, r5
 8007a2a:	f000 fb6f 	bl	800810c <_realloc_r>
 8007a2e:	4606      	mov	r6, r0
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d1e1      	bne.n	80079f8 <__ssputs_r+0x70>
 8007a34:	6921      	ldr	r1, [r4, #16]
 8007a36:	4650      	mov	r0, sl
 8007a38:	f000 fabe 	bl	8007fb8 <_free_r>
 8007a3c:	e7c7      	b.n	80079ce <__ssputs_r+0x46>
	...

08007a40 <_svfiprintf_r>:
 8007a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	4698      	mov	r8, r3
 8007a46:	898b      	ldrh	r3, [r1, #12]
 8007a48:	061b      	lsls	r3, r3, #24
 8007a4a:	b09d      	sub	sp, #116	; 0x74
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	460d      	mov	r5, r1
 8007a50:	4614      	mov	r4, r2
 8007a52:	d50e      	bpl.n	8007a72 <_svfiprintf_r+0x32>
 8007a54:	690b      	ldr	r3, [r1, #16]
 8007a56:	b963      	cbnz	r3, 8007a72 <_svfiprintf_r+0x32>
 8007a58:	2140      	movs	r1, #64	; 0x40
 8007a5a:	f000 fafd 	bl	8008058 <_malloc_r>
 8007a5e:	6028      	str	r0, [r5, #0]
 8007a60:	6128      	str	r0, [r5, #16]
 8007a62:	b920      	cbnz	r0, 8007a6e <_svfiprintf_r+0x2e>
 8007a64:	230c      	movs	r3, #12
 8007a66:	603b      	str	r3, [r7, #0]
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	e0d1      	b.n	8007c12 <_svfiprintf_r+0x1d2>
 8007a6e:	2340      	movs	r3, #64	; 0x40
 8007a70:	616b      	str	r3, [r5, #20]
 8007a72:	2300      	movs	r3, #0
 8007a74:	9309      	str	r3, [sp, #36]	; 0x24
 8007a76:	2320      	movs	r3, #32
 8007a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a80:	2330      	movs	r3, #48	; 0x30
 8007a82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c2c <_svfiprintf_r+0x1ec>
 8007a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a8a:	f04f 0901 	mov.w	r9, #1
 8007a8e:	4623      	mov	r3, r4
 8007a90:	469a      	mov	sl, r3
 8007a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a96:	b10a      	cbz	r2, 8007a9c <_svfiprintf_r+0x5c>
 8007a98:	2a25      	cmp	r2, #37	; 0x25
 8007a9a:	d1f9      	bne.n	8007a90 <_svfiprintf_r+0x50>
 8007a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007aa0:	d00b      	beq.n	8007aba <_svfiprintf_r+0x7a>
 8007aa2:	465b      	mov	r3, fp
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ff6d 	bl	8007988 <__ssputs_r>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	f000 80aa 	beq.w	8007c08 <_svfiprintf_r+0x1c8>
 8007ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab6:	445a      	add	r2, fp
 8007ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8007aba:	f89a 3000 	ldrb.w	r3, [sl]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80a2 	beq.w	8007c08 <_svfiprintf_r+0x1c8>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ace:	f10a 0a01 	add.w	sl, sl, #1
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	9307      	str	r3, [sp, #28]
 8007ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ada:	931a      	str	r3, [sp, #104]	; 0x68
 8007adc:	4654      	mov	r4, sl
 8007ade:	2205      	movs	r2, #5
 8007ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae4:	4851      	ldr	r0, [pc, #324]	; (8007c2c <_svfiprintf_r+0x1ec>)
 8007ae6:	f7f8 fc0b 	bl	8000300 <memchr>
 8007aea:	9a04      	ldr	r2, [sp, #16]
 8007aec:	b9d8      	cbnz	r0, 8007b26 <_svfiprintf_r+0xe6>
 8007aee:	06d0      	lsls	r0, r2, #27
 8007af0:	bf44      	itt	mi
 8007af2:	2320      	movmi	r3, #32
 8007af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af8:	0711      	lsls	r1, r2, #28
 8007afa:	bf44      	itt	mi
 8007afc:	232b      	movmi	r3, #43	; 0x2b
 8007afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b02:	f89a 3000 	ldrb.w	r3, [sl]
 8007b06:	2b2a      	cmp	r3, #42	; 0x2a
 8007b08:	d015      	beq.n	8007b36 <_svfiprintf_r+0xf6>
 8007b0a:	9a07      	ldr	r2, [sp, #28]
 8007b0c:	4654      	mov	r4, sl
 8007b0e:	2000      	movs	r0, #0
 8007b10:	f04f 0c0a 	mov.w	ip, #10
 8007b14:	4621      	mov	r1, r4
 8007b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b1a:	3b30      	subs	r3, #48	; 0x30
 8007b1c:	2b09      	cmp	r3, #9
 8007b1e:	d94e      	bls.n	8007bbe <_svfiprintf_r+0x17e>
 8007b20:	b1b0      	cbz	r0, 8007b50 <_svfiprintf_r+0x110>
 8007b22:	9207      	str	r2, [sp, #28]
 8007b24:	e014      	b.n	8007b50 <_svfiprintf_r+0x110>
 8007b26:	eba0 0308 	sub.w	r3, r0, r8
 8007b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	46a2      	mov	sl, r4
 8007b34:	e7d2      	b.n	8007adc <_svfiprintf_r+0x9c>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	1d19      	adds	r1, r3, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	9103      	str	r1, [sp, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfbb      	ittet	lt
 8007b42:	425b      	neglt	r3, r3
 8007b44:	f042 0202 	orrlt.w	r2, r2, #2
 8007b48:	9307      	strge	r3, [sp, #28]
 8007b4a:	9307      	strlt	r3, [sp, #28]
 8007b4c:	bfb8      	it	lt
 8007b4e:	9204      	strlt	r2, [sp, #16]
 8007b50:	7823      	ldrb	r3, [r4, #0]
 8007b52:	2b2e      	cmp	r3, #46	; 0x2e
 8007b54:	d10c      	bne.n	8007b70 <_svfiprintf_r+0x130>
 8007b56:	7863      	ldrb	r3, [r4, #1]
 8007b58:	2b2a      	cmp	r3, #42	; 0x2a
 8007b5a:	d135      	bne.n	8007bc8 <_svfiprintf_r+0x188>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	1d1a      	adds	r2, r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	9203      	str	r2, [sp, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bfb8      	it	lt
 8007b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b6c:	3402      	adds	r4, #2
 8007b6e:	9305      	str	r3, [sp, #20]
 8007b70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c3c <_svfiprintf_r+0x1fc>
 8007b74:	7821      	ldrb	r1, [r4, #0]
 8007b76:	2203      	movs	r2, #3
 8007b78:	4650      	mov	r0, sl
 8007b7a:	f7f8 fbc1 	bl	8000300 <memchr>
 8007b7e:	b140      	cbz	r0, 8007b92 <_svfiprintf_r+0x152>
 8007b80:	2340      	movs	r3, #64	; 0x40
 8007b82:	eba0 000a 	sub.w	r0, r0, sl
 8007b86:	fa03 f000 	lsl.w	r0, r3, r0
 8007b8a:	9b04      	ldr	r3, [sp, #16]
 8007b8c:	4303      	orrs	r3, r0
 8007b8e:	3401      	adds	r4, #1
 8007b90:	9304      	str	r3, [sp, #16]
 8007b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b96:	4826      	ldr	r0, [pc, #152]	; (8007c30 <_svfiprintf_r+0x1f0>)
 8007b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b9c:	2206      	movs	r2, #6
 8007b9e:	f7f8 fbaf 	bl	8000300 <memchr>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d038      	beq.n	8007c18 <_svfiprintf_r+0x1d8>
 8007ba6:	4b23      	ldr	r3, [pc, #140]	; (8007c34 <_svfiprintf_r+0x1f4>)
 8007ba8:	bb1b      	cbnz	r3, 8007bf2 <_svfiprintf_r+0x1b2>
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	3307      	adds	r3, #7
 8007bae:	f023 0307 	bic.w	r3, r3, #7
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	9303      	str	r3, [sp, #12]
 8007bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb8:	4433      	add	r3, r6
 8007bba:	9309      	str	r3, [sp, #36]	; 0x24
 8007bbc:	e767      	b.n	8007a8e <_svfiprintf_r+0x4e>
 8007bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	e7a5      	b.n	8007b14 <_svfiprintf_r+0xd4>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	3401      	adds	r4, #1
 8007bcc:	9305      	str	r3, [sp, #20]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	f04f 0c0a 	mov.w	ip, #10
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bda:	3a30      	subs	r2, #48	; 0x30
 8007bdc:	2a09      	cmp	r2, #9
 8007bde:	d903      	bls.n	8007be8 <_svfiprintf_r+0x1a8>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0c5      	beq.n	8007b70 <_svfiprintf_r+0x130>
 8007be4:	9105      	str	r1, [sp, #20]
 8007be6:	e7c3      	b.n	8007b70 <_svfiprintf_r+0x130>
 8007be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bec:	4604      	mov	r4, r0
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e7f0      	b.n	8007bd4 <_svfiprintf_r+0x194>
 8007bf2:	ab03      	add	r3, sp, #12
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	462a      	mov	r2, r5
 8007bf8:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <_svfiprintf_r+0x1f8>)
 8007bfa:	a904      	add	r1, sp, #16
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	f3af 8000 	nop.w
 8007c02:	1c42      	adds	r2, r0, #1
 8007c04:	4606      	mov	r6, r0
 8007c06:	d1d6      	bne.n	8007bb6 <_svfiprintf_r+0x176>
 8007c08:	89ab      	ldrh	r3, [r5, #12]
 8007c0a:	065b      	lsls	r3, r3, #25
 8007c0c:	f53f af2c 	bmi.w	8007a68 <_svfiprintf_r+0x28>
 8007c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c12:	b01d      	add	sp, #116	; 0x74
 8007c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c18:	ab03      	add	r3, sp, #12
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	462a      	mov	r2, r5
 8007c1e:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <_svfiprintf_r+0x1f8>)
 8007c20:	a904      	add	r1, sp, #16
 8007c22:	4638      	mov	r0, r7
 8007c24:	f000 f87a 	bl	8007d1c <_printf_i>
 8007c28:	e7eb      	b.n	8007c02 <_svfiprintf_r+0x1c2>
 8007c2a:	bf00      	nop
 8007c2c:	08008204 	.word	0x08008204
 8007c30:	0800820e 	.word	0x0800820e
 8007c34:	00000000 	.word	0x00000000
 8007c38:	08007989 	.word	0x08007989
 8007c3c:	0800820a 	.word	0x0800820a

08007c40 <_printf_common>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	4616      	mov	r6, r2
 8007c46:	4699      	mov	r9, r3
 8007c48:	688a      	ldr	r2, [r1, #8]
 8007c4a:	690b      	ldr	r3, [r1, #16]
 8007c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	bfb8      	it	lt
 8007c54:	4613      	movlt	r3, r2
 8007c56:	6033      	str	r3, [r6, #0]
 8007c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	b10a      	cbz	r2, 8007c66 <_printf_common+0x26>
 8007c62:	3301      	adds	r3, #1
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	0699      	lsls	r1, r3, #26
 8007c6a:	bf42      	ittt	mi
 8007c6c:	6833      	ldrmi	r3, [r6, #0]
 8007c6e:	3302      	addmi	r3, #2
 8007c70:	6033      	strmi	r3, [r6, #0]
 8007c72:	6825      	ldr	r5, [r4, #0]
 8007c74:	f015 0506 	ands.w	r5, r5, #6
 8007c78:	d106      	bne.n	8007c88 <_printf_common+0x48>
 8007c7a:	f104 0a19 	add.w	sl, r4, #25
 8007c7e:	68e3      	ldr	r3, [r4, #12]
 8007c80:	6832      	ldr	r2, [r6, #0]
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	42ab      	cmp	r3, r5
 8007c86:	dc26      	bgt.n	8007cd6 <_printf_common+0x96>
 8007c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c8c:	1e13      	subs	r3, r2, #0
 8007c8e:	6822      	ldr	r2, [r4, #0]
 8007c90:	bf18      	it	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	0692      	lsls	r2, r2, #26
 8007c96:	d42b      	bmi.n	8007cf0 <_printf_common+0xb0>
 8007c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	47c0      	blx	r8
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d01e      	beq.n	8007ce4 <_printf_common+0xa4>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	68e5      	ldr	r5, [r4, #12]
 8007caa:	6832      	ldr	r2, [r6, #0]
 8007cac:	f003 0306 	and.w	r3, r3, #6
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	bf08      	it	eq
 8007cb4:	1aad      	subeq	r5, r5, r2
 8007cb6:	68a3      	ldr	r3, [r4, #8]
 8007cb8:	6922      	ldr	r2, [r4, #16]
 8007cba:	bf0c      	ite	eq
 8007cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc0:	2500      	movne	r5, #0
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	bfc4      	itt	gt
 8007cc6:	1a9b      	subgt	r3, r3, r2
 8007cc8:	18ed      	addgt	r5, r5, r3
 8007cca:	2600      	movs	r6, #0
 8007ccc:	341a      	adds	r4, #26
 8007cce:	42b5      	cmp	r5, r6
 8007cd0:	d11a      	bne.n	8007d08 <_printf_common+0xc8>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e008      	b.n	8007ce8 <_printf_common+0xa8>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4652      	mov	r2, sl
 8007cda:	4649      	mov	r1, r9
 8007cdc:	4638      	mov	r0, r7
 8007cde:	47c0      	blx	r8
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d103      	bne.n	8007cec <_printf_common+0xac>
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cec:	3501      	adds	r5, #1
 8007cee:	e7c6      	b.n	8007c7e <_printf_common+0x3e>
 8007cf0:	18e1      	adds	r1, r4, r3
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	2030      	movs	r0, #48	; 0x30
 8007cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cfa:	4422      	add	r2, r4
 8007cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d04:	3302      	adds	r3, #2
 8007d06:	e7c7      	b.n	8007c98 <_printf_common+0x58>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	4638      	mov	r0, r7
 8007d10:	47c0      	blx	r8
 8007d12:	3001      	adds	r0, #1
 8007d14:	d0e6      	beq.n	8007ce4 <_printf_common+0xa4>
 8007d16:	3601      	adds	r6, #1
 8007d18:	e7d9      	b.n	8007cce <_printf_common+0x8e>
	...

08007d1c <_printf_i>:
 8007d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	460c      	mov	r4, r1
 8007d22:	4691      	mov	r9, r2
 8007d24:	7e27      	ldrb	r7, [r4, #24]
 8007d26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d28:	2f78      	cmp	r7, #120	; 0x78
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	469a      	mov	sl, r3
 8007d2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d32:	d807      	bhi.n	8007d44 <_printf_i+0x28>
 8007d34:	2f62      	cmp	r7, #98	; 0x62
 8007d36:	d80a      	bhi.n	8007d4e <_printf_i+0x32>
 8007d38:	2f00      	cmp	r7, #0
 8007d3a:	f000 80d8 	beq.w	8007eee <_printf_i+0x1d2>
 8007d3e:	2f58      	cmp	r7, #88	; 0x58
 8007d40:	f000 80a3 	beq.w	8007e8a <_printf_i+0x16e>
 8007d44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d4c:	e03a      	b.n	8007dc4 <_printf_i+0xa8>
 8007d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d52:	2b15      	cmp	r3, #21
 8007d54:	d8f6      	bhi.n	8007d44 <_printf_i+0x28>
 8007d56:	a001      	add	r0, pc, #4	; (adr r0, 8007d5c <_printf_i+0x40>)
 8007d58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d5c:	08007db5 	.word	0x08007db5
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007d45 	.word	0x08007d45
 8007d68:	08007d45 	.word	0x08007d45
 8007d6c:	08007d45 	.word	0x08007d45
 8007d70:	08007d45 	.word	0x08007d45
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007d45 	.word	0x08007d45
 8007d7c:	08007d45 	.word	0x08007d45
 8007d80:	08007d45 	.word	0x08007d45
 8007d84:	08007d45 	.word	0x08007d45
 8007d88:	08007ed5 	.word	0x08007ed5
 8007d8c:	08007df9 	.word	0x08007df9
 8007d90:	08007eb7 	.word	0x08007eb7
 8007d94:	08007d45 	.word	0x08007d45
 8007d98:	08007d45 	.word	0x08007d45
 8007d9c:	08007ef7 	.word	0x08007ef7
 8007da0:	08007d45 	.word	0x08007d45
 8007da4:	08007df9 	.word	0x08007df9
 8007da8:	08007d45 	.word	0x08007d45
 8007dac:	08007d45 	.word	0x08007d45
 8007db0:	08007ebf 	.word	0x08007ebf
 8007db4:	680b      	ldr	r3, [r1, #0]
 8007db6:	1d1a      	adds	r2, r3, #4
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	600a      	str	r2, [r1, #0]
 8007dbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e0a3      	b.n	8007f10 <_printf_i+0x1f4>
 8007dc8:	6825      	ldr	r5, [r4, #0]
 8007dca:	6808      	ldr	r0, [r1, #0]
 8007dcc:	062e      	lsls	r6, r5, #24
 8007dce:	f100 0304 	add.w	r3, r0, #4
 8007dd2:	d50a      	bpl.n	8007dea <_printf_i+0xce>
 8007dd4:	6805      	ldr	r5, [r0, #0]
 8007dd6:	600b      	str	r3, [r1, #0]
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	da03      	bge.n	8007de4 <_printf_i+0xc8>
 8007ddc:	232d      	movs	r3, #45	; 0x2d
 8007dde:	426d      	negs	r5, r5
 8007de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de4:	485e      	ldr	r0, [pc, #376]	; (8007f60 <_printf_i+0x244>)
 8007de6:	230a      	movs	r3, #10
 8007de8:	e019      	b.n	8007e1e <_printf_i+0x102>
 8007dea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007dee:	6805      	ldr	r5, [r0, #0]
 8007df0:	600b      	str	r3, [r1, #0]
 8007df2:	bf18      	it	ne
 8007df4:	b22d      	sxthne	r5, r5
 8007df6:	e7ef      	b.n	8007dd8 <_printf_i+0xbc>
 8007df8:	680b      	ldr	r3, [r1, #0]
 8007dfa:	6825      	ldr	r5, [r4, #0]
 8007dfc:	1d18      	adds	r0, r3, #4
 8007dfe:	6008      	str	r0, [r1, #0]
 8007e00:	0628      	lsls	r0, r5, #24
 8007e02:	d501      	bpl.n	8007e08 <_printf_i+0xec>
 8007e04:	681d      	ldr	r5, [r3, #0]
 8007e06:	e002      	b.n	8007e0e <_printf_i+0xf2>
 8007e08:	0669      	lsls	r1, r5, #25
 8007e0a:	d5fb      	bpl.n	8007e04 <_printf_i+0xe8>
 8007e0c:	881d      	ldrh	r5, [r3, #0]
 8007e0e:	4854      	ldr	r0, [pc, #336]	; (8007f60 <_printf_i+0x244>)
 8007e10:	2f6f      	cmp	r7, #111	; 0x6f
 8007e12:	bf0c      	ite	eq
 8007e14:	2308      	moveq	r3, #8
 8007e16:	230a      	movne	r3, #10
 8007e18:	2100      	movs	r1, #0
 8007e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e1e:	6866      	ldr	r6, [r4, #4]
 8007e20:	60a6      	str	r6, [r4, #8]
 8007e22:	2e00      	cmp	r6, #0
 8007e24:	bfa2      	ittt	ge
 8007e26:	6821      	ldrge	r1, [r4, #0]
 8007e28:	f021 0104 	bicge.w	r1, r1, #4
 8007e2c:	6021      	strge	r1, [r4, #0]
 8007e2e:	b90d      	cbnz	r5, 8007e34 <_printf_i+0x118>
 8007e30:	2e00      	cmp	r6, #0
 8007e32:	d04d      	beq.n	8007ed0 <_printf_i+0x1b4>
 8007e34:	4616      	mov	r6, r2
 8007e36:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e3a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e3e:	5dc7      	ldrb	r7, [r0, r7]
 8007e40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e44:	462f      	mov	r7, r5
 8007e46:	42bb      	cmp	r3, r7
 8007e48:	460d      	mov	r5, r1
 8007e4a:	d9f4      	bls.n	8007e36 <_printf_i+0x11a>
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d10b      	bne.n	8007e68 <_printf_i+0x14c>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	07df      	lsls	r7, r3, #31
 8007e54:	d508      	bpl.n	8007e68 <_printf_i+0x14c>
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	6861      	ldr	r1, [r4, #4]
 8007e5a:	4299      	cmp	r1, r3
 8007e5c:	bfde      	ittt	le
 8007e5e:	2330      	movle	r3, #48	; 0x30
 8007e60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e68:	1b92      	subs	r2, r2, r6
 8007e6a:	6122      	str	r2, [r4, #16]
 8007e6c:	f8cd a000 	str.w	sl, [sp]
 8007e70:	464b      	mov	r3, r9
 8007e72:	aa03      	add	r2, sp, #12
 8007e74:	4621      	mov	r1, r4
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7ff fee2 	bl	8007c40 <_printf_common>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d14c      	bne.n	8007f1a <_printf_i+0x1fe>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	b004      	add	sp, #16
 8007e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8a:	4835      	ldr	r0, [pc, #212]	; (8007f60 <_printf_i+0x244>)
 8007e8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	680e      	ldr	r6, [r1, #0]
 8007e94:	061f      	lsls	r7, r3, #24
 8007e96:	f856 5b04 	ldr.w	r5, [r6], #4
 8007e9a:	600e      	str	r6, [r1, #0]
 8007e9c:	d514      	bpl.n	8007ec8 <_printf_i+0x1ac>
 8007e9e:	07d9      	lsls	r1, r3, #31
 8007ea0:	bf44      	itt	mi
 8007ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea6:	6023      	strmi	r3, [r4, #0]
 8007ea8:	b91d      	cbnz	r5, 8007eb2 <_printf_i+0x196>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	f023 0320 	bic.w	r3, r3, #32
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	2310      	movs	r3, #16
 8007eb4:	e7b0      	b.n	8007e18 <_printf_i+0xfc>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	f043 0320 	orr.w	r3, r3, #32
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	2378      	movs	r3, #120	; 0x78
 8007ec0:	4828      	ldr	r0, [pc, #160]	; (8007f64 <_printf_i+0x248>)
 8007ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ec6:	e7e3      	b.n	8007e90 <_printf_i+0x174>
 8007ec8:	065e      	lsls	r6, r3, #25
 8007eca:	bf48      	it	mi
 8007ecc:	b2ad      	uxthmi	r5, r5
 8007ece:	e7e6      	b.n	8007e9e <_printf_i+0x182>
 8007ed0:	4616      	mov	r6, r2
 8007ed2:	e7bb      	b.n	8007e4c <_printf_i+0x130>
 8007ed4:	680b      	ldr	r3, [r1, #0]
 8007ed6:	6826      	ldr	r6, [r4, #0]
 8007ed8:	6960      	ldr	r0, [r4, #20]
 8007eda:	1d1d      	adds	r5, r3, #4
 8007edc:	600d      	str	r5, [r1, #0]
 8007ede:	0635      	lsls	r5, r6, #24
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	d501      	bpl.n	8007ee8 <_printf_i+0x1cc>
 8007ee4:	6018      	str	r0, [r3, #0]
 8007ee6:	e002      	b.n	8007eee <_printf_i+0x1d2>
 8007ee8:	0671      	lsls	r1, r6, #25
 8007eea:	d5fb      	bpl.n	8007ee4 <_printf_i+0x1c8>
 8007eec:	8018      	strh	r0, [r3, #0]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	6123      	str	r3, [r4, #16]
 8007ef2:	4616      	mov	r6, r2
 8007ef4:	e7ba      	b.n	8007e6c <_printf_i+0x150>
 8007ef6:	680b      	ldr	r3, [r1, #0]
 8007ef8:	1d1a      	adds	r2, r3, #4
 8007efa:	600a      	str	r2, [r1, #0]
 8007efc:	681e      	ldr	r6, [r3, #0]
 8007efe:	6862      	ldr	r2, [r4, #4]
 8007f00:	2100      	movs	r1, #0
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7f8 f9fc 	bl	8000300 <memchr>
 8007f08:	b108      	cbz	r0, 8007f0e <_printf_i+0x1f2>
 8007f0a:	1b80      	subs	r0, r0, r6
 8007f0c:	6060      	str	r0, [r4, #4]
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	6123      	str	r3, [r4, #16]
 8007f12:	2300      	movs	r3, #0
 8007f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f18:	e7a8      	b.n	8007e6c <_printf_i+0x150>
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4649      	mov	r1, r9
 8007f20:	4640      	mov	r0, r8
 8007f22:	47d0      	blx	sl
 8007f24:	3001      	adds	r0, #1
 8007f26:	d0ab      	beq.n	8007e80 <_printf_i+0x164>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	079b      	lsls	r3, r3, #30
 8007f2c:	d413      	bmi.n	8007f56 <_printf_i+0x23a>
 8007f2e:	68e0      	ldr	r0, [r4, #12]
 8007f30:	9b03      	ldr	r3, [sp, #12]
 8007f32:	4298      	cmp	r0, r3
 8007f34:	bfb8      	it	lt
 8007f36:	4618      	movlt	r0, r3
 8007f38:	e7a4      	b.n	8007e84 <_printf_i+0x168>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	4649      	mov	r1, r9
 8007f40:	4640      	mov	r0, r8
 8007f42:	47d0      	blx	sl
 8007f44:	3001      	adds	r0, #1
 8007f46:	d09b      	beq.n	8007e80 <_printf_i+0x164>
 8007f48:	3501      	adds	r5, #1
 8007f4a:	68e3      	ldr	r3, [r4, #12]
 8007f4c:	9903      	ldr	r1, [sp, #12]
 8007f4e:	1a5b      	subs	r3, r3, r1
 8007f50:	42ab      	cmp	r3, r5
 8007f52:	dcf2      	bgt.n	8007f3a <_printf_i+0x21e>
 8007f54:	e7eb      	b.n	8007f2e <_printf_i+0x212>
 8007f56:	2500      	movs	r5, #0
 8007f58:	f104 0619 	add.w	r6, r4, #25
 8007f5c:	e7f5      	b.n	8007f4a <_printf_i+0x22e>
 8007f5e:	bf00      	nop
 8007f60:	08008215 	.word	0x08008215
 8007f64:	08008226 	.word	0x08008226

08007f68 <memcpy>:
 8007f68:	440a      	add	r2, r1
 8007f6a:	4291      	cmp	r1, r2
 8007f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f70:	d100      	bne.n	8007f74 <memcpy+0xc>
 8007f72:	4770      	bx	lr
 8007f74:	b510      	push	{r4, lr}
 8007f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f7e:	4291      	cmp	r1, r2
 8007f80:	d1f9      	bne.n	8007f76 <memcpy+0xe>
 8007f82:	bd10      	pop	{r4, pc}

08007f84 <memmove>:
 8007f84:	4288      	cmp	r0, r1
 8007f86:	b510      	push	{r4, lr}
 8007f88:	eb01 0402 	add.w	r4, r1, r2
 8007f8c:	d902      	bls.n	8007f94 <memmove+0x10>
 8007f8e:	4284      	cmp	r4, r0
 8007f90:	4623      	mov	r3, r4
 8007f92:	d807      	bhi.n	8007fa4 <memmove+0x20>
 8007f94:	1e43      	subs	r3, r0, #1
 8007f96:	42a1      	cmp	r1, r4
 8007f98:	d008      	beq.n	8007fac <memmove+0x28>
 8007f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fa2:	e7f8      	b.n	8007f96 <memmove+0x12>
 8007fa4:	4402      	add	r2, r0
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	428a      	cmp	r2, r1
 8007faa:	d100      	bne.n	8007fae <memmove+0x2a>
 8007fac:	bd10      	pop	{r4, pc}
 8007fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fb6:	e7f7      	b.n	8007fa8 <memmove+0x24>

08007fb8 <_free_r>:
 8007fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fba:	2900      	cmp	r1, #0
 8007fbc:	d048      	beq.n	8008050 <_free_r+0x98>
 8007fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc2:	9001      	str	r0, [sp, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8007fca:	bfb8      	it	lt
 8007fcc:	18e4      	addlt	r4, r4, r3
 8007fce:	f000 f8d3 	bl	8008178 <__malloc_lock>
 8007fd2:	4a20      	ldr	r2, [pc, #128]	; (8008054 <_free_r+0x9c>)
 8007fd4:	9801      	ldr	r0, [sp, #4]
 8007fd6:	6813      	ldr	r3, [r2, #0]
 8007fd8:	4615      	mov	r5, r2
 8007fda:	b933      	cbnz	r3, 8007fea <_free_r+0x32>
 8007fdc:	6063      	str	r3, [r4, #4]
 8007fde:	6014      	str	r4, [r2, #0]
 8007fe0:	b003      	add	sp, #12
 8007fe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fe6:	f000 b8cd 	b.w	8008184 <__malloc_unlock>
 8007fea:	42a3      	cmp	r3, r4
 8007fec:	d90b      	bls.n	8008006 <_free_r+0x4e>
 8007fee:	6821      	ldr	r1, [r4, #0]
 8007ff0:	1862      	adds	r2, r4, r1
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	bf04      	itt	eq
 8007ff6:	681a      	ldreq	r2, [r3, #0]
 8007ff8:	685b      	ldreq	r3, [r3, #4]
 8007ffa:	6063      	str	r3, [r4, #4]
 8007ffc:	bf04      	itt	eq
 8007ffe:	1852      	addeq	r2, r2, r1
 8008000:	6022      	streq	r2, [r4, #0]
 8008002:	602c      	str	r4, [r5, #0]
 8008004:	e7ec      	b.n	8007fe0 <_free_r+0x28>
 8008006:	461a      	mov	r2, r3
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	b10b      	cbz	r3, 8008010 <_free_r+0x58>
 800800c:	42a3      	cmp	r3, r4
 800800e:	d9fa      	bls.n	8008006 <_free_r+0x4e>
 8008010:	6811      	ldr	r1, [r2, #0]
 8008012:	1855      	adds	r5, r2, r1
 8008014:	42a5      	cmp	r5, r4
 8008016:	d10b      	bne.n	8008030 <_free_r+0x78>
 8008018:	6824      	ldr	r4, [r4, #0]
 800801a:	4421      	add	r1, r4
 800801c:	1854      	adds	r4, r2, r1
 800801e:	42a3      	cmp	r3, r4
 8008020:	6011      	str	r1, [r2, #0]
 8008022:	d1dd      	bne.n	8007fe0 <_free_r+0x28>
 8008024:	681c      	ldr	r4, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	6053      	str	r3, [r2, #4]
 800802a:	4421      	add	r1, r4
 800802c:	6011      	str	r1, [r2, #0]
 800802e:	e7d7      	b.n	8007fe0 <_free_r+0x28>
 8008030:	d902      	bls.n	8008038 <_free_r+0x80>
 8008032:	230c      	movs	r3, #12
 8008034:	6003      	str	r3, [r0, #0]
 8008036:	e7d3      	b.n	8007fe0 <_free_r+0x28>
 8008038:	6825      	ldr	r5, [r4, #0]
 800803a:	1961      	adds	r1, r4, r5
 800803c:	428b      	cmp	r3, r1
 800803e:	bf04      	itt	eq
 8008040:	6819      	ldreq	r1, [r3, #0]
 8008042:	685b      	ldreq	r3, [r3, #4]
 8008044:	6063      	str	r3, [r4, #4]
 8008046:	bf04      	itt	eq
 8008048:	1949      	addeq	r1, r1, r5
 800804a:	6021      	streq	r1, [r4, #0]
 800804c:	6054      	str	r4, [r2, #4]
 800804e:	e7c7      	b.n	8007fe0 <_free_r+0x28>
 8008050:	b003      	add	sp, #12
 8008052:	bd30      	pop	{r4, r5, pc}
 8008054:	2400019c 	.word	0x2400019c

08008058 <_malloc_r>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	1ccd      	adds	r5, r1, #3
 800805c:	f025 0503 	bic.w	r5, r5, #3
 8008060:	3508      	adds	r5, #8
 8008062:	2d0c      	cmp	r5, #12
 8008064:	bf38      	it	cc
 8008066:	250c      	movcc	r5, #12
 8008068:	2d00      	cmp	r5, #0
 800806a:	4606      	mov	r6, r0
 800806c:	db01      	blt.n	8008072 <_malloc_r+0x1a>
 800806e:	42a9      	cmp	r1, r5
 8008070:	d903      	bls.n	800807a <_malloc_r+0x22>
 8008072:	230c      	movs	r3, #12
 8008074:	6033      	str	r3, [r6, #0]
 8008076:	2000      	movs	r0, #0
 8008078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800807a:	f000 f87d 	bl	8008178 <__malloc_lock>
 800807e:	4921      	ldr	r1, [pc, #132]	; (8008104 <_malloc_r+0xac>)
 8008080:	680a      	ldr	r2, [r1, #0]
 8008082:	4614      	mov	r4, r2
 8008084:	b99c      	cbnz	r4, 80080ae <_malloc_r+0x56>
 8008086:	4f20      	ldr	r7, [pc, #128]	; (8008108 <_malloc_r+0xb0>)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	b923      	cbnz	r3, 8008096 <_malloc_r+0x3e>
 800808c:	4621      	mov	r1, r4
 800808e:	4630      	mov	r0, r6
 8008090:	f000 f862 	bl	8008158 <_sbrk_r>
 8008094:	6038      	str	r0, [r7, #0]
 8008096:	4629      	mov	r1, r5
 8008098:	4630      	mov	r0, r6
 800809a:	f000 f85d 	bl	8008158 <_sbrk_r>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	d123      	bne.n	80080ea <_malloc_r+0x92>
 80080a2:	230c      	movs	r3, #12
 80080a4:	6033      	str	r3, [r6, #0]
 80080a6:	4630      	mov	r0, r6
 80080a8:	f000 f86c 	bl	8008184 <__malloc_unlock>
 80080ac:	e7e3      	b.n	8008076 <_malloc_r+0x1e>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	1b5b      	subs	r3, r3, r5
 80080b2:	d417      	bmi.n	80080e4 <_malloc_r+0x8c>
 80080b4:	2b0b      	cmp	r3, #11
 80080b6:	d903      	bls.n	80080c0 <_malloc_r+0x68>
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	441c      	add	r4, r3
 80080bc:	6025      	str	r5, [r4, #0]
 80080be:	e004      	b.n	80080ca <_malloc_r+0x72>
 80080c0:	6863      	ldr	r3, [r4, #4]
 80080c2:	42a2      	cmp	r2, r4
 80080c4:	bf0c      	ite	eq
 80080c6:	600b      	streq	r3, [r1, #0]
 80080c8:	6053      	strne	r3, [r2, #4]
 80080ca:	4630      	mov	r0, r6
 80080cc:	f000 f85a 	bl	8008184 <__malloc_unlock>
 80080d0:	f104 000b 	add.w	r0, r4, #11
 80080d4:	1d23      	adds	r3, r4, #4
 80080d6:	f020 0007 	bic.w	r0, r0, #7
 80080da:	1ac2      	subs	r2, r0, r3
 80080dc:	d0cc      	beq.n	8008078 <_malloc_r+0x20>
 80080de:	1a1b      	subs	r3, r3, r0
 80080e0:	50a3      	str	r3, [r4, r2]
 80080e2:	e7c9      	b.n	8008078 <_malloc_r+0x20>
 80080e4:	4622      	mov	r2, r4
 80080e6:	6864      	ldr	r4, [r4, #4]
 80080e8:	e7cc      	b.n	8008084 <_malloc_r+0x2c>
 80080ea:	1cc4      	adds	r4, r0, #3
 80080ec:	f024 0403 	bic.w	r4, r4, #3
 80080f0:	42a0      	cmp	r0, r4
 80080f2:	d0e3      	beq.n	80080bc <_malloc_r+0x64>
 80080f4:	1a21      	subs	r1, r4, r0
 80080f6:	4630      	mov	r0, r6
 80080f8:	f000 f82e 	bl	8008158 <_sbrk_r>
 80080fc:	3001      	adds	r0, #1
 80080fe:	d1dd      	bne.n	80080bc <_malloc_r+0x64>
 8008100:	e7cf      	b.n	80080a2 <_malloc_r+0x4a>
 8008102:	bf00      	nop
 8008104:	2400019c 	.word	0x2400019c
 8008108:	240001a0 	.word	0x240001a0

0800810c <_realloc_r>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	4607      	mov	r7, r0
 8008110:	4614      	mov	r4, r2
 8008112:	460e      	mov	r6, r1
 8008114:	b921      	cbnz	r1, 8008120 <_realloc_r+0x14>
 8008116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800811a:	4611      	mov	r1, r2
 800811c:	f7ff bf9c 	b.w	8008058 <_malloc_r>
 8008120:	b922      	cbnz	r2, 800812c <_realloc_r+0x20>
 8008122:	f7ff ff49 	bl	8007fb8 <_free_r>
 8008126:	4625      	mov	r5, r4
 8008128:	4628      	mov	r0, r5
 800812a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800812c:	f000 f830 	bl	8008190 <_malloc_usable_size_r>
 8008130:	42a0      	cmp	r0, r4
 8008132:	d20f      	bcs.n	8008154 <_realloc_r+0x48>
 8008134:	4621      	mov	r1, r4
 8008136:	4638      	mov	r0, r7
 8008138:	f7ff ff8e 	bl	8008058 <_malloc_r>
 800813c:	4605      	mov	r5, r0
 800813e:	2800      	cmp	r0, #0
 8008140:	d0f2      	beq.n	8008128 <_realloc_r+0x1c>
 8008142:	4631      	mov	r1, r6
 8008144:	4622      	mov	r2, r4
 8008146:	f7ff ff0f 	bl	8007f68 <memcpy>
 800814a:	4631      	mov	r1, r6
 800814c:	4638      	mov	r0, r7
 800814e:	f7ff ff33 	bl	8007fb8 <_free_r>
 8008152:	e7e9      	b.n	8008128 <_realloc_r+0x1c>
 8008154:	4635      	mov	r5, r6
 8008156:	e7e7      	b.n	8008128 <_realloc_r+0x1c>

08008158 <_sbrk_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d06      	ldr	r5, [pc, #24]	; (8008174 <_sbrk_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7f8 ffbe 	bl	80010e4 <_sbrk>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_sbrk_r+0x1a>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_sbrk_r+0x1a>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	24000370 	.word	0x24000370

08008178 <__malloc_lock>:
 8008178:	4801      	ldr	r0, [pc, #4]	; (8008180 <__malloc_lock+0x8>)
 800817a:	f000 b811 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 800817e:	bf00      	nop
 8008180:	24000378 	.word	0x24000378

08008184 <__malloc_unlock>:
 8008184:	4801      	ldr	r0, [pc, #4]	; (800818c <__malloc_unlock+0x8>)
 8008186:	f000 b80c 	b.w	80081a2 <__retarget_lock_release_recursive>
 800818a:	bf00      	nop
 800818c:	24000378 	.word	0x24000378

08008190 <_malloc_usable_size_r>:
 8008190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008194:	1f18      	subs	r0, r3, #4
 8008196:	2b00      	cmp	r3, #0
 8008198:	bfbc      	itt	lt
 800819a:	580b      	ldrlt	r3, [r1, r0]
 800819c:	18c0      	addlt	r0, r0, r3
 800819e:	4770      	bx	lr

080081a0 <__retarget_lock_acquire_recursive>:
 80081a0:	4770      	bx	lr

080081a2 <__retarget_lock_release_recursive>:
 80081a2:	4770      	bx	lr

080081a4 <_init>:
 80081a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a6:	bf00      	nop
 80081a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081aa:	bc08      	pop	{r3}
 80081ac:	469e      	mov	lr, r3
 80081ae:	4770      	bx	lr

080081b0 <_fini>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	bf00      	nop
 80081b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b6:	bc08      	pop	{r3}
 80081b8:	469e      	mov	lr, r3
 80081ba:	4770      	bx	lr
