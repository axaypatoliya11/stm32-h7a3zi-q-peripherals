
CubeMX_Workspace_temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007540  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007874  08007874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d0  24000010  08007888  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001e0  08007888  000201e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022216  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003539  00000000  00000000  00042254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010a8  00000000  00000000  00045790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fb0  00000000  00000000  00046838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032e13  00000000  00000000  000477e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015359  00000000  00000000  0007a5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00150f8c  00000000  00000000  0008f954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e08e0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045e0  00000000  00000000  001e0934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080077d4 	.word	0x080077d4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080077d4 	.word	0x080077d4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <custom_WWDG_refresh>:
void FLASH_clear();

void FLASH_Read(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords);
void Print_readed_data(uint32_t holdMultipleRead[]);

void custom_WWDG_refresh(WWDG_HandleTypeDef *hwwdg){
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	68d2      	ldr	r2, [r2, #12]
 80005f4:	601a      	str	r2, [r3, #0]
	check_loop_count_wwdg = 0;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <custom_WWDG_refresh+0x24>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	2400019c 	.word	0x2400019c

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	check_loop_count_wwdg = 0;
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <main+0x54>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fda9 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f82b 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 fa23 	bl	8000a68 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000622:	f000 f8a5 	bl	8000770 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000626:	f000 f9b1 	bl	800098c <MX_USART3_UART_Init>
  MX_RNG_Init();
 800062a:	f000 f907 	bl	800083c <MX_RNG_Init>
  MX_RTC_Init();
 800062e:	f000 f91b 	bl	8000868 <MX_RTC_Init>
  MX_WWDG1_Init();
 8000632:	f000 f9f7 	bl	8000a24 <MX_WWDG1_Init>
#ifdef __IWDG__
  MX_IWDG1_Init();
  HAL_Delay(1000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
#endif
	HAL_UART_Transmit(&huart3, "System reboot\n", sizeof("System reboot\n"), 100);
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	220f      	movs	r2, #15
 800063a:	490a      	ldr	r1, [pc, #40]	; (8000664 <main+0x58>)
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <main+0x5c>)
 800063e:	f005 fe9d 	bl	800637c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, "5 seconds\n", 10, 500);
	  HAL_IWDG_Refresh(&hiwdg1);
  }
#endif

  HAL_ADC_Start(&hadc2);
 8000642:	480a      	ldr	r0, [pc, #40]	; (800066c <main+0x60>)
 8000644:	f001 f964 	bl	8001910 <HAL_ADC_Start>
  /* print the readed data */
  Print_readed_data(holdMultipleRead);
#endif

#ifdef __WWDG__
  custom_WWDG_refresh(&hwwdg1);
 8000648:	4809      	ldr	r0, [pc, #36]	; (8000670 <main+0x64>)
 800064a:	f7ff ffcb 	bl	80005e4 <custom_WWDG_refresh>
	HAL_UART_Transmit(&huart3, "\n", 1, UART_TIMEOUT);
#endif
//	HAL_Delay(1000);

#ifdef __WWDG__
	  HAL_Delay(14900);
 800064e:	f643 2034 	movw	r0, #14900	; 0x3a34
 8000652:	f000 fe1d 	bl	8001290 <HAL_Delay>
	  custom_WWDG_refresh(&hwwdg1);
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <main+0x64>)
 8000658:	f7ff ffc4 	bl	80005e4 <custom_WWDG_refresh>
	  HAL_Delay(14900);
 800065c:	e7f7      	b.n	800064e <main+0x42>
 800065e:	bf00      	nop
 8000660:	2400019c 	.word	0x2400019c
 8000664:	080077ec 	.word	0x080077ec
 8000668:	24000064 	.word	0x24000064
 800066c:	240000f4 	.word	0x240000f4
 8000670:	240001c8 	.word	0x240001c8

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b09c      	sub	sp, #112	; 0x70
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067e:	224c      	movs	r2, #76	; 0x4c
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f007 f89e 	bl	80077c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2220      	movs	r2, #32
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 f898 	bl	80077c4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000694:	4b34      	ldr	r3, [pc, #208]	; (8000768 <SystemClock_Config+0xf4>)
 8000696:	f04f 32ff 	mov.w	r2, #4294967295
 800069a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800069e:	2004      	movs	r0, #4
 80006a0:	f002 f908 	bl	80028b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a4:	2300      	movs	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	4b30      	ldr	r3, [pc, #192]	; (800076c <SystemClock_Config+0xf8>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a2f      	ldr	r2, [pc, #188]	; (800076c <SystemClock_Config+0xf8>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b2d      	ldr	r3, [pc, #180]	; (800076c <SystemClock_Config+0xf8>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c0:	bf00      	nop
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <SystemClock_Config+0xf8>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ce:	d1f8      	bne.n	80006c2 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <SystemClock_Config+0xf4>)
 80006d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d4:	4a24      	ldr	r2, [pc, #144]	; (8000768 <SystemClock_Config+0xf4>)
 80006d6:	f023 0303 	bic.w	r3, r3, #3
 80006da:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006dc:	232a      	movs	r3, #42	; 0x2a
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800070c:	230c      	movs	r3, #12
 800070e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000710:	2300      	movs	r3, #0
 8000712:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071c:	4618      	mov	r0, r3
 800071e:	f002 f923 	bl	8002968 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000728:	f000 fada 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	233f      	movs	r3, #63	; 0x3f
 800072e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2303      	movs	r3, #3
 8000732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV16;
 800073c:	2370      	movs	r3, #112	; 0x70
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2101      	movs	r1, #1
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fd0d 	bl	8003170 <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800075c:	f000 fac0 	bl	8000ce0 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3770      	adds	r7, #112	; 0x70
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	58024400 	.word	0x58024400
 800076c:	58024800 	.word	0x58024800

08000770 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]
 8000786:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_ADC2_Init+0xc0>)
 800078a:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <MX_ADC2_Init+0xc4>)
 800078c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_ADC2_Init+0xc0>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_ADC2_Init+0xc0>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_ADC2_Init+0xc0>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007ac:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007e4:	4812      	ldr	r0, [pc, #72]	; (8000830 <MX_ADC2_Init+0xc0>)
 80007e6:	f000 ff39 	bl	800165c <HAL_ADC_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80007f0:	f000 fa76 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_ADC2_Init+0xc8>)
 80007f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f8:	2306      	movs	r3, #6
 80007fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80007fc:	2305      	movs	r3, #5
 80007fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000800:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000804:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000806:	2304      	movs	r3, #4
 8000808:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_ADC2_Init+0xc0>)
 8000818:	f001 f934 	bl	8001a84 <HAL_ADC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000822:	f000 fa5d 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3720      	adds	r7, #32
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	240000f4 	.word	0x240000f4
 8000834:	40022100 	.word	0x40022100
 8000838:	cb840000 	.word	0xcb840000

0800083c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_RNG_Init+0x24>)
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <MX_RNG_Init+0x28>)
 8000844:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_RNG_Init+0x24>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_RNG_Init+0x24>)
 800084e:	f005 f8c5 	bl	80059dc <HAL_RNG_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000858:	f000 fa42 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	240001a0 	.word	0x240001a0
 8000864:	48021800 	.word	0x48021800

08000868 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b090      	sub	sp, #64	; 0x40
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800086e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000882:	463b      	mov	r3, r7
 8000884:	2228      	movs	r2, #40	; 0x28
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f006 ff9b 	bl	80077c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800088e:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <MX_RTC_Init+0x11c>)
 8000890:	4a3d      	ldr	r2, [pc, #244]	; (8000988 <MX_RTC_Init+0x120>)
 8000892:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000894:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <MX_RTC_Init+0x11c>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800089a:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <MX_RTC_Init+0x11c>)
 800089c:	227f      	movs	r2, #127	; 0x7f
 800089e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008a0:	4b38      	ldr	r3, [pc, #224]	; (8000984 <MX_RTC_Init+0x11c>)
 80008a2:	22ff      	movs	r2, #255	; 0xff
 80008a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <MX_RTC_Init+0x11c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008ac:	4b35      	ldr	r3, [pc, #212]	; (8000984 <MX_RTC_Init+0x11c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <MX_RTC_Init+0x11c>)
 80008b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <MX_RTC_Init+0x11c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008c0:	4830      	ldr	r0, [pc, #192]	; (8000984 <MX_RTC_Init+0x11c>)
 80008c2:	f005 f931 	bl	8005b28 <HAL_RTC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 80008cc:	f000 fa08 	bl	8000ce0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ee:	2201      	movs	r2, #1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4824      	ldr	r0, [pc, #144]	; (8000984 <MX_RTC_Init+0x11c>)
 80008f4:	f005 f994 	bl	8005c20 <HAL_RTC_SetTime>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80008fe:	f000 f9ef 	bl	8000ce0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000902:	2302      	movs	r3, #2
 8000904:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8000908:	2309      	movs	r3, #9
 800090a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x20;
 800090e:	2320      	movs	r3, #32
 8000910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x22;
 8000914:	2322      	movs	r3, #34	; 0x22
 8000916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800091a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800091e:	2201      	movs	r2, #1
 8000920:	4619      	mov	r1, r3
 8000922:	4818      	ldr	r0, [pc, #96]	; (8000984 <MX_RTC_Init+0x11c>)
 8000924:	f005 fa1a 	bl	8005d5c <HAL_RTC_SetDate>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_RTC_Init+0xca>
  {
    Error_Handler();
 800092e:	f000 f9d7 	bl	8000ce0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x11;
 8000932:	2311      	movs	r3, #17
 8000934:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x12;
 8000936:	2312      	movs	r3, #18
 8000938:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800093a:	2300      	movs	r3, #0
 800093c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000956:	2301      	movs	r3, #1
 8000958:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800095c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	2201      	movs	r2, #1
 8000966:	4619      	mov	r1, r3
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <MX_RTC_Init+0x11c>)
 800096a:	f005 fa7f 	bl	8005e6c <HAL_RTC_SetAlarm_IT>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8000974:	f000 f9b4 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	HAL_PWR_EnableBkUpAccess();
 8000978:	f001 ff8c 	bl	8002894 <HAL_PWR_EnableBkUpAccess>
  /* USER CODE END RTC_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3740      	adds	r7, #64	; 0x40
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24000174 	.word	0x24000174
 8000988:	58004000 	.word	0x58004000

0800098c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <MX_USART3_UART_Init+0x94>)
 8000994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009d6:	f005 fc81 	bl	80062dc <HAL_UART_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009e0:	f000 f97e 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009e8:	f006 fdaa 	bl	8007540 <HAL_UARTEx_SetTxFifoThreshold>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009f2:	f000 f975 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 80009fa:	f006 fddf 	bl	80075bc <HAL_UARTEx_SetRxFifoThreshold>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f000 f96c 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_USART3_UART_Init+0x90>)
 8000a0a:	f006 fd60 	bl	80074ce <HAL_UARTEx_DisableFifoMode>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f000 f964 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	24000064 	.word	0x24000064
 8000a20:	40004800 	.word	0x40004800

08000a24 <MX_WWDG1_Init>:
  * @brief WWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG1_Init 0 */

  /* USER CODE BEGIN WWDG1_Init 1 */

  /* USER CODE END WWDG1_Init 1 */
  hwwdg1.Instance = WWDG1;
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <MX_WWDG1_Init+0x3c>)
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <MX_WWDG1_Init+0x40>)
 8000a2c:	601a      	str	r2, [r3, #0]
    }
  if(PRESCALAR_WWDG==64){
  	  hwwdg1.Init.Prescaler = WWDG_PRESCALER_64;
    }
  if(PRESCALAR_WWDG==128){
  	  hwwdg1.Init.Prescaler = WWDG_PRESCALER_128;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_WWDG1_Init+0x3c>)
 8000a30:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a34:	605a      	str	r2, [r3, #4]
    }
  hwwdg1.Init.Window = (WINDOW_VAL+1);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_WWDG1_Init+0x3c>)
 8000a38:	2257      	movs	r2, #87	; 0x57
 8000a3a:	609a      	str	r2, [r3, #8]
  hwwdg1.Init.Counter = (COUNTER_VAL+1);
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_WWDG1_Init+0x3c>)
 8000a3e:	2257      	movs	r2, #87	; 0x57
 8000a40:	60da      	str	r2, [r3, #12]
  hwwdg1.Init.EWIMode = WWDG_EWI_ENABLE;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_WWDG1_Init+0x3c>)
 8000a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a48:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg1) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_WWDG1_Init+0x3c>)
 8000a4c:	f006 fe42 	bl	80076d4 <HAL_WWDG_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_WWDG1_Init+0x36>
  {
    Error_Handler();
 8000a56:	f000 f943 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG1_Init 2 */

  /* USER CODE END WWDG1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	240001c8 	.word	0x240001c8
 8000a64:	50003000 	.word	0x50003000

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	; 0x38
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b79      	ldr	r3, [pc, #484]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000a80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a84:	4a77      	ldr	r2, [pc, #476]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a8e:	4b75      	ldr	r3, [pc, #468]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000a90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	623b      	str	r3, [r7, #32]
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9c:	4b71      	ldr	r3, [pc, #452]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa2:	4a70      	ldr	r2, [pc, #448]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000aa4:	f043 0320 	orr.w	r3, r3, #32
 8000aa8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aac:	4b6d      	ldr	r3, [pc, #436]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000aae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab2:	f003 0320 	and.w	r3, r3, #32
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	4b6a      	ldr	r3, [pc, #424]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac0:	4a68      	ldr	r2, [pc, #416]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aca:	4b66      	ldr	r3, [pc, #408]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000acc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b62      	ldr	r3, [pc, #392]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000ada:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ade:	4a61      	ldr	r2, [pc, #388]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ae8:	4b5e      	ldr	r3, [pc, #376]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000aea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b5b      	ldr	r3, [pc, #364]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000af8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000afc:	4a59      	ldr	r2, [pc, #356]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b06:	4b57      	ldr	r3, [pc, #348]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000b08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b14:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000b16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1a:	4a52      	ldr	r2, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b24:	4b4f      	ldr	r3, [pc, #316]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000b26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b4c      	ldr	r3, [pc, #304]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b38:	4a4a      	ldr	r2, [pc, #296]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b42:	4b48      	ldr	r3, [pc, #288]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b50:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000b52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b56:	4a43      	ldr	r2, [pc, #268]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b60:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <MX_GPIO_Init+0x1fc>)
 8000b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b74:	483c      	ldr	r0, [pc, #240]	; (8000c68 <MX_GPIO_Init+0x200>)
 8000b76:	f001 fe73 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b80:	483a      	ldr	r0, [pc, #232]	; (8000c6c <MX_GPIO_Init+0x204>)
 8000b82:	f001 fe6d 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4839      	ldr	r0, [pc, #228]	; (8000c70 <MX_GPIO_Init+0x208>)
 8000b8c:	f001 fe68 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4833      	ldr	r0, [pc, #204]	; (8000c74 <MX_GPIO_Init+0x20c>)
 8000ba6:	f001 fcab 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4829      	ldr	r0, [pc, #164]	; (8000c68 <MX_GPIO_Init+0x200>)
 8000bc4:	f001 fc9c 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bc8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	4822      	ldr	r0, [pc, #136]	; (8000c6c <MX_GPIO_Init+0x204>)
 8000be2:	f001 fc8d 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481f      	ldr	r0, [pc, #124]	; (8000c78 <MX_GPIO_Init+0x210>)
 8000bfc:	f001 fc80 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c12:	230a      	movs	r3, #10
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <MX_GPIO_Init+0x214>)
 8000c1e:	f001 fc6f 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4810      	ldr	r0, [pc, #64]	; (8000c7c <MX_GPIO_Init+0x214>)
 8000c3c:	f001 fc60 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c40:	2302      	movs	r3, #2
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4806      	ldr	r0, [pc, #24]	; (8000c70 <MX_GPIO_Init+0x208>)
 8000c58:	f001 fc52 	bl	8002500 <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58021400 	.word	0x58021400
 8000c6c:	58020400 	.word	0x58020400
 8000c70:	58021000 	.word	0x58021000
 8000c74:	58020800 	.word	0x58020800
 8000c78:	58021800 	.word	0x58021800
 8000c7c:	58020000 	.word	0x58020000

08000c80 <HAL_WWDG_EarlyWakeupCallback>:
}
#endif

#ifdef __WWDG__
void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	check_loop_count_wwdg+=1;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_WWDG_EarlyWakeupCallback+0x4c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <HAL_WWDG_EarlyWakeupCallback+0x4c>)
 8000c90:	6013      	str	r3, [r2, #0]
	if(check_loop_count_wwdg == LOOP_COUNT_WWDG){
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_WWDG_EarlyWakeupCallback+0x4c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d106      	bne.n	8000ca8 <HAL_WWDG_EarlyWakeupCallback+0x28>
		HAL_UART_Transmit(&huart3, "system reboot using watchdog\n", sizeof("system reboot using watchdog\n"), 100);
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	221e      	movs	r2, #30
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <HAL_WWDG_EarlyWakeupCallback+0x50>)
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <HAL_WWDG_EarlyWakeupCallback+0x54>)
 8000ca2:	f005 fb6b 	bl	800637c <HAL_UART_Transmit>
	else{
		WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
		HAL_UART_Transmit(&huart3, "inside else ISR\n", sizeof("inside else ISR\n"), 100);
		HAL_WWDG_Refresh(&hwwdg1);
	}
}
 8000ca6:	e00d      	b.n	8000cc4 <HAL_WWDG_EarlyWakeupCallback+0x44>
		WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	68d2      	ldr	r2, [r2, #12]
 8000cb0:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, "inside else ISR\n", sizeof("inside else ISR\n"), 100);
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	2211      	movs	r2, #17
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <HAL_WWDG_EarlyWakeupCallback+0x58>)
 8000cb8:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <HAL_WWDG_EarlyWakeupCallback+0x54>)
 8000cba:	f005 fb5f 	bl	800637c <HAL_UART_Transmit>
		HAL_WWDG_Refresh(&hwwdg1);
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <HAL_WWDG_EarlyWakeupCallback+0x5c>)
 8000cc0:	f006 fd2c 	bl	800771c <HAL_WWDG_Refresh>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2400019c 	.word	0x2400019c
 8000cd0:	080077fc 	.word	0x080077fc
 8000cd4:	24000064 	.word	0x24000064
 8000cd8:	0800781c 	.word	0x0800781c
 8000cdc:	240001c8 	.word	0x240001c8

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_MspInit+0x30>)
 8000cf4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cf8:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x30>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x30>)
 8000d04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	58024400 	.word	0x58024400

08000d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0b2      	sub	sp, #200	; 0xc8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	22b8      	movs	r2, #184	; 0xb8
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f006 fd47 	bl	80077c4 <memset>
  if(hadc->Instance==ADC2)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <HAL_ADC_MspInit+0x88>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d12e      	bne.n	8000d9e <HAL_ADC_MspInit+0x7e>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000d46:	2320      	movs	r3, #32
 8000d48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000d4a:	2381      	movs	r3, #129	; 0x81
 8000d4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fd89 	bl	8003888 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000d7c:	f7ff ffb0 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_ADC_MspInit+0x8c>)
 8000d82:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_ADC_MspInit+0x8c>)
 8000d88:	f043 0320 	orr.w	r3, r3, #32
 8000d8c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_ADC_MspInit+0x8c>)
 8000d92:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	37c8      	adds	r7, #200	; 0xc8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40022100 	.word	0x40022100
 8000dac:	58024400 	.word	0x58024400

08000db0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0b2      	sub	sp, #200	; 0xc8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	22b8      	movs	r2, #184	; 0xb8
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 fcff 	bl	80077c4 <memset>
  if(hrng->Instance==RNG)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <HAL_RNG_MspInit+0x68>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d11e      	bne.n	8000e0e <HAL_RNG_MspInit+0x5e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fd51 	bl	8003888 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000dec:	f7ff ff78 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_RNG_MspInit+0x6c>)
 8000df2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_RNG_MspInit+0x6c>)
 8000df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfc:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_RNG_MspInit+0x6c>)
 8000e02:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	37c8      	adds	r7, #200	; 0xc8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	48021800 	.word	0x48021800
 8000e1c:	58024400 	.word	0x58024400

08000e20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0b0      	sub	sp, #192	; 0xc0
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	22b8      	movs	r2, #184	; 0xb8
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f006 fcc7 	bl	80077c4 <memset>
  if(hrtc->Instance==RTC)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <HAL_RTC_MspInit+0x68>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d11e      	bne.n	8000e7e <HAL_RTC_MspInit+0x5e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e44:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fd18 	bl	8003888 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e5e:	f7ff ff3f 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_RTC_MspInit+0x6c>)
 8000e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e66:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <HAL_RTC_MspInit+0x6c>)
 8000e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2029      	movs	r0, #41	; 0x29
 8000e74:	f001 fb0f 	bl	8002496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e78:	2029      	movs	r0, #41	; 0x29
 8000e7a:	f001 fb26 	bl	80024ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	37c0      	adds	r7, #192	; 0xc0
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	58004000 	.word	0x58004000
 8000e8c:	58024400 	.word	0x58024400

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0b8      	sub	sp, #224	; 0xe0
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	22b8      	movs	r2, #184	; 0xb8
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f006 fc87 	bl	80077c4 <memset>
  if(huart->Instance==USART3)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a25      	ldr	r2, [pc, #148]	; (8000f50 <HAL_UART_MspInit+0xc0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d142      	bne.n	8000f46 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fcda 	bl	8003888 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eda:	f7ff ff01 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000ee0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000ef0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000efe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f02:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000f0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f34:	2307      	movs	r3, #7
 8000f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_UART_MspInit+0xc8>)
 8000f42:	f001 fadd 	bl	8002500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	37e0      	adds	r7, #224	; 0xe0
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40004800 	.word	0x40004800
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020c00 	.word	0x58020c00

08000f5c <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <HAL_WWDG_MspInit+0x48>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d116      	bne.n	8000f9c <HAL_WWDG_MspInit+0x40>
  {
  /* USER CODE BEGIN WWDG1_MspInit 0 */

  /* USER CODE END WWDG1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG1_CLK_ENABLE();
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_WWDG_MspInit+0x4c>)
 8000f70:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <HAL_WWDG_MspInit+0x4c>)
 8000f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f7a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_WWDG_MspInit+0x4c>)
 8000f80:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    /* WWDG1 interrupt Init */
    HAL_NVIC_SetPriority(WWDG_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2000      	movs	r0, #0
 8000f92:	f001 fa80 	bl	8002496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WWDG_IRQn);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f001 fa97 	bl	80024ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WWDG1_MspInit 1 */

  /* USER CODE END WWDG1_MspInit 1 */
  }

}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	50003000 	.word	0x50003000
 8000fa8:	58024400 	.word	0x58024400

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f92a 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <WWDG_IRQHandler+0x10>)
 8001006:	f006 fb99 	bl	800773c <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	240001c8 	.word	0x240001c8

08001014 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <RTC_Alarm_IRQHandler+0x10>)
 800101a:	f005 f863 	bl	80060e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	24000174 	.word	0x24000174

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <SystemInit+0xd0>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <SystemInit+0xd0>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <SystemInit+0xd4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	2b02      	cmp	r3, #2
 8001046:	d807      	bhi.n	8001058 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <SystemInit+0xd4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 030f 	bic.w	r3, r3, #15
 8001050:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <SystemInit+0xd4>)
 8001052:	f043 0303 	orr.w	r3, r3, #3
 8001056:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <SystemInit+0xd8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a28      	ldr	r2, [pc, #160]	; (8001100 <SystemInit+0xd8>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <SystemInit+0xd8>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <SystemInit+0xd8>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4924      	ldr	r1, [pc, #144]	; (8001100 <SystemInit+0xd8>)
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <SystemInit+0xdc>)
 8001072:	4013      	ands	r3, r2
 8001074:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <SystemInit+0xd4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b00      	cmp	r3, #0
 8001080:	d007      	beq.n	8001092 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <SystemInit+0xd4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 030f 	bic.w	r3, r3, #15
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <SystemInit+0xd4>)
 800108c:	f043 0303 	orr.w	r3, r3, #3
 8001090:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <SystemInit+0xd8>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <SystemInit+0xd8>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <SystemInit+0xd8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <SystemInit+0xd8>)
 80010a6:	4a18      	ldr	r2, [pc, #96]	; (8001108 <SystemInit+0xe0>)
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <SystemInit+0xd8>)
 80010ac:	4a17      	ldr	r2, [pc, #92]	; (800110c <SystemInit+0xe4>)
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <SystemInit+0xd8>)
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <SystemInit+0xe8>)
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <SystemInit+0xd8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <SystemInit+0xd8>)
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <SystemInit+0xe8>)
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <SystemInit+0xd8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <SystemInit+0xd8>)
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <SystemInit+0xe8>)
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <SystemInit+0xd8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <SystemInit+0xd8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a09      	ldr	r2, [pc, #36]	; (8001100 <SystemInit+0xd8>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <SystemInit+0xd8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <SystemInit+0xec>)
 80010e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	52002000 	.word	0x52002000
 8001100:	58024400 	.word	0x58024400
 8001104:	eaf6ed7f 	.word	0xeaf6ed7f
 8001108:	02020200 	.word	0x02020200
 800110c:	01ff0000 	.word	0x01ff0000
 8001110:	01010280 	.word	0x01010280
 8001114:	52004000 	.word	0x52004000

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800111c:	f7ff ff84 	bl	8001028 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	; (8001158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	; (8001164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001146:	f006 fb19 	bl	800777c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff fa5f 	bl	800060c <main>
  bx  lr
 800114e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001154:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001158:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800115c:	08007878 	.word	0x08007878
  ldr r2, =_sbss
 8001160:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001164:	240001e0 	.word	0x240001e0

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001172:	2003      	movs	r0, #3
 8001174:	f001 f984 	bl	8002480 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001178:	f002 f9b0 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800117c:	4602      	mov	r2, r0
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_Init+0x68>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	4913      	ldr	r1, [pc, #76]	; (80011d8 <HAL_Init+0x6c>)
 800118a:	5ccb      	ldrb	r3, [r1, r3]
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_Init+0x68>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_Init+0x6c>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_Init+0x70>)
 80011ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_Init+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f814 	bl	80011e4 <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e002      	b.n	80011cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011c6:	f7ff fd91 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	58024400 	.word	0x58024400
 80011d8:	08007830 	.word	0x08007830
 80011dc:	24000004 	.word	0x24000004
 80011e0:	24000000 	.word	0x24000000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_InitTick+0x60>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e021      	b.n	800123c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_InitTick+0x64>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_InitTick+0x60>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f001 f969 	bl	80024e6 <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f001 f933 	bl	8002496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x68>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2400000c 	.word	0x2400000c
 8001248:	24000000 	.word	0x24000000
 800124c:	24000008 	.word	0x24000008

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2400000c 	.word	0x2400000c
 8001274:	240001dc 	.word	0x240001dc

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	240001dc 	.word	0x240001dc

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400000c 	.word	0x2400000c

080012d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	609a      	str	r2, [r3, #8]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3360      	adds	r3, #96	; 0x60
 8001352:	461a      	mov	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	430b      	orrs	r3, r1
 800136e:	431a      	orrs	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	431a      	orrs	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	611a      	str	r2, [r3, #16]
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b087      	sub	sp, #28
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3360      	adds	r3, #96	; 0x60
 80013c2:	461a      	mov	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	601a      	str	r2, [r3, #0]
  }
}
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3330      	adds	r3, #48	; 0x30
 80013f8:	461a      	mov	r2, r3
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	4413      	add	r3, r2
 8001406:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	211f      	movs	r1, #31
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	401a      	ands	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	0e9b      	lsrs	r3, r3, #26
 8001420:	f003 011f 	and.w	r1, r3, #31
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	431a      	orrs	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3314      	adds	r3, #20
 8001450:	461a      	mov	r2, r3
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	0e5b      	lsrs	r3, r3, #25
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	4413      	add	r3, r2
 800145e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	0d1b      	lsrs	r3, r3, #20
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	2107      	movs	r1, #7
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	401a      	ands	r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	0d1b      	lsrs	r3, r3, #20
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800148a:	bf00      	nop
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014b0:	43db      	mvns	r3, r3
 80014b2:	401a      	ands	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0318 	and.w	r3, r3, #24
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80014bc:	40d9      	lsrs	r1, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	400b      	ands	r3, r1
 80014c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014c6:	431a      	orrs	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	000fffff 	.word	0x000fffff

080014e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 031f 	and.w	r3, r3, #31
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <LL_ADC_DisableDeepPowerDown+0x20>)
 800150a:	4013      	ands	r3, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6093      	str	r3, [r2, #8]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	5fffffc0 	.word	0x5fffffc0

08001520 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001534:	d101      	bne.n	800153a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <LL_ADC_EnableInternalRegulator+0x24>)
 8001556:	4013      	ands	r3, r2
 8001558:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	6fffffc0 	.word	0x6fffffc0

08001570 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001584:	d101      	bne.n	800158a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <LL_ADC_Enable+0x24>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	7fffffc0 	.word	0x7fffffc0

080015c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <LL_ADC_IsEnabled+0x18>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <LL_ADC_IsEnabled+0x1a>
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <LL_ADC_REG_StartConversion+0x24>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	f043 0204 	orr.w	r2, r3, #4
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	7fffffc0 	.word	0x7fffffc0

08001610 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b04      	cmp	r3, #4
 8001622:	d101      	bne.n	8001628 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b08      	cmp	r3, #8
 8001648:	d101      	bne.n	800164e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e138      	b.n	80018e8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	2b00      	cmp	r3, #0
 8001682:	d109      	bne.n	8001698 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fb4b 	bl	8000d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff3f 	bl	8001520 <LL_ADC_IsDeepPowerDownEnabled>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff25 	bl	80014fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff5a 	bl	8001570 <LL_ADC_IsInternalRegulatorEnabled>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d114      	bne.n	80016ec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff3e 	bl	8001548 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016cc:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_ADC_Init+0x294>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	4a88      	ldr	r2, [pc, #544]	; (80018f4 <HAL_ADC_Init+0x298>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	3301      	adds	r3, #1
 80016dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016de:	e002      	b.n	80016e6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f9      	bne.n	80016e0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff3d 	bl	8001570 <LL_ADC_IsInternalRegulatorEnabled>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10d      	bne.n	8001718 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	f043 0210 	orr.w	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff77 	bl	8001610 <LL_ADC_REG_IsConversionOngoing>
 8001722:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 80d2 	bne.w	80018d6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f040 80ce 	bne.w	80018d6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001742:	f043 0202 	orr.w	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff36 	bl	80015c0 <LL_ADC_IsEnabled>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d110      	bne.n	800177c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800175a:	4867      	ldr	r0, [pc, #412]	; (80018f8 <HAL_ADC_Init+0x29c>)
 800175c:	f7ff ff30 	bl	80015c0 <LL_ADC_IsEnabled>
 8001760:	4604      	mov	r4, r0
 8001762:	4866      	ldr	r0, [pc, #408]	; (80018fc <HAL_ADC_Init+0x2a0>)
 8001764:	f7ff ff2c 	bl	80015c0 <LL_ADC_IsEnabled>
 8001768:	4603      	mov	r3, r0
 800176a:	4323      	orrs	r3, r4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4619      	mov	r1, r3
 8001776:	4862      	ldr	r0, [pc, #392]	; (8001900 <HAL_ADC_Init+0x2a4>)
 8001778:	f7ff fdae 	bl	80012d8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7d5b      	ldrb	r3, [r3, #21]
 8001780:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001786:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800178c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7f1b      	ldrb	r3, [r3, #28]
 8001792:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7f1b      	ldrb	r3, [r3, #28]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	045b      	lsls	r3, r3, #17
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <HAL_ADC_Init+0x2a8>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	69b9      	ldr	r1, [r7, #24]
 80017da:	430b      	orrs	r3, r1
 80017dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff14 	bl	8001610 <LL_ADC_REG_IsConversionOngoing>
 80017e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff21 	bl	8001636 <LL_ADC_INJ_IsConversionOngoing>
 80017f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d14a      	bne.n	8001892 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d147      	bne.n	8001892 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7d1b      	ldrb	r3, [r3, #20]
 8001806:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <HAL_ADC_Init+0x2ac>)
 8001818:	4013      	ands	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	69b9      	ldr	r1, [r7, #24]
 8001820:	430b      	orrs	r3, r1
 8001822:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800182a:	2b01      	cmp	r3, #1
 800182c:	d11b      	bne.n	8001866 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	4b34      	ldr	r3, [pc, #208]	; (800190c <HAL_ADC_Init+0x2b0>)
 800183c:	4013      	ands	r3, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001842:	3a01      	subs	r2, #1
 8001844:	0411      	lsls	r1, r2, #16
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800184a:	4311      	orrs	r1, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001856:	430a      	orrs	r2, r1
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	611a      	str	r2, [r3, #16]
 8001864:	e007      	b.n	8001876 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 fc5b 	bl	8002148 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d10c      	bne.n	80018b4 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f023 010f 	bic.w	r1, r3, #15
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	1e5a      	subs	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
 80018b2:	e007      	b.n	80018c4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 020f 	bic.w	r2, r2, #15
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c8:	f023 0303 	bic.w	r3, r3, #3
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	655a      	str	r2, [r3, #84]	; 0x54
 80018d4:	e007      	b.n	80018e6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	f043 0210 	orr.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3724      	adds	r7, #36	; 0x24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}
 80018f0:	24000000 	.word	0x24000000
 80018f4:	053e2d63 	.word	0x053e2d63
 80018f8:	40022000 	.word	0x40022000
 80018fc:	40022100 	.word	0x40022100
 8001900:	40022300 	.word	0x40022300
 8001904:	fff0c003 	.word	0xfff0c003
 8001908:	ffffbffc 	.word	0xffffbffc
 800190c:	fc00f81e 	.word	0xfc00f81e

08001910 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001918:	4856      	ldr	r0, [pc, #344]	; (8001a74 <HAL_ADC_Start+0x164>)
 800191a:	f7ff fde1 	bl	80014e0 <LL_ADC_GetMultimode>
 800191e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe73 	bl	8001610 <LL_ADC_REG_IsConversionOngoing>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 809a 	bne.w	8001a66 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_Start+0x30>
 800193c:	2302      	movs	r3, #2
 800193e:	e095      	b.n	8001a6c <HAL_ADC_Start+0x15c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fb81 	bl	8002050 <ADC_Enable>
 800194e:	4603      	mov	r3, r0
 8001950:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	2b00      	cmp	r3, #0
 8001956:	f040 8081 	bne.w	8001a5c <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800195e:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_ADC_Start+0x168>)
 8001960:	4013      	ands	r3, r2
 8001962:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a43      	ldr	r2, [pc, #268]	; (8001a7c <HAL_ADC_Start+0x16c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d002      	beq.n	800197a <HAL_ADC_Start+0x6a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	e000      	b.n	800197c <HAL_ADC_Start+0x6c>
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <HAL_ADC_Start+0x170>)
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	4293      	cmp	r3, r2
 8001982:	d002      	beq.n	800198a <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d105      	bne.n	8001996 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a2:	d106      	bne.n	80019b2 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	f023 0206 	bic.w	r2, r3, #6
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	659a      	str	r2, [r3, #88]	; 0x58
 80019b0:	e002      	b.n	80019b8 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	221c      	movs	r2, #28
 80019be:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a2b      	ldr	r2, [pc, #172]	; (8001a7c <HAL_ADC_Start+0x16c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d002      	beq.n	80019d8 <HAL_ADC_Start+0xc8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	e000      	b.n	80019da <HAL_ADC_Start+0xca>
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_ADC_Start+0x170>)
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	4293      	cmp	r3, r2
 80019e0:	d008      	beq.n	80019f4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d002      	beq.n	80019f4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b09      	cmp	r3, #9
 80019f2:	d114      	bne.n	8001a1e <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fde6 	bl	80015e8 <LL_ADC_REG_StartConversion>
 8001a1c:	e025      	b.n	8001a6a <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <HAL_ADC_Start+0x16c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d002      	beq.n	8001a3a <HAL_ADC_Start+0x12a>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	e000      	b.n	8001a3c <HAL_ADC_Start+0x12c>
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_ADC_Start+0x170>)
 8001a3c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00f      	beq.n	8001a6a <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
 8001a5a:	e006      	b.n	8001a6a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a64:	e001      	b.n	8001a6a <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a66:	2302      	movs	r3, #2
 8001a68:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40022300 	.word	0x40022300
 8001a78:	fffff0fe 	.word	0xfffff0fe
 8001a7c:	40022100 	.word	0x40022100
 8001a80:	40022000 	.word	0x40022000

08001a84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b0a1      	sub	sp, #132	; 0x84
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a9a      	ldr	r2, [pc, #616]	; (8001d08 <HAL_ADC_ConfigChannel+0x284>)
 8001a9e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x2a>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e2bc      	b.n	8002028 <HAL_ADC_ConfigChannel+0x5a4>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fda8 	bl	8001610 <LL_ADC_REG_IsConversionOngoing>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 82a1 	bne.w	800200a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d108      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x62>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2201      	movs	r2, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	e016      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x90>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001af4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001af6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001afe:	2320      	movs	r3, #32
 8001b00:	e003      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2201      	movs	r2, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	69d1      	ldr	r1, [r2, #28]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f7ff fc5a 	bl	80013e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fd69 	bl	8001610 <LL_ADC_REG_IsConversionOngoing>
 8001b3e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fd76 	bl	8001636 <LL_ADC_INJ_IsConversionOngoing>
 8001b4a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f040 80a0 	bne.w	8001c94 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 809c 	bne.w	8001c94 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f7ff fc69 	bl	8001440 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10b      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x110>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	e00a      	b.n	8001baa <HAL_ADC_ConfigChannel+0x126>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d027      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6919      	ldr	r1, [r3, #16]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bc2:	f7ff fbbd 	bl	8001340 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	7e5b      	ldrb	r3, [r3, #25]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d102      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x158>
 8001bd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001bda:	e000      	b.n	8001bde <HAL_ADC_ConfigChannel+0x15a>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	461a      	mov	r2, r3
 8001be0:	f7ff fbe7 	bl	80013b2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6919      	ldr	r1, [r3, #16]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d102      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x176>
 8001bf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bf8:	e000      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x178>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f7ff fbbf 	bl	8001380 <LL_ADC_SetDataRightShift>
 8001c02:	e047      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	069b      	lsls	r3, r3, #26
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c26:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	069b      	lsls	r3, r3, #26
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d107      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c4a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	069b      	lsls	r3, r3, #26
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d107      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c6e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	069b      	lsls	r3, r3, #26
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d107      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c92:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fc91 	bl	80015c0 <LL_ADC_IsEnabled>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 81bb 	bne.w	800201c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f7ff fbf0 	bl	8001498 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <HAL_ADC_ConfigChannel+0x284>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	f040 8130 	bne.w	8001f24 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10b      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x268>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	bf94      	ite	ls
 8001ce4:	2301      	movls	r3, #1
 8001ce6:	2300      	movhi	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e01b      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x2a0>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001d04:	2320      	movs	r3, #32
 8001d06:	e005      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x290>
 8001d08:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	3301      	adds	r3, #1
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2b09      	cmp	r3, #9
 8001d1c:	bf94      	ite	ls
 8001d1e:	2301      	movls	r3, #1
 8001d20:	2300      	movhi	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d079      	beq.n	8001e1c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x2c0>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	069b      	lsls	r3, r3, #26
 8001d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d42:	e015      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x2ec>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d54:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e003      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	069b      	lsls	r3, r3, #26
 8001d6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x30c>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	3301      	adds	r3, #1
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	e017      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x33c>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001da8:	2320      	movs	r3, #32
 8001daa:	e003      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	ea42 0103 	orr.w	r1, r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10a      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x362>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0e9b      	lsrs	r3, r3, #26
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	051b      	lsls	r3, r3, #20
 8001de4:	e018      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x394>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	e003      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	e07e      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x3b4>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	3301      	adds	r3, #1
 8001e30:	069b      	lsls	r3, r3, #26
 8001e32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e36:	e015      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3e0>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e003      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	069b      	lsls	r3, r3, #26
 8001e60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x400>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	3301      	adds	r3, #1
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	e017      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x430>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	61bb      	str	r3, [r7, #24]
  return result;
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	e003      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2101      	movs	r1, #1
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	ea42 0103 	orr.w	r1, r2, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x45c>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	0e9b      	lsrs	r3, r3, #26
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b1e      	subs	r3, #30
 8001ed8:	051b      	lsls	r3, r3, #20
 8001eda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ede:	e01b      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x494>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	60fb      	str	r3, [r7, #12]
  return result;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	e003      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	f003 021f 	and.w	r2, r3, #31
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b1e      	subs	r3, #30
 8001f12:	051b      	lsls	r3, r3, #20
 8001f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	6892      	ldr	r2, [r2, #8]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7ff fa8e 	bl	8001440 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	da77      	bge.n	800201c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f2c:	4840      	ldr	r0, [pc, #256]	; (8002030 <HAL_ADC_ConfigChannel+0x5ac>)
 8001f2e:	f7ff f9f9 	bl	8001324 <LL_ADC_GetCommonPathInternalCh>
 8001f32:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f34:	483f      	ldr	r0, [pc, #252]	; (8002034 <HAL_ADC_ConfigChannel+0x5b0>)
 8001f36:	f7ff fb43 	bl	80015c0 <LL_ADC_IsEnabled>
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	483e      	ldr	r0, [pc, #248]	; (8002038 <HAL_ADC_ConfigChannel+0x5b4>)
 8001f3e:	f7ff fb3f 	bl	80015c0 <LL_ADC_IsEnabled>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4323      	orrs	r3, r4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d155      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a3b      	ldr	r2, [pc, #236]	; (800203c <HAL_ADC_ConfigChannel+0x5b8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d122      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x516>
 8001f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d11d      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a35      	ldr	r2, [pc, #212]	; (8002038 <HAL_ADC_ConfigChannel+0x5b4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d159      	bne.n	800201c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f6e:	4619      	mov	r1, r3
 8001f70:	482f      	ldr	r0, [pc, #188]	; (8002030 <HAL_ADC_ConfigChannel+0x5ac>)
 8001f72:	f7ff f9c4 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f76:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_ADC_ConfigChannel+0x5bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	099b      	lsrs	r3, r3, #6
 8001f7c:	4a31      	ldr	r2, [pc, #196]	; (8002044 <HAL_ADC_ConfigChannel+0x5c0>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	099b      	lsrs	r3, r3, #6
 8001f84:	3301      	adds	r3, #1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f8a:	e002      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f9      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f98:	e040      	b.n	800201c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <HAL_ADC_ConfigChannel+0x5c4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d111      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x544>
 8001fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a21      	ldr	r2, [pc, #132]	; (8002038 <HAL_ADC_ConfigChannel+0x5b4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d131      	bne.n	800201c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	481b      	ldr	r0, [pc, #108]	; (8002030 <HAL_ADC_ConfigChannel+0x5ac>)
 8001fc2:	f7ff f99c 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fc6:	e029      	b.n	800201c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	; (800204c <HAL_ADC_ConfigChannel+0x5c8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d124      	bne.n	800201c <HAL_ADC_ConfigChannel+0x598>
 8001fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d11f      	bne.n	800201c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a15      	ldr	r2, [pc, #84]	; (8002038 <HAL_ADC_ConfigChannel+0x5b4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d11a      	bne.n	800201c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fec:	4619      	mov	r1, r3
 8001fee:	4810      	ldr	r0, [pc, #64]	; (8002030 <HAL_ADC_ConfigChannel+0x5ac>)
 8001ff0:	f7ff f985 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
 8001ff4:	e012      	b.n	800201c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f043 0220 	orr.w	r2, r3, #32
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002008:	e008      	b.n	800201c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002024:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002028:	4618      	mov	r0, r3
 800202a:	3784      	adds	r7, #132	; 0x84
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	40022300 	.word	0x40022300
 8002034:	40022000 	.word	0x40022000
 8002038:	40022100 	.word	0x40022100
 800203c:	cb840000 	.word	0xcb840000
 8002040:	24000000 	.word	0x24000000
 8002044:	053e2d63 	.word	0x053e2d63
 8002048:	bac04000 	.word	0xbac04000
 800204c:	cfb80000 	.word	0xcfb80000

08002050 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff faaf 	bl	80015c0 <LL_ADC_IsEnabled>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d161      	bne.n	800212c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <ADC_Enable+0xe8>)
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00d      	beq.n	8002092 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e04d      	b.n	800212e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fa7e 	bl	8001598 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800209c:	f7ff f8ec 	bl	8001278 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a2:	4826      	ldr	r0, [pc, #152]	; (800213c <ADC_Enable+0xec>)
 80020a4:	f7ff fa1c 	bl	80014e0 <LL_ADC_GetMultimode>
 80020a8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a24      	ldr	r2, [pc, #144]	; (8002140 <ADC_Enable+0xf0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d002      	beq.n	80020ba <ADC_Enable+0x6a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	e000      	b.n	80020bc <ADC_Enable+0x6c>
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <ADC_Enable+0xf4>)
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d02c      	beq.n	800211e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d130      	bne.n	800212c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020ca:	e028      	b.n	800211e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fa75 	bl	80015c0 <LL_ADC_IsEnabled>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d104      	bne.n	80020e6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fa59 	bl	8001598 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020e6:	f7ff f8c7 	bl	8001278 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d914      	bls.n	800211e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d00d      	beq.n	800211e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	f043 0210 	orr.w	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e007      	b.n	800212e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d1cf      	bne.n	80020cc <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	8000003f 	.word	0x8000003f
 800213c:	40022300 	.word	0x40022300
 8002140:	40022100 	.word	0x40022100
 8002144:	40022000 	.word	0x40022000

08002148 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002150:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <ADC_ConfigureBoostMode+0x188>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01c      	beq.n	8002196 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800215c:	f001 fb38 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 8002160:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800216a:	d010      	beq.n	800218e <ADC_ConfigureBoostMode+0x46>
 800216c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002170:	d871      	bhi.n	8002256 <ADC_ConfigureBoostMode+0x10e>
 8002172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002176:	d002      	beq.n	800217e <ADC_ConfigureBoostMode+0x36>
 8002178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800217c:	d16b      	bne.n	8002256 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0c1b      	lsrs	r3, r3, #16
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	60fb      	str	r3, [r7, #12]
        break;
 800218c:	e066      	b.n	800225c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	60fb      	str	r3, [r7, #12]
        break;
 8002194:	e062      	b.n	800225c <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002196:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800219a:	f002 fa81 	bl	80046a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800219e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021a8:	d051      	beq.n	800224e <ADC_ConfigureBoostMode+0x106>
 80021aa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021ae:	d854      	bhi.n	800225a <ADC_ConfigureBoostMode+0x112>
 80021b0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021b4:	d047      	beq.n	8002246 <ADC_ConfigureBoostMode+0xfe>
 80021b6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021ba:	d84e      	bhi.n	800225a <ADC_ConfigureBoostMode+0x112>
 80021bc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021c0:	d03d      	beq.n	800223e <ADC_ConfigureBoostMode+0xf6>
 80021c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021c6:	d848      	bhi.n	800225a <ADC_ConfigureBoostMode+0x112>
 80021c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021cc:	d033      	beq.n	8002236 <ADC_ConfigureBoostMode+0xee>
 80021ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021d2:	d842      	bhi.n	800225a <ADC_ConfigureBoostMode+0x112>
 80021d4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021d8:	d029      	beq.n	800222e <ADC_ConfigureBoostMode+0xe6>
 80021da:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021de:	d83c      	bhi.n	800225a <ADC_ConfigureBoostMode+0x112>
 80021e0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80021e4:	d01a      	beq.n	800221c <ADC_ConfigureBoostMode+0xd4>
 80021e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80021ea:	d836      	bhi.n	800225a <ADC_ConfigureBoostMode+0x112>
 80021ec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021f0:	d014      	beq.n	800221c <ADC_ConfigureBoostMode+0xd4>
 80021f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021f6:	d830      	bhi.n	800225a <ADC_ConfigureBoostMode+0x112>
 80021f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021fc:	d00e      	beq.n	800221c <ADC_ConfigureBoostMode+0xd4>
 80021fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002202:	d82a      	bhi.n	800225a <ADC_ConfigureBoostMode+0x112>
 8002204:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002208:	d008      	beq.n	800221c <ADC_ConfigureBoostMode+0xd4>
 800220a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800220e:	d824      	bhi.n	800225a <ADC_ConfigureBoostMode+0x112>
 8002210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002214:	d002      	beq.n	800221c <ADC_ConfigureBoostMode+0xd4>
 8002216:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800221a:	d11e      	bne.n	800225a <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	0c9b      	lsrs	r3, r3, #18
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	60fb      	str	r3, [r7, #12]
        break;
 800222c:	e016      	b.n	800225c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
        break;
 8002234:	e012      	b.n	800225c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	60fb      	str	r3, [r7, #12]
        break;
 800223c:	e00e      	b.n	800225c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	60fb      	str	r3, [r7, #12]
        break;
 8002244:	e00a      	b.n	800225c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	09db      	lsrs	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]
        break;
 800224c:	e006      	b.n	800225c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	60fb      	str	r3, [r7, #12]
        break;
 8002254:	e002      	b.n	800225c <ADC_ConfigureBoostMode+0x114>
        break;
 8002256:	bf00      	nop
 8002258:	e000      	b.n	800225c <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 800225a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <ADC_ConfigureBoostMode+0x18c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d808      	bhi.n	800227c <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002278:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800227a:	e025      	b.n	80022c8 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4a16      	ldr	r2, [pc, #88]	; (80022d8 <ADC_ConfigureBoostMode+0x190>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d80a      	bhi.n	800229a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002296:	609a      	str	r2, [r3, #8]
}
 8002298:	e016      	b.n	80022c8 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <ADC_ConfigureBoostMode+0x194>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d80a      	bhi.n	80022b8 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b4:	609a      	str	r2, [r3, #8]
}
 80022b6:	e007      	b.n	80022c8 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40022300 	.word	0x40022300
 80022d4:	005f5e10 	.word	0x005f5e10
 80022d8:	00bebc20 	.word	0x00bebc20
 80022dc:	017d7840 	.word	0x017d7840

080022e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <__NVIC_SetPriorityGrouping+0x40>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	4313      	orrs	r3, r2
 800230c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230e:	4a04      	ldr	r2, [pc, #16]	; (8002320 <__NVIC_SetPriorityGrouping+0x40>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60d3      	str	r3, [r2, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00
 8002324:	05fa0000 	.word	0x05fa0000

08002328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <__NVIC_GetPriorityGrouping+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 0307 	and.w	r3, r3, #7
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800234e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0b      	blt.n	800236e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4907      	ldr	r1, [pc, #28]	; (800237c <__NVIC_EnableIRQ+0x38>)
 800235e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2001      	movs	r0, #1
 8002366:	fa00 f202 	lsl.w	r2, r0, r2
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000e100 	.word	0xe000e100

08002380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800238c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db0a      	blt.n	80023aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <__NVIC_SetPriority+0x4c>)
 800239a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	440b      	add	r3, r1
 80023a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a8:	e00a      	b.n	80023c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4908      	ldr	r1, [pc, #32]	; (80023d0 <__NVIC_SetPriority+0x50>)
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3b04      	subs	r3, #4
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	440b      	add	r3, r1
 80023be:	761a      	strb	r2, [r3, #24]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f1c3 0307 	rsb	r3, r3, #7
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	bf28      	it	cs
 80023f2:	2304      	movcs	r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d902      	bls.n	8002404 <NVIC_EncodePriority+0x30>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b03      	subs	r3, #3
 8002402:	e000      	b.n	8002406 <NVIC_EncodePriority+0x32>
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	401a      	ands	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43d9      	mvns	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	4313      	orrs	r3, r2
         );
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800244c:	d301      	bcc.n	8002452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244e:	2301      	movs	r3, #1
 8002450:	e00f      	b.n	8002472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <SysTick_Config+0x40>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245a:	210f      	movs	r1, #15
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f7ff ff8e 	bl	8002380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <SysTick_Config+0x40>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <SysTick_Config+0x40>)
 800246c:	2207      	movs	r2, #7
 800246e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	e000e010 	.word	0xe000e010

08002480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ff29 	bl	80022e0 <__NVIC_SetPriorityGrouping>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024a4:	f7ff ff40 	bl	8002328 <__NVIC_GetPriorityGrouping>
 80024a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	6978      	ldr	r0, [r7, #20]
 80024b0:	f7ff ff90 	bl	80023d4 <NVIC_EncodePriority>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff5f 	bl	8002380 <__NVIC_SetPriority>
}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff33 	bl	8002344 <__NVIC_EnableIRQ>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffa4 	bl	800243c <SysTick_Config>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800250e:	4b89      	ldr	r3, [pc, #548]	; (8002734 <HAL_GPIO_Init+0x234>)
 8002510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002512:	e194      	b.n	800283e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8186 	beq.w	8002838 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d005      	beq.n	8002544 <HAL_GPIO_Init+0x44>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d130      	bne.n	80025a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800257a:	2201      	movs	r2, #1
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0201 	and.w	r2, r3, #1
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d017      	beq.n	80025e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d123      	bne.n	8002636 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	69b9      	ldr	r1, [r7, #24]
 8002632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0203 	and.w	r2, r3, #3
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80e0 	beq.w	8002838 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_GPIO_Init+0x238>)
 800267a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800267e:	4a2e      	ldr	r2, [pc, #184]	; (8002738 <HAL_GPIO_Init+0x238>)
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_GPIO_Init+0x238>)
 800268a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002696:	4a29      	ldr	r2, [pc, #164]	; (800273c <HAL_GPIO_Init+0x23c>)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3302      	adds	r3, #2
 800269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	220f      	movs	r2, #15
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_GPIO_Init+0x240>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d052      	beq.n	8002768 <HAL_GPIO_Init+0x268>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_GPIO_Init+0x244>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d031      	beq.n	800272e <HAL_GPIO_Init+0x22e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <HAL_GPIO_Init+0x248>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d02b      	beq.n	800272a <HAL_GPIO_Init+0x22a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a1d      	ldr	r2, [pc, #116]	; (800274c <HAL_GPIO_Init+0x24c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d025      	beq.n	8002726 <HAL_GPIO_Init+0x226>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <HAL_GPIO_Init+0x250>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01f      	beq.n	8002722 <HAL_GPIO_Init+0x222>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <HAL_GPIO_Init+0x254>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d019      	beq.n	800271e <HAL_GPIO_Init+0x21e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_GPIO_Init+0x258>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_GPIO_Init+0x21a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <HAL_GPIO_Init+0x25c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00d      	beq.n	8002716 <HAL_GPIO_Init+0x216>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a18      	ldr	r2, [pc, #96]	; (8002760 <HAL_GPIO_Init+0x260>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d007      	beq.n	8002712 <HAL_GPIO_Init+0x212>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a17      	ldr	r2, [pc, #92]	; (8002764 <HAL_GPIO_Init+0x264>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_GPIO_Init+0x20e>
 800270a:	2309      	movs	r3, #9
 800270c:	e02d      	b.n	800276a <HAL_GPIO_Init+0x26a>
 800270e:	230a      	movs	r3, #10
 8002710:	e02b      	b.n	800276a <HAL_GPIO_Init+0x26a>
 8002712:	2308      	movs	r3, #8
 8002714:	e029      	b.n	800276a <HAL_GPIO_Init+0x26a>
 8002716:	2307      	movs	r3, #7
 8002718:	e027      	b.n	800276a <HAL_GPIO_Init+0x26a>
 800271a:	2306      	movs	r3, #6
 800271c:	e025      	b.n	800276a <HAL_GPIO_Init+0x26a>
 800271e:	2305      	movs	r3, #5
 8002720:	e023      	b.n	800276a <HAL_GPIO_Init+0x26a>
 8002722:	2304      	movs	r3, #4
 8002724:	e021      	b.n	800276a <HAL_GPIO_Init+0x26a>
 8002726:	2303      	movs	r3, #3
 8002728:	e01f      	b.n	800276a <HAL_GPIO_Init+0x26a>
 800272a:	2302      	movs	r3, #2
 800272c:	e01d      	b.n	800276a <HAL_GPIO_Init+0x26a>
 800272e:	2301      	movs	r3, #1
 8002730:	e01b      	b.n	800276a <HAL_GPIO_Init+0x26a>
 8002732:	bf00      	nop
 8002734:	58000080 	.word	0x58000080
 8002738:	58024400 	.word	0x58024400
 800273c:	58000400 	.word	0x58000400
 8002740:	58020000 	.word	0x58020000
 8002744:	58020400 	.word	0x58020400
 8002748:	58020800 	.word	0x58020800
 800274c:	58020c00 	.word	0x58020c00
 8002750:	58021000 	.word	0x58021000
 8002754:	58021400 	.word	0x58021400
 8002758:	58021800 	.word	0x58021800
 800275c:	58021c00 	.word	0x58021c00
 8002760:	58022000 	.word	0x58022000
 8002764:	58022400 	.word	0x58022400
 8002768:	2300      	movs	r3, #0
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	f002 0203 	and.w	r2, r2, #3
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	4093      	lsls	r3, r2
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800277a:	4938      	ldr	r1, [pc, #224]	; (800285c <HAL_GPIO_Init+0x35c>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	3301      	adds	r3, #1
 800283c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	f47f ae63 	bne.w	8002514 <HAL_GPIO_Init+0x14>
  }
}
 800284e:	bf00      	nop
 8002850:	bf00      	nop
 8002852:	3724      	adds	r7, #36	; 0x24
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	58000400 	.word	0x58000400

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	58024800 	.word	0x58024800

080028b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80028bc:	4b29      	ldr	r3, [pc, #164]	; (8002964 <HAL_PWREx_ConfigSupply+0xb0>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	2b06      	cmp	r3, #6
 80028c6:	d00a      	beq.n	80028de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028c8:	4b26      	ldr	r3, [pc, #152]	; (8002964 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e040      	b.n	800295c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e03e      	b.n	800295c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_PWREx_ConfigSupply+0xb0>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80028e6:	491f      	ldr	r1, [pc, #124]	; (8002964 <HAL_PWREx_ConfigSupply+0xb0>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028ee:	f7fe fcc3 	bl	8001278 <HAL_GetTick>
 80028f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028f4:	e009      	b.n	800290a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028f6:	f7fe fcbf 	bl	8001278 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002904:	d901      	bls.n	800290a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e028      	b.n	800295c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_PWREx_ConfigSupply+0xb0>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002916:	d1ee      	bne.n	80028f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b1e      	cmp	r3, #30
 800291c:	d008      	beq.n	8002930 <HAL_PWREx_ConfigSupply+0x7c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b2e      	cmp	r3, #46	; 0x2e
 8002922:	d005      	beq.n	8002930 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b1d      	cmp	r3, #29
 8002928:	d002      	beq.n	8002930 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b2d      	cmp	r3, #45	; 0x2d
 800292e:	d114      	bne.n	800295a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002930:	f7fe fca2 	bl	8001278 <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002936:	e009      	b.n	800294c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002938:	f7fe fc9e 	bl	8001278 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002946:	d901      	bls.n	800294c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e007      	b.n	800295c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_PWREx_ConfigSupply+0xb0>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002958:	d1ee      	bne.n	8002938 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	58024800 	.word	0x58024800

08002968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	; 0x30
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e3f3      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80b3 	beq.w	8002aee <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002988:	4b9e      	ldr	r3, [pc, #632]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002992:	4b9c      	ldr	r3, [pc, #624]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	2b10      	cmp	r3, #16
 800299c:	d007      	beq.n	80029ae <HAL_RCC_OscConfig+0x46>
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	2b18      	cmp	r3, #24
 80029a2:	d112      	bne.n	80029ca <HAL_RCC_OscConfig+0x62>
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d10d      	bne.n	80029ca <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ae:	4b95      	ldr	r3, [pc, #596]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8098 	beq.w	8002aec <HAL_RCC_OscConfig+0x184>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f040 8093 	bne.w	8002aec <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e3cb      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x7a>
 80029d4:	4b8b      	ldr	r3, [pc, #556]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a8a      	ldr	r2, [pc, #552]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	e058      	b.n	8002a94 <HAL_RCC_OscConfig+0x12c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d112      	bne.n	8002a10 <HAL_RCC_OscConfig+0xa8>
 80029ea:	4b86      	ldr	r3, [pc, #536]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a85      	ldr	r2, [pc, #532]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 80029f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b83      	ldr	r3, [pc, #524]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a82      	ldr	r2, [pc, #520]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 80029fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b80      	ldr	r3, [pc, #512]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7f      	ldr	r2, [pc, #508]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e041      	b.n	8002a94 <HAL_RCC_OscConfig+0x12c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a18:	d112      	bne.n	8002a40 <HAL_RCC_OscConfig+0xd8>
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a79      	ldr	r2, [pc, #484]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b77      	ldr	r3, [pc, #476]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a76      	ldr	r2, [pc, #472]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b74      	ldr	r3, [pc, #464]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a73      	ldr	r2, [pc, #460]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e029      	b.n	8002a94 <HAL_RCC_OscConfig+0x12c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002a48:	d112      	bne.n	8002a70 <HAL_RCC_OscConfig+0x108>
 8002a4a:	4b6e      	ldr	r3, [pc, #440]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a6d      	ldr	r2, [pc, #436]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b6b      	ldr	r3, [pc, #428]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a6a      	ldr	r2, [pc, #424]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b68      	ldr	r3, [pc, #416]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a67      	ldr	r2, [pc, #412]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e011      	b.n	8002a94 <HAL_RCC_OscConfig+0x12c>
 8002a70:	4b64      	ldr	r3, [pc, #400]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a63      	ldr	r2, [pc, #396]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b61      	ldr	r3, [pc, #388]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a60      	ldr	r2, [pc, #384]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b5e      	ldr	r3, [pc, #376]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a5d      	ldr	r2, [pc, #372]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fbec 	bl	8001278 <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fbe8 	bl	8001278 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e355      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ab6:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x13c>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fbd8 	bl	8001278 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe fbd4 	bl	8001278 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e341      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x164>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 808c 	beq.w	8002c14 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afc:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1ba>
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	2b18      	cmp	r3, #24
 8002b16:	d137      	bne.n	8002b88 <HAL_RCC_OscConfig+0x220>
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d132      	bne.n	8002b88 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1d2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e313      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b3a:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0219 	bic.w	r2, r3, #25
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	492f      	ldr	r1, [pc, #188]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b4c:	f7fe fb94 	bl	8001278 <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b54:	f7fe fb90 	bl	8001278 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e2fd      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b66:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	4920      	ldr	r1, [pc, #128]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b86:	e045      	b.n	8002c14 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d026      	beq.n	8002bde <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 0219 	bic.w	r2, r3, #25
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4919      	ldr	r1, [pc, #100]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fb69 	bl	8001278 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002baa:	f7fe fb65 	bl	8001278 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e2d2      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	490b      	ldr	r1, [pc, #44]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
 8002bdc:	e01a      	b.n	8002c14 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7fe fb45 	bl	8001278 <HAL_GetTick>
 8002bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7fe fb41 	bl	8001278 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d903      	bls.n	8002c08 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e2ae      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
 8002c04:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c08:	4b99      	ldr	r3, [pc, #612]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ee      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d06a      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c20:	4b93      	ldr	r3, [pc, #588]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c28:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c2a:	4b91      	ldr	r3, [pc, #580]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d007      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2de>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b18      	cmp	r3, #24
 8002c3a:	d11b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x30c>
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c46:	4b8a      	ldr	r3, [pc, #552]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2f6>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	2b80      	cmp	r3, #128	; 0x80
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e281      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c5e:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	061b      	lsls	r3, r3, #24
 8002c6c:	4980      	ldr	r1, [pc, #512]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c72:	e040      	b.n	8002cf6 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d023      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c7c:	4b7c      	ldr	r3, [pc, #496]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a7b      	ldr	r2, [pc, #492]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe faf6 	bl	8001278 <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c90:	f7fe faf2 	bl	8001278 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e25f      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ca2:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cae:	4b70      	ldr	r3, [pc, #448]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	061b      	lsls	r3, r3, #24
 8002cbc:	496c      	ldr	r1, [pc, #432]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60cb      	str	r3, [r1, #12]
 8002cc2:	e018      	b.n	8002cf6 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a69      	ldr	r2, [pc, #420]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fad2 	bl	8001278 <HAL_GetTick>
 8002cd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cd8:	f7fe face 	bl	8001278 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e23b      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cea:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d036      	beq.n	8002d70 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d019      	beq.n	8002d3e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0a:	4b59      	ldr	r3, [pc, #356]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	4a58      	ldr	r2, [pc, #352]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fe faaf 	bl	8001278 <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1e:	f7fe faab 	bl	8001278 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e218      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d30:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x3b6>
 8002d3c:	e018      	b.n	8002d70 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3e:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d42:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fa95 	bl	8001278 <HAL_GetTick>
 8002d4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d52:	f7fe fa91 	bl	8001278 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e1fe      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d64:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d036      	beq.n	8002dea <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d019      	beq.n	8002db8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a39      	ldr	r2, [pc, #228]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002d8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d90:	f7fe fa72 	bl	8001278 <HAL_GetTick>
 8002d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d98:	f7fe fa6e 	bl	8001278 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e1db      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002daa:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x430>
 8002db6:	e018      	b.n	8002dea <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fa58 	bl	8001278 <HAL_GetTick>
 8002dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dcc:	f7fe fa54 	bl	8001278 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1c1      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80af 	beq.w	8002f56 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002df8:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <HAL_RCC_OscConfig+0x50c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_RCC_OscConfig+0x50c>)
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e04:	f7fe fa38 	bl	8001278 <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7fe fa34 	bl	8001278 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e1a1      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_RCC_OscConfig+0x50c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x4d8>
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	e05b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x590>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d117      	bne.n	8002e78 <HAL_RCC_OscConfig+0x510>
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a05      	ldr	r2, [pc, #20]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a02      	ldr	r2, [pc, #8]	; (8002e70 <HAL_RCC_OscConfig+0x508>)
 8002e66:	f023 0304 	bic.w	r3, r3, #4
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	e044      	b.n	8002ef8 <HAL_RCC_OscConfig+0x590>
 8002e6e:	bf00      	nop
 8002e70:	58024400 	.word	0x58024400
 8002e74:	58024800 	.word	0x58024800
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d112      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x53e>
 8002e80:	4b95      	ldr	r3, [pc, #596]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a94      	ldr	r2, [pc, #592]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8c:	4b92      	ldr	r3, [pc, #584]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a91      	ldr	r2, [pc, #580]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	4b8f      	ldr	r3, [pc, #572]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a8e      	ldr	r2, [pc, #568]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea4:	e028      	b.n	8002ef8 <HAL_RCC_OscConfig+0x590>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b85      	cmp	r3, #133	; 0x85
 8002eac:	d112      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x56c>
 8002eae:	4b8a      	ldr	r3, [pc, #552]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a89      	ldr	r2, [pc, #548]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	4b87      	ldr	r3, [pc, #540]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a86      	ldr	r2, [pc, #536]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec6:	4b84      	ldr	r3, [pc, #528]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a83      	ldr	r2, [pc, #524]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	e011      	b.n	8002ef8 <HAL_RCC_OscConfig+0x590>
 8002ed4:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a7f      	ldr	r2, [pc, #508]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	4b7d      	ldr	r3, [pc, #500]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a7c      	ldr	r2, [pc, #496]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002ee6:	f023 0304 	bic.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	4b7a      	ldr	r3, [pc, #488]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a79      	ldr	r2, [pc, #484]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe f9ba 	bl	8001278 <HAL_GetTick>
 8002f04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe f9b6 	bl	8001278 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e121      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f1e:	4b6e      	ldr	r3, [pc, #440]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ee      	beq.n	8002f08 <HAL_RCC_OscConfig+0x5a0>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe f9a4 	bl	8001278 <HAL_GetTick>
 8002f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe f9a0 	bl	8001278 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e10b      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f4a:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ee      	bne.n	8002f34 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8100 	beq.w	8003160 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f60:	4b5d      	ldr	r3, [pc, #372]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f68:	2b18      	cmp	r3, #24
 8002f6a:	f000 80bb 	beq.w	80030e4 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	f040 8095 	bne.w	80030a2 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b57      	ldr	r3, [pc, #348]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a56      	ldr	r2, [pc, #344]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe f978 	bl	8001278 <HAL_GetTick>
 8002f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe f974 	bl	8001278 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0e1      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f9e:	4b4e      	ldr	r3, [pc, #312]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002faa:	4b4b      	ldr	r3, [pc, #300]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fae:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <HAL_RCC_OscConfig+0x774>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	4946      	ldr	r1, [pc, #280]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	025b      	lsls	r3, r3, #9
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	3b01      	subs	r3, #1
 8002fee:	061b      	lsls	r3, r3, #24
 8002ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ff4:	4938      	ldr	r1, [pc, #224]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	4a36      	ldr	r2, [pc, #216]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300a:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <HAL_RCC_OscConfig+0x778>)
 800300c:	4013      	ands	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003012:	00d2      	lsls	r2, r2, #3
 8003014:	4930      	ldr	r1, [pc, #192]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003016:	4313      	orrs	r3, r2
 8003018:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f023 020c 	bic.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	492c      	ldr	r1, [pc, #176]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003028:	4313      	orrs	r3, r2
 800302a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800302c:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f023 0202 	bic.w	r2, r3, #2
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	4927      	ldr	r1, [pc, #156]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 800303a:	4313      	orrs	r3, r2
 800303c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	4a25      	ldr	r2, [pc, #148]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003048:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003054:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 800305c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003060:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003074:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe f8fd 	bl	8001278 <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe f8f9 	bl	8001278 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e066      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x71a>
 80030a0:	e05e      	b.n	8003160 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a0c      	ldr	r2, [pc, #48]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 80030a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe f8e3 	bl	8001278 <HAL_GetTick>
 80030b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe f8df 	bl	8001278 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e04c      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_RCC_OscConfig+0x770>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x74e>
 80030d4:	e044      	b.n	8003160 <HAL_RCC_OscConfig+0x7f8>
 80030d6:	bf00      	nop
 80030d8:	58024400 	.word	0x58024400
 80030dc:	fffffc0c 	.word	0xfffffc0c
 80030e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030e4:	4b21      	ldr	r3, [pc, #132]	; (800316c <HAL_RCC_OscConfig+0x804>)
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_OscConfig+0x804>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d031      	beq.n	800315c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0203 	and.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d12a      	bne.n	800315c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d122      	bne.n	800315c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d11a      	bne.n	800315c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	0a5b      	lsrs	r3, r3, #9
 800312a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003132:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d111      	bne.n	800315c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	0c1b      	lsrs	r3, r3, #16
 800313c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d108      	bne.n	800315c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0e1b      	lsrs	r3, r3, #24
 800314e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3730      	adds	r7, #48	; 0x30
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	58024400 	.word	0x58024400

08003170 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e19c      	b.n	80034be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b8a      	ldr	r3, [pc, #552]	; (80033b0 <HAL_RCC_ClockConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d910      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b87      	ldr	r3, [pc, #540]	; (80033b0 <HAL_RCC_ClockConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 020f 	bic.w	r2, r3, #15
 800319a:	4985      	ldr	r1, [pc, #532]	; (80033b0 <HAL_RCC_ClockConfig+0x240>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b83      	ldr	r3, [pc, #524]	; (80033b0 <HAL_RCC_ClockConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e184      	b.n	80034be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	4b7b      	ldr	r3, [pc, #492]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d908      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031d0:	4b78      	ldr	r3, [pc, #480]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	4975      	ldr	r1, [pc, #468]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d010      	beq.n	8003210 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	4b70      	ldr	r3, [pc, #448]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d908      	bls.n	8003210 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031fe:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	496a      	ldr	r1, [pc, #424]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 800320c:	4313      	orrs	r3, r2
 800320e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	4b64      	ldr	r3, [pc, #400]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003228:	429a      	cmp	r2, r3
 800322a:	d908      	bls.n	800323e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800322c:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	495e      	ldr	r1, [pc, #376]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 800323a:	4313      	orrs	r3, r2
 800323c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d010      	beq.n	800326c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003256:	429a      	cmp	r2, r3
 8003258:	d908      	bls.n	800326c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800325a:	4b56      	ldr	r3, [pc, #344]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	4953      	ldr	r1, [pc, #332]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 8003268:	4313      	orrs	r3, r2
 800326a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d010      	beq.n	800329a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	4b4d      	ldr	r3, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	429a      	cmp	r2, r3
 8003286:	d908      	bls.n	800329a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003288:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f023 020f 	bic.w	r2, r3, #15
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4947      	ldr	r1, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 8003296:	4313      	orrs	r3, r2
 8003298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d055      	beq.n	8003352 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032a6:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4940      	ldr	r1, [pc, #256]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032c0:	4b3c      	ldr	r3, [pc, #240]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d121      	bne.n	8003310 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0f6      	b.n	80034be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d115      	bne.n	8003310 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0ea      	b.n	80034be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032f0:	4b30      	ldr	r3, [pc, #192]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0de      	b.n	80034be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003300:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0d6      	b.n	80034be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003310:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f023 0207 	bic.w	r2, r3, #7
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4925      	ldr	r1, [pc, #148]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 800331e:	4313      	orrs	r3, r2
 8003320:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003322:	f7fd ffa9 	bl	8001278 <HAL_GetTick>
 8003326:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003328:	e00a      	b.n	8003340 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332a:	f7fd ffa5 	bl	8001278 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	; 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e0be      	b.n	80034be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003340:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	429a      	cmp	r2, r3
 8003350:	d1eb      	bne.n	800332a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	429a      	cmp	r2, r3
 800336c:	d208      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f023 020f 	bic.w	r2, r3, #15
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCC_ClockConfig+0x244>)
 800337c:	4313      	orrs	r3, r2
 800337e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_ClockConfig+0x240>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d214      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_RCC_ClockConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 020f 	bic.w	r2, r3, #15
 8003396:	4906      	ldr	r1, [pc, #24]	; (80033b0 <HAL_RCC_ClockConfig+0x240>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <HAL_RCC_ClockConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e086      	b.n	80034be <HAL_RCC_ClockConfig+0x34e>
 80033b0:	52002000 	.word	0x52002000
 80033b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d010      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	4b3f      	ldr	r3, [pc, #252]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d208      	bcs.n	80033e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033d4:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	4939      	ldr	r1, [pc, #228]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033fe:	429a      	cmp	r2, r3
 8003400:	d208      	bcs.n	8003414 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	492e      	ldr	r1, [pc, #184]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d010      	beq.n	8003442 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800342c:	429a      	cmp	r2, r3
 800342e:	d208      	bcs.n	8003442 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003430:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	4922      	ldr	r1, [pc, #136]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 800343e:	4313      	orrs	r3, r2
 8003440:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d010      	beq.n	8003470 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800345a:	429a      	cmp	r2, r3
 800345c:	d208      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800345e:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4917      	ldr	r1, [pc, #92]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 800346c:	4313      	orrs	r3, r2
 800346e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003470:	f000 f834 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	4912      	ldr	r1, [pc, #72]	; (80034cc <HAL_RCC_ClockConfig+0x35c>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x358>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	4a0d      	ldr	r2, [pc, #52]	; (80034cc <HAL_RCC_ClockConfig+0x35c>)
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <HAL_RCC_ClockConfig+0x360>)
 80034a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034a8:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <HAL_RCC_ClockConfig+0x364>)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <HAL_RCC_ClockConfig+0x368>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd fe96 	bl	80011e4 <HAL_InitTick>
 80034b8:	4603      	mov	r3, r0
 80034ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
 80034cc:	08007830 	.word	0x08007830
 80034d0:	24000004 	.word	0x24000004
 80034d4:	24000000 	.word	0x24000000
 80034d8:	24000008 	.word	0x24000008

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e2:	4bb3      	ldr	r3, [pc, #716]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ea:	2b18      	cmp	r3, #24
 80034ec:	f200 8155 	bhi.w	800379a <HAL_RCC_GetSysClockFreq+0x2be>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800355d 	.word	0x0800355d
 80034fc:	0800379b 	.word	0x0800379b
 8003500:	0800379b 	.word	0x0800379b
 8003504:	0800379b 	.word	0x0800379b
 8003508:	0800379b 	.word	0x0800379b
 800350c:	0800379b 	.word	0x0800379b
 8003510:	0800379b 	.word	0x0800379b
 8003514:	0800379b 	.word	0x0800379b
 8003518:	08003583 	.word	0x08003583
 800351c:	0800379b 	.word	0x0800379b
 8003520:	0800379b 	.word	0x0800379b
 8003524:	0800379b 	.word	0x0800379b
 8003528:	0800379b 	.word	0x0800379b
 800352c:	0800379b 	.word	0x0800379b
 8003530:	0800379b 	.word	0x0800379b
 8003534:	0800379b 	.word	0x0800379b
 8003538:	08003589 	.word	0x08003589
 800353c:	0800379b 	.word	0x0800379b
 8003540:	0800379b 	.word	0x0800379b
 8003544:	0800379b 	.word	0x0800379b
 8003548:	0800379b 	.word	0x0800379b
 800354c:	0800379b 	.word	0x0800379b
 8003550:	0800379b 	.word	0x0800379b
 8003554:	0800379b 	.word	0x0800379b
 8003558:	0800358f 	.word	0x0800358f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800355c:	4b94      	ldr	r3, [pc, #592]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003568:	4b91      	ldr	r3, [pc, #580]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	08db      	lsrs	r3, r3, #3
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	4a90      	ldr	r2, [pc, #576]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800357a:	e111      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800357c:	4b8d      	ldr	r3, [pc, #564]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800357e:	61bb      	str	r3, [r7, #24]
    break;
 8003580:	e10e      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003582:	4b8d      	ldr	r3, [pc, #564]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003584:	61bb      	str	r3, [r7, #24]
    break;
 8003586:	e10b      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003588:	4b8c      	ldr	r3, [pc, #560]	; (80037bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800358a:	61bb      	str	r3, [r7, #24]
    break;
 800358c:	e108      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800358e:	4b88      	ldr	r3, [pc, #544]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003598:	4b85      	ldr	r3, [pc, #532]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035a4:	4b82      	ldr	r3, [pc, #520]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035ae:	4b80      	ldr	r3, [pc, #512]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	08db      	lsrs	r3, r3, #3
 80035b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80e1 	beq.w	8003794 <HAL_RCC_GetSysClockFreq+0x2b8>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	f000 8083 	beq.w	80036e0 <HAL_RCC_GetSysClockFreq+0x204>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	f200 80a1 	bhi.w	8003724 <HAL_RCC_GetSysClockFreq+0x248>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x114>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d056      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x1c0>
 80035ee:	e099      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035f0:	4b6f      	ldr	r3, [pc, #444]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d02d      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035fc:	4b6c      	ldr	r3, [pc, #432]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	08db      	lsrs	r3, r3, #3
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	4a6b      	ldr	r2, [pc, #428]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	ee07 3a90 	vmov	s15, r3
 8003614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003626:	4b62      	ldr	r3, [pc, #392]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003636:	ed97 6a02 	vldr	s12, [r7, #8]
 800363a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800363e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800364a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800364e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003652:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003656:	e087      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003662:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366a:	4b51      	ldr	r3, [pc, #324]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800367a:	ed97 6a02 	vldr	s12, [r7, #8]
 800367e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800368a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800368e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800369a:	e065      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ae:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036be:	ed97 6a02 	vldr	s12, [r7, #8]
 80036c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036de:	e043      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80036ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f2:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003702:	ed97 6a02 	vldr	s12, [r7, #8]
 8003706:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800370a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003722:	e021      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003736:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003746:	ed97 6a02 	vldr	s12, [r7, #8]
 800374a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800374e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800375a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003766:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	0a5b      	lsrs	r3, r3, #9
 800376e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003772:	3301      	adds	r3, #1
 8003774:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	ee07 3a90 	vmov	s15, r3
 800377c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003780:	edd7 6a07 	vldr	s13, [r7, #28]
 8003784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800378c:	ee17 3a90 	vmov	r3, s15
 8003790:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003792:	e005      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
    break;
 8003798:	e002      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800379c:	61bb      	str	r3, [r7, #24]
    break;
 800379e:	bf00      	nop
  }

  return sysclockfreq;
 80037a0:	69bb      	ldr	r3, [r7, #24]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3724      	adds	r7, #36	; 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	58024400 	.word	0x58024400
 80037b4:	03d09000 	.word	0x03d09000
 80037b8:	003d0900 	.word	0x003d0900
 80037bc:	007a1200 	.word	0x007a1200
 80037c0:	46000000 	.word	0x46000000
 80037c4:	4c742400 	.word	0x4c742400
 80037c8:	4a742400 	.word	0x4a742400
 80037cc:	4af42400 	.word	0x4af42400

080037d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80037d6:	f7ff fe81 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_GetHCLKFreq+0x50>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	490f      	ldr	r1, [pc, #60]	; (8003824 <HAL_RCC_GetHCLKFreq+0x54>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_GetHCLKFreq+0x50>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	4a09      	ldr	r2, [pc, #36]	; (8003824 <HAL_RCC_GetHCLKFreq+0x54>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	4a07      	ldr	r2, [pc, #28]	; (8003828 <HAL_RCC_GetHCLKFreq+0x58>)
 800380c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800380e:	4a07      	ldr	r2, [pc, #28]	; (800382c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_RCC_GetHCLKFreq+0x58>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	58024400 	.word	0x58024400
 8003824:	08007830 	.word	0x08007830
 8003828:	24000004 	.word	0x24000004
 800382c:	24000000 	.word	0x24000000

08003830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003834:	f7ff ffcc 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	4904      	ldr	r1, [pc, #16]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	58024400 	.word	0x58024400
 8003858:	08007830 	.word	0x08007830

0800385c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003860:	f7ff ffb6 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 8003864:	4602      	mov	r2, r0
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	0a1b      	lsrs	r3, r3, #8
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	4904      	ldr	r1, [pc, #16]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003872:	5ccb      	ldrb	r3, [r1, r3]
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800387c:	4618      	mov	r0, r3
 800387e:	bd80      	pop	{r7, pc}
 8003880:	58024400 	.word	0x58024400
 8003884:	08007830 	.word	0x08007830

08003888 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003894:	2300      	movs	r3, #0
 8003896:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d03f      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038ac:	d02a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038b2:	d824      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038b8:	d018      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038be:	d81e      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c8:	d007      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038ca:	e018      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038cc:	4ba6      	ldr	r3, [pc, #664]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	4aa5      	ldr	r2, [pc, #660]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038d8:	e015      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3304      	adds	r3, #4
 80038de:	2102      	movs	r1, #2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 ff17 	bl	8005714 <RCCEx_PLL2_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038ea:	e00c      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3324      	adds	r3, #36	; 0x24
 80038f0:	2102      	movs	r1, #2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 ffc0 	bl	8005878 <RCCEx_PLL3_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038fc:	e003      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
      break;
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800390c:	4b96      	ldr	r3, [pc, #600]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800390e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003918:	4993      	ldr	r1, [pc, #588]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	650b      	str	r3, [r1, #80]	; 0x50
 800391e:	e001      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d03d      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	2b04      	cmp	r3, #4
 8003936:	d826      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003955 	.word	0x08003955
 8003944:	08003963 	.word	0x08003963
 8003948:	08003975 	.word	0x08003975
 800394c:	0800398d 	.word	0x0800398d
 8003950:	0800398d 	.word	0x0800398d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003954:	4b84      	ldr	r3, [pc, #528]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a83      	ldr	r2, [pc, #524]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800395a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003960:	e015      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f001 fed3 	bl	8005714 <RCCEx_PLL2_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003972:	e00c      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3324      	adds	r3, #36	; 0x24
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f001 ff7c 	bl	8005878 <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
      break;
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800398c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003994:	4b74      	ldr	r3, [pc, #464]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003998:	f023 0207 	bic.w	r2, r3, #7
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	4971      	ldr	r1, [pc, #452]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	650b      	str	r3, [r1, #80]	; 0x50
 80039a6:	e001      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d04a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80039c0:	d031      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80039c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80039c6:	d82b      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039cc:	d02d      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80039ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d2:	d825      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039d4:	2bc0      	cmp	r3, #192	; 0xc0
 80039d6:	d02a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80039d8:	2bc0      	cmp	r3, #192	; 0xc0
 80039da:	d821      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d016      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d81d      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d007      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80039ec:	e018      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ee:	4b5e      	ldr	r3, [pc, #376]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	4a5d      	ldr	r2, [pc, #372]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039fa:	e019      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fe86 	bl	8005714 <RCCEx_PLL2_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003a0c:	e010      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3324      	adds	r3, #36	; 0x24
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 ff2f 	bl	8005878 <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003a1e:	e007      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
      break;
 8003a24:	e004      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003a26:	bf00      	nop
 8003a28:	e002      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003a36:	4b4c      	ldr	r3, [pc, #304]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	4949      	ldr	r1, [pc, #292]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	650b      	str	r3, [r1, #80]	; 0x50
 8003a48:	e001      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d04f      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a62:	d036      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003a64:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a68:	d830      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6e:	d032      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a74:	d82a      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a7a:	d02e      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003a7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a80:	d824      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a86:	d018      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8c:	d81e      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a96:	d007      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003a98:	e018      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9a:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	4a32      	ldr	r2, [pc, #200]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003aa6:	e019      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 fe30 	bl	8005714 <RCCEx_PLL2_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003ab8:	e010      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3324      	adds	r3, #36	; 0x24
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f001 fed9 	bl	8005878 <RCCEx_PLL3_Config>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003aca:	e007      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad0:	e004      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003ae2:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	491e      	ldr	r1, [pc, #120]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	650b      	str	r3, [r1, #80]	; 0x50
 8003af4:	e001      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d034      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0a:	2b30      	cmp	r3, #48	; 0x30
 8003b0c:	d01c      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003b0e:	2b30      	cmp	r3, #48	; 0x30
 8003b10:	d817      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d00c      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d813      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003b1e:	2b10      	cmp	r3, #16
 8003b20:	d10f      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003b2e:	e00e      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	2102      	movs	r1, #2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 fdec 	bl	8005714 <RCCEx_PLL2_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003b40:	e005      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75fb      	strb	r3, [r7, #23]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003b48:	bf00      	nop
 8003b4a:	e000      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b60:	4901      	ldr	r1, [pc, #4]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b66:	e003      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d047      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b84:	d030      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8a:	d82a      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b90:	d02c      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003b92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b96:	d824      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9c:	d018      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba2:	d81e      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bac:	d007      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003bae:	e018      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4bb0      	ldr	r3, [pc, #704]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4aaf      	ldr	r2, [pc, #700]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bbc:	e017      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 fda5 	bl	8005714 <RCCEx_PLL2_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bce:	e00e      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3324      	adds	r3, #36	; 0x24
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 fe4e 	bl	8005878 <RCCEx_PLL3_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003be0:	e005      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
      break;
 8003be6:	e002      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003be8:	bf00      	nop
 8003bea:	e000      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d109      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bf4:	4b9f      	ldr	r3, [pc, #636]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	499c      	ldr	r1, [pc, #624]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	650b      	str	r3, [r1, #80]	; 0x50
 8003c06:	e001      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d049      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c20:	d02e      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003c22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c26:	d828      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c2c:	d02a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003c2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c32:	d822      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c38:	d026      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003c3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c3e:	d81c      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c44:	d010      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c4a:	d816      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	d111      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 fd59 	bl	8005714 <RCCEx_PLL2_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c66:	e012      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3324      	adds	r3, #36	; 0x24
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 fe02 	bl	8005878 <RCCEx_PLL3_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c78:	e009      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c7e:	e006      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c80:	bf00      	nop
 8003c82:	e004      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c84:	bf00      	nop
 8003c86:	e002      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c88:	bf00      	nop
 8003c8a:	e000      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c94:	4b77      	ldr	r3, [pc, #476]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca0:	4974      	ldr	r1, [pc, #464]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ca6:	e001      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d053      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cbe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003cc2:	d034      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003cc4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003cc8:	d82e      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cce:	d030      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd4:	d828      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d02c      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce0:	d822      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003ce2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ce6:	d028      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003ce8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cec:	d81c      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf2:	d010      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf8:	d816      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01f      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d02:	d111      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 fd02 	bl	8005714 <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d14:	e014      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3324      	adds	r3, #36	; 0x24
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 fdab 	bl	8005878 <RCCEx_PLL3_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d26:	e00b      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2c:	e008      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e006      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d32:	bf00      	nop
 8003d34:	e004      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d46:	4b4b      	ldr	r3, [pc, #300]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d54:	4947      	ldr	r1, [pc, #284]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	658b      	str	r3, [r1, #88]	; 0x58
 8003d5a:	e001      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02f      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d74:	d00e      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d7a:	d814      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d015      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d84:	d10f      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d86:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	4a3a      	ldr	r2, [pc, #232]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d92:	e00c      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3304      	adds	r3, #4
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 fcba 	bl	8005714 <RCCEx_PLL2_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003da4:	e003      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]
      break;
 8003daa:	e000      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003db4:	4b2f      	ldr	r3, [pc, #188]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc0:	492c      	ldr	r1, [pc, #176]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	650b      	str	r3, [r1, #80]	; 0x50
 8003dc6:	e001      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d032      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d81b      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003df9 	.word	0x08003df9
 8003df0:	08003e07 	.word	0x08003e07
 8003df4:	08003e1f 	.word	0x08003e1f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df8:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e04:	e00c      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 fc81 	bl	8005714 <RCCEx_PLL2_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e16:	e003      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1c:	e000      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	f023 0203 	bic.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	4910      	ldr	r1, [pc, #64]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e38:	e001      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 808a 	beq.w	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e58:	f7fd fa0e 	bl	8001278 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e5e:	e00d      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e60:	f7fd fa0a 	bl	8001278 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	; 0x64
 8003e6c:	d906      	bls.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	75fb      	strb	r3, [r7, #23]
        break;
 8003e72:	e009      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003e74:	58024400 	.word	0x58024400
 8003e78:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7c:	4bba      	ldr	r3, [pc, #744]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0eb      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d166      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e8e:	4bb7      	ldr	r3, [pc, #732]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e98:	4053      	eors	r3, r2
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d013      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea2:	4bb2      	ldr	r3, [pc, #712]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eaa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eac:	4baf      	ldr	r3, [pc, #700]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4aae      	ldr	r2, [pc, #696]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb8:	4bac      	ldr	r3, [pc, #688]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4aab      	ldr	r2, [pc, #684]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ec4:	4aa9      	ldr	r2, [pc, #676]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed4:	d115      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fd f9cf 	bl	8001278 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003edc:	e00b      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fd f9cb 	bl	8001278 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d902      	bls.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ef4:	e005      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef6:	4b9d      	ldr	r3, [pc, #628]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0ed      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d126      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f16:	d10d      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003f18:	4b94      	ldr	r3, [pc, #592]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f26:	0919      	lsrs	r1, r3, #4
 8003f28:	4b91      	ldr	r3, [pc, #580]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f2a:	400b      	ands	r3, r1
 8003f2c:	498f      	ldr	r1, [pc, #572]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	610b      	str	r3, [r1, #16]
 8003f32:	e005      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003f34:	4b8d      	ldr	r3, [pc, #564]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	4a8c      	ldr	r2, [pc, #560]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f3e:	6113      	str	r3, [r2, #16]
 8003f40:	4b8a      	ldr	r3, [pc, #552]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4e:	4987      	ldr	r1, [pc, #540]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	670b      	str	r3, [r1, #112]	; 0x70
 8003f54:	e004      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
 8003f58:	75bb      	strb	r3, [r7, #22]
 8003f5a:	e001      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d07f      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f72:	2b28      	cmp	r3, #40	; 0x28
 8003f74:	d866      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	0800404b 	.word	0x0800404b
 8003f80:	08004045 	.word	0x08004045
 8003f84:	08004045 	.word	0x08004045
 8003f88:	08004045 	.word	0x08004045
 8003f8c:	08004045 	.word	0x08004045
 8003f90:	08004045 	.word	0x08004045
 8003f94:	08004045 	.word	0x08004045
 8003f98:	08004045 	.word	0x08004045
 8003f9c:	08004021 	.word	0x08004021
 8003fa0:	08004045 	.word	0x08004045
 8003fa4:	08004045 	.word	0x08004045
 8003fa8:	08004045 	.word	0x08004045
 8003fac:	08004045 	.word	0x08004045
 8003fb0:	08004045 	.word	0x08004045
 8003fb4:	08004045 	.word	0x08004045
 8003fb8:	08004045 	.word	0x08004045
 8003fbc:	08004033 	.word	0x08004033
 8003fc0:	08004045 	.word	0x08004045
 8003fc4:	08004045 	.word	0x08004045
 8003fc8:	08004045 	.word	0x08004045
 8003fcc:	08004045 	.word	0x08004045
 8003fd0:	08004045 	.word	0x08004045
 8003fd4:	08004045 	.word	0x08004045
 8003fd8:	08004045 	.word	0x08004045
 8003fdc:	0800404b 	.word	0x0800404b
 8003fe0:	08004045 	.word	0x08004045
 8003fe4:	08004045 	.word	0x08004045
 8003fe8:	08004045 	.word	0x08004045
 8003fec:	08004045 	.word	0x08004045
 8003ff0:	08004045 	.word	0x08004045
 8003ff4:	08004045 	.word	0x08004045
 8003ff8:	08004045 	.word	0x08004045
 8003ffc:	0800404b 	.word	0x0800404b
 8004000:	08004045 	.word	0x08004045
 8004004:	08004045 	.word	0x08004045
 8004008:	08004045 	.word	0x08004045
 800400c:	08004045 	.word	0x08004045
 8004010:	08004045 	.word	0x08004045
 8004014:	08004045 	.word	0x08004045
 8004018:	08004045 	.word	0x08004045
 800401c:	0800404b 	.word	0x0800404b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f001 fb74 	bl	8005714 <RCCEx_PLL2_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004030:	e00c      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3324      	adds	r3, #36	; 0x24
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f001 fc1d 	bl	8005878 <RCCEx_PLL3_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004042:	e003      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
      break;
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800404a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004052:	4b46      	ldr	r3, [pc, #280]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004060:	4942      	ldr	r1, [pc, #264]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	654b      	str	r3, [r1, #84]	; 0x54
 8004066:	e001      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d038      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407c:	2b05      	cmp	r3, #5
 800407e:	d821      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	080040cb 	.word	0x080040cb
 800408c:	080040a1 	.word	0x080040a1
 8004090:	080040b3 	.word	0x080040b3
 8004094:	080040cb 	.word	0x080040cb
 8004098:	080040cb 	.word	0x080040cb
 800409c:	080040cb 	.word	0x080040cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	2101      	movs	r1, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 fb34 	bl	8005714 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040b0:	e00c      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3324      	adds	r3, #36	; 0x24
 80040b6:	2101      	movs	r1, #1
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 fbdd 	bl	8005878 <RCCEx_PLL3_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040c2:	e003      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
      break;
 80040c8:	e000      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80040ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040d2:	4b26      	ldr	r3, [pc, #152]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040de:	4923      	ldr	r1, [pc, #140]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	654b      	str	r3, [r1, #84]	; 0x54
 80040e4:	e001      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d040      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040fc:	2b05      	cmp	r3, #5
 80040fe:	d821      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	0800414b 	.word	0x0800414b
 800410c:	08004121 	.word	0x08004121
 8004110:	08004133 	.word	0x08004133
 8004114:	0800414b 	.word	0x0800414b
 8004118:	0800414b 	.word	0x0800414b
 800411c:	0800414b 	.word	0x0800414b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	2101      	movs	r1, #1
 8004126:	4618      	mov	r0, r3
 8004128:	f001 faf4 	bl	8005714 <RCCEx_PLL2_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004130:	e00c      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3324      	adds	r3, #36	; 0x24
 8004136:	2101      	movs	r1, #1
 8004138:	4618      	mov	r0, r3
 800413a:	f001 fb9d 	bl	8005878 <RCCEx_PLL3_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004142:	e003      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	75fb      	strb	r3, [r7, #23]
      break;
 8004148:	e000      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800414a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d110      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004156:	f023 0207 	bic.w	r2, r3, #7
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004160:	4902      	ldr	r1, [pc, #8]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	658b      	str	r3, [r1, #88]	; 0x58
 8004166:	e007      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004168:	58024800 	.word	0x58024800
 800416c:	58024400 	.word	0x58024400
 8004170:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d04b      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800418e:	d02e      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004194:	d828      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419a:	d02a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d822      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80041a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041a6:	d026      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80041a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041ac:	d81c      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80041ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b2:	d010      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80041b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b8:	d816      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01d      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x972>
 80041be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c2:	d111      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 faa2 	bl	8005714 <RCCEx_PLL2_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041d4:	e012      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3324      	adds	r3, #36	; 0x24
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 fb4b 	bl	8005878 <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041e6:	e009      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
      break;
 80041ec:	e006      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041ee:	bf00      	nop
 80041f0:	e004      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041f2:	bf00      	nop
 80041f4:	e002      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004202:	4bb3      	ldr	r3, [pc, #716]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004210:	49af      	ldr	r1, [pc, #700]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004212:	4313      	orrs	r3, r2
 8004214:	654b      	str	r3, [r1, #84]	; 0x54
 8004216:	e001      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d04b      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800422e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004232:	d02e      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004234:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004238:	d828      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423e:	d02a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d822      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004246:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800424a:	d026      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800424c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004250:	d81c      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004256:	d010      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425c:	d816      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01d      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004266:	d111      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fa50 	bl	8005714 <RCCEx_PLL2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004278:	e012      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3324      	adds	r3, #36	; 0x24
 800427e:	2102      	movs	r1, #2
 8004280:	4618      	mov	r0, r3
 8004282:	f001 faf9 	bl	8005878 <RCCEx_PLL3_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800428a:	e009      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
      break;
 8004290:	e006      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004292:	bf00      	nop
 8004294:	e004      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004296:	bf00      	nop
 8004298:	e002      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800429a:	bf00      	nop
 800429c:	e000      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800429e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a6:	4b8a      	ldr	r3, [pc, #552]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042b4:	4986      	ldr	r1, [pc, #536]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	658b      	str	r3, [r1, #88]	; 0x58
 80042ba:	e001      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d04b      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042d6:	d02e      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80042d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042dc:	d828      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e2:	d02a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e8:	d822      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042ee:	d026      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80042f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042f4:	d81c      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042fa:	d010      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80042fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004300:	d816      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01d      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430a:	d111      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f001 f9fe 	bl	8005714 <RCCEx_PLL2_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800431c:	e012      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3324      	adds	r3, #36	; 0x24
 8004322:	2102      	movs	r1, #2
 8004324:	4618      	mov	r0, r3
 8004326:	f001 faa7 	bl	8005878 <RCCEx_PLL3_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800432e:	e009      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	75fb      	strb	r3, [r7, #23]
      break;
 8004334:	e006      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004336:	bf00      	nop
 8004338:	e004      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800433a:	bf00      	nop
 800433c:	e002      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800433e:	bf00      	nop
 8004340:	e000      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800434a:	4b61      	ldr	r3, [pc, #388]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004358:	495d      	ldr	r1, [pc, #372]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800435a:	4313      	orrs	r3, r2
 800435c:	658b      	str	r3, [r1, #88]	; 0x58
 800435e:	e001      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437a:	d10a      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3324      	adds	r3, #36	; 0x24
 8004380:	2102      	movs	r1, #2
 8004382:	4618      	mov	r0, r3
 8004384:	f001 fa78 	bl	8005878 <RCCEx_PLL3_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004392:	4b4f      	ldr	r3, [pc, #316]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	494b      	ldr	r1, [pc, #300]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043bc:	d10a      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3324      	adds	r3, #36	; 0x24
 80043c2:	2102      	movs	r1, #2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f001 fa57 	bl	8005878 <RCCEx_PLL3_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043d4:	4b3e      	ldr	r3, [pc, #248]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043e2:	493b      	ldr	r1, [pc, #236]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d034      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043fe:	d01d      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004404:	d817      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800440a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440e:	d009      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004410:	e011      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f001 f97b 	bl	8005714 <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004422:	e00c      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3324      	adds	r3, #36	; 0x24
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f001 fa24 	bl	8005878 <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
      break;
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800443c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004444:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004452:	491f      	ldr	r1, [pc, #124]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004454:	4313      	orrs	r3, r2
 8004456:	658b      	str	r3, [r1, #88]	; 0x58
 8004458:	e001      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d036      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004470:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004474:	d01c      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004476:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800447a:	d816      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800447c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004480:	d003      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004486:	d007      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004488:	e00f      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800448a:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004494:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004496:	e00c      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3324      	adds	r3, #36	; 0x24
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 f9ea 	bl	8005878 <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80044a8:	e003      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75fb      	strb	r3, [r7, #23]
      break;
 80044ae:	e000      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80044b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10d      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c6:	4902      	ldr	r1, [pc, #8]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	654b      	str	r3, [r1, #84]	; 0x54
 80044cc:	e004      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80044ce:	bf00      	nop
 80044d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d029      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f0:	d007      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80044f2:	e00f      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f4:	4b69      	ldr	r3, [pc, #420]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4a68      	ldr	r2, [pc, #416]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004500:	e00b      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3304      	adds	r3, #4
 8004506:	2102      	movs	r1, #2
 8004508:	4618      	mov	r0, r3
 800450a:	f001 f903 	bl	8005714 <RCCEx_PLL2_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004512:	e002      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
      break;
 8004518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004520:	4b5e      	ldr	r3, [pc, #376]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	495b      	ldr	r1, [pc, #364]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800452e:	4313      	orrs	r3, r2
 8004530:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004532:	e001      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3324      	adds	r3, #36	; 0x24
 8004548:	2102      	movs	r1, #2
 800454a:	4618      	mov	r0, r3
 800454c:	f001 f994 	bl	8005878 <RCCEx_PLL3_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d032      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004570:	d017      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004576:	d811      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457c:	d013      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800457e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004582:	d80b      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d010      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458c:	d106      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458e:	4b43      	ldr	r3, [pc, #268]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	4a42      	ldr	r2, [pc, #264]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800459a:	e007      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	75fb      	strb	r3, [r7, #23]
      break;
 80045a0:	e004      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80045a2:	bf00      	nop
 80045a4:	e002      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80045a6:	bf00      	nop
 80045a8:	e000      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80045aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b2:	4b3a      	ldr	r3, [pc, #232]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c0:	4936      	ldr	r1, [pc, #216]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	654b      	str	r3, [r1, #84]	; 0x54
 80045c6:	e001      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
 80045ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045d8:	4b30      	ldr	r3, [pc, #192]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e4:	492d      	ldr	r1, [pc, #180]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045f6:	4b29      	ldr	r3, [pc, #164]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004602:	4926      	ldr	r1, [pc, #152]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004604:	4313      	orrs	r3, r2
 8004606:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	491e      	ldr	r1, [pc, #120]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004622:	4313      	orrs	r3, r2
 8004624:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004632:	4b1a      	ldr	r3, [pc, #104]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	4a19      	ldr	r2, [pc, #100]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004638:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800463c:	6113      	str	r3, [r2, #16]
 800463e:	4b17      	ldr	r3, [pc, #92]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004648:	4914      	ldr	r1, [pc, #80]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800464a:	4313      	orrs	r3, r2
 800464c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	da08      	bge.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004662:	490e      	ldr	r1, [pc, #56]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004664:	4313      	orrs	r3, r2
 8004666:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004678:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	4906      	ldr	r1, [pc, #24]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004684:	4313      	orrs	r3, r2
 8004686:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004688:	7dbb      	ldrb	r3, [r7, #22]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e000      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	58024400 	.word	0x58024400

080046a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b090      	sub	sp, #64	; 0x40
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ae:	f040 8089 	bne.w	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80046b2:	4ba8      	ldr	r3, [pc, #672]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d87d      	bhi.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046dd 	.word	0x080046dd
 80046cc:	08004701 	.word	0x08004701
 80046d0:	08004725 	.word	0x08004725
 80046d4:	080047b9 	.word	0x080047b9
 80046d8:	08004749 	.word	0x08004749

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80046dc:	4b9d      	ldr	r3, [pc, #628]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046e8:	d107      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 febe 	bl	8005470 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046f8:	e3f5      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046fe:	e3f2      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004700:	4b94      	ldr	r3, [pc, #592]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800470c:	d107      	bne.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800470e:	f107 0318 	add.w	r3, r7, #24
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fc04 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800471c:	e3e3      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004722:	e3e0      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004724:	4b8b      	ldr	r3, [pc, #556]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800472c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004730:	d107      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004732:	f107 030c 	add.w	r3, r7, #12
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fd46 	bl	80051c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004740:	e3d1      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004746:	e3ce      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004748:	4b82      	ldr	r3, [pc, #520]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800474a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004750:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004752:	4b80      	ldr	r3, [pc, #512]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b04      	cmp	r3, #4
 800475c:	d10c      	bne.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800475e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004764:	4b7b      	ldr	r3, [pc, #492]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	4a7a      	ldr	r2, [pc, #488]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
 8004774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004776:	e01e      	b.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004778:	4b76      	ldr	r3, [pc, #472]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004784:	d106      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800478c:	d102      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800478e:	4b73      	ldr	r3, [pc, #460]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004792:	e010      	b.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004794:	4b6f      	ldr	r3, [pc, #444]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047a0:	d106      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80047a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a8:	d102      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80047aa:	4b6d      	ldr	r3, [pc, #436]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ae:	e002      	b.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80047b4:	e397      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80047b6:	e396      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047bc:	e393      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047c2:	e390      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ca:	f040 8095 	bne.w	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80047ce:	4b61      	ldr	r3, [pc, #388]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80047d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047de:	d04d      	beq.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e6:	f200 8084 	bhi.w	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2bc0      	cmp	r3, #192	; 0xc0
 80047ee:	d07d      	beq.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	2bc0      	cmp	r3, #192	; 0xc0
 80047f4:	d87d      	bhi.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	2b80      	cmp	r3, #128	; 0x80
 80047fa:	d02d      	beq.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	2b80      	cmp	r3, #128	; 0x80
 8004800:	d877      	bhi.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d012      	beq.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800480e:	e070      	b.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800481c:	d107      	bne.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800481e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fe24 	bl	8005470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800482c:	e35b      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004832:	e358      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004834:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800483c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004840:	d107      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004842:	f107 0318 	add.w	r3, r7, #24
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fb6a 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004850:	e349      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004856:	e346      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004858:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004864:	d107      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004866:	f107 030c 	add.w	r3, r7, #12
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fcac 	bl	80051c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004874:	e337      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800487a:	e334      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800487c:	4b35      	ldr	r3, [pc, #212]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800487e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004884:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004886:	4b33      	ldr	r3, [pc, #204]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b04      	cmp	r3, #4
 8004890:	d10c      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004898:	4b2e      	ldr	r3, [pc, #184]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	08db      	lsrs	r3, r3, #3
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048aa:	e01e      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80048ac:	4b29      	ldr	r3, [pc, #164]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b8:	d106      	bne.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048c0:	d102      	bne.n	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80048c2:	4b26      	ldr	r3, [pc, #152]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c6:	e010      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048c8:	4b22      	ldr	r3, [pc, #136]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048d4:	d106      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80048d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048dc:	d102      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e2:	e002      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048e8:	e2fd      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80048ea:	e2fc      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048ec:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048f0:	e2f9      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048f6:	e2f6      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fe:	f040 80a7 	bne.w	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004902:	4b14      	ldr	r3, [pc, #80]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004906:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800490a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004912:	d05f      	beq.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491a:	f200 8096 	bhi.w	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004924:	f000 808e 	beq.w	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800492e:	f200 808c 	bhi.w	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004938:	d03a      	beq.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004940:	f200 8083 	bhi.w	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00e      	beq.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004950:	d01c      	beq.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8004952:	e07a      	b.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004954:	58024400 	.word	0x58024400
 8004958:	03d09000 	.word	0x03d09000
 800495c:	003d0900 	.word	0x003d0900
 8004960:	007a1200 	.word	0x007a1200
 8004964:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004968:	4ba8      	ldr	r3, [pc, #672]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004974:	d107      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fd78 	bl	8005470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004984:	e2af      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800498a:	e2ac      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800498c:	4b9f      	ldr	r3, [pc, #636]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004998:	d107      	bne.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800499a:	f107 0318 	add.w	r3, r7, #24
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fabe 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049a8:	e29d      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049ae:	e29a      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049b0:	4b96      	ldr	r3, [pc, #600]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049bc:	d107      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049be:	f107 030c 	add.w	r3, r7, #12
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fc00 	bl	80051c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049cc:	e28b      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049d2:	e288      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80049d4:	4b8d      	ldr	r3, [pc, #564]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80049d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049de:	4b8b      	ldr	r3, [pc, #556]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049f0:	4b86      	ldr	r3, [pc, #536]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	08db      	lsrs	r3, r3, #3
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	4a85      	ldr	r2, [pc, #532]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a02:	e01e      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a04:	4b81      	ldr	r3, [pc, #516]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a10:	d106      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8004a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a18:	d102      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a1a:	4b7e      	ldr	r3, [pc, #504]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1e:	e010      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a20:	4b7a      	ldr	r3, [pc, #488]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a34:	d102      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a36:	4b78      	ldr	r3, [pc, #480]	; (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3a:	e002      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004a40:	e251      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004a42:	e250      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a44:	4b75      	ldr	r3, [pc, #468]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a48:	e24d      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a4e:	e24a      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	f040 809c 	bne.w	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004a5a:	4b6c      	ldr	r3, [pc, #432]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a6a:	d054      	beq.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a72:	f200 808b 	bhi.w	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a7c:	f000 8083 	beq.w	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a86:	f200 8081 	bhi.w	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a90:	d02f      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a98:	d878      	bhi.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa6:	d012      	beq.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004aa8:	e070      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004aaa:	4b58      	ldr	r3, [pc, #352]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ab6:	d107      	bne.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fcd7 	bl	8005470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ac6:	e20e      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004acc:	e20b      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ace:	4b4f      	ldr	r3, [pc, #316]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ada:	d107      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004adc:	f107 0318 	add.w	r3, r7, #24
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fa1d 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004aea:	e1fc      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af0:	e1f9      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004af2:	4b46      	ldr	r3, [pc, #280]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004afe:	d107      	bne.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b00:	f107 030c 	add.w	r3, r7, #12
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fb5f 	bl	80051c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b0e:	e1ea      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b14:	e1e7      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b20:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d10c      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	08db      	lsrs	r3, r3, #3
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	4a34      	ldr	r2, [pc, #208]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b44:	e01e      	b.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b52:	d106      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b5a:	d102      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b5c:	4b2d      	ldr	r3, [pc, #180]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b60:	e010      	b.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b6e:	d106      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b76:	d102      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b78:	4b27      	ldr	r3, [pc, #156]	; (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7c:	e002      	b.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b82:	e1b0      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004b84:	e1af      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b86:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b8a:	e1ac      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b90:	e1a9      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b98:	d17d      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004b9a:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ba2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004baa:	d039      	beq.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb2:	d86d      	bhi.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc0:	d012      	beq.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004bc2:	e065      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bd2:	f107 0318 	add.w	r3, r7, #24
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f9a2 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004be0:	e181      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004be6:	e17e      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004be8:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf4:	d107      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bf6:	f107 030c 	add.w	r3, r7, #12
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fae4 	bl	80051c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c04:	e16f      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c0a:	e16c      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	03d09000 	.word	0x03d09000
 8004c14:	003d0900 	.word	0x003d0900
 8004c18:	007a1200 	.word	0x007a1200
 8004c1c:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c20:	4ba0      	ldr	r3, [pc, #640]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c2a:	4b9e      	ldr	r3, [pc, #632]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d10c      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8004c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c3c:	4b99      	ldr	r3, [pc, #612]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	4a98      	ldr	r2, [pc, #608]	; (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c4e:	e01e      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c50:	4b94      	ldr	r3, [pc, #592]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5c:	d106      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c64:	d102      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c66:	4b91      	ldr	r3, [pc, #580]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6a:	e010      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c6c:	4b8d      	ldr	r3, [pc, #564]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c78:	d106      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c80:	d102      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c82:	4b8b      	ldr	r3, [pc, #556]	; (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c86:	e002      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c8c:	e12b      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004c8e:	e12a      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c94:	e127      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9c:	d133      	bne.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004c9e:	4b81      	ldr	r3, [pc, #516]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb4:	d012      	beq.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004cb6:	e023      	b.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004cb8:	4b7a      	ldr	r3, [pc, #488]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fbd0 	bl	8005470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cd4:	e107      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cda:	e104      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cdc:	4b71      	ldr	r3, [pc, #452]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cea:	f107 0318 	add.w	r3, r7, #24
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f916 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cf8:	e0f5      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cfe:	e0f2      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d04:	e0ef      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d0c:	f040 8091 	bne.w	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004d10:	4b64      	ldr	r3, [pc, #400]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004d18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004d20:	f000 8081 	beq.w	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004d2a:	d87f      	bhi.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d32:	d06b      	beq.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8004d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d3a:	d877      	bhi.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d056      	beq.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4a:	d86f      	bhi.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d52:	d03b      	beq.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d5a:	d867      	bhi.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d62:	d021      	beq.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6a:	d85f      	bhi.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d004      	beq.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d78:	d004      	beq.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004d7a:	e057      	b.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004d7c:	f000 f8ba 	bl	8004ef4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d80:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004d82:	e0b0      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d84:	4b47      	ldr	r3, [pc, #284]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d90:	d107      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d92:	f107 0318 	add.w	r3, r7, #24
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f8c2 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004da0:	e0a1      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004da6:	e09e      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004da8:	4b3e      	ldr	r3, [pc, #248]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004db6:	f107 030c 	add.w	r3, r7, #12
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fa04 	bl	80051c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dc4:	e08f      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dca:	e08c      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dcc:	4b35      	ldr	r3, [pc, #212]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d109      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dd8:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	08db      	lsrs	r3, r3, #3
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	4a31      	ldr	r2, [pc, #196]	; (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dea:	e07c      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004df0:	e079      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004df2:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfe:	d102      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8004e00:	4b2a      	ldr	r3, [pc, #168]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e04:	e06f      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e0a:	e06c      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e0c:	4b25      	ldr	r3, [pc, #148]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e18:	d102      	bne.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8004e1a:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e1e:	e062      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e24:	e05f      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e26:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e2a:	e05c      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e30:	e059      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e38:	d153      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004e3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e42:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e4a:	d035      	beq.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e52:	d843      	bhi.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d004      	beq.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e60:	d00d      	beq.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8004e62:	e03b      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e70:	d102      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8004e72:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e76:	e036      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e7c:	e033      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e8a:	d107      	bne.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 faed 	bl	8005470 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e9a:	e024      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ea0:	e021      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004ea2:	bf00      	nop
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	03d09000 	.word	0x03d09000
 8004eac:	003d0900 	.word	0x003d0900
 8004eb0:	007a1200 	.word	0x007a1200
 8004eb4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004eb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ec6:	f107 0318 	add.w	r3, r7, #24
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f828 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ed4:	e007      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eda:	e004      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004edc:	2300      	movs	r3, #0
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ee0:	e001      	b.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3740      	adds	r7, #64	; 0x40
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	58024400 	.word	0x58024400

08004ef4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004ef8:	f7fe fc6a 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4904      	ldr	r1, [pc, #16]	; (8004f1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f0a:	5ccb      	ldrb	r3, [r1, r3]
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	58024400 	.word	0x58024400
 8004f1c:	08007830 	.word	0x08007830

08004f20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b089      	sub	sp, #36	; 0x24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f28:	4ba1      	ldr	r3, [pc, #644]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004f32:	4b9f      	ldr	r3, [pc, #636]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	0b1b      	lsrs	r3, r3, #12
 8004f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f3e:	4b9c      	ldr	r3, [pc, #624]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004f4a:	4b99      	ldr	r3, [pc, #612]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	08db      	lsrs	r3, r3, #3
 8004f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8111 	beq.w	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	f000 8083 	beq.w	800507c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	f200 80a1 	bhi.w	80050c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d056      	beq.n	8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f8a:	e099      	b.n	80050c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f8c:	4b88      	ldr	r3, [pc, #544]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02d      	beq.n	8004ff4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f98:	4b85      	ldr	r3, [pc, #532]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	08db      	lsrs	r3, r3, #3
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	4a84      	ldr	r2, [pc, #528]	; (80051b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	ee07 3a90 	vmov	s15, r3
 8004fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc2:	4b7b      	ldr	r3, [pc, #492]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ff2:	e087      	b.n	8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80051bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005006:	4b6a      	ldr	r3, [pc, #424]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005016:	ed97 6a03 	vldr	s12, [r7, #12]
 800501a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800501e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800502a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800502e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005036:	e065      	b.n	8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005042:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504a:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505a:	ed97 6a03 	vldr	s12, [r7, #12]
 800505e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800506e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800507a:	e043      	b.n	8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005086:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800508a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508e:	4b48      	ldr	r3, [pc, #288]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509e:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050be:	e021      	b.n	8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d2:	4b37      	ldr	r3, [pc, #220]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005102:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005104:	4b2a      	ldr	r3, [pc, #168]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	0a5b      	lsrs	r3, r3, #9
 800510a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800511a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800511e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800512a:	ee17 2a90 	vmov	r2, s15
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005132:	4b1f      	ldr	r3, [pc, #124]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	0c1b      	lsrs	r3, r3, #16
 8005138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800514c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005158:	ee17 2a90 	vmov	r2, s15
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005160:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	0e1b      	lsrs	r3, r3, #24
 8005166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800517a:	edd7 6a07 	vldr	s13, [r7, #28]
 800517e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005186:	ee17 2a90 	vmov	r2, s15
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800518e:	e008      	b.n	80051a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	609a      	str	r2, [r3, #8]
}
 80051a2:	bf00      	nop
 80051a4:	3724      	adds	r7, #36	; 0x24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	58024400 	.word	0x58024400
 80051b4:	03d09000 	.word	0x03d09000
 80051b8:	46000000 	.word	0x46000000
 80051bc:	4c742400 	.word	0x4c742400
 80051c0:	4a742400 	.word	0x4a742400
 80051c4:	4af42400 	.word	0x4af42400

080051c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b089      	sub	sp, #36	; 0x24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051d0:	4ba1      	ldr	r3, [pc, #644]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80051da:	4b9f      	ldr	r3, [pc, #636]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	0d1b      	lsrs	r3, r3, #20
 80051e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80051e6:	4b9c      	ldr	r3, [pc, #624]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80051f2:	4b99      	ldr	r3, [pc, #612]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	08db      	lsrs	r3, r3, #3
 80051f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	fb02 f303 	mul.w	r3, r2, r3
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8111 	beq.w	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b02      	cmp	r3, #2
 800521a:	f000 8083 	beq.w	8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b02      	cmp	r3, #2
 8005222:	f200 80a1 	bhi.w	8005368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d056      	beq.n	80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005232:	e099      	b.n	8005368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005234:	4b88      	ldr	r3, [pc, #544]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d02d      	beq.n	800529c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005240:	4b85      	ldr	r3, [pc, #532]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	08db      	lsrs	r3, r3, #3
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	4a84      	ldr	r2, [pc, #528]	; (800545c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
 8005250:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	ee07 3a90 	vmov	s15, r3
 8005258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526a:	4b7b      	ldr	r3, [pc, #492]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527a:	ed97 6a03 	vldr	s12, [r7, #12]
 800527e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800528e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005296:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800529a:	e087      	b.n	80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005464 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80052aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ae:	4b6a      	ldr	r3, [pc, #424]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052be:	ed97 6a03 	vldr	s12, [r7, #12]
 80052c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052de:	e065      	b.n	80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f2:	4b59      	ldr	r3, [pc, #356]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005302:	ed97 6a03 	vldr	s12, [r7, #12]
 8005306:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800530a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005322:	e043      	b.n	80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800546c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005336:	4b48      	ldr	r3, [pc, #288]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005346:	ed97 6a03 	vldr	s12, [r7, #12]
 800534a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800534e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800535a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005362:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005366:	e021      	b.n	80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537a:	4b37      	ldr	r3, [pc, #220]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538a:	ed97 6a03 	vldr	s12, [r7, #12]
 800538e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80053ac:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	0a5b      	lsrs	r3, r3, #9
 80053b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053d2:	ee17 2a90 	vmov	r2, s15
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80053da:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80053f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005400:	ee17 2a90 	vmov	r2, s15
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005408:	4b13      	ldr	r3, [pc, #76]	; (8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	0e1b      	lsrs	r3, r3, #24
 800540e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800541e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005422:	edd7 6a07 	vldr	s13, [r7, #28]
 8005426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800542a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800542e:	ee17 2a90 	vmov	r2, s15
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005436:	e008      	b.n	800544a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	609a      	str	r2, [r3, #8]
}
 800544a:	bf00      	nop
 800544c:	3724      	adds	r7, #36	; 0x24
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	58024400 	.word	0x58024400
 800545c:	03d09000 	.word	0x03d09000
 8005460:	46000000 	.word	0x46000000
 8005464:	4c742400 	.word	0x4c742400
 8005468:	4a742400 	.word	0x4a742400
 800546c:	4af42400 	.word	0x4af42400

08005470 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005470:	b480      	push	{r7}
 8005472:	b089      	sub	sp, #36	; 0x24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005478:	4ba0      	ldr	r3, [pc, #640]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005482:	4b9e      	ldr	r3, [pc, #632]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800548c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800548e:	4b9b      	ldr	r3, [pc, #620]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005498:	4b98      	ldr	r3, [pc, #608]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	08db      	lsrs	r3, r3, #3
 800549e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	fb02 f303 	mul.w	r3, r2, r3
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 8111 	beq.w	80056de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	f000 8083 	beq.w	80055ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	f200 80a1 	bhi.w	800560e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d056      	beq.n	8005586 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80054d8:	e099      	b.n	800560e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054da:	4b88      	ldr	r3, [pc, #544]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d02d      	beq.n	8005542 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054e6:	4b85      	ldr	r3, [pc, #532]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	08db      	lsrs	r3, r3, #3
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	4a83      	ldr	r2, [pc, #524]	; (8005700 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005510:	4b7a      	ldr	r3, [pc, #488]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005520:	ed97 6a03 	vldr	s12, [r7, #12]
 8005524:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005704 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005540:	e087      	b.n	8005652 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005708 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005554:	4b69      	ldr	r3, [pc, #420]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005564:	ed97 6a03 	vldr	s12, [r7, #12]
 8005568:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005704 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800556c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005580:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005584:	e065      	b.n	8005652 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005590:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800570c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005598:	4b58      	ldr	r3, [pc, #352]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a0:	ee07 3a90 	vmov	s15, r3
 80055a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005704 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055c8:	e043      	b.n	8005652 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	ee07 3a90 	vmov	s15, r3
 80055d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005710 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80055d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055dc:	4b47      	ldr	r3, [pc, #284]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e4:	ee07 3a90 	vmov	s15, r3
 80055e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005704 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005608:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800560c:	e021      	b.n	8005652 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005618:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005708 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800561c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005620:	4b36      	ldr	r3, [pc, #216]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005628:	ee07 3a90 	vmov	s15, r3
 800562c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005630:	ed97 6a03 	vldr	s12, [r7, #12]
 8005634:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005704 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005650:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005652:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	0a5b      	lsrs	r3, r3, #9
 8005658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005664:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005668:	ee37 7a87 	vadd.f32	s14, s15, s14
 800566c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005678:	ee17 2a90 	vmov	r2, s15
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005680:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	0c1b      	lsrs	r3, r3, #16
 8005686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800569a:	edd7 6a07 	vldr	s13, [r7, #28]
 800569e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a6:	ee17 2a90 	vmov	r2, s15
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80056ae:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	0e1b      	lsrs	r3, r3, #24
 80056b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d4:	ee17 2a90 	vmov	r2, s15
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80056dc:	e008      	b.n	80056f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	609a      	str	r2, [r3, #8]
}
 80056f0:	bf00      	nop
 80056f2:	3724      	adds	r7, #36	; 0x24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	58024400 	.word	0x58024400
 8005700:	03d09000 	.word	0x03d09000
 8005704:	46000000 	.word	0x46000000
 8005708:	4c742400 	.word	0x4c742400
 800570c:	4a742400 	.word	0x4a742400
 8005710:	4af42400 	.word	0x4af42400

08005714 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005722:	4b53      	ldr	r3, [pc, #332]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	2b03      	cmp	r3, #3
 800572c:	d101      	bne.n	8005732 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e099      	b.n	8005866 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005732:	4b4f      	ldr	r3, [pc, #316]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a4e      	ldr	r2, [pc, #312]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 8005738:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800573c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573e:	f7fb fd9b 	bl	8001278 <HAL_GetTick>
 8005742:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005744:	e008      	b.n	8005758 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005746:	f7fb fd97 	bl	8001278 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e086      	b.n	8005866 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005758:	4b45      	ldr	r3, [pc, #276]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f0      	bne.n	8005746 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005764:	4b42      	ldr	r3, [pc, #264]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	031b      	lsls	r3, r3, #12
 8005772:	493f      	ldr	r1, [pc, #252]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 8005774:	4313      	orrs	r3, r2
 8005776:	628b      	str	r3, [r1, #40]	; 0x28
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	3b01      	subs	r3, #1
 800577e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	3b01      	subs	r3, #1
 8005788:	025b      	lsls	r3, r3, #9
 800578a:	b29b      	uxth	r3, r3
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	3b01      	subs	r3, #1
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	061b      	lsls	r3, r3, #24
 80057a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057a8:	4931      	ldr	r1, [pc, #196]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80057ae:	4b30      	ldr	r3, [pc, #192]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	492d      	ldr	r1, [pc, #180]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80057c0:	4b2b      	ldr	r3, [pc, #172]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	f023 0220 	bic.w	r2, r3, #32
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	4928      	ldr	r1, [pc, #160]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80057d2:	4b27      	ldr	r3, [pc, #156]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	4a26      	ldr	r2, [pc, #152]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057d8:	f023 0310 	bic.w	r3, r3, #16
 80057dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057de:	4b24      	ldr	r3, [pc, #144]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e2:	4b24      	ldr	r3, [pc, #144]	; (8005874 <RCCEx_PLL2_Config+0x160>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	69d2      	ldr	r2, [r2, #28]
 80057ea:	00d2      	lsls	r2, r2, #3
 80057ec:	4920      	ldr	r1, [pc, #128]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057f2:	4b1f      	ldr	r3, [pc, #124]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	f043 0310 	orr.w	r3, r3, #16
 80057fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d106      	bne.n	8005812 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005804:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	4a19      	ldr	r2, [pc, #100]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 800580a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800580e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005810:	e00f      	b.n	8005832 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d106      	bne.n	8005826 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005818:	4b15      	ldr	r3, [pc, #84]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	4a14      	ldr	r2, [pc, #80]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 800581e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005822:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005824:	e005      	b.n	8005832 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	4a11      	ldr	r2, [pc, #68]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 800582c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005830:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005832:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a0e      	ldr	r2, [pc, #56]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 8005838:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800583c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583e:	f7fb fd1b 	bl	8001278 <HAL_GetTick>
 8005842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005844:	e008      	b.n	8005858 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005846:	f7fb fd17 	bl	8001278 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e006      	b.n	8005866 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005858:	4b05      	ldr	r3, [pc, #20]	; (8005870 <RCCEx_PLL2_Config+0x15c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0f0      	beq.n	8005846 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	58024400 	.word	0x58024400
 8005874:	ffff0007 	.word	0xffff0007

08005878 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005886:	4b53      	ldr	r3, [pc, #332]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b03      	cmp	r3, #3
 8005890:	d101      	bne.n	8005896 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e099      	b.n	80059ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005896:	4b4f      	ldr	r3, [pc, #316]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a4e      	ldr	r2, [pc, #312]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 800589c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a2:	f7fb fce9 	bl	8001278 <HAL_GetTick>
 80058a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058a8:	e008      	b.n	80058bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80058aa:	f7fb fce5 	bl	8001278 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e086      	b.n	80059ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058bc:	4b45      	ldr	r3, [pc, #276]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f0      	bne.n	80058aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80058c8:	4b42      	ldr	r3, [pc, #264]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	051b      	lsls	r3, r3, #20
 80058d6:	493f      	ldr	r1, [pc, #252]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	628b      	str	r3, [r1, #40]	; 0x28
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	025b      	lsls	r3, r3, #9
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	041b      	lsls	r3, r3, #16
 80058fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	3b01      	subs	r3, #1
 8005906:	061b      	lsls	r3, r3, #24
 8005908:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800590c:	4931      	ldr	r1, [pc, #196]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 800590e:	4313      	orrs	r3, r2
 8005910:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005912:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	492d      	ldr	r1, [pc, #180]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005920:	4313      	orrs	r3, r2
 8005922:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005924:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	4928      	ldr	r1, [pc, #160]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005936:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	4a26      	ldr	r2, [pc, #152]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 800593c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005940:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005942:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005946:	4b24      	ldr	r3, [pc, #144]	; (80059d8 <RCCEx_PLL3_Config+0x160>)
 8005948:	4013      	ands	r3, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	69d2      	ldr	r2, [r2, #28]
 800594e:	00d2      	lsls	r2, r2, #3
 8005950:	4920      	ldr	r1, [pc, #128]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005952:	4313      	orrs	r3, r2
 8005954:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005956:	4b1f      	ldr	r3, [pc, #124]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	4a1e      	ldr	r2, [pc, #120]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 800595c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005960:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005968:	4b1a      	ldr	r3, [pc, #104]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	4a19      	ldr	r2, [pc, #100]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 800596e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005972:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005974:	e00f      	b.n	8005996 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d106      	bne.n	800598a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800597c:	4b15      	ldr	r3, [pc, #84]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005982:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005986:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005988:	e005      	b.n	8005996 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800598a:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	4a11      	ldr	r2, [pc, #68]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005994:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005996:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a0e      	ldr	r2, [pc, #56]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 800599c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a2:	f7fb fc69 	bl	8001278 <HAL_GetTick>
 80059a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059a8:	e008      	b.n	80059bc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80059aa:	f7fb fc65 	bl	8001278 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e006      	b.n	80059ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059bc:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <RCCEx_PLL3_Config+0x15c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	58024400 	.word	0x58024400
 80059d8:	ffff0007 	.word	0xffff0007

080059dc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e091      	b.n	8005b12 <HAL_RNG_Init+0x136>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	7a5b      	ldrb	r3, [r3, #9]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fb f9d6 	bl	8000db0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0204 	bic.w	r2, r2, #4
 8005a18:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4b3e      	ldr	r3, [pc, #248]	; (8005b1c <HAL_RNG_Init+0x140>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6852      	ldr	r2, [r2, #4]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a32:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a39      	ldr	r2, [pc, #228]	; (8005b20 <HAL_RNG_Init+0x144>)
 8005a3a:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a38      	ldr	r2, [pc, #224]	; (8005b24 <HAL_RNG_Init+0x148>)
 8005a42:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a54:	f7fb fc10 	bl	8001278 <HAL_GetTick>
 8005a58:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005a5a:	e016      	b.n	8005a8a <HAL_RNG_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005a5c:	f7fb fc0c 	bl	8001278 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d90f      	bls.n	8005a8a <HAL_RNG_Init+0xae>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a78:	d107      	bne.n	8005a8a <HAL_RNG_Init+0xae>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e043      	b.n	8005b12 <HAL_RNG_Init+0x136>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a98:	d0e0      	beq.n	8005a5c <HAL_RNG_Init+0x80>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0204 	orr.w	r2, r2, #4
 8005aa8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d104      	bne.n	8005ac2 <HAL_RNG_Init+0xe6>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2204      	movs	r2, #4
 8005abc:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e027      	b.n	8005b12 <HAL_RNG_Init+0x136>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005ac2:	f7fb fbd9 	bl	8001278 <HAL_GetTick>
 8005ac6:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005ac8:	e015      	b.n	8005af6 <HAL_RNG_Init+0x11a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005aca:	f7fb fbd5 	bl	8001278 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d90e      	bls.n	8005af6 <HAL_RNG_Init+0x11a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d107      	bne.n	8005af6 <HAL_RNG_Init+0x11a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2204      	movs	r2, #4
 8005aea:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e00d      	b.n	8005b12 <HAL_RNG_Init+0x136>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d0e2      	beq.n	8005aca <HAL_RNG_Init+0xee>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	bfffffdf 	.word	0xbfffffdf
 8005b20:	17590abc 	.word	0x17590abc
 8005b24:	000caa74 	.word	0x000caa74

08005b28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d06a      	beq.n	8005c10 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fb f966 	bl	8000e20 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	22ca      	movs	r2, #202	; 0xca
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2253      	movs	r2, #83	; 0x53
 8005b6a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fb17 	bl	80061a0 <RTC_EnterInitMode>
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d13e      	bne.n	8005bfa <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6999      	ldr	r1, [r3, #24]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b25      	ldr	r3, [pc, #148]	; (8005c1c <HAL_RTC_Init+0xf4>)
 8005b88:	400b      	ands	r3, r1
 8005b8a:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	0419      	lsls	r1, r3, #16
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fb25 	bl	800620c <RTC_ExitInitMode>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d116      	bne.n	8005bfa <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8005bda:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6999      	ldr	r1, [r3, #24]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	22ff      	movs	r2, #255	; 0xff
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	fb8fffbf 	.word	0xfb8fffbf

08005c20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_RTC_SetTime+0x1a>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e089      	b.n	8005d4e <HAL_RTC_SetTime+0x12e>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	22ca      	movs	r2, #202	; 0xca
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2253      	movs	r2, #83	; 0x53
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 faa0 	bl	80061a0 <RTC_EnterInitMode>
 8005c60:	4603      	mov	r3, r0
 8005c62:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005c64:	7cfb      	ldrb	r3, [r7, #19]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d161      	bne.n	8005d2e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d126      	bne.n	8005cbe <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2200      	movs	r2, #0
 8005c82:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fafd 	bl	8006288 <RTC_ByteToBcd2>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 faf6 	bl	8006288 <RTC_ByteToBcd2>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005ca0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	789b      	ldrb	r3, [r3, #2]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 faee 	bl	8006288 <RTC_ByteToBcd2>
 8005cac:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cae:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	78db      	ldrb	r3, [r3, #3]
 8005cb6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e018      	b.n	8005cf0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005cde:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ce4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	78db      	ldrb	r3, [r3, #3]
 8005cea:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <HAL_RTC_SetTime+0x138>)
 8005cf8:	400b      	ands	r3, r1
 8005cfa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d0a:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6999      	ldr	r1, [r3, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fa71 	bl	800620c <RTC_ExitInitMode>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	22ff      	movs	r2, #255	; 0xff
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d103      	bne.n	8005d44 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005d4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd90      	pop	{r4, r7, pc}
 8005d56:	bf00      	nop
 8005d58:	007f7f7f 	.word	0x007f7f7f

08005d5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d5c:	b590      	push	{r4, r7, lr}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_RTC_SetDate+0x1a>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e073      	b.n	8005e5e <HAL_RTC_SetDate+0x102>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10e      	bne.n	8005daa <HAL_RTC_SetDate+0x4e>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	f023 0310 	bic.w	r3, r3, #16
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	330a      	adds	r3, #10
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d11c      	bne.n	8005dea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	78db      	ldrb	r3, [r3, #3]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fa67 	bl	8006288 <RTC_ByteToBcd2>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fa60 	bl	8006288 <RTC_ByteToBcd2>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dcc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	789b      	ldrb	r3, [r3, #2]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fa58 	bl	8006288 <RTC_ByteToBcd2>
 8005dd8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dda:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e00e      	b.n	8005e08 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	78db      	ldrb	r3, [r3, #3]
 8005dee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005df6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005dfc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	22ca      	movs	r2, #202	; 0xca
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2253      	movs	r2, #83	; 0x53
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f9c1 	bl	80061a0 <RTC_EnterInitMode>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005e22:	7cfb      	ldrb	r3, [r7, #19]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	6979      	ldr	r1, [r7, #20]
 8005e2e:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <HAL_RTC_SetDate+0x10c>)
 8005e30:	400b      	ands	r3, r1
 8005e32:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f9e9 	bl	800620c <RTC_ExitInitMode>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	22ff      	movs	r2, #255	; 0xff
 8005e44:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005e46:	7cfb      	ldrb	r3, [r7, #19]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d103      	bne.n	8005e54 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005e5c:	7cfb      	ldrb	r3, [r7, #19]


}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd90      	pop	{r4, r7, pc}
 8005e66:	bf00      	nop
 8005e68:	00ffff3f 	.word	0x00ffff3f

08005e6c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005e6c:	b590      	push	{r4, r7, lr}
 8005e6e:	b089      	sub	sp, #36	; 0x24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_RTC_SetAlarm_IT+0x1a>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e127      	b.n	80060d6 <HAL_RTC_SetAlarm_IT+0x26a>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if(Format == RTC_FORMAT_BIN)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d137      	bne.n	8005f0c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2200      	movs	r2, #0
 8005eae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 f9e7 	bl	8006288 <RTC_ByteToBcd2>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f9e0 	bl	8006288 <RTC_ByteToBcd2>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005ecc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	789b      	ldrb	r3, [r3, #2]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 f9d8 	bl	8006288 <RTC_ByteToBcd2>
 8005ed8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005eda:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	78db      	ldrb	r3, [r3, #3]
 8005ee2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8005ee4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f9ca 	bl	8006288 <RTC_ByteToBcd2>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8005ef8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005f00:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	e023      	b.n	8005f54 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005f2c:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8005f32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	78db      	ldrb	r3, [r3, #3]
 8005f38:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8005f3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f42:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8005f44:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8005f4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	22ca      	movs	r2, #202	; 0xca
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2253      	movs	r2, #83	; 0x53
 8005f6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f78:	d149      	bne.n	800600e <HAL_RTC_SetAlarm_IT+0x1a2>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f88:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0201 	orr.w	r2, r2, #1
 8005f98:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005f9a:	f7fb f96d 	bl	8001278 <HAL_GetTick>
 8005f9e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
 8005fa0:	e015      	b.n	8005fce <HAL_RTC_SetAlarm_IT+0x162>
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fa2:	f7fb f969 	bl	8001278 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fb0:	d90d      	bls.n	8005fce <HAL_RTC_SetAlarm_IT+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	22ff      	movs	r2, #255	; 0xff
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e083      	b.n	80060d6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0e2      	beq.n	8005fa2 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ffa:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800600a:	619a      	str	r2, [r3, #24]
 800600c:	e048      	b.n	80060a0 <HAL_RTC_SetAlarm_IT+0x234>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699a      	ldr	r2, [r3, #24]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800601c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f042 0202 	orr.w	r2, r2, #2
 800602c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800602e:	f7fb f923 	bl	8001278 <HAL_GetTick>
 8006032:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
 8006034:	e015      	b.n	8006062 <HAL_RTC_SetAlarm_IT+0x1f6>
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006036:	f7fb f91f 	bl	8001278 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006044:	d90d      	bls.n	8006062 <HAL_RTC_SetAlarm_IT+0x1f6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	22ff      	movs	r2, #255	; 0xff
 800604c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2203      	movs	r2, #3
 8006052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e039      	b.n	80060d6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0e2      	beq.n	8006036 <HAL_RTC_SetAlarm_IT+0x1ca>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800609e:	619a      	str	r2, [r3, #24]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80060a0:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <HAL_RTC_SetAlarm_IT+0x274>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0e      	ldr	r2, [pc, #56]	; (80060e0 <HAL_RTC_SetAlarm_IT+0x274>)
 80060a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060aa:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80060ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ba:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3724      	adds	r7, #36	; 0x24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd90      	pop	{r4, r7, pc}
 80060de:	bf00      	nop
 80060e0:	58000080 	.word	0x58000080

080060e4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80060ec:	4b13      	ldr	r3, [pc, #76]	; (800613c <HAL_RTC_AlarmIRQHandler+0x58>)
 80060ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060f2:	609a      	str	r2, [r3, #8]
#endif /* DUAL_CORE */

#if defined(RTC_MISR_ALRAMF)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	60fb      	str	r3, [r7, #12]

  if((tmp & RTC_MISR_ALRAMF) != 0u)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d006      	beq.n	8006114 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2201      	movs	r2, #1
 800610c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f816 	bl	8006140 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }
#endif /* RTC_MISR_ALRAMF */

#if defined(RTC_MISR_ALRBMF)
  if((tmp & RTC_MISR_ALRBMF) != 0u)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d006      	beq.n	800612c <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2202      	movs	r2, #2
 8006124:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8ce 	bl	80062c8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8006134:	bf00      	nop
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	58000080 	.word	0x58000080

08006140 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800616a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800616c:	f7fb f884 	bl	8001278 <HAL_GetTick>
 8006170:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006172:	e009      	b.n	8006188 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006174:	f7fb f880 	bl	8001278 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006182:	d901      	bls.n	8006188 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e007      	b.n	8006198 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0ee      	beq.n	8006174 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d123      	bne.n	8006202 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061ca:	f7fb f855 	bl	8001278 <HAL_GetTick>
 80061ce:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80061d0:	e00d      	b.n	80061ee <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80061d2:	f7fb f851 	bl	8001278 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e0:	d905      	bls.n	80061ee <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2203      	movs	r2, #3
 80061ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <RTC_EnterInitMode+0x62>
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d1e7      	bne.n	80061d2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006218:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <RTC_ExitInitMode+0x78>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4a19      	ldr	r2, [pc, #100]	; (8006284 <RTC_ExitInitMode+0x78>)
 800621e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006222:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006224:	4b17      	ldr	r3, [pc, #92]	; (8006284 <RTC_ExitInitMode+0x78>)
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10c      	bne.n	800624a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ff8f 	bl	8006154 <HAL_RTC_WaitForSynchro>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01e      	beq.n	800627a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2203      	movs	r2, #3
 8006240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	73fb      	strb	r3, [r7, #15]
 8006248:	e017      	b.n	800627a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800624a:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <RTC_ExitInitMode+0x78>)
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	4a0d      	ldr	r2, [pc, #52]	; (8006284 <RTC_ExitInitMode+0x78>)
 8006250:	f023 0320 	bic.w	r3, r3, #32
 8006254:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff ff7c 	bl	8006154 <HAL_RTC_WaitForSynchro>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2203      	movs	r2, #3
 8006266:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <RTC_ExitInitMode+0x78>)
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	4a04      	ldr	r2, [pc, #16]	; (8006284 <RTC_ExitInitMode+0x78>)
 8006274:	f043 0320 	orr.w	r3, r3, #32
 8006278:	6193      	str	r3, [r2, #24]
  }

  return status;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	58004000 	.word	0x58004000

08006288 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800629a:	e005      	b.n	80062a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80062a2:	7afb      	ldrb	r3, [r7, #11]
 80062a4:	3b0a      	subs	r3, #10
 80062a6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	2b09      	cmp	r3, #9
 80062ac:	d8f6      	bhi.n	800629c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	7afb      	ldrb	r3, [r7, #11]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	b2db      	uxtb	r3, r3
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e042      	b.n	8006374 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fa fdc5 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2224      	movs	r2, #36	; 0x24
 800630a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f8c2 	bl	80064a8 <UART_SetConfig>
 8006324:	4603      	mov	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e022      	b.n	8006374 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 ff14 	bl	8007164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800634a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800635a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 ff9b 	bl	80072a8 <UART_CheckIdleState>
 8006372:	4603      	mov	r3, r0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af02      	add	r7, sp, #8
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006392:	2b20      	cmp	r3, #32
 8006394:	f040 8083 	bne.w	800649e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_UART_Transmit+0x28>
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e07b      	b.n	80064a0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Transmit+0x3a>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e074      	b.n	80064a0 <HAL_UART_Transmit+0x124>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2221      	movs	r2, #33	; 0x21
 80063ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ce:	f7fa ff53 	bl	8001278 <HAL_GetTick>
 80063d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ec:	d108      	bne.n	8006400 <HAL_UART_Transmit+0x84>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	e003      	b.n	8006408 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006410:	e02c      	b.n	800646c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2200      	movs	r2, #0
 800641a:	2180      	movs	r1, #128	; 0x80
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 ff8e 	bl	800733e <UART_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e039      	b.n	80064a0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006440:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	3302      	adds	r3, #2
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	e007      	b.n	800645a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	781a      	ldrb	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	3301      	adds	r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1cc      	bne.n	8006412 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2200      	movs	r2, #0
 8006480:	2140      	movs	r1, #64	; 0x40
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 ff5b 	bl	800733e <UART_WaitOnFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e006      	b.n	80064a0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e000      	b.n	80064a0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800649e:	2302      	movs	r3, #2
  }
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3720      	adds	r7, #32
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a8:	b5b0      	push	{r4, r5, r7, lr}
 80064aa:	b08e      	sub	sp, #56	; 0x38
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	431a      	orrs	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4bbf      	ldr	r3, [pc, #764]	; (80067d4 <UART_SetConfig+0x32c>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6812      	ldr	r2, [r2, #0]
 80064dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064de:	430b      	orrs	r3, r1
 80064e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4ab5      	ldr	r2, [pc, #724]	; (80067d8 <UART_SetConfig+0x330>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800650e:	4313      	orrs	r3, r2
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	4bb0      	ldr	r3, [pc, #704]	; (80067dc <UART_SetConfig+0x334>)
 800651a:	4013      	ands	r3, r2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006522:	430b      	orrs	r3, r1
 8006524:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	f023 010f 	bic.w	r1, r3, #15
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4aa7      	ldr	r2, [pc, #668]	; (80067e0 <UART_SetConfig+0x338>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d176      	bne.n	8006634 <UART_SetConfig+0x18c>
 8006546:	4ba7      	ldr	r3, [pc, #668]	; (80067e4 <UART_SetConfig+0x33c>)
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800654e:	2b28      	cmp	r3, #40	; 0x28
 8006550:	d86c      	bhi.n	800662c <UART_SetConfig+0x184>
 8006552:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <UART_SetConfig+0xb0>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	080065fd 	.word	0x080065fd
 800655c:	0800662d 	.word	0x0800662d
 8006560:	0800662d 	.word	0x0800662d
 8006564:	0800662d 	.word	0x0800662d
 8006568:	0800662d 	.word	0x0800662d
 800656c:	0800662d 	.word	0x0800662d
 8006570:	0800662d 	.word	0x0800662d
 8006574:	0800662d 	.word	0x0800662d
 8006578:	08006605 	.word	0x08006605
 800657c:	0800662d 	.word	0x0800662d
 8006580:	0800662d 	.word	0x0800662d
 8006584:	0800662d 	.word	0x0800662d
 8006588:	0800662d 	.word	0x0800662d
 800658c:	0800662d 	.word	0x0800662d
 8006590:	0800662d 	.word	0x0800662d
 8006594:	0800662d 	.word	0x0800662d
 8006598:	0800660d 	.word	0x0800660d
 800659c:	0800662d 	.word	0x0800662d
 80065a0:	0800662d 	.word	0x0800662d
 80065a4:	0800662d 	.word	0x0800662d
 80065a8:	0800662d 	.word	0x0800662d
 80065ac:	0800662d 	.word	0x0800662d
 80065b0:	0800662d 	.word	0x0800662d
 80065b4:	0800662d 	.word	0x0800662d
 80065b8:	08006615 	.word	0x08006615
 80065bc:	0800662d 	.word	0x0800662d
 80065c0:	0800662d 	.word	0x0800662d
 80065c4:	0800662d 	.word	0x0800662d
 80065c8:	0800662d 	.word	0x0800662d
 80065cc:	0800662d 	.word	0x0800662d
 80065d0:	0800662d 	.word	0x0800662d
 80065d4:	0800662d 	.word	0x0800662d
 80065d8:	0800661d 	.word	0x0800661d
 80065dc:	0800662d 	.word	0x0800662d
 80065e0:	0800662d 	.word	0x0800662d
 80065e4:	0800662d 	.word	0x0800662d
 80065e8:	0800662d 	.word	0x0800662d
 80065ec:	0800662d 	.word	0x0800662d
 80065f0:	0800662d 	.word	0x0800662d
 80065f4:	0800662d 	.word	0x0800662d
 80065f8:	08006625 	.word	0x08006625
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006602:	e326      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006604:	2304      	movs	r3, #4
 8006606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800660a:	e322      	b.n	8006c52 <UART_SetConfig+0x7aa>
 800660c:	2308      	movs	r3, #8
 800660e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006612:	e31e      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006614:	2310      	movs	r3, #16
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	e31a      	b.n	8006c52 <UART_SetConfig+0x7aa>
 800661c:	2320      	movs	r3, #32
 800661e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006622:	e316      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006624:	2340      	movs	r3, #64	; 0x40
 8006626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662a:	e312      	b.n	8006c52 <UART_SetConfig+0x7aa>
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006632:	e30e      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a6b      	ldr	r2, [pc, #428]	; (80067e8 <UART_SetConfig+0x340>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d130      	bne.n	80066a0 <UART_SetConfig+0x1f8>
 800663e:	4b69      	ldr	r3, [pc, #420]	; (80067e4 <UART_SetConfig+0x33c>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	2b05      	cmp	r3, #5
 8006648:	d826      	bhi.n	8006698 <UART_SetConfig+0x1f0>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <UART_SetConfig+0x1a8>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006669 	.word	0x08006669
 8006654:	08006671 	.word	0x08006671
 8006658:	08006679 	.word	0x08006679
 800665c:	08006681 	.word	0x08006681
 8006660:	08006689 	.word	0x08006689
 8006664:	08006691 	.word	0x08006691
 8006668:	2300      	movs	r3, #0
 800666a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800666e:	e2f0      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006670:	2304      	movs	r3, #4
 8006672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006676:	e2ec      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006678:	2308      	movs	r3, #8
 800667a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800667e:	e2e8      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006680:	2310      	movs	r3, #16
 8006682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006686:	e2e4      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006688:	2320      	movs	r3, #32
 800668a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800668e:	e2e0      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006690:	2340      	movs	r3, #64	; 0x40
 8006692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006696:	e2dc      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006698:	2380      	movs	r3, #128	; 0x80
 800669a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800669e:	e2d8      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a51      	ldr	r2, [pc, #324]	; (80067ec <UART_SetConfig+0x344>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d130      	bne.n	800670c <UART_SetConfig+0x264>
 80066aa:	4b4e      	ldr	r3, [pc, #312]	; (80067e4 <UART_SetConfig+0x33c>)
 80066ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	d826      	bhi.n	8006704 <UART_SetConfig+0x25c>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <UART_SetConfig+0x214>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	080066d5 	.word	0x080066d5
 80066c0:	080066dd 	.word	0x080066dd
 80066c4:	080066e5 	.word	0x080066e5
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066fd 	.word	0x080066fd
 80066d4:	2300      	movs	r3, #0
 80066d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066da:	e2ba      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80066dc:	2304      	movs	r3, #4
 80066de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066e2:	e2b6      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80066e4:	2308      	movs	r3, #8
 80066e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ea:	e2b2      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80066ec:	2310      	movs	r3, #16
 80066ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066f2:	e2ae      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80066f4:	2320      	movs	r3, #32
 80066f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066fa:	e2aa      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80066fc:	2340      	movs	r3, #64	; 0x40
 80066fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006702:	e2a6      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006704:	2380      	movs	r3, #128	; 0x80
 8006706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800670a:	e2a2      	b.n	8006c52 <UART_SetConfig+0x7aa>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a37      	ldr	r2, [pc, #220]	; (80067f0 <UART_SetConfig+0x348>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d130      	bne.n	8006778 <UART_SetConfig+0x2d0>
 8006716:	4b33      	ldr	r3, [pc, #204]	; (80067e4 <UART_SetConfig+0x33c>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	2b05      	cmp	r3, #5
 8006720:	d826      	bhi.n	8006770 <UART_SetConfig+0x2c8>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x280>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	08006741 	.word	0x08006741
 800672c:	08006749 	.word	0x08006749
 8006730:	08006751 	.word	0x08006751
 8006734:	08006759 	.word	0x08006759
 8006738:	08006761 	.word	0x08006761
 800673c:	08006769 	.word	0x08006769
 8006740:	2300      	movs	r3, #0
 8006742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006746:	e284      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006748:	2304      	movs	r3, #4
 800674a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800674e:	e280      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006750:	2308      	movs	r3, #8
 8006752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006756:	e27c      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006758:	2310      	movs	r3, #16
 800675a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800675e:	e278      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006760:	2320      	movs	r3, #32
 8006762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006766:	e274      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006768:	2340      	movs	r3, #64	; 0x40
 800676a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800676e:	e270      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006776:	e26c      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <UART_SetConfig+0x34c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d142      	bne.n	8006808 <UART_SetConfig+0x360>
 8006782:	4b18      	ldr	r3, [pc, #96]	; (80067e4 <UART_SetConfig+0x33c>)
 8006784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b05      	cmp	r3, #5
 800678c:	d838      	bhi.n	8006800 <UART_SetConfig+0x358>
 800678e:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <UART_SetConfig+0x2ec>)
 8006790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006794:	080067ad 	.word	0x080067ad
 8006798:	080067b5 	.word	0x080067b5
 800679c:	080067bd 	.word	0x080067bd
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067f9 	.word	0x080067f9
 80067ac:	2300      	movs	r3, #0
 80067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b2:	e24e      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ba:	e24a      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067c2:	e246      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ca:	e242      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80067cc:	2320      	movs	r3, #32
 80067ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d2:	e23e      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80067d4:	cfff69f3 	.word	0xcfff69f3
 80067d8:	58000c00 	.word	0x58000c00
 80067dc:	11fff4ff 	.word	0x11fff4ff
 80067e0:	40011000 	.word	0x40011000
 80067e4:	58024400 	.word	0x58024400
 80067e8:	40004400 	.word	0x40004400
 80067ec:	40004800 	.word	0x40004800
 80067f0:	40004c00 	.word	0x40004c00
 80067f4:	40005000 	.word	0x40005000
 80067f8:	2340      	movs	r3, #64	; 0x40
 80067fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fe:	e228      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006800:	2380      	movs	r3, #128	; 0x80
 8006802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006806:	e224      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4ab1      	ldr	r2, [pc, #708]	; (8006ad4 <UART_SetConfig+0x62c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d176      	bne.n	8006900 <UART_SetConfig+0x458>
 8006812:	4bb1      	ldr	r3, [pc, #708]	; (8006ad8 <UART_SetConfig+0x630>)
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800681a:	2b28      	cmp	r3, #40	; 0x28
 800681c:	d86c      	bhi.n	80068f8 <UART_SetConfig+0x450>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <UART_SetConfig+0x37c>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	080068c9 	.word	0x080068c9
 8006828:	080068f9 	.word	0x080068f9
 800682c:	080068f9 	.word	0x080068f9
 8006830:	080068f9 	.word	0x080068f9
 8006834:	080068f9 	.word	0x080068f9
 8006838:	080068f9 	.word	0x080068f9
 800683c:	080068f9 	.word	0x080068f9
 8006840:	080068f9 	.word	0x080068f9
 8006844:	080068d1 	.word	0x080068d1
 8006848:	080068f9 	.word	0x080068f9
 800684c:	080068f9 	.word	0x080068f9
 8006850:	080068f9 	.word	0x080068f9
 8006854:	080068f9 	.word	0x080068f9
 8006858:	080068f9 	.word	0x080068f9
 800685c:	080068f9 	.word	0x080068f9
 8006860:	080068f9 	.word	0x080068f9
 8006864:	080068d9 	.word	0x080068d9
 8006868:	080068f9 	.word	0x080068f9
 800686c:	080068f9 	.word	0x080068f9
 8006870:	080068f9 	.word	0x080068f9
 8006874:	080068f9 	.word	0x080068f9
 8006878:	080068f9 	.word	0x080068f9
 800687c:	080068f9 	.word	0x080068f9
 8006880:	080068f9 	.word	0x080068f9
 8006884:	080068e1 	.word	0x080068e1
 8006888:	080068f9 	.word	0x080068f9
 800688c:	080068f9 	.word	0x080068f9
 8006890:	080068f9 	.word	0x080068f9
 8006894:	080068f9 	.word	0x080068f9
 8006898:	080068f9 	.word	0x080068f9
 800689c:	080068f9 	.word	0x080068f9
 80068a0:	080068f9 	.word	0x080068f9
 80068a4:	080068e9 	.word	0x080068e9
 80068a8:	080068f9 	.word	0x080068f9
 80068ac:	080068f9 	.word	0x080068f9
 80068b0:	080068f9 	.word	0x080068f9
 80068b4:	080068f9 	.word	0x080068f9
 80068b8:	080068f9 	.word	0x080068f9
 80068bc:	080068f9 	.word	0x080068f9
 80068c0:	080068f9 	.word	0x080068f9
 80068c4:	080068f1 	.word	0x080068f1
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ce:	e1c0      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80068d0:	2304      	movs	r3, #4
 80068d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068d6:	e1bc      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80068d8:	2308      	movs	r3, #8
 80068da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068de:	e1b8      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80068e0:	2310      	movs	r3, #16
 80068e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068e6:	e1b4      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80068e8:	2320      	movs	r3, #32
 80068ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ee:	e1b0      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80068f0:	2340      	movs	r3, #64	; 0x40
 80068f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f6:	e1ac      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068fe:	e1a8      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a75      	ldr	r2, [pc, #468]	; (8006adc <UART_SetConfig+0x634>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d130      	bne.n	800696c <UART_SetConfig+0x4c4>
 800690a:	4b73      	ldr	r3, [pc, #460]	; (8006ad8 <UART_SetConfig+0x630>)
 800690c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	2b05      	cmp	r3, #5
 8006914:	d826      	bhi.n	8006964 <UART_SetConfig+0x4bc>
 8006916:	a201      	add	r2, pc, #4	; (adr r2, 800691c <UART_SetConfig+0x474>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	08006935 	.word	0x08006935
 8006920:	0800693d 	.word	0x0800693d
 8006924:	08006945 	.word	0x08006945
 8006928:	0800694d 	.word	0x0800694d
 800692c:	08006955 	.word	0x08006955
 8006930:	0800695d 	.word	0x0800695d
 8006934:	2300      	movs	r3, #0
 8006936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800693a:	e18a      	b.n	8006c52 <UART_SetConfig+0x7aa>
 800693c:	2304      	movs	r3, #4
 800693e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006942:	e186      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006944:	2308      	movs	r3, #8
 8006946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800694a:	e182      	b.n	8006c52 <UART_SetConfig+0x7aa>
 800694c:	2310      	movs	r3, #16
 800694e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006952:	e17e      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006954:	2320      	movs	r3, #32
 8006956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800695a:	e17a      	b.n	8006c52 <UART_SetConfig+0x7aa>
 800695c:	2340      	movs	r3, #64	; 0x40
 800695e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006962:	e176      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006964:	2380      	movs	r3, #128	; 0x80
 8006966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800696a:	e172      	b.n	8006c52 <UART_SetConfig+0x7aa>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a5b      	ldr	r2, [pc, #364]	; (8006ae0 <UART_SetConfig+0x638>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d130      	bne.n	80069d8 <UART_SetConfig+0x530>
 8006976:	4b58      	ldr	r3, [pc, #352]	; (8006ad8 <UART_SetConfig+0x630>)
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	2b05      	cmp	r3, #5
 8006980:	d826      	bhi.n	80069d0 <UART_SetConfig+0x528>
 8006982:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <UART_SetConfig+0x4e0>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	080069a1 	.word	0x080069a1
 800698c:	080069a9 	.word	0x080069a9
 8006990:	080069b1 	.word	0x080069b1
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069c1 	.word	0x080069c1
 800699c:	080069c9 	.word	0x080069c9
 80069a0:	2300      	movs	r3, #0
 80069a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069a6:	e154      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ae:	e150      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069b6:	e14c      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069be:	e148      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80069c0:	2320      	movs	r3, #32
 80069c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069c6:	e144      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80069c8:	2340      	movs	r3, #64	; 0x40
 80069ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ce:	e140      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80069d0:	2380      	movs	r3, #128	; 0x80
 80069d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069d6:	e13c      	b.n	8006c52 <UART_SetConfig+0x7aa>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a41      	ldr	r2, [pc, #260]	; (8006ae4 <UART_SetConfig+0x63c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	f040 8082 	bne.w	8006ae8 <UART_SetConfig+0x640>
 80069e4:	4b3c      	ldr	r3, [pc, #240]	; (8006ad8 <UART_SetConfig+0x630>)
 80069e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ec:	2b28      	cmp	r3, #40	; 0x28
 80069ee:	d86d      	bhi.n	8006acc <UART_SetConfig+0x624>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <UART_SetConfig+0x550>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a9d 	.word	0x08006a9d
 80069fc:	08006acd 	.word	0x08006acd
 8006a00:	08006acd 	.word	0x08006acd
 8006a04:	08006acd 	.word	0x08006acd
 8006a08:	08006acd 	.word	0x08006acd
 8006a0c:	08006acd 	.word	0x08006acd
 8006a10:	08006acd 	.word	0x08006acd
 8006a14:	08006acd 	.word	0x08006acd
 8006a18:	08006aa5 	.word	0x08006aa5
 8006a1c:	08006acd 	.word	0x08006acd
 8006a20:	08006acd 	.word	0x08006acd
 8006a24:	08006acd 	.word	0x08006acd
 8006a28:	08006acd 	.word	0x08006acd
 8006a2c:	08006acd 	.word	0x08006acd
 8006a30:	08006acd 	.word	0x08006acd
 8006a34:	08006acd 	.word	0x08006acd
 8006a38:	08006aad 	.word	0x08006aad
 8006a3c:	08006acd 	.word	0x08006acd
 8006a40:	08006acd 	.word	0x08006acd
 8006a44:	08006acd 	.word	0x08006acd
 8006a48:	08006acd 	.word	0x08006acd
 8006a4c:	08006acd 	.word	0x08006acd
 8006a50:	08006acd 	.word	0x08006acd
 8006a54:	08006acd 	.word	0x08006acd
 8006a58:	08006ab5 	.word	0x08006ab5
 8006a5c:	08006acd 	.word	0x08006acd
 8006a60:	08006acd 	.word	0x08006acd
 8006a64:	08006acd 	.word	0x08006acd
 8006a68:	08006acd 	.word	0x08006acd
 8006a6c:	08006acd 	.word	0x08006acd
 8006a70:	08006acd 	.word	0x08006acd
 8006a74:	08006acd 	.word	0x08006acd
 8006a78:	08006abd 	.word	0x08006abd
 8006a7c:	08006acd 	.word	0x08006acd
 8006a80:	08006acd 	.word	0x08006acd
 8006a84:	08006acd 	.word	0x08006acd
 8006a88:	08006acd 	.word	0x08006acd
 8006a8c:	08006acd 	.word	0x08006acd
 8006a90:	08006acd 	.word	0x08006acd
 8006a94:	08006acd 	.word	0x08006acd
 8006a98:	08006ac5 	.word	0x08006ac5
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa2:	e0d6      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aaa:	e0d2      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ab2:	e0ce      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aba:	e0ca      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006abc:	2320      	movs	r3, #32
 8006abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac2:	e0c6      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006ac4:	2340      	movs	r3, #64	; 0x40
 8006ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aca:	e0c2      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006acc:	2380      	movs	r3, #128	; 0x80
 8006ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad2:	e0be      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006ad4:	40011400 	.word	0x40011400
 8006ad8:	58024400 	.word	0x58024400
 8006adc:	40007800 	.word	0x40007800
 8006ae0:	40007c00 	.word	0x40007c00
 8006ae4:	40011800 	.word	0x40011800
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4aad      	ldr	r2, [pc, #692]	; (8006da4 <UART_SetConfig+0x8fc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d176      	bne.n	8006be0 <UART_SetConfig+0x738>
 8006af2:	4bad      	ldr	r3, [pc, #692]	; (8006da8 <UART_SetConfig+0x900>)
 8006af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006afa:	2b28      	cmp	r3, #40	; 0x28
 8006afc:	d86c      	bhi.n	8006bd8 <UART_SetConfig+0x730>
 8006afe:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <UART_SetConfig+0x65c>)
 8006b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b04:	08006ba9 	.word	0x08006ba9
 8006b08:	08006bd9 	.word	0x08006bd9
 8006b0c:	08006bd9 	.word	0x08006bd9
 8006b10:	08006bd9 	.word	0x08006bd9
 8006b14:	08006bd9 	.word	0x08006bd9
 8006b18:	08006bd9 	.word	0x08006bd9
 8006b1c:	08006bd9 	.word	0x08006bd9
 8006b20:	08006bd9 	.word	0x08006bd9
 8006b24:	08006bb1 	.word	0x08006bb1
 8006b28:	08006bd9 	.word	0x08006bd9
 8006b2c:	08006bd9 	.word	0x08006bd9
 8006b30:	08006bd9 	.word	0x08006bd9
 8006b34:	08006bd9 	.word	0x08006bd9
 8006b38:	08006bd9 	.word	0x08006bd9
 8006b3c:	08006bd9 	.word	0x08006bd9
 8006b40:	08006bd9 	.word	0x08006bd9
 8006b44:	08006bb9 	.word	0x08006bb9
 8006b48:	08006bd9 	.word	0x08006bd9
 8006b4c:	08006bd9 	.word	0x08006bd9
 8006b50:	08006bd9 	.word	0x08006bd9
 8006b54:	08006bd9 	.word	0x08006bd9
 8006b58:	08006bd9 	.word	0x08006bd9
 8006b5c:	08006bd9 	.word	0x08006bd9
 8006b60:	08006bd9 	.word	0x08006bd9
 8006b64:	08006bc1 	.word	0x08006bc1
 8006b68:	08006bd9 	.word	0x08006bd9
 8006b6c:	08006bd9 	.word	0x08006bd9
 8006b70:	08006bd9 	.word	0x08006bd9
 8006b74:	08006bd9 	.word	0x08006bd9
 8006b78:	08006bd9 	.word	0x08006bd9
 8006b7c:	08006bd9 	.word	0x08006bd9
 8006b80:	08006bd9 	.word	0x08006bd9
 8006b84:	08006bc9 	.word	0x08006bc9
 8006b88:	08006bd9 	.word	0x08006bd9
 8006b8c:	08006bd9 	.word	0x08006bd9
 8006b90:	08006bd9 	.word	0x08006bd9
 8006b94:	08006bd9 	.word	0x08006bd9
 8006b98:	08006bd9 	.word	0x08006bd9
 8006b9c:	08006bd9 	.word	0x08006bd9
 8006ba0:	08006bd9 	.word	0x08006bd9
 8006ba4:	08006bd1 	.word	0x08006bd1
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bae:	e050      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bb6:	e04c      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bbe:	e048      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc6:	e044      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006bc8:	2320      	movs	r3, #32
 8006bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bce:	e040      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006bd0:	2340      	movs	r3, #64	; 0x40
 8006bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bd6:	e03c      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006bd8:	2380      	movs	r3, #128	; 0x80
 8006bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bde:	e038      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a71      	ldr	r2, [pc, #452]	; (8006dac <UART_SetConfig+0x904>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d130      	bne.n	8006c4c <UART_SetConfig+0x7a4>
 8006bea:	4b6f      	ldr	r3, [pc, #444]	; (8006da8 <UART_SetConfig+0x900>)
 8006bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	2b05      	cmp	r3, #5
 8006bf4:	d826      	bhi.n	8006c44 <UART_SetConfig+0x79c>
 8006bf6:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0x754>)
 8006bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfc:	08006c15 	.word	0x08006c15
 8006c00:	08006c1d 	.word	0x08006c1d
 8006c04:	08006c25 	.word	0x08006c25
 8006c08:	08006c2d 	.word	0x08006c2d
 8006c0c:	08006c35 	.word	0x08006c35
 8006c10:	08006c3d 	.word	0x08006c3d
 8006c14:	2302      	movs	r3, #2
 8006c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c1a:	e01a      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c22:	e016      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006c24:	2308      	movs	r3, #8
 8006c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c2a:	e012      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c32:	e00e      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006c34:	2320      	movs	r3, #32
 8006c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c3a:	e00a      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006c3c:	2340      	movs	r3, #64	; 0x40
 8006c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c42:	e006      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006c44:	2380      	movs	r3, #128	; 0x80
 8006c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c4a:	e002      	b.n	8006c52 <UART_SetConfig+0x7aa>
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a55      	ldr	r2, [pc, #340]	; (8006dac <UART_SetConfig+0x904>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	f040 80f0 	bne.w	8006e3e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	dc46      	bgt.n	8006cf4 <UART_SetConfig+0x84c>
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	db75      	blt.n	8006d56 <UART_SetConfig+0x8ae>
 8006c6a:	3b02      	subs	r3, #2
 8006c6c:	2b1e      	cmp	r3, #30
 8006c6e:	d872      	bhi.n	8006d56 <UART_SetConfig+0x8ae>
 8006c70:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <UART_SetConfig+0x7d0>)
 8006c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c76:	bf00      	nop
 8006c78:	08006cfb 	.word	0x08006cfb
 8006c7c:	08006d57 	.word	0x08006d57
 8006c80:	08006d03 	.word	0x08006d03
 8006c84:	08006d57 	.word	0x08006d57
 8006c88:	08006d57 	.word	0x08006d57
 8006c8c:	08006d57 	.word	0x08006d57
 8006c90:	08006d13 	.word	0x08006d13
 8006c94:	08006d57 	.word	0x08006d57
 8006c98:	08006d57 	.word	0x08006d57
 8006c9c:	08006d57 	.word	0x08006d57
 8006ca0:	08006d57 	.word	0x08006d57
 8006ca4:	08006d57 	.word	0x08006d57
 8006ca8:	08006d57 	.word	0x08006d57
 8006cac:	08006d57 	.word	0x08006d57
 8006cb0:	08006d23 	.word	0x08006d23
 8006cb4:	08006d57 	.word	0x08006d57
 8006cb8:	08006d57 	.word	0x08006d57
 8006cbc:	08006d57 	.word	0x08006d57
 8006cc0:	08006d57 	.word	0x08006d57
 8006cc4:	08006d57 	.word	0x08006d57
 8006cc8:	08006d57 	.word	0x08006d57
 8006ccc:	08006d57 	.word	0x08006d57
 8006cd0:	08006d57 	.word	0x08006d57
 8006cd4:	08006d57 	.word	0x08006d57
 8006cd8:	08006d57 	.word	0x08006d57
 8006cdc:	08006d57 	.word	0x08006d57
 8006ce0:	08006d57 	.word	0x08006d57
 8006ce4:	08006d57 	.word	0x08006d57
 8006ce8:	08006d57 	.word	0x08006d57
 8006cec:	08006d57 	.word	0x08006d57
 8006cf0:	08006d49 	.word	0x08006d49
 8006cf4:	2b40      	cmp	r3, #64	; 0x40
 8006cf6:	d02a      	beq.n	8006d4e <UART_SetConfig+0x8a6>
 8006cf8:	e02d      	b.n	8006d56 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006cfa:	f7fe f8fb 	bl	8004ef4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d00:	e02f      	b.n	8006d62 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d02:	f107 0314 	add.w	r3, r7, #20
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe f90a 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d10:	e027      	b.n	8006d62 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d12:	f107 0308 	add.w	r3, r7, #8
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fa56 	bl	80051c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d20:	e01f      	b.n	8006d62 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d22:	4b21      	ldr	r3, [pc, #132]	; (8006da8 <UART_SetConfig+0x900>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d2e:	4b1e      	ldr	r3, [pc, #120]	; (8006da8 <UART_SetConfig+0x900>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	08db      	lsrs	r3, r3, #3
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	4a1d      	ldr	r2, [pc, #116]	; (8006db0 <UART_SetConfig+0x908>)
 8006d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d40:	e00f      	b.n	8006d62 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006d42:	4b1b      	ldr	r3, [pc, #108]	; (8006db0 <UART_SetConfig+0x908>)
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d46:	e00c      	b.n	8006d62 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d48:	4b1a      	ldr	r3, [pc, #104]	; (8006db4 <UART_SetConfig+0x90c>)
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d4c:	e009      	b.n	8006d62 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d54:	e005      	b.n	8006d62 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006d60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 81e6 	beq.w	8007136 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	4a12      	ldr	r2, [pc, #72]	; (8006db8 <UART_SetConfig+0x910>)
 8006d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d7c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	6a3a      	ldr	r2, [r7, #32]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d305      	bcc.n	8006d9a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d94:	6a3a      	ldr	r2, [r7, #32]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d910      	bls.n	8006dbc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006da0:	e1c9      	b.n	8007136 <UART_SetConfig+0xc8e>
 8006da2:	bf00      	nop
 8006da4:	40011c00 	.word	0x40011c00
 8006da8:	58024400 	.word	0x58024400
 8006dac:	58000c00 	.word	0x58000c00
 8006db0:	03d09000 	.word	0x03d09000
 8006db4:	003d0900 	.word	0x003d0900
 8006db8:	08007840 	.word	0x08007840
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f04f 0100 	mov.w	r1, #0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	4ac1      	ldr	r2, [pc, #772]	; (80070d0 <UART_SetConfig+0xc28>)
 8006dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	f7f9 fa8a 	bl	80002ec <__aeabi_uldivmod>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4619      	mov	r1, r3
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	020b      	lsls	r3, r1, #8
 8006dea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dee:	0202      	lsls	r2, r0, #8
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	6849      	ldr	r1, [r1, #4]
 8006df4:	0849      	lsrs	r1, r1, #1
 8006df6:	4608      	mov	r0, r1
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	1814      	adds	r4, r2, r0
 8006dfe:	eb43 0501 	adc.w	r5, r3, r1
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	4629      	mov	r1, r5
 8006e10:	f7f9 fa6c 	bl	80002ec <__aeabi_uldivmod>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4613      	mov	r3, r2
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e22:	d308      	bcc.n	8006e36 <UART_SetConfig+0x98e>
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e2a:	d204      	bcs.n	8006e36 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	e17f      	b.n	8007136 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006e3c:	e17b      	b.n	8007136 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e46:	f040 80bd 	bne.w	8006fc4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8006e4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	dc48      	bgt.n	8006ee4 <UART_SetConfig+0xa3c>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	db7b      	blt.n	8006f4e <UART_SetConfig+0xaa6>
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	d879      	bhi.n	8006f4e <UART_SetConfig+0xaa6>
 8006e5a:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <UART_SetConfig+0x9b8>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006eeb 	.word	0x08006eeb
 8006e64:	08006ef3 	.word	0x08006ef3
 8006e68:	08006f4f 	.word	0x08006f4f
 8006e6c:	08006f4f 	.word	0x08006f4f
 8006e70:	08006efb 	.word	0x08006efb
 8006e74:	08006f4f 	.word	0x08006f4f
 8006e78:	08006f4f 	.word	0x08006f4f
 8006e7c:	08006f4f 	.word	0x08006f4f
 8006e80:	08006f0b 	.word	0x08006f0b
 8006e84:	08006f4f 	.word	0x08006f4f
 8006e88:	08006f4f 	.word	0x08006f4f
 8006e8c:	08006f4f 	.word	0x08006f4f
 8006e90:	08006f4f 	.word	0x08006f4f
 8006e94:	08006f4f 	.word	0x08006f4f
 8006e98:	08006f4f 	.word	0x08006f4f
 8006e9c:	08006f4f 	.word	0x08006f4f
 8006ea0:	08006f1b 	.word	0x08006f1b
 8006ea4:	08006f4f 	.word	0x08006f4f
 8006ea8:	08006f4f 	.word	0x08006f4f
 8006eac:	08006f4f 	.word	0x08006f4f
 8006eb0:	08006f4f 	.word	0x08006f4f
 8006eb4:	08006f4f 	.word	0x08006f4f
 8006eb8:	08006f4f 	.word	0x08006f4f
 8006ebc:	08006f4f 	.word	0x08006f4f
 8006ec0:	08006f4f 	.word	0x08006f4f
 8006ec4:	08006f4f 	.word	0x08006f4f
 8006ec8:	08006f4f 	.word	0x08006f4f
 8006ecc:	08006f4f 	.word	0x08006f4f
 8006ed0:	08006f4f 	.word	0x08006f4f
 8006ed4:	08006f4f 	.word	0x08006f4f
 8006ed8:	08006f4f 	.word	0x08006f4f
 8006edc:	08006f4f 	.word	0x08006f4f
 8006ee0:	08006f41 	.word	0x08006f41
 8006ee4:	2b40      	cmp	r3, #64	; 0x40
 8006ee6:	d02e      	beq.n	8006f46 <UART_SetConfig+0xa9e>
 8006ee8:	e031      	b.n	8006f4e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eea:	f7fc fca1 	bl	8003830 <HAL_RCC_GetPCLK1Freq>
 8006eee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ef0:	e033      	b.n	8006f5a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef2:	f7fc fcb3 	bl	800385c <HAL_RCC_GetPCLK2Freq>
 8006ef6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006ef8:	e02f      	b.n	8006f5a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006efa:	f107 0314 	add.w	r3, r7, #20
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe f80e 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f08:	e027      	b.n	8006f5a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f0a:	f107 0308 	add.w	r3, r7, #8
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe f95a 	bl	80051c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f18:	e01f      	b.n	8006f5a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f1a:	4b6e      	ldr	r3, [pc, #440]	; (80070d4 <UART_SetConfig+0xc2c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d009      	beq.n	8006f3a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f26:	4b6b      	ldr	r3, [pc, #428]	; (80070d4 <UART_SetConfig+0xc2c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	08db      	lsrs	r3, r3, #3
 8006f2c:	f003 0303 	and.w	r3, r3, #3
 8006f30:	4a69      	ldr	r2, [pc, #420]	; (80070d8 <UART_SetConfig+0xc30>)
 8006f32:	fa22 f303 	lsr.w	r3, r2, r3
 8006f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f38:	e00f      	b.n	8006f5a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006f3a:	4b67      	ldr	r3, [pc, #412]	; (80070d8 <UART_SetConfig+0xc30>)
 8006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f3e:	e00c      	b.n	8006f5a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f40:	4b66      	ldr	r3, [pc, #408]	; (80070dc <UART_SetConfig+0xc34>)
 8006f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f44:	e009      	b.n	8006f5a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f4c:	e005      	b.n	8006f5a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80ea 	beq.w	8007136 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	4a5a      	ldr	r2, [pc, #360]	; (80070d0 <UART_SetConfig+0xc28>)
 8006f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f74:	005a      	lsls	r2, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	441a      	add	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	2b0f      	cmp	r3, #15
 8006f8c:	d916      	bls.n	8006fbc <UART_SetConfig+0xb14>
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f94:	d212      	bcs.n	8006fbc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f023 030f 	bic.w	r3, r3, #15
 8006f9e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	085b      	lsrs	r3, r3, #1
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f003 0307 	and.w	r3, r3, #7
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006fb8:	60da      	str	r2, [r3, #12]
 8006fba:	e0bc      	b.n	8007136 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006fc2:	e0b8      	b.n	8007136 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	dc4b      	bgt.n	8007064 <UART_SetConfig+0xbbc>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f2c0 8087 	blt.w	80070e0 <UART_SetConfig+0xc38>
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	f200 8084 	bhi.w	80070e0 <UART_SetConfig+0xc38>
 8006fd8:	a201      	add	r2, pc, #4	; (adr r2, 8006fe0 <UART_SetConfig+0xb38>)
 8006fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fde:	bf00      	nop
 8006fe0:	0800706b 	.word	0x0800706b
 8006fe4:	08007073 	.word	0x08007073
 8006fe8:	080070e1 	.word	0x080070e1
 8006fec:	080070e1 	.word	0x080070e1
 8006ff0:	0800707b 	.word	0x0800707b
 8006ff4:	080070e1 	.word	0x080070e1
 8006ff8:	080070e1 	.word	0x080070e1
 8006ffc:	080070e1 	.word	0x080070e1
 8007000:	0800708b 	.word	0x0800708b
 8007004:	080070e1 	.word	0x080070e1
 8007008:	080070e1 	.word	0x080070e1
 800700c:	080070e1 	.word	0x080070e1
 8007010:	080070e1 	.word	0x080070e1
 8007014:	080070e1 	.word	0x080070e1
 8007018:	080070e1 	.word	0x080070e1
 800701c:	080070e1 	.word	0x080070e1
 8007020:	0800709b 	.word	0x0800709b
 8007024:	080070e1 	.word	0x080070e1
 8007028:	080070e1 	.word	0x080070e1
 800702c:	080070e1 	.word	0x080070e1
 8007030:	080070e1 	.word	0x080070e1
 8007034:	080070e1 	.word	0x080070e1
 8007038:	080070e1 	.word	0x080070e1
 800703c:	080070e1 	.word	0x080070e1
 8007040:	080070e1 	.word	0x080070e1
 8007044:	080070e1 	.word	0x080070e1
 8007048:	080070e1 	.word	0x080070e1
 800704c:	080070e1 	.word	0x080070e1
 8007050:	080070e1 	.word	0x080070e1
 8007054:	080070e1 	.word	0x080070e1
 8007058:	080070e1 	.word	0x080070e1
 800705c:	080070e1 	.word	0x080070e1
 8007060:	080070c1 	.word	0x080070c1
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d02e      	beq.n	80070c6 <UART_SetConfig+0xc1e>
 8007068:	e03a      	b.n	80070e0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800706a:	f7fc fbe1 	bl	8003830 <HAL_RCC_GetPCLK1Freq>
 800706e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007070:	e03c      	b.n	80070ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007072:	f7fc fbf3 	bl	800385c <HAL_RCC_GetPCLK2Freq>
 8007076:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007078:	e038      	b.n	80070ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800707a:	f107 0314 	add.w	r3, r7, #20
 800707e:	4618      	mov	r0, r3
 8007080:	f7fd ff4e 	bl	8004f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007088:	e030      	b.n	80070ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800708a:	f107 0308 	add.w	r3, r7, #8
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe f89a 	bl	80051c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007098:	e028      	b.n	80070ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800709a:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <UART_SetConfig+0xc2c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070a6:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <UART_SetConfig+0xc2c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	08db      	lsrs	r3, r3, #3
 80070ac:	f003 0303 	and.w	r3, r3, #3
 80070b0:	4a09      	ldr	r2, [pc, #36]	; (80070d8 <UART_SetConfig+0xc30>)
 80070b2:	fa22 f303 	lsr.w	r3, r2, r3
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070b8:	e018      	b.n	80070ec <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80070ba:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <UART_SetConfig+0xc30>)
 80070bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070be:	e015      	b.n	80070ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <UART_SetConfig+0xc34>)
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070c4:	e012      	b.n	80070ec <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070cc:	e00e      	b.n	80070ec <UART_SetConfig+0xc44>
 80070ce:	bf00      	nop
 80070d0:	08007840 	.word	0x08007840
 80070d4:	58024400 	.word	0x58024400
 80070d8:	03d09000 	.word	0x03d09000
 80070dc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80070ea:	bf00      	nop
    }

    if (pclk != 0U)
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d021      	beq.n	8007136 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	4a1a      	ldr	r2, [pc, #104]	; (8007160 <UART_SetConfig+0xcb8>)
 80070f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	fbb3 f2f2 	udiv	r2, r3, r2
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	441a      	add	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	fbb2 f3f3 	udiv	r3, r2, r3
 8007114:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	2b0f      	cmp	r3, #15
 800711a:	d909      	bls.n	8007130 <UART_SetConfig+0xc88>
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007122:	d205      	bcs.n	8007130 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	b29a      	uxth	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60da      	str	r2, [r3, #12]
 800712e:	e002      	b.n	8007136 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007152:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007156:	4618      	mov	r0, r3
 8007158:	3738      	adds	r7, #56	; 0x38
 800715a:	46bd      	mov	sp, r7
 800715c:	bdb0      	pop	{r4, r5, r7, pc}
 800715e:	bf00      	nop
 8007160:	08007840 	.word	0x08007840

08007164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01a      	beq.n	800727a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007262:	d10a      	bne.n	800727a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	605a      	str	r2, [r3, #4]
  }
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072b8:	f7f9 ffde 	bl	8001278 <HAL_GetTick>
 80072bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0308 	and.w	r3, r3, #8
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d10e      	bne.n	80072ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f82f 	bl	800733e <UART_WaitOnFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e025      	b.n	8007336 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d10e      	bne.n	8007316 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f819 	bl	800733e <UART_WaitOnFlagUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e00f      	b.n	8007336 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b09c      	sub	sp, #112	; 0x70
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	603b      	str	r3, [r7, #0]
 800734a:	4613      	mov	r3, r2
 800734c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800734e:	e0a9      	b.n	80074a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007356:	f000 80a5 	beq.w	80074a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735a:	f7f9 ff8d 	bl	8001278 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007366:	429a      	cmp	r2, r3
 8007368:	d302      	bcc.n	8007370 <UART_WaitOnFlagUntilTimeout+0x32>
 800736a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800736c:	2b00      	cmp	r3, #0
 800736e:	d140      	bne.n	80073f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800737e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007384:	667b      	str	r3, [r7, #100]	; 0x64
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800738e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007390:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800739c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e6      	bne.n	8007370 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3308      	adds	r3, #8
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	663b      	str	r3, [r7, #96]	; 0x60
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80073c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e5      	bne.n	80073a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e069      	b.n	80074c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d051      	beq.n	80074a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800740a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800740e:	d149      	bne.n	80074a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007418:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800742e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
 800743a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800743e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3308      	adds	r3, #8
 8007452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	613b      	str	r3, [r7, #16]
   return(result);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	66bb      	str	r3, [r7, #104]	; 0x68
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800746c:	623a      	str	r2, [r7, #32]
 800746e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	69f9      	ldr	r1, [r7, #28]
 8007472:	6a3a      	ldr	r2, [r7, #32]
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	61bb      	str	r3, [r7, #24]
   return(result);
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e5      	bne.n	800744c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2220      	movs	r2, #32
 800748c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e010      	b.n	80074c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	69da      	ldr	r2, [r3, #28]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	4013      	ands	r3, r2
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	bf0c      	ite	eq
 80074b4:	2301      	moveq	r3, #1
 80074b6:	2300      	movne	r3, #0
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	461a      	mov	r2, r3
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	429a      	cmp	r2, r3
 80074c0:	f43f af46 	beq.w	8007350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3770      	adds	r7, #112	; 0x70
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b085      	sub	sp, #20
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e027      	b.n	8007534 <HAL_UARTEx_DisableFifoMode+0x66>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2224      	movs	r2, #36	; 0x24
 80074f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007512:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007550:	2b01      	cmp	r3, #1
 8007552:	d101      	bne.n	8007558 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007554:	2302      	movs	r3, #2
 8007556:	e02d      	b.n	80075b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2224      	movs	r2, #36	; 0x24
 8007564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f84f 	bl	8007638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075d0:	2302      	movs	r3, #2
 80075d2:	e02d      	b.n	8007630 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2224      	movs	r2, #36	; 0x24
 80075e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0201 	bic.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f811 	bl	8007638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007644:	2b00      	cmp	r3, #0
 8007646:	d108      	bne.n	800765a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007658:	e031      	b.n	80076be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800765a:	2310      	movs	r3, #16
 800765c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800765e:	2310      	movs	r3, #16
 8007660:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	0e5b      	lsrs	r3, r3, #25
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	0f5b      	lsrs	r3, r3, #29
 800767a:	b2db      	uxtb	r3, r3
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	7b3a      	ldrb	r2, [r7, #12]
 8007686:	4911      	ldr	r1, [pc, #68]	; (80076cc <UARTEx_SetNbDataToProcess+0x94>)
 8007688:	5c8a      	ldrb	r2, [r1, r2]
 800768a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800768e:	7b3a      	ldrb	r2, [r7, #12]
 8007690:	490f      	ldr	r1, [pc, #60]	; (80076d0 <UARTEx_SetNbDataToProcess+0x98>)
 8007692:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007694:	fb93 f3f2 	sdiv	r3, r3, r2
 8007698:	b29a      	uxth	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	7b7a      	ldrb	r2, [r7, #13]
 80076a4:	4909      	ldr	r1, [pc, #36]	; (80076cc <UARTEx_SetNbDataToProcess+0x94>)
 80076a6:	5c8a      	ldrb	r2, [r1, r2]
 80076a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076ac:	7b7a      	ldrb	r2, [r7, #13]
 80076ae:	4908      	ldr	r1, [pc, #32]	; (80076d0 <UARTEx_SetNbDataToProcess+0x98>)
 80076b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	08007858 	.word	0x08007858
 80076d0:	08007860 	.word	0x08007860

080076d4 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e016      	b.n	8007714 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7f9 fc38 	bl	8000f5c <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076f8:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	ea42 0103 	orr.w	r1, r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	68d2      	ldr	r2, [r2, #12]
 800772c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800774e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007752:	d10e      	bne.n	8007772 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b01      	cmp	r3, #1
 8007760:	d107      	bne.n	8007772 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f06f 0201 	mvn.w	r2, #1
 800776a:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7f9 fa87 	bl	8000c80 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <__libc_init_array>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	4d0d      	ldr	r5, [pc, #52]	; (80077b4 <__libc_init_array+0x38>)
 8007780:	4c0d      	ldr	r4, [pc, #52]	; (80077b8 <__libc_init_array+0x3c>)
 8007782:	1b64      	subs	r4, r4, r5
 8007784:	10a4      	asrs	r4, r4, #2
 8007786:	2600      	movs	r6, #0
 8007788:	42a6      	cmp	r6, r4
 800778a:	d109      	bne.n	80077a0 <__libc_init_array+0x24>
 800778c:	4d0b      	ldr	r5, [pc, #44]	; (80077bc <__libc_init_array+0x40>)
 800778e:	4c0c      	ldr	r4, [pc, #48]	; (80077c0 <__libc_init_array+0x44>)
 8007790:	f000 f820 	bl	80077d4 <_init>
 8007794:	1b64      	subs	r4, r4, r5
 8007796:	10a4      	asrs	r4, r4, #2
 8007798:	2600      	movs	r6, #0
 800779a:	42a6      	cmp	r6, r4
 800779c:	d105      	bne.n	80077aa <__libc_init_array+0x2e>
 800779e:	bd70      	pop	{r4, r5, r6, pc}
 80077a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a4:	4798      	blx	r3
 80077a6:	3601      	adds	r6, #1
 80077a8:	e7ee      	b.n	8007788 <__libc_init_array+0xc>
 80077aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ae:	4798      	blx	r3
 80077b0:	3601      	adds	r6, #1
 80077b2:	e7f2      	b.n	800779a <__libc_init_array+0x1e>
 80077b4:	08007870 	.word	0x08007870
 80077b8:	08007870 	.word	0x08007870
 80077bc:	08007870 	.word	0x08007870
 80077c0:	08007874 	.word	0x08007874

080077c4 <memset>:
 80077c4:	4402      	add	r2, r0
 80077c6:	4603      	mov	r3, r0
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d100      	bne.n	80077ce <memset+0xa>
 80077cc:	4770      	bx	lr
 80077ce:	f803 1b01 	strb.w	r1, [r3], #1
 80077d2:	e7f9      	b.n	80077c8 <memset+0x4>

080077d4 <_init>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr

080077e0 <_fini>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr
