
CubeMX_Workspace_temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080087d4  080087d4  000187d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008880  08008880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  08008888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011ec  24000090  08008918  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400127c  08008918  0002127c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024831  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ae9  00000000  00000000  000448ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001228  00000000  00000000  000483d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001110  00000000  00000000  00049600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033199  00000000  00000000  0004a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016c2f  00000000  00000000  0007d8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00150ed7  00000000  00000000  000944d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e53af  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000501c  00000000  00000000  001e5404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000090 	.word	0x24000090
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080087bc 	.word	0x080087bc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000094 	.word	0x24000094
 80002ec:	080087bc 	.word	0x080087bc

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b96e 	b.w	8000694 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468c      	mov	ip, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8083 	bne.w	80004e6 <__udivmoddi4+0x116>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d947      	bls.n	8000476 <__udivmoddi4+0xa6>
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	b142      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ec:	f1c2 0020 	rsb	r0, r2, #32
 80003f0:	fa24 f000 	lsr.w	r0, r4, r0
 80003f4:	4091      	lsls	r1, r2
 80003f6:	4097      	lsls	r7, r2
 80003f8:	ea40 0c01 	orr.w	ip, r0, r1
 80003fc:	4094      	lsls	r4, r2
 80003fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fbbc f6f8 	udiv	r6, ip, r8
 8000408:	fa1f fe87 	uxth.w	lr, r7
 800040c:	fb08 c116 	mls	r1, r8, r6, ip
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb06 f10e 	mul.w	r1, r6, lr
 8000418:	4299      	cmp	r1, r3
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x60>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000422:	f080 8119 	bcs.w	8000658 <__udivmoddi4+0x288>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 8116 	bls.w	8000658 <__udivmoddi4+0x288>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3310 	mls	r3, r8, r0, r3
 800043c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x8c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	f080 8105 	bcs.w	800065c <__udivmoddi4+0x28c>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f240 8102 	bls.w	800065c <__udivmoddi4+0x28c>
 8000458:	3802      	subs	r0, #2
 800045a:	443c      	add	r4, r7
 800045c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	2600      	movs	r6, #0
 8000466:	b11d      	cbz	r5, 8000470 <__udivmoddi4+0xa0>
 8000468:	40d4      	lsrs	r4, r2
 800046a:	2300      	movs	r3, #0
 800046c:	e9c5 4300 	strd	r4, r3, [r5]
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	b902      	cbnz	r2, 800047a <__udivmoddi4+0xaa>
 8000478:	deff      	udf	#255	; 0xff
 800047a:	fab2 f282 	clz	r2, r2
 800047e:	2a00      	cmp	r2, #0
 8000480:	d150      	bne.n	8000524 <__udivmoddi4+0x154>
 8000482:	1bcb      	subs	r3, r1, r7
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	fa1f f887 	uxth.w	r8, r7
 800048c:	2601      	movs	r6, #1
 800048e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000492:	0c21      	lsrs	r1, r4, #16
 8000494:	fb0e 331c 	mls	r3, lr, ip, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb08 f30c 	mul.w	r3, r8, ip
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0xe4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0xe2>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	f200 80e9 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004b2:	4684      	mov	ip, r0
 80004b4:	1ac9      	subs	r1, r1, r3
 80004b6:	b2a3      	uxth	r3, r4
 80004b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004c4:	fb08 f800 	mul.w	r8, r8, r0
 80004c8:	45a0      	cmp	r8, r4
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x10c>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x10a>
 80004d4:	45a0      	cmp	r8, r4
 80004d6:	f200 80d9 	bhi.w	800068c <__udivmoddi4+0x2bc>
 80004da:	4618      	mov	r0, r3
 80004dc:	eba4 0408 	sub.w	r4, r4, r8
 80004e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004e4:	e7bf      	b.n	8000466 <__udivmoddi4+0x96>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d909      	bls.n	80004fe <__udivmoddi4+0x12e>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	f000 80b1 	beq.w	8000652 <__udivmoddi4+0x282>
 80004f0:	2600      	movs	r6, #0
 80004f2:	e9c5 0100 	strd	r0, r1, [r5]
 80004f6:	4630      	mov	r0, r6
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	fab3 f683 	clz	r6, r3
 8000502:	2e00      	cmp	r6, #0
 8000504:	d14a      	bne.n	800059c <__udivmoddi4+0x1cc>
 8000506:	428b      	cmp	r3, r1
 8000508:	d302      	bcc.n	8000510 <__udivmoddi4+0x140>
 800050a:	4282      	cmp	r2, r0
 800050c:	f200 80b8 	bhi.w	8000680 <__udivmoddi4+0x2b0>
 8000510:	1a84      	subs	r4, r0, r2
 8000512:	eb61 0103 	sbc.w	r1, r1, r3
 8000516:	2001      	movs	r0, #1
 8000518:	468c      	mov	ip, r1
 800051a:	2d00      	cmp	r5, #0
 800051c:	d0a8      	beq.n	8000470 <__udivmoddi4+0xa0>
 800051e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000522:	e7a5      	b.n	8000470 <__udivmoddi4+0xa0>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f603 	lsr.w	r6, r0, r3
 800052c:	4097      	lsls	r7, r2
 800052e:	fa01 f002 	lsl.w	r0, r1, r2
 8000532:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000536:	40d9      	lsrs	r1, r3
 8000538:	4330      	orrs	r0, r6
 800053a:	0c03      	lsrs	r3, r0, #16
 800053c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000540:	fa1f f887 	uxth.w	r8, r7
 8000544:	fb0e 1116 	mls	r1, lr, r6, r1
 8000548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054c:	fb06 f108 	mul.w	r1, r6, r8
 8000550:	4299      	cmp	r1, r3
 8000552:	fa04 f402 	lsl.w	r4, r4, r2
 8000556:	d909      	bls.n	800056c <__udivmoddi4+0x19c>
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	f106 3cff 	add.w	ip, r6, #4294967295
 800055e:	f080 808d 	bcs.w	800067c <__udivmoddi4+0x2ac>
 8000562:	4299      	cmp	r1, r3
 8000564:	f240 808a 	bls.w	800067c <__udivmoddi4+0x2ac>
 8000568:	3e02      	subs	r6, #2
 800056a:	443b      	add	r3, r7
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b281      	uxth	r1, r0
 8000570:	fbb3 f0fe 	udiv	r0, r3, lr
 8000574:	fb0e 3310 	mls	r3, lr, r0, r3
 8000578:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057c:	fb00 f308 	mul.w	r3, r0, r8
 8000580:	428b      	cmp	r3, r1
 8000582:	d907      	bls.n	8000594 <__udivmoddi4+0x1c4>
 8000584:	1879      	adds	r1, r7, r1
 8000586:	f100 3cff 	add.w	ip, r0, #4294967295
 800058a:	d273      	bcs.n	8000674 <__udivmoddi4+0x2a4>
 800058c:	428b      	cmp	r3, r1
 800058e:	d971      	bls.n	8000674 <__udivmoddi4+0x2a4>
 8000590:	3802      	subs	r0, #2
 8000592:	4439      	add	r1, r7
 8000594:	1acb      	subs	r3, r1, r3
 8000596:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800059a:	e778      	b.n	800048e <__udivmoddi4+0xbe>
 800059c:	f1c6 0c20 	rsb	ip, r6, #32
 80005a0:	fa03 f406 	lsl.w	r4, r3, r6
 80005a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005a8:	431c      	orrs	r4, r3
 80005aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ae:	fa01 f306 	lsl.w	r3, r1, r6
 80005b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ba:	431f      	orrs	r7, r3
 80005bc:	0c3b      	lsrs	r3, r7, #16
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fa1f f884 	uxth.w	r8, r4
 80005c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ce:	fb09 fa08 	mul.w	sl, r9, r8
 80005d2:	458a      	cmp	sl, r1
 80005d4:	fa02 f206 	lsl.w	r2, r2, r6
 80005d8:	fa00 f306 	lsl.w	r3, r0, r6
 80005dc:	d908      	bls.n	80005f0 <__udivmoddi4+0x220>
 80005de:	1861      	adds	r1, r4, r1
 80005e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005e4:	d248      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 80005e6:	458a      	cmp	sl, r1
 80005e8:	d946      	bls.n	8000678 <__udivmoddi4+0x2a8>
 80005ea:	f1a9 0902 	sub.w	r9, r9, #2
 80005ee:	4421      	add	r1, r4
 80005f0:	eba1 010a 	sub.w	r1, r1, sl
 80005f4:	b2bf      	uxth	r7, r7
 80005f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000602:	fb00 f808 	mul.w	r8, r0, r8
 8000606:	45b8      	cmp	r8, r7
 8000608:	d907      	bls.n	800061a <__udivmoddi4+0x24a>
 800060a:	19e7      	adds	r7, r4, r7
 800060c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000610:	d22e      	bcs.n	8000670 <__udivmoddi4+0x2a0>
 8000612:	45b8      	cmp	r8, r7
 8000614:	d92c      	bls.n	8000670 <__udivmoddi4+0x2a0>
 8000616:	3802      	subs	r0, #2
 8000618:	4427      	add	r7, r4
 800061a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800061e:	eba7 0708 	sub.w	r7, r7, r8
 8000622:	fba0 8902 	umull	r8, r9, r0, r2
 8000626:	454f      	cmp	r7, r9
 8000628:	46c6      	mov	lr, r8
 800062a:	4649      	mov	r1, r9
 800062c:	d31a      	bcc.n	8000664 <__udivmoddi4+0x294>
 800062e:	d017      	beq.n	8000660 <__udivmoddi4+0x290>
 8000630:	b15d      	cbz	r5, 800064a <__udivmoddi4+0x27a>
 8000632:	ebb3 020e 	subs.w	r2, r3, lr
 8000636:	eb67 0701 	sbc.w	r7, r7, r1
 800063a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800063e:	40f2      	lsrs	r2, r6
 8000640:	ea4c 0202 	orr.w	r2, ip, r2
 8000644:	40f7      	lsrs	r7, r6
 8000646:	e9c5 2700 	strd	r2, r7, [r5]
 800064a:	2600      	movs	r6, #0
 800064c:	4631      	mov	r1, r6
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e70b      	b.n	8000470 <__udivmoddi4+0xa0>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e9      	b.n	8000430 <__udivmoddi4+0x60>
 800065c:	4618      	mov	r0, r3
 800065e:	e6fd      	b.n	800045c <__udivmoddi4+0x8c>
 8000660:	4543      	cmp	r3, r8
 8000662:	d2e5      	bcs.n	8000630 <__udivmoddi4+0x260>
 8000664:	ebb8 0e02 	subs.w	lr, r8, r2
 8000668:	eb69 0104 	sbc.w	r1, r9, r4
 800066c:	3801      	subs	r0, #1
 800066e:	e7df      	b.n	8000630 <__udivmoddi4+0x260>
 8000670:	4608      	mov	r0, r1
 8000672:	e7d2      	b.n	800061a <__udivmoddi4+0x24a>
 8000674:	4660      	mov	r0, ip
 8000676:	e78d      	b.n	8000594 <__udivmoddi4+0x1c4>
 8000678:	4681      	mov	r9, r0
 800067a:	e7b9      	b.n	80005f0 <__udivmoddi4+0x220>
 800067c:	4666      	mov	r6, ip
 800067e:	e775      	b.n	800056c <__udivmoddi4+0x19c>
 8000680:	4630      	mov	r0, r6
 8000682:	e74a      	b.n	800051a <__udivmoddi4+0x14a>
 8000684:	f1ac 0c02 	sub.w	ip, ip, #2
 8000688:	4439      	add	r1, r7
 800068a:	e713      	b.n	80004b4 <__udivmoddi4+0xe4>
 800068c:	3802      	subs	r0, #2
 800068e:	443c      	add	r4, r7
 8000690:	e724      	b.n	80004dc <__udivmoddi4+0x10c>
 8000692:	bf00      	nop

08000694 <__aeabi_idiv0>:
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Use local
	uint32_t holdMultipleRead[DATA_READ_LOOP] = {0};
 80006a2:	4b31      	ldr	r3, [pc, #196]	; (8000768 <main+0xd0>)
 80006a4:	f241 0248 	movw	r2, #4168	; 0x1048
 80006a8:	443a      	add	r2, r7
 80006aa:	4413      	add	r3, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	461a      	mov	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f007 fc4b 	bl	8007f50 <memset>

	for(int i=0; i<DATA_TRANSMIT_LENGTH; i++){
 80006ba:	2300      	movs	r3, #0
 80006bc:	f241 0244 	movw	r2, #4164	; 0x1044
 80006c0:	443a      	add	r2, r7
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	e014      	b.n	80006f0 <main+0x58>
		buffer_tfs[i] = i;
 80006c6:	f241 0344 	movw	r3, #4164	; 0x1044
 80006ca:	443b      	add	r3, r7
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	b299      	uxth	r1, r3
 80006d0:	4a26      	ldr	r2, [pc, #152]	; (800076c <main+0xd4>)
 80006d2:	f241 0344 	movw	r3, #4164	; 0x1044
 80006d6:	443b      	add	r3, r7
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<DATA_TRANSMIT_LENGTH; i++){
 80006de:	f241 0344 	movw	r3, #4164	; 0x1044
 80006e2:	443b      	add	r3, r7
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	f241 0244 	movw	r2, #4164	; 0x1044
 80006ec:	443a      	add	r2, r7
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	f241 0344 	movw	r3, #4164	; 0x1044
 80006f4:	443b      	add	r3, r7
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006fc:	dbe3      	blt.n	80006c6 <main+0x2e>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f000 feb7 	bl	8001470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f839 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f000 f9cf 	bl	8000aa8 <MX_GPIO_Init>
  MX_ADC2_Init();
 800070a:	f000 f8b3 	bl	8000874 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 800070e:	f000 f97f 	bl	8000a10 <MX_USART3_UART_Init>
  MX_RNG_Init();
 8000712:	f000 f915 	bl	8000940 <MX_RNG_Init>
  MX_RTC_Init();
 8000716:	f000 f929 	bl	800096c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc2);
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <main+0xd8>)
 800071c:	f001 fa7a 	bl	8001c14 <HAL_ADC_Start>
  char time[30];
  char date[30];

  /* set time, date & alarm */
  set_time_custom();
 8000720:	f000 fae4 	bl	8000cec <set_time_custom>
  set_date_custom();
 8000724:	f000 fb2c 	bl	8000d80 <set_date_custom>
  set_alarm_custom();
 8000728:	f000 fb3c 	bl	8000da4 <set_alarm_custom>

  /* clear the flash */
  FLASH_clear();
 800072c:	f000 fc1a 	bl	8000f64 <FLASH_clear>

  /* write the flash */
  FLASH_write();
 8000730:	f000 fbce 	bl	8000ed0 <FLASH_write>

  /* Read from the flash memory */
  FLASH_Read(rcv_address, &holdMultipleRead[0], DATA_READ_LOOP);
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <main+0xdc>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <main+0xd0>)
 800073a:	f241 0248 	movw	r2, #4168	; 0x1048
 800073e:	443a      	add	r2, r7
 8000740:	4413      	add	r3, r2
 8000742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000746:	4619      	mov	r1, r3
 8000748:	f000 fb62 	bl	8000e10 <FLASH_Read>

  /* print the readed data */
  Print_readed_data(holdMultipleRead);
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <main+0xd0>)
 800074e:	f241 0248 	movw	r2, #4168	; 0x1048
 8000752:	443a      	add	r2, r7
 8000754:	4413      	add	r3, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fb7a 	bl	8000e50 <Print_readed_data>
//	HAL_UART_Transmit(&huart3, (uint8_t*)time, strlen(time), 500);
//
//	HAL_UART_Transmit(&huart3, "\n", 1, 100);


	HAL_Delay(1000);
 800075c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000760:	f000 ff18 	bl	8001594 <HAL_Delay>
 8000764:	e7fa      	b.n	800075c <main+0xc4>
 8000766:	bf00      	nop
 8000768:	ffffeffc 	.word	0xffffeffc
 800076c:	240000ac 	.word	0x240000ac
 8000770:	24001170 	.word	0x24001170
 8000774:	24000018 	.word	0x24000018

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09c      	sub	sp, #112	; 0x70
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	224c      	movs	r2, #76	; 0x4c
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f007 fbe2 	bl	8007f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2220      	movs	r2, #32
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f007 fbdc 	bl	8007f50 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000798:	4b34      	ldr	r3, [pc, #208]	; (800086c <SystemClock_Config+0xf4>)
 800079a:	f04f 32ff 	mov.w	r2, #4294967295
 800079e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007a2:	2004      	movs	r0, #4
 80007a4:	f002 fcf8 	bl	8003198 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007a8:	2300      	movs	r3, #0
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4b30      	ldr	r3, [pc, #192]	; (8000870 <SystemClock_Config+0xf8>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a2f      	ldr	r2, [pc, #188]	; (8000870 <SystemClock_Config+0xf8>)
 80007b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <SystemClock_Config+0xf8>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c4:	bf00      	nop
 80007c6:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <SystemClock_Config+0xf8>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007d2:	d1f8      	bne.n	80007c6 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <SystemClock_Config+0xf4>)
 80007d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d8:	4a24      	ldr	r2, [pc, #144]	; (800086c <SystemClock_Config+0xf4>)
 80007da:	f023 0303 	bic.w	r3, r3, #3
 80007de:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80007e0:	232a      	movs	r3, #42	; 0x2a
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000800:	2308      	movs	r3, #8
 8000802:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000810:	230c      	movs	r3, #12
 8000812:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000814:	2300      	movs	r3, #0
 8000816:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fd13 	bl	800324c <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800082c:	f000 fbd6 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	233f      	movs	r3, #63	; 0x3f
 8000832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2303      	movs	r3, #3
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2101      	movs	r1, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f003 f8fd 	bl	8003a54 <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000860:	f000 fbbc 	bl	8000fdc <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3770      	adds	r7, #112	; 0x70
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	58024400 	.word	0x58024400
 8000870:	58024800 	.word	0x58024800

08000874 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
 8000888:	615a      	str	r2, [r3, #20]
 800088a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_ADC2_Init+0xc0>)
 800088e:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <MX_ADC2_Init+0xc4>)
 8000890:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000892:	4b28      	ldr	r3, [pc, #160]	; (8000934 <MX_ADC2_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_ADC2_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089e:	4b25      	ldr	r3, [pc, #148]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008a6:	2204      	movs	r2, #4
 80008a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008b0:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <MX_ADC2_Init+0xc0>)
 80008ea:	f001 f839 	bl	8001960 <HAL_ADC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80008f4:	f000 fb72 	bl	8000fdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_ADC2_Init+0xc8>)
 80008fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fc:	2306      	movs	r3, #6
 80008fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000900:	2305      	movs	r3, #5
 8000902:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000904:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000908:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090a:	2304      	movs	r3, #4
 800090c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_ADC2_Init+0xc0>)
 800091c:	f001 fa34 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000926:	f000 fb59 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	24001170 	.word	0x24001170
 8000938:	40022100 	.word	0x40022100
 800093c:	cb840000 	.word	0xcb840000

08000940 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_RNG_Init+0x24>)
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <MX_RNG_Init+0x28>)
 8000948:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_RNG_Init+0x24>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_RNG_Init+0x24>)
 8000952:	f005 fcb5 	bl	80062c0 <HAL_RNG_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800095c:	f000 fb3e 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24001224 	.word	0x24001224
 8000968:	48021800 	.word	0x48021800

0800096c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2228      	movs	r2, #40	; 0x28
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f007 fae9 	bl	8007f50 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_RTC_Init+0x9c>)
 8000980:	4a22      	ldr	r2, [pc, #136]	; (8000a0c <MX_RTC_Init+0xa0>)
 8000982:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_RTC_Init+0x9c>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_RTC_Init+0x9c>)
 800098c:	227f      	movs	r2, #127	; 0x7f
 800098e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_RTC_Init+0x9c>)
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_RTC_Init+0x9c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_RTC_Init+0x9c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_RTC_Init+0x9c>)
 80009a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_RTC_Init+0x9c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009b0:	4815      	ldr	r0, [pc, #84]	; (8000a08 <MX_RTC_Init+0x9c>)
 80009b2:	f005 fd2b 	bl	800640c <HAL_RTC_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80009bc:	f000 fb0e 	bl	8000fdc <Error_Handler>
  /** Enable the Alarm A
  */
//  sAlarm.AlarmTime.Hours = 0x0;
//  sAlarm.AlarmTime.Minutes = 0x0;
//  sAlarm.AlarmTime.Seconds = 0x0;
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80009d8:	2301      	movs	r3, #1
 80009da:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80009de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <MX_RTC_Init+0x9c>)
 80009ec:	f005 fe28 	bl	8006640 <HAL_RTC_SetAlarm_IT>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 80009f6:	f000 faf1 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	HAL_PWR_EnableBkUpAccess();
 80009fa:	f002 fbbd 	bl	8003178 <HAL_PWR_EnableBkUpAccess>
  /* USER CODE END RTC_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	240011fc 	.word	0x240011fc
 8000a0c:	58004000 	.word	0x58004000

08000a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <MX_USART3_UART_Init+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a5a:	f006 f853 	bl	8006b04 <HAL_UART_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 faba 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	f007 f97c 	bl	8007d68 <HAL_UARTEx_SetTxFifoThreshold>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f000 fab1 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a7e:	f007 f9b1 	bl	8007de4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 faa8 	bl	8000fdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a8e:	f007 f932 	bl	8007cf6 <HAL_UARTEx_DisableFifoMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 faa0 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	240010e0 	.word	0x240010e0
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b79      	ldr	r3, [pc, #484]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac4:	4a77      	ldr	r2, [pc, #476]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ace:	4b75      	ldr	r3, [pc, #468]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000ad0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000adc:	4b71      	ldr	r3, [pc, #452]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000ade:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae2:	4a70      	ldr	r2, [pc, #448]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000ae4:	f043 0320 	orr.w	r3, r3, #32
 8000ae8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aec:	4b6d      	ldr	r3, [pc, #436]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000aee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af2:	f003 0320 	and.w	r3, r3, #32
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b6a      	ldr	r3, [pc, #424]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b00:	4a68      	ldr	r2, [pc, #416]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b0a:	4b66      	ldr	r3, [pc, #408]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b14:	61bb      	str	r3, [r7, #24]
 8000b16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b62      	ldr	r3, [pc, #392]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1e:	4a61      	ldr	r2, [pc, #388]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b28:	4b5e      	ldr	r3, [pc, #376]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3c:	4a59      	ldr	r2, [pc, #356]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b46:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b54:	4b53      	ldr	r3, [pc, #332]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5a:	4a52      	ldr	r2, [pc, #328]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b64:	4b4f      	ldr	r3, [pc, #316]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b4c      	ldr	r3, [pc, #304]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b78:	4a4a      	ldr	r2, [pc, #296]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b82:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b90:	4b44      	ldr	r3, [pc, #272]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b96:	4a43      	ldr	r2, [pc, #268]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba0:	4b40      	ldr	r3, [pc, #256]	; (8000ca4 <MX_GPIO_Init+0x1fc>)
 8000ba2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb4:	483c      	ldr	r0, [pc, #240]	; (8000ca8 <MX_GPIO_Init+0x200>)
 8000bb6:	f002 fac5 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bc0:	483a      	ldr	r0, [pc, #232]	; (8000cac <MX_GPIO_Init+0x204>)
 8000bc2:	f002 fabf 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4839      	ldr	r0, [pc, #228]	; (8000cb0 <MX_GPIO_Init+0x208>)
 8000bcc:	f002 faba 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	4833      	ldr	r0, [pc, #204]	; (8000cb4 <MX_GPIO_Init+0x20c>)
 8000be6:	f002 f8fd 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4829      	ldr	r0, [pc, #164]	; (8000ca8 <MX_GPIO_Init+0x200>)
 8000c04:	f002 f8ee 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c08:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4822      	ldr	r0, [pc, #136]	; (8000cac <MX_GPIO_Init+0x204>)
 8000c22:	f002 f8df 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <MX_GPIO_Init+0x210>)
 8000c3c:	f002 f8d2 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c52:	230a      	movs	r3, #10
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4817      	ldr	r0, [pc, #92]	; (8000cbc <MX_GPIO_Init+0x214>)
 8000c5e:	f002 f8c1 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4810      	ldr	r0, [pc, #64]	; (8000cbc <MX_GPIO_Init+0x214>)
 8000c7c:	f002 f8b2 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c80:	2302      	movs	r3, #2
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_GPIO_Init+0x208>)
 8000c98:	f002 f8a4 	bl	8002de4 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3738      	adds	r7, #56	; 0x38
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	58021400 	.word	0x58021400
 8000cac:	58020400 	.word	0x58020400
 8000cb0:	58021000 	.word	0x58021000
 8000cb4:	58020800 	.word	0x58020800
 8000cb8:	58021800 	.word	0x58021800
 8000cbc:	58020000 	.word	0x58020000

08000cc0 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)alarmMsg, strlen(alarmMsg), 100);
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <HAL_RTC_AlarmAEventCallback+0x24>)
 8000cca:	f7ff fb11 	bl	80002f0 <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	2364      	movs	r3, #100	; 0x64
 8000cd4:	4903      	ldr	r1, [pc, #12]	; (8000ce4 <HAL_RTC_AlarmAEventCallback+0x24>)
 8000cd6:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <HAL_RTC_AlarmAEventCallback+0x28>)
 8000cd8:	f005 ff64 	bl	8006ba4 <HAL_UART_Transmit>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	24000000 	.word	0x24000000
 8000ce8:	240010e0 	.word	0x240010e0

08000cec <set_time_custom>:

void set_time_custom(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b09a      	sub	sp, #104	; 0x68
 8000cf0:	af00      	add	r7, sp, #0
	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0xFF){
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	481e      	ldr	r0, [pc, #120]	; (8000d70 <set_time_custom+0x84>)
 8000cf6:	f005 fee2 	bl	8006abe <HAL_RTCEx_BKUPRead>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2bff      	cmp	r3, #255	; 0xff
 8000cfe:	d013      	beq.n	8000d28 <set_time_custom+0x3c>
		setTime.Hours = 0x11;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <set_time_custom+0x88>)
 8000d02:	2211      	movs	r2, #17
 8000d04:	701a      	strb	r2, [r3, #0]
		setTime.Minutes = 0x11;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <set_time_custom+0x88>)
 8000d08:	2211      	movs	r2, #17
 8000d0a:	705a      	strb	r2, [r3, #1]
		setTime.Seconds = 0x00;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <set_time_custom+0x88>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	709a      	strb	r2, [r3, #2]
		HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BCD);
 8000d12:	2201      	movs	r2, #1
 8000d14:	4917      	ldr	r1, [pc, #92]	; (8000d74 <set_time_custom+0x88>)
 8000d16:	4816      	ldr	r0, [pc, #88]	; (8000d70 <set_time_custom+0x84>)
 8000d18:	f005 fbf4 	bl	8006504 <HAL_RTC_SetTime>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xFF);
 8000d1c:	22ff      	movs	r2, #255	; 0xff
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <set_time_custom+0x84>)
 8000d22:	f005 feb1 	bl	8006a88 <HAL_RTCEx_BKUPWrite>
	} else{
		uint8_t temp[100] = {0};
		sprintf(temp, "time already set buddy! %d\n", HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0));
		HAL_UART_Transmit(&huart3, temp, strlen(temp), 500);
	}
}
 8000d26:	e01e      	b.n	8000d66 <set_time_custom+0x7a>
		uint8_t temp[100] = {0};
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	2260      	movs	r2, #96	; 0x60
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f007 f90b 	bl	8007f50 <memset>
		sprintf(temp, "time already set buddy! %d\n", HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0));
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <set_time_custom+0x84>)
 8000d3e:	f005 febe 	bl	8006abe <HAL_RTCEx_BKUPRead>
 8000d42:	4602      	mov	r2, r0
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	490c      	ldr	r1, [pc, #48]	; (8000d78 <set_time_custom+0x8c>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f007 f909 	bl	8007f60 <siprintf>
		HAL_UART_Transmit(&huart3, temp, strlen(temp), 500);
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff facd 	bl	80002f0 <strlen>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	1d39      	adds	r1, r7, #4
 8000d5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <set_time_custom+0x90>)
 8000d62:	f005 ff1f 	bl	8006ba4 <HAL_UART_Transmit>
}
 8000d66:	bf00      	nop
 8000d68:	3768      	adds	r7, #104	; 0x68
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	240011fc 	.word	0x240011fc
 8000d74:	240011e4 	.word	0x240011e4
 8000d78:	080087d4 	.word	0x080087d4
 8000d7c:	240010e0 	.word	0x240010e0

08000d80 <set_date_custom>:

void set_date_custom(){
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	setDate.Date = 0x23;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <set_date_custom+0x20>)
 8000d86:	2223      	movs	r2, #35	; 0x23
 8000d88:	709a      	strb	r2, [r3, #2]
	setDate.Month = 0x09;
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <set_date_custom+0x20>)
 8000d8c:	2209      	movs	r2, #9
 8000d8e:	705a      	strb	r2, [r3, #1]
	setDate.Year = 0x22;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <set_date_custom+0x20>)
 8000d92:	2222      	movs	r2, #34	; 0x22
 8000d94:	70da      	strb	r2, [r3, #3]
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	240011dc 	.word	0x240011dc

08000da4 <set_alarm_custom>:

void set_alarm_custom(){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
	Alarm.Alarm = RTC_ALARM_A;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <set_alarm_custom+0x5c>)
 8000dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
	Alarm.AlarmTime.Hours = 0x11;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <set_alarm_custom+0x5c>)
 8000db4:	2211      	movs	r2, #17
 8000db6:	701a      	strb	r2, [r3, #0]
	Alarm.AlarmTime.Minutes = 0x12;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <set_alarm_custom+0x5c>)
 8000dba:	2212      	movs	r2, #18
 8000dbc:	705a      	strb	r2, [r3, #1]
	Alarm.AlarmTime.Seconds = 0x00;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <set_alarm_custom+0x5c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	709a      	strb	r2, [r3, #2]
	Alarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <set_alarm_custom+0x5c>)
 8000dc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dca:	615a      	str	r2, [r3, #20]
	HAL_RTC_SetAlarm_IT(&hrtc, &Alarm, RTC_FORMAT_BIN);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	490c      	ldr	r1, [pc, #48]	; (8000e00 <set_alarm_custom+0x5c>)
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <set_alarm_custom+0x60>)
 8000dd2:	f005 fc35 	bl	8006640 <HAL_RTC_SetAlarm_IT>
	uint8_t temp[] = "alarm set!\n";
 8000dd6:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <set_alarm_custom+0x64>)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ddc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp), 500);
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fa84 	bl	80002f0 <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	1d39      	adds	r1, r7, #4
 8000dee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <set_alarm_custom+0x68>)
 8000df4:	f005 fed6 	bl	8006ba4 <HAL_UART_Transmit>
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	240010b8 	.word	0x240010b8
 8000e04:	240011fc 	.word	0x240011fc
 8000e08:	080087f0 	.word	0x080087f0
 8000e0c:	240010e0 	.word	0x240010e0

08000e10 <FLASH_Read>:

void FLASH_Read(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords){
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	while (1)
		{
			*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	601a      	str	r2, [r3, #0]
			StartPageAddress+=4;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	60fb      	str	r3, [r7, #12]
			RxBuf++;
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	60bb      	str	r3, [r7, #8]
			if (!(--numberofwords)) break;
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	80fb      	strh	r3, [r7, #6]
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d000      	beq.n	8000e40 <FLASH_Read+0x30>
			*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000e3e:	e7ee      	b.n	8000e1e <FLASH_Read+0xe>
			if (!(--numberofwords)) break;
 8000e40:	bf00      	nop
		}
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <Print_readed_data>:

void Print_readed_data(uint32_t holdMultipleRead[]){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	uint8_t temp_data[10] = {0};
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	809a      	strh	r2, [r3, #4]
	uint16_t a,b;
	for(int i=0; i<DATA_READ_LOOP; i++){
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	e023      	b.n	8000eb4 <Print_readed_data+0x64>
	  a = holdMultipleRead[i]>>16;
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	0c1b      	lsrs	r3, r3, #16
 8000e78:	837b      	strh	r3, [r7, #26]
	  b = holdMultipleRead[i] & 0x0000ffff;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	833b      	strh	r3, [r7, #24]
	  sprintf(temp_data, "%d\n%d\n", b,a);
 8000e86:	8b3a      	ldrh	r2, [r7, #24]
 8000e88:	8b7b      	ldrh	r3, [r7, #26]
 8000e8a:	f107 000c 	add.w	r0, r7, #12
 8000e8e:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <Print_readed_data+0x78>)
 8000e90:	f007 f866 	bl	8007f60 <siprintf>
	  HAL_UART_Transmit(&huart3, temp_data, strlen(temp_data), 100);
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fa29 	bl	80002f0 <strlen>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	f107 010c 	add.w	r1, r7, #12
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <Print_readed_data+0x7c>)
 8000eaa:	f005 fe7b 	bl	8006ba4 <HAL_UART_Transmit>
	for(int i=0; i<DATA_READ_LOOP; i++){
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eba:	dbd7      	blt.n	8000e6c <Print_readed_data+0x1c>

  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	080087fc 	.word	0x080087fc
 8000ecc:	240010e0 	.word	0x240010e0

08000ed0 <FLASH_write>:

void FLASH_write(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
	// unlock the flash to write
	  if(HAL_FLASH_Unlock() != HAL_OK){
 8000ed6:	f001 fd4f 	bl	8002978 <HAL_FLASH_Unlock>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d006      	beq.n	8000eee <FLASH_write+0x1e>
		  HAL_UART_Transmit(&huart3, "fail" ,4, 500);
 8000ee0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	491b      	ldr	r1, [pc, #108]	; (8000f54 <FLASH_write+0x84>)
 8000ee8:	481b      	ldr	r0, [pc, #108]	; (8000f58 <FLASH_write+0x88>)
 8000eea:	f005 fe5b 	bl	8006ba4 <HAL_UART_Transmit>
	  }
	  for(int i=0; i<DATA_TRANSMIT_LOOP; i++){
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	e01c      	b.n	8000f2e <FLASH_write+0x5e>
		  if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, (uint32_t)send_address, &buffer_tfs[i*8]) != HAL_OK)
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <FLASH_write+0x8c>)
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <FLASH_write+0x90>)
 8000f00:	4413      	add	r3, r2
 8000f02:	461a      	mov	r2, r3
 8000f04:	2001      	movs	r0, #1
 8000f06:	f001 fc7d 	bl	8002804 <HAL_FLASH_Program>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <FLASH_write+0x4e>
		  {
			  HAL_UART_Transmit(&huart3, "fail" ,4, 500);
 8000f10:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f14:	2204      	movs	r2, #4
 8000f16:	490f      	ldr	r1, [pc, #60]	; (8000f54 <FLASH_write+0x84>)
 8000f18:	480f      	ldr	r0, [pc, #60]	; (8000f58 <FLASH_write+0x88>)
 8000f1a:	f005 fe43 	bl	8006ba4 <HAL_UART_Transmit>
		  }
	  send_address+=16;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <FLASH_write+0x8c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3310      	adds	r3, #16
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <FLASH_write+0x8c>)
 8000f26:	6013      	str	r3, [r2, #0]
	  for(int i=0; i<DATA_TRANSMIT_LOOP; i++){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2bff      	cmp	r3, #255	; 0xff
 8000f32:	dddf      	ble.n	8000ef4 <FLASH_write+0x24>
	}
	// lock the flash once donw writing
	if(HAL_FLASH_Unlock() != HAL_OK){
 8000f34:	f001 fd20 	bl	8002978 <HAL_FLASH_Unlock>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <FLASH_write+0x7c>
	  HAL_UART_Transmit(&huart3, "fail" ,4, 500);
 8000f3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f42:	2204      	movs	r2, #4
 8000f44:	4903      	ldr	r1, [pc, #12]	; (8000f54 <FLASH_write+0x84>)
 8000f46:	4804      	ldr	r0, [pc, #16]	; (8000f58 <FLASH_write+0x88>)
 8000f48:	f005 fe2c 	bl	8006ba4 <HAL_UART_Transmit>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08008804 	.word	0x08008804
 8000f58:	240010e0 	.word	0x240010e0
 8000f5c:	24000014 	.word	0x24000014
 8000f60:	240000ac 	.word	0x240000ac

08000f64 <FLASH_clear>:

void FLASH_clear(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
	if(HAL_FLASH_Unlock() != HAL_OK){
 8000f6a:	f001 fd05 	bl	8002978 <HAL_FLASH_Unlock>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d006      	beq.n	8000f82 <FLASH_clear+0x1e>
		  HAL_UART_Transmit(&huart3, "fail" ,4, 500);
 8000f74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f78:	2204      	movs	r2, #4
 8000f7a:	4916      	ldr	r1, [pc, #88]	; (8000fd4 <FLASH_clear+0x70>)
 8000f7c:	4816      	ldr	r0, [pc, #88]	; (8000fd8 <FLASH_clear+0x74>)
 8000f7e:	f005 fe11 	bl	8006ba4 <HAL_UART_Transmit>
	  }
	  uint32_t PAGEError;
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
	  EraseInitStruct.NbSectors = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
	  EraseInitStruct.Banks = FLASH_BANK_1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	607b      	str	r3, [r7, #4]
	  EraseInitStruct.Sector = FLASH_SECTOR_127;
 8000f8e:	237f      	movs	r3, #127	; 0x7f
 8000f90:	60bb      	str	r3, [r7, #8]
	  if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000f92:	f107 0214 	add.w	r2, r7, #20
 8000f96:	463b      	mov	r3, r7
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fdec 	bl	8002b78 <HAL_FLASHEx_Erase>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <FLASH_clear+0x50>
	  {
		  HAL_UART_Transmit(&huart3, "fail" ,4, 500);
 8000fa6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000faa:	2204      	movs	r2, #4
 8000fac:	4909      	ldr	r1, [pc, #36]	; (8000fd4 <FLASH_clear+0x70>)
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <FLASH_clear+0x74>)
 8000fb0:	f005 fdf8 	bl	8006ba4 <HAL_UART_Transmit>
	  }
	  if(HAL_FLASH_Lock() != HAL_OK){
 8000fb4:	f001 fd1a 	bl	80029ec <HAL_FLASH_Lock>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <FLASH_clear+0x68>
	    HAL_UART_Transmit(&huart3, "fail" ,4, 500);
 8000fbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	4903      	ldr	r1, [pc, #12]	; (8000fd4 <FLASH_clear+0x70>)
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <FLASH_clear+0x74>)
 8000fc8:	f005 fdec 	bl	8006ba4 <HAL_UART_Transmit>
	  }
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08008804 	.word	0x08008804
 8000fd8:	240010e0 	.word	0x240010e0

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <Error_Handler+0x8>
	...

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_MspInit+0x30>)
 8000ff0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x30>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x30>)
 8001000:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	58024400 	.word	0x58024400

0800101c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0b2      	sub	sp, #200	; 0xc8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	22b8      	movs	r2, #184	; 0xb8
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f006 ff8f 	bl	8007f50 <memset>
  if(hadc->Instance==ADC2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_ADC_MspInit+0x88>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d12e      	bne.n	800109a <HAL_ADC_MspInit+0x7e>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800103c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001040:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8001042:	2320      	movs	r3, #32
 8001044:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8001046:	2381      	movs	r3, #129	; 0x81
 8001048:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800104a:	2302      	movs	r3, #2
 800104c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001056:	2340      	movs	r3, #64	; 0x40
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4618      	mov	r0, r3
 800106e:	f003 f87d 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8001078:	f7ff ffb0 	bl	8000fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_ADC_MspInit+0x8c>)
 800107e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_ADC_MspInit+0x8c>)
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_ADC_MspInit+0x8c>)
 800108e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001092:	f003 0320 	and.w	r3, r3, #32
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	37c8      	adds	r7, #200	; 0xc8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40022100 	.word	0x40022100
 80010a8:	58024400 	.word	0x58024400

080010ac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0b2      	sub	sp, #200	; 0xc8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	22b8      	movs	r2, #184	; 0xb8
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f006 ff47 	bl	8007f50 <memset>
  if(hrng->Instance==RNG)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_RNG_MspInit+0x68>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d11e      	bne.n	800110a <HAL_RNG_MspInit+0x5e>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80010cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 f845 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80010e8:	f7ff ff78 	bl	8000fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_RNG_MspInit+0x6c>)
 80010ee:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_RNG_MspInit+0x6c>)
 80010f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f8:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_RNG_MspInit+0x6c>)
 80010fe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	37c8      	adds	r7, #200	; 0xc8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	48021800 	.word	0x48021800
 8001118:	58024400 	.word	0x58024400

0800111c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b0b0      	sub	sp, #192	; 0xc0
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	22b8      	movs	r2, #184	; 0xb8
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f006 ff0f 	bl	8007f50 <memset>
  if(hrtc->Instance==RTC)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a13      	ldr	r2, [pc, #76]	; (8001184 <HAL_RTC_MspInit+0x68>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d11e      	bne.n	800117a <HAL_RTC_MspInit+0x5e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800113c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001140:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001146:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f80c 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800115a:	f7ff ff3f 	bl	8000fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_RTC_MspInit+0x6c>)
 8001160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_RTC_MspInit+0x6c>)
 8001164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001168:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2029      	movs	r0, #41	; 0x29
 8001170:	f001 fb13 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001174:	2029      	movs	r0, #41	; 0x29
 8001176:	f001 fb2a 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	37c0      	adds	r7, #192	; 0xc0
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	58004000 	.word	0x58004000
 8001188:	58024400 	.word	0x58024400

0800118c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0b8      	sub	sp, #224	; 0xe0
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	22b8      	movs	r2, #184	; 0xb8
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 fecf 	bl	8007f50 <memset>
  if(huart->Instance==USART3)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a25      	ldr	r2, [pc, #148]	; (800124c <HAL_UART_MspInit+0xc0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d142      	bne.n	8001242 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011bc:	2302      	movs	r3, #2
 80011be:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 ffce 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011d6:	f7ff ff01 	bl	8000fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_UART_MspInit+0xc4>)
 80011dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <HAL_UART_MspInit+0xc4>)
 80011e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_UART_MspInit+0xc4>)
 80011ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_UART_MspInit+0xc4>)
 80011fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011fe:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_UART_MspInit+0xc4>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_UART_MspInit+0xc4>)
 800120a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001216:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001230:	2307      	movs	r3, #7
 8001232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001236:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_UART_MspInit+0xc8>)
 800123e:	f001 fdd1 	bl	8002de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	37e0      	adds	r7, #224	; 0xe0
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40004800 	.word	0x40004800
 8001250:	58024400 	.word	0x58024400
 8001254:	58020c00 	.word	0x58020c00

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a4:	f000 f956 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line.
  */
void RTC_Alarm_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <RTC_Alarm_IRQHandler+0x10>)
 80012b2:	f005 fb01 	bl	80068b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	240011fc 	.word	0x240011fc

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f006 fe04 	bl	8007efc <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	24100000 	.word	0x24100000
 8001320:	00000400 	.word	0x00000400
 8001324:	240010ac 	.word	0x240010ac
 8001328:	24001280 	.word	0x24001280

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001330:	4b32      	ldr	r3, [pc, #200]	; (80013fc <SystemInit+0xd0>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a31      	ldr	r2, [pc, #196]	; (80013fc <SystemInit+0xd0>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <SystemInit+0xd4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	2b02      	cmp	r3, #2
 800134a:	d807      	bhi.n	800135c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <SystemInit+0xd4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f023 030f 	bic.w	r3, r3, #15
 8001354:	4a2a      	ldr	r2, [pc, #168]	; (8001400 <SystemInit+0xd4>)
 8001356:	f043 0303 	orr.w	r3, r3, #3
 800135a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <SystemInit+0xd8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a28      	ldr	r2, [pc, #160]	; (8001404 <SystemInit+0xd8>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <SystemInit+0xd8>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <SystemInit+0xd8>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4924      	ldr	r1, [pc, #144]	; (8001404 <SystemInit+0xd8>)
 8001374:	4b24      	ldr	r3, [pc, #144]	; (8001408 <SystemInit+0xdc>)
 8001376:	4013      	ands	r3, r2
 8001378:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <SystemInit+0xd4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <SystemInit+0xd4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 030f 	bic.w	r3, r3, #15
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <SystemInit+0xd4>)
 8001390:	f043 0303 	orr.w	r3, r3, #3
 8001394:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <SystemInit+0xd8>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <SystemInit+0xd8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <SystemInit+0xd8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <SystemInit+0xd8>)
 80013aa:	4a18      	ldr	r2, [pc, #96]	; (800140c <SystemInit+0xe0>)
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <SystemInit+0xd8>)
 80013b0:	4a17      	ldr	r2, [pc, #92]	; (8001410 <SystemInit+0xe4>)
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <SystemInit+0xd8>)
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <SystemInit+0xe8>)
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <SystemInit+0xd8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <SystemInit+0xd8>)
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <SystemInit+0xe8>)
 80013c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <SystemInit+0xd8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <SystemInit+0xd8>)
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <SystemInit+0xe8>)
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <SystemInit+0xd8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <SystemInit+0xd8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a09      	ldr	r2, [pc, #36]	; (8001404 <SystemInit+0xd8>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <SystemInit+0xd8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <SystemInit+0xec>)
 80013ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	52002000 	.word	0x52002000
 8001404:	58024400 	.word	0x58024400
 8001408:	eaf6ed7f 	.word	0xeaf6ed7f
 800140c:	02020200 	.word	0x02020200
 8001410:	01ff0000 	.word	0x01ff0000
 8001414:	01010280 	.word	0x01010280
 8001418:	52004000 	.word	0x52004000

0800141c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800141c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001454 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001420:	f7ff ff84 	bl	800132c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	; (800145c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	; (8001468 <LoopFillZerobss+0x22>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800144a:	f006 fd5d 	bl	8007f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144e:	f7ff f923 	bl	8000698 <main>
  bx  lr
 8001452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001454:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001458:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800145c:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8001460:	08008888 	.word	0x08008888
  ldr r2, =_sbss
 8001464:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8001468:	2400127c 	.word	0x2400127c

0800146c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC_IRQHandler>
	...

08001470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001476:	2003      	movs	r0, #3
 8001478:	f001 f984 	bl	8002784 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800147c:	f002 fca0 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8001480:	4602      	mov	r2, r0
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_Init+0x68>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	f003 030f 	and.w	r3, r3, #15
 800148c:	4913      	ldr	r1, [pc, #76]	; (80014dc <HAL_Init+0x6c>)
 800148e:	5ccb      	ldrb	r3, [r1, r3]
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_Init+0x68>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_Init+0x6c>)
 80014a4:	5cd3      	ldrb	r3, [r2, r3]
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_Init+0x70>)
 80014b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HAL_Init+0x74>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ba:	2000      	movs	r0, #0
 80014bc:	f000 f814 	bl	80014e8 <HAL_InitTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e002      	b.n	80014d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ca:	f7ff fd8d 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	58024400 	.word	0x58024400
 80014dc:	0800880c 	.word	0x0800880c
 80014e0:	24000020 	.word	0x24000020
 80014e4:	2400001c 	.word	0x2400001c

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_InitTick+0x60>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e021      	b.n	8001540 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_InitTick+0x64>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_InitTick+0x60>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f001 f969 	bl	80027ea <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f001 f933 	bl	800279a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x68>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	24000028 	.word	0x24000028
 800154c:	2400001c 	.word	0x2400001c
 8001550:	24000024 	.word	0x24000024

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	24000028 	.word	0x24000028
 8001578:	2400124c 	.word	0x2400124c

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	2400124c 	.word	0x2400124c

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	24000028 	.word	0x24000028

080015dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3360      	adds	r3, #96	; 0x60
 8001656:	461a      	mov	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	430b      	orrs	r3, r1
 8001672:	431a      	orrs	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001678:	bf00      	nop
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	431a      	orrs	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	611a      	str	r2, [r3, #16]
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b087      	sub	sp, #28
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3360      	adds	r3, #96	; 0x60
 80016c6:	461a      	mov	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	431a      	orrs	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	601a      	str	r2, [r3, #0]
  }
}
 80016e0:	bf00      	nop
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3330      	adds	r3, #48	; 0x30
 80016fc:	461a      	mov	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	4413      	add	r3, r2
 800170a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	211f      	movs	r1, #31
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	401a      	ands	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	0e9b      	lsrs	r3, r3, #26
 8001724:	f003 011f 	and.w	r1, r3, #31
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	431a      	orrs	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001738:	bf00      	nop
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3314      	adds	r3, #20
 8001754:	461a      	mov	r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	0e5b      	lsrs	r3, r3, #25
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	0d1b      	lsrs	r3, r3, #20
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2107      	movs	r1, #7
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	401a      	ands	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	0d1b      	lsrs	r3, r3, #20
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	431a      	orrs	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800178e:	bf00      	nop
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017b4:	43db      	mvns	r3, r3
 80017b6:	401a      	ands	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0318 	and.w	r3, r3, #24
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017c0:	40d9      	lsrs	r1, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	400b      	ands	r3, r1
 80017c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017ca:	431a      	orrs	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	000fffff 	.word	0x000fffff

080017e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 031f 	and.w	r3, r3, #31
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <LL_ADC_DisableDeepPowerDown+0x20>)
 800180e:	4013      	ands	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6093      	str	r3, [r2, #8]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	5fffffc0 	.word	0x5fffffc0

08001824 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001838:	d101      	bne.n	800183e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <LL_ADC_EnableInternalRegulator+0x24>)
 800185a:	4013      	ands	r3, r2
 800185c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	6fffffc0 	.word	0x6fffffc0

08001874 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001888:	d101      	bne.n	800188e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <LL_ADC_Enable+0x24>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	7fffffc0 	.word	0x7fffffc0

080018c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <LL_ADC_IsEnabled+0x18>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <LL_ADC_IsEnabled+0x1a>
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <LL_ADC_REG_StartConversion+0x24>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	f043 0204 	orr.w	r2, r3, #4
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	7fffffc0 	.word	0x7fffffc0

08001914 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b04      	cmp	r3, #4
 8001926:	d101      	bne.n	800192c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b08      	cmp	r3, #8
 800194c:	d101      	bne.n	8001952 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e138      	b.n	8001bec <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	2b00      	cmp	r3, #0
 8001986:	d109      	bne.n	800199c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fb47 	bl	800101c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff3f 	bl	8001824 <LL_ADC_IsDeepPowerDownEnabled>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff25 	bl	8001800 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff5a 	bl	8001874 <LL_ADC_IsInternalRegulatorEnabled>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d114      	bne.n	80019f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff3e 	bl	800184c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019d0:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_ADC_Init+0x294>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	099b      	lsrs	r3, r3, #6
 80019d6:	4a88      	ldr	r2, [pc, #544]	; (8001bf8 <HAL_ADC_Init+0x298>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	3301      	adds	r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019e2:	e002      	b.n	80019ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f9      	bne.n	80019e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff3d 	bl	8001874 <LL_ADC_IsInternalRegulatorEnabled>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10d      	bne.n	8001a1c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	f043 0210 	orr.w	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff77 	bl	8001914 <LL_ADC_REG_IsConversionOngoing>
 8001a26:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f040 80d2 	bne.w	8001bda <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 80ce 	bne.w	8001bda <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a46:	f043 0202 	orr.w	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff36 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d110      	bne.n	8001a80 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a5e:	4867      	ldr	r0, [pc, #412]	; (8001bfc <HAL_ADC_Init+0x29c>)
 8001a60:	f7ff ff30 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a64:	4604      	mov	r4, r0
 8001a66:	4866      	ldr	r0, [pc, #408]	; (8001c00 <HAL_ADC_Init+0x2a0>)
 8001a68:	f7ff ff2c 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4323      	orrs	r3, r4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4862      	ldr	r0, [pc, #392]	; (8001c04 <HAL_ADC_Init+0x2a4>)
 8001a7c:	f7ff fdae 	bl	80015dc <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7d5b      	ldrb	r3, [r3, #21]
 8001a84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a8a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001a90:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7f1b      	ldrb	r3, [r3, #28]
 8001a96:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7f1b      	ldrb	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	045b      	lsls	r3, r3, #17
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <HAL_ADC_Init+0x2a8>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	69b9      	ldr	r1, [r7, #24]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff14 	bl	8001914 <LL_ADC_REG_IsConversionOngoing>
 8001aec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff21 	bl	800193a <LL_ADC_INJ_IsConversionOngoing>
 8001af8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d14a      	bne.n	8001b96 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d147      	bne.n	8001b96 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7d1b      	ldrb	r3, [r3, #20]
 8001b0a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <HAL_ADC_Init+0x2ac>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	69b9      	ldr	r1, [r7, #24]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d11b      	bne.n	8001b6a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <HAL_ADC_Init+0x2b0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b46:	3a01      	subs	r2, #1
 8001b48:	0411      	lsls	r1, r2, #16
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b54:	4311      	orrs	r1, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	611a      	str	r2, [r3, #16]
 8001b68:	e007      	b.n	8001b7a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fc5b 	bl	800244c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f023 010f 	bic.w	r1, r3, #15
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb6:	e007      	b.n	8001bc8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 020f 	bic.w	r2, r2, #15
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	f023 0303 	bic.w	r3, r3, #3
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	; 0x54
 8001bd8:	e007      	b.n	8001bea <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	f043 0210 	orr.w	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bea:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3724      	adds	r7, #36	; 0x24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}
 8001bf4:	2400001c 	.word	0x2400001c
 8001bf8:	053e2d63 	.word	0x053e2d63
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	40022100 	.word	0x40022100
 8001c04:	40022300 	.word	0x40022300
 8001c08:	fff0c003 	.word	0xfff0c003
 8001c0c:	ffffbffc 	.word	0xffffbffc
 8001c10:	fc00f81e 	.word	0xfc00f81e

08001c14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c1c:	4856      	ldr	r0, [pc, #344]	; (8001d78 <HAL_ADC_Start+0x164>)
 8001c1e:	f7ff fde1 	bl	80017e4 <LL_ADC_GetMultimode>
 8001c22:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fe73 	bl	8001914 <LL_ADC_REG_IsConversionOngoing>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 809a 	bne.w	8001d6a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_Start+0x30>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e095      	b.n	8001d70 <HAL_ADC_Start+0x15c>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fb81 	bl	8002354 <ADC_Enable>
 8001c52:	4603      	mov	r3, r0
 8001c54:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 8081 	bne.w	8001d60 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c62:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <HAL_ADC_Start+0x168>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a43      	ldr	r2, [pc, #268]	; (8001d80 <HAL_ADC_Start+0x16c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d002      	beq.n	8001c7e <HAL_ADC_Start+0x6a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	e000      	b.n	8001c80 <HAL_ADC_Start+0x6c>
 8001c7e:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <HAL_ADC_Start+0x170>)
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d002      	beq.n	8001c8e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f023 0206 	bic.w	r2, r3, #6
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	659a      	str	r2, [r3, #88]	; 0x58
 8001cb4:	e002      	b.n	8001cbc <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	221c      	movs	r2, #28
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	; (8001d80 <HAL_ADC_Start+0x16c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d002      	beq.n	8001cdc <HAL_ADC_Start+0xc8>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	e000      	b.n	8001cde <HAL_ADC_Start+0xca>
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <HAL_ADC_Start+0x170>)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d008      	beq.n	8001cf8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d002      	beq.n	8001cf8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d114      	bne.n	8001d22 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fde6 	bl	80018ec <LL_ADC_REG_StartConversion>
 8001d20:	e025      	b.n	8001d6e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <HAL_ADC_Start+0x16c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d002      	beq.n	8001d3e <HAL_ADC_Start+0x12a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	e000      	b.n	8001d40 <HAL_ADC_Start+0x12c>
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_ADC_Start+0x170>)
 8001d40:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00f      	beq.n	8001d6e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
 8001d5e:	e006      	b.n	8001d6e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d68:	e001      	b.n	8001d6e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40022300 	.word	0x40022300
 8001d7c:	fffff0fe 	.word	0xfffff0fe
 8001d80:	40022100 	.word	0x40022100
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b0a1      	sub	sp, #132	; 0x84
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a9a      	ldr	r2, [pc, #616]	; (800200c <HAL_ADC_ConfigChannel+0x284>)
 8001da2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x2a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e2bc      	b.n	800232c <HAL_ADC_ConfigChannel+0x5a4>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fda8 	bl	8001914 <LL_ADC_REG_IsConversionOngoing>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 82a1 	bne.w	800230e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d108      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x62>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2201      	movs	r2, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	e016      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x90>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dfa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e02:	2320      	movs	r3, #32
 8001e04:	e003      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2201      	movs	r2, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	69d1      	ldr	r1, [r2, #28]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	430b      	orrs	r3, r1
 8001e24:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6859      	ldr	r1, [r3, #4]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f7ff fc5a 	bl	80016ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fd69 	bl	8001914 <LL_ADC_REG_IsConversionOngoing>
 8001e42:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fd76 	bl	800193a <LL_ADC_INJ_IsConversionOngoing>
 8001e4e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80a0 	bne.w	8001f98 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 809c 	bne.w	8001f98 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f7ff fc69 	bl	8001744 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10b      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x110>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	e00a      	b.n	8001eae <HAL_ADC_ConfigChannel+0x126>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d027      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6919      	ldr	r1, [r3, #16]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec6:	f7ff fbbd 	bl	8001644 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	7e5b      	ldrb	r3, [r3, #25]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x158>
 8001eda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ede:	e000      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x15a>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f7ff fbe7 	bl	80016b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6919      	ldr	r1, [r3, #16]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	7e1b      	ldrb	r3, [r3, #24]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x176>
 8001ef8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x178>
 8001efe:	2300      	movs	r3, #0
 8001f00:	461a      	mov	r2, r3
 8001f02:	f7ff fbbf 	bl	8001684 <LL_ADC_SetDataRightShift>
 8001f06:	e047      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	069b      	lsls	r3, r3, #26
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d107      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f2a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	069b      	lsls	r3, r3, #26
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d107      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f4e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	069b      	lsls	r3, r3, #26
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d107      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f72:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	069b      	lsls	r3, r3, #26
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f96:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fc91 	bl	80018c4 <LL_ADC_IsEnabled>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 81bb 	bne.w	8002320 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f7ff fbf0 	bl	800179c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <HAL_ADC_ConfigChannel+0x284>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	f040 8130 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x268>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	bf94      	ite	ls
 8001fe8:	2301      	movls	r3, #1
 8001fea:	2300      	movhi	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	e01b      	b.n	8002028 <HAL_ADC_ConfigChannel+0x2a0>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002000:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002008:	2320      	movs	r3, #32
 800200a:	e005      	b.n	8002018 <HAL_ADC_ConfigChannel+0x290>
 800200c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3301      	adds	r3, #1
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2b09      	cmp	r3, #9
 8002020:	bf94      	ite	ls
 8002022:	2301      	movls	r3, #1
 8002024:	2300      	movhi	r3, #0
 8002026:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002028:	2b00      	cmp	r3, #0
 800202a:	d079      	beq.n	8002120 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x2c0>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	3301      	adds	r3, #1
 8002040:	069b      	lsls	r3, r3, #26
 8002042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002046:	e015      	b.n	8002074 <HAL_ADC_ConfigChannel+0x2ec>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002058:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800205a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e003      	b.n	800206c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	3301      	adds	r3, #1
 800206e:	069b      	lsls	r3, r3, #26
 8002070:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800207c:	2b00      	cmp	r3, #0
 800207e:	d109      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x30c>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	3301      	adds	r3, #1
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	e017      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x33c>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e003      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80020b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	ea42 0103 	orr.w	r1, r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x362>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0e9b      	lsrs	r3, r3, #26
 80020da:	3301      	adds	r3, #1
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	051b      	lsls	r3, r3, #20
 80020e8:	e018      	b.n	800211c <HAL_ADC_ConfigChannel+0x394>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002102:	2320      	movs	r3, #32
 8002104:	e003      	b.n	800210e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800211c:	430b      	orrs	r3, r1
 800211e:	e07e      	b.n	800221e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <HAL_ADC_ConfigChannel+0x3b4>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0e9b      	lsrs	r3, r3, #26
 8002132:	3301      	adds	r3, #1
 8002134:	069b      	lsls	r3, r3, #26
 8002136:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800213a:	e015      	b.n	8002168 <HAL_ADC_ConfigChannel+0x3e0>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e003      	b.n	8002160 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	069b      	lsls	r3, r3, #26
 8002164:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x400>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0e9b      	lsrs	r3, r3, #26
 800217a:	3301      	adds	r3, #1
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2101      	movs	r1, #1
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	e017      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x430>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	61bb      	str	r3, [r7, #24]
  return result;
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	e003      	b.n	80021ac <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	ea42 0103 	orr.w	r1, r2, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10d      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x45c>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	0e9b      	lsrs	r3, r3, #26
 80021ce:	3301      	adds	r3, #1
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	3b1e      	subs	r3, #30
 80021dc:	051b      	lsls	r3, r3, #20
 80021de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e2:	e01b      	b.n	800221c <HAL_ADC_ConfigChannel+0x494>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	60fb      	str	r3, [r7, #12]
  return result;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80021fc:	2320      	movs	r3, #32
 80021fe:	e003      	b.n	8002208 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f003 021f 	and.w	r2, r3, #31
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	3b1e      	subs	r3, #30
 8002216:	051b      	lsls	r3, r3, #20
 8002218:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800221c:	430b      	orrs	r3, r1
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	6892      	ldr	r2, [r2, #8]
 8002222:	4619      	mov	r1, r3
 8002224:	f7ff fa8e 	bl	8001744 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	da77      	bge.n	8002320 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002230:	4840      	ldr	r0, [pc, #256]	; (8002334 <HAL_ADC_ConfigChannel+0x5ac>)
 8002232:	f7ff f9f9 	bl	8001628 <LL_ADC_GetCommonPathInternalCh>
 8002236:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002238:	483f      	ldr	r0, [pc, #252]	; (8002338 <HAL_ADC_ConfigChannel+0x5b0>)
 800223a:	f7ff fb43 	bl	80018c4 <LL_ADC_IsEnabled>
 800223e:	4604      	mov	r4, r0
 8002240:	483e      	ldr	r0, [pc, #248]	; (800233c <HAL_ADC_ConfigChannel+0x5b4>)
 8002242:	f7ff fb3f 	bl	80018c4 <LL_ADC_IsEnabled>
 8002246:	4603      	mov	r3, r0
 8002248:	4323      	orrs	r3, r4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d155      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a3b      	ldr	r2, [pc, #236]	; (8002340 <HAL_ADC_ConfigChannel+0x5b8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d122      	bne.n	800229e <HAL_ADC_ConfigChannel+0x516>
 8002258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d11d      	bne.n	800229e <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a35      	ldr	r2, [pc, #212]	; (800233c <HAL_ADC_ConfigChannel+0x5b4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d159      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800226c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002272:	4619      	mov	r1, r3
 8002274:	482f      	ldr	r0, [pc, #188]	; (8002334 <HAL_ADC_ConfigChannel+0x5ac>)
 8002276:	f7ff f9c4 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800227a:	4b32      	ldr	r3, [pc, #200]	; (8002344 <HAL_ADC_ConfigChannel+0x5bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	4a31      	ldr	r2, [pc, #196]	; (8002348 <HAL_ADC_ConfigChannel+0x5c0>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	3301      	adds	r3, #1
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800228e:	e002      	b.n	8002296 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	3b01      	subs	r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f9      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800229c:	e040      	b.n	8002320 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2a      	ldr	r2, [pc, #168]	; (800234c <HAL_ADC_ConfigChannel+0x5c4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d111      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x544>
 80022a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a21      	ldr	r2, [pc, #132]	; (800233c <HAL_ADC_ConfigChannel+0x5b4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d131      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80022bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c2:	4619      	mov	r1, r3
 80022c4:	481b      	ldr	r0, [pc, #108]	; (8002334 <HAL_ADC_ConfigChannel+0x5ac>)
 80022c6:	f7ff f99c 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ca:	e029      	b.n	8002320 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_ADC_ConfigChannel+0x5c8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d124      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x598>
 80022d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11f      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a15      	ldr	r2, [pc, #84]	; (800233c <HAL_ADC_ConfigChannel+0x5b4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d11a      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80022ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f0:	4619      	mov	r1, r3
 80022f2:	4810      	ldr	r0, [pc, #64]	; (8002334 <HAL_ADC_ConfigChannel+0x5ac>)
 80022f4:	f7ff f985 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
 80022f8:	e012      	b.n	8002320 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f043 0220 	orr.w	r2, r3, #32
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800230c:	e008      	b.n	8002320 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002328:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800232c:	4618      	mov	r0, r3
 800232e:	3784      	adds	r7, #132	; 0x84
 8002330:	46bd      	mov	sp, r7
 8002332:	bd90      	pop	{r4, r7, pc}
 8002334:	40022300 	.word	0x40022300
 8002338:	40022000 	.word	0x40022000
 800233c:	40022100 	.word	0x40022100
 8002340:	cb840000 	.word	0xcb840000
 8002344:	2400001c 	.word	0x2400001c
 8002348:	053e2d63 	.word	0x053e2d63
 800234c:	bac04000 	.word	0xbac04000
 8002350:	cfb80000 	.word	0xcfb80000

08002354 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff faaf 	bl	80018c4 <LL_ADC_IsEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d161      	bne.n	8002430 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <ADC_Enable+0xe8>)
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00d      	beq.n	8002396 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f043 0210 	orr.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e04d      	b.n	8002432 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fa7e 	bl	800189c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023a0:	f7ff f8ec 	bl	800157c <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a6:	4826      	ldr	r0, [pc, #152]	; (8002440 <ADC_Enable+0xec>)
 80023a8:	f7ff fa1c 	bl	80017e4 <LL_ADC_GetMultimode>
 80023ac:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a24      	ldr	r2, [pc, #144]	; (8002444 <ADC_Enable+0xf0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d002      	beq.n	80023be <ADC_Enable+0x6a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	e000      	b.n	80023c0 <ADC_Enable+0x6c>
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <ADC_Enable+0xf4>)
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d02c      	beq.n	8002422 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d130      	bne.n	8002430 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023ce:	e028      	b.n	8002422 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fa75 	bl	80018c4 <LL_ADC_IsEnabled>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d104      	bne.n	80023ea <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fa59 	bl	800189c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ea:	f7ff f8c7 	bl	800157c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d914      	bls.n	8002422 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d00d      	beq.n	8002422 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	f043 0210 	orr.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e007      	b.n	8002432 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d1cf      	bne.n	80023d0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	8000003f 	.word	0x8000003f
 8002440:	40022300 	.word	0x40022300
 8002444:	40022100 	.word	0x40022100
 8002448:	40022000 	.word	0x40022000

0800244c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002454:	4b5f      	ldr	r3, [pc, #380]	; (80025d4 <ADC_ConfigureBoostMode+0x188>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01c      	beq.n	800249a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002460:	f001 fe28 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 8002464:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800246e:	d010      	beq.n	8002492 <ADC_ConfigureBoostMode+0x46>
 8002470:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002474:	d871      	bhi.n	800255a <ADC_ConfigureBoostMode+0x10e>
 8002476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247a:	d002      	beq.n	8002482 <ADC_ConfigureBoostMode+0x36>
 800247c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002480:	d16b      	bne.n	800255a <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	0c1b      	lsrs	r3, r3, #16
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	60fb      	str	r3, [r7, #12]
        break;
 8002490:	e066      	b.n	8002560 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	60fb      	str	r3, [r7, #12]
        break;
 8002498:	e062      	b.n	8002560 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800249a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800249e:	f002 fd71 	bl	8004f84 <HAL_RCCEx_GetPeriphCLKFreq>
 80024a2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024ac:	d051      	beq.n	8002552 <ADC_ConfigureBoostMode+0x106>
 80024ae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024b2:	d854      	bhi.n	800255e <ADC_ConfigureBoostMode+0x112>
 80024b4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024b8:	d047      	beq.n	800254a <ADC_ConfigureBoostMode+0xfe>
 80024ba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024be:	d84e      	bhi.n	800255e <ADC_ConfigureBoostMode+0x112>
 80024c0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024c4:	d03d      	beq.n	8002542 <ADC_ConfigureBoostMode+0xf6>
 80024c6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024ca:	d848      	bhi.n	800255e <ADC_ConfigureBoostMode+0x112>
 80024cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d0:	d033      	beq.n	800253a <ADC_ConfigureBoostMode+0xee>
 80024d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d6:	d842      	bhi.n	800255e <ADC_ConfigureBoostMode+0x112>
 80024d8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024dc:	d029      	beq.n	8002532 <ADC_ConfigureBoostMode+0xe6>
 80024de:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024e2:	d83c      	bhi.n	800255e <ADC_ConfigureBoostMode+0x112>
 80024e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80024e8:	d01a      	beq.n	8002520 <ADC_ConfigureBoostMode+0xd4>
 80024ea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80024ee:	d836      	bhi.n	800255e <ADC_ConfigureBoostMode+0x112>
 80024f0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024f4:	d014      	beq.n	8002520 <ADC_ConfigureBoostMode+0xd4>
 80024f6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024fa:	d830      	bhi.n	800255e <ADC_ConfigureBoostMode+0x112>
 80024fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002500:	d00e      	beq.n	8002520 <ADC_ConfigureBoostMode+0xd4>
 8002502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002506:	d82a      	bhi.n	800255e <ADC_ConfigureBoostMode+0x112>
 8002508:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800250c:	d008      	beq.n	8002520 <ADC_ConfigureBoostMode+0xd4>
 800250e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002512:	d824      	bhi.n	800255e <ADC_ConfigureBoostMode+0x112>
 8002514:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002518:	d002      	beq.n	8002520 <ADC_ConfigureBoostMode+0xd4>
 800251a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800251e:	d11e      	bne.n	800255e <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	0c9b      	lsrs	r3, r3, #18
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	60fb      	str	r3, [r7, #12]
        break;
 8002530:	e016      	b.n	8002560 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	60fb      	str	r3, [r7, #12]
        break;
 8002538:	e012      	b.n	8002560 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	60fb      	str	r3, [r7, #12]
        break;
 8002540:	e00e      	b.n	8002560 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	60fb      	str	r3, [r7, #12]
        break;
 8002548:	e00a      	b.n	8002560 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	09db      	lsrs	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]
        break;
 8002550:	e006      	b.n	8002560 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	60fb      	str	r3, [r7, #12]
        break;
 8002558:	e002      	b.n	8002560 <ADC_ConfigureBoostMode+0x114>
        break;
 800255a:	bf00      	nop
 800255c:	e000      	b.n	8002560 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 800255e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <ADC_ConfigureBoostMode+0x18c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d808      	bhi.n	8002580 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800257c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800257e:	e025      	b.n	80025cc <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a16      	ldr	r2, [pc, #88]	; (80025dc <ADC_ConfigureBoostMode+0x190>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d80a      	bhi.n	800259e <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259a:	609a      	str	r2, [r3, #8]
}
 800259c:	e016      	b.n	80025cc <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <ADC_ConfigureBoostMode+0x194>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d80a      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b8:	609a      	str	r2, [r3, #8]
}
 80025ba:	e007      	b.n	80025cc <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80025ca:	609a      	str	r2, [r3, #8]
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40022300 	.word	0x40022300
 80025d8:	005f5e10 	.word	0x005f5e10
 80025dc:	00bebc20 	.word	0x00bebc20
 80025e0:	017d7840 	.word	0x017d7840

080025e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <__NVIC_SetPriorityGrouping+0x40>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002600:	4013      	ands	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	4313      	orrs	r3, r2
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x40>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00
 8002628:	05fa0000 	.word	0x05fa0000

0800262c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <__NVIC_GetPriorityGrouping+0x18>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	f003 0307 	and.w	r3, r3, #7
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002656:	2b00      	cmp	r3, #0
 8002658:	db0b      	blt.n	8002672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	4907      	ldr	r1, [pc, #28]	; (8002680 <__NVIC_EnableIRQ+0x38>)
 8002662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	2001      	movs	r0, #1
 800266a:	fa00 f202 	lsl.w	r2, r0, r2
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000e100 	.word	0xe000e100

08002684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	db0a      	blt.n	80026ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	490c      	ldr	r1, [pc, #48]	; (80026d0 <__NVIC_SetPriority+0x4c>)
 800269e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	440b      	add	r3, r1
 80026a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ac:	e00a      	b.n	80026c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4908      	ldr	r1, [pc, #32]	; (80026d4 <__NVIC_SetPriority+0x50>)
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3b04      	subs	r3, #4
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	440b      	add	r3, r1
 80026c2:	761a      	strb	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000e100 	.word	0xe000e100
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f1c3 0307 	rsb	r3, r3, #7
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf28      	it	cs
 80026f6:	2304      	movcs	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d902      	bls.n	8002708 <NVIC_EncodePriority+0x30>
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3b03      	subs	r3, #3
 8002706:	e000      	b.n	800270a <NVIC_EncodePriority+0x32>
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002720:	f04f 31ff 	mov.w	r1, #4294967295
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43d9      	mvns	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	4313      	orrs	r3, r2
         );
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002750:	d301      	bcc.n	8002756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <SysTick_Config+0x40>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275e:	210f      	movs	r1, #15
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f7ff ff8e 	bl	8002684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <SysTick_Config+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <SysTick_Config+0x40>)
 8002770:	2207      	movs	r2, #7
 8002772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	e000e010 	.word	0xe000e010

08002784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff29 	bl	80025e4 <__NVIC_SetPriorityGrouping>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff40 	bl	800262c <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff90 	bl	80026d8 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5f 	bl	8002684 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff33 	bl	8002648 <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa4 	bl	8002740 <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8002818:	2304      	movs	r3, #4
 800281a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800281c:	4b52      	ldr	r3, [pc, #328]	; (8002968 <HAL_FLASH_Program+0x164>)
 800281e:	7d1b      	ldrb	r3, [r3, #20]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_FLASH_Program+0x24>
 8002824:	2302      	movs	r3, #2
 8002826:	e09b      	b.n	8002960 <HAL_FLASH_Program+0x15c>
 8002828:	4b4f      	ldr	r3, [pc, #316]	; (8002968 <HAL_FLASH_Program+0x164>)
 800282a:	2201      	movs	r2, #1
 800282c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002834:	d303      	bcc.n	800283e <HAL_FLASH_Program+0x3a>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800283c:	d307      	bcc.n	800284e <HAL_FLASH_Program+0x4a>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4a4a      	ldr	r2, [pc, #296]	; (800296c <HAL_FLASH_Program+0x168>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d906      	bls.n	8002854 <HAL_FLASH_Program+0x50>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4a49      	ldr	r2, [pc, #292]	; (8002970 <HAL_FLASH_Program+0x16c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d802      	bhi.n	8002854 <HAL_FLASH_Program+0x50>
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800284e:	2301      	movs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e00c      	b.n	800286e <HAL_FLASH_Program+0x6a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800285a:	d306      	bcc.n	800286a <HAL_FLASH_Program+0x66>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8002862:	d202      	bcs.n	800286a <HAL_FLASH_Program+0x66>
  {
    bank = FLASH_BANK_2;
 8002864:	2302      	movs	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e001      	b.n	800286e <HAL_FLASH_Program+0x6a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e078      	b.n	8002960 <HAL_FLASH_Program+0x15c>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800286e:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <HAL_FLASH_Program+0x164>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8002874:	69b9      	ldr	r1, [r7, #24]
 8002876:	f24c 3050 	movw	r0, #50000	; 0xc350
 800287a:	f000 f8e1 	bl	8002a40 <FLASH_WaitForLastOperation>
 800287e:	4603      	mov	r3, r0
 8002880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8002884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002888:	2b00      	cmp	r3, #0
 800288a:	d164      	bne.n	8002956 <HAL_FLASH_Program+0x152>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d110      	bne.n	80028b4 <HAL_FLASH_Program+0xb0>
    {
#if defined (FLASH_OPTCR_PG_OTP)
      if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d106      	bne.n	80028a6 <HAL_FLASH_Program+0xa2>
      {
        /* Set OTP_PG bit */
        SET_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 8002898:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_FLASH_Program+0x170>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4a35      	ldr	r2, [pc, #212]	; (8002974 <HAL_FLASH_Program+0x170>)
 800289e:	f043 0320 	orr.w	r3, r3, #32
 80028a2:	6193      	str	r3, [r2, #24]
 80028a4:	e00e      	b.n	80028c4 <HAL_FLASH_Program+0xc0>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80028a6:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_FLASH_Program+0x170>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4a32      	ldr	r2, [pc, #200]	; (8002974 <HAL_FLASH_Program+0x170>)
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	60d3      	str	r3, [r2, #12]
 80028b2:	e007      	b.n	80028c4 <HAL_FLASH_Program+0xc0>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 80028b4:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <HAL_FLASH_Program+0x170>)
 80028b6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80028ba:	4a2e      	ldr	r2, [pc, #184]	; (8002974 <HAL_FLASH_Program+0x170>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 80028c4:	f3bf 8f6f 	isb	sy
}
 80028c8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80028ca:	f3bf 8f4f 	dsb	sy
}
 80028ce:	bf00      	nop

    __ISB();
    __DSB();

#if defined (FLASH_OPTCR_PG_OTP)
    if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d105      	bne.n	80028e2 <HAL_FLASH_Program+0xde>
    {
      /* Program an OTP word (16 bits) */
      *(__IO uint16_t *)FlashAddress = *(__IO uint16_t*)DataAddress;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	8812      	ldrh	r2, [r2, #0]
 80028dc:	b292      	uxth	r2, r2
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	e00f      	b.n	8002902 <HAL_FLASH_Program+0xfe>
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	3304      	adds	r3, #4
 80028ee:	623b      	str	r3, [r7, #32]
        src_addr++;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3304      	adds	r3, #4
 80028f4:	61fb      	str	r3, [r7, #28]
        row_index--;
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ef      	bne.n	80028e2 <HAL_FLASH_Program+0xde>
  __ASM volatile ("isb 0xF":::"memory");
 8002902:	f3bf 8f6f 	isb	sy
}
 8002906:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002908:	f3bf 8f4f 	dsb	sy
}
 800290c:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800290e:	69b9      	ldr	r1, [r7, #24]
 8002910:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002914:	f000 f894 	bl	8002a40 <FLASH_WaitForLastOperation>
 8002918:	4603      	mov	r3, r0
 800291a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

#if defined (DUAL_BANK)
#if defined (FLASH_OPTCR_PG_OTP)
    if (TypeProgram == FLASH_TYPEPROGRAM_OTPWORD)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d106      	bne.n	8002932 <HAL_FLASH_Program+0x12e>
    {
      /* If the program operation is completed, disable the OTP_PG */
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_FLASH_Program+0x170>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_FLASH_Program+0x170>)
 800292a:	f023 0320 	bic.w	r3, r3, #32
 800292e:	6193      	str	r3, [r2, #24]
 8002930:	e011      	b.n	8002956 <HAL_FLASH_Program+0x152>
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d106      	bne.n	8002946 <HAL_FLASH_Program+0x142>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_FLASH_Program+0x170>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <HAL_FLASH_Program+0x170>)
 800293e:	f023 0302 	bic.w	r3, r3, #2
 8002942:	60d3      	str	r3, [r2, #12]
 8002944:	e007      	b.n	8002956 <HAL_FLASH_Program+0x152>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_FLASH_Program+0x170>)
 8002948:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800294c:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_FLASH_Program+0x170>)
 800294e:	f023 0302 	bic.w	r3, r3, #2
 8002952:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_FLASH_Program+0x164>)
 8002958:	2200      	movs	r2, #0
 800295a:	751a      	strb	r2, [r3, #20]

  return status;
 800295c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002960:	4618      	mov	r0, r3
 8002962:	3728      	adds	r7, #40	; 0x28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	24001250 	.word	0x24001250
 800296c:	08ffefff 	.word	0x08ffefff
 8002970:	08fff3ff 	.word	0x08fff3ff
 8002974:	52002000 	.word	0x52002000

08002978 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_FLASH_Unlock+0x68>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_FLASH_Unlock+0x68>)
 800298a:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <HAL_FLASH_Unlock+0x6c>)
 800298c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_FLASH_Unlock+0x68>)
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <HAL_FLASH_Unlock+0x70>)
 8002992:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_FLASH_Unlock+0x68>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e018      	b.n	80029d6 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_FLASH_Unlock+0x68>)
 80029a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d010      	beq.n	80029d4 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_FLASH_Unlock+0x68>)
 80029b4:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <HAL_FLASH_Unlock+0x6c>)
 80029b6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_FLASH_Unlock+0x68>)
 80029bc:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_FLASH_Unlock+0x70>)
 80029be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_FLASH_Unlock+0x68>)
 80029c4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	52002000 	.word	0x52002000
 80029e4:	45670123 	.word	0x45670123
 80029e8:	cdef89ab 	.word	0xcdef89ab

080029ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_FLASH_Lock+0x50>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <HAL_FLASH_Lock+0x50>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <HAL_FLASH_Lock+0x50>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e011      	b.n	8002a30 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_FLASH_Lock+0x50>)
 8002a0e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_FLASH_Lock+0x50>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <HAL_FLASH_Lock+0x50>)
 8002a1e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	52002000 	.word	0x52002000

08002a40 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8002a52:	f7fe fd93 	bl	800157c <HAL_GetTick>
 8002a56:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d113      	bne.n	8002a86 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8002a5e:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <FLASH_WaitForLastOperation+0x124>)
 8002a60:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002a62:	e010      	b.n	8002a86 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d00c      	beq.n	8002a86 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	f7fe fd86 	bl	800157c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <FLASH_WaitForLastOperation+0x42>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e06a      	b.n	8002b5c <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <FLASH_WaitForLastOperation+0x128>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d10a      	bne.n	8002aa8 <FLASH_WaitForLastOperation+0x68>
 8002a92:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <FLASH_WaitForLastOperation+0x12c>)
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e00c      	b.n	8002ac2 <FLASH_WaitForLastOperation+0x82>
 8002aa8:	4b30      	ldr	r3, [pc, #192]	; (8002b6c <FLASH_WaitForLastOperation+0x12c>)
 8002aaa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1ce      	bne.n	8002a64 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <FLASH_WaitForLastOperation+0x12c>)
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <FLASH_WaitForLastOperation+0x130>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e007      	b.n	8002ae8 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <FLASH_WaitForLastOperation+0x12c>)
 8002ada:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002ade:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <FLASH_WaitForLastOperation+0x130>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae6:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <FLASH_WaitForLastOperation+0x134>)
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <FLASH_WaitForLastOperation+0x134>)
 8002afc:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <FLASH_WaitForLastOperation+0x128>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d103      	bne.n	8002b12 <FLASH_WaitForLastOperation+0xd2>
 8002b0a:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <FLASH_WaitForLastOperation+0x12c>)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	6153      	str	r3, [r2, #20]
 8002b10:	e005      	b.n	8002b1e <FLASH_WaitForLastOperation+0xde>
 8002b12:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <FLASH_WaitForLastOperation+0x12c>)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b1a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e01c      	b.n	8002b5c <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10b      	bne.n	8002b40 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <FLASH_WaitForLastOperation+0x12c>)
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b34:	d111      	bne.n	8002b5a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <FLASH_WaitForLastOperation+0x12c>)
 8002b38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b3c:	615a      	str	r2, [r3, #20]
 8002b3e:	e00c      	b.n	8002b5a <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <FLASH_WaitForLastOperation+0x12c>)
 8002b42:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4e:	d104      	bne.n	8002b5a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <FLASH_WaitForLastOperation+0x12c>)
 8002b52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b56:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	80000004 	.word	0x80000004
 8002b68:	1faf000f 	.word	0x1faf000f
 8002b6c:	52002000 	.word	0x52002000
 8002b70:	17ae0000 	.word	0x17ae0000
 8002b74:	24001250 	.word	0x24001250

08002b78 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b86:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <HAL_FLASHEx_Erase+0x188>)
 8002b88:	7d1b      	ldrb	r3, [r3, #20]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_FLASHEx_Erase+0x1a>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e0b2      	b.n	8002cf8 <HAL_FLASHEx_Erase+0x180>
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_FLASHEx_Erase+0x188>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b98:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_FLASHEx_Erase+0x188>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8002baa:	2101      	movs	r1, #1
 8002bac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bb0:	f7ff ff46 	bl	8002a40 <FLASH_WaitForLastOperation>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002bca:	2102      	movs	r1, #2
 8002bcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bd0:	f7ff ff36 	bl	8002a40 <FLASH_WaitForLastOperation>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 8085 	bne.w	8002cf0 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d136      	bne.n	8002c5c <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f000 f887 	bl	8002d0c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00f      	beq.n	8002c2a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c10:	f7ff ff16 	bl	8002a40 <FLASH_WaitForLastOperation>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8002c1e:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <HAL_FLASHEx_Erase+0x18c>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <HAL_FLASHEx_Erase+0x18c>)
 8002c24:	f023 0308 	bic.w	r3, r3, #8
 8002c28:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d05c      	beq.n	8002cf0 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8002c36:	2102      	movs	r1, #2
 8002c38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c3c:	f7ff ff00 	bl	8002a40 <FLASH_WaitForLastOperation>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <HAL_FLASHEx_Erase+0x18c>)
 8002c4c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002c50:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <HAL_FLASHEx_Erase+0x18c>)
 8002c52:	f023 0308 	bic.w	r3, r3, #8
 8002c56:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8002c5a:	e049      	b.n	8002cf0 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c62:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	e039      	b.n	8002ce0 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	461a      	mov	r2, r3
 8002c76:	68b8      	ldr	r0, [r7, #8]
 8002c78:	f000 f87a 	bl	8002d70 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8002c88:	2101      	movs	r1, #1
 8002c8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c8e:	f7ff fed7 	bl	8002a40 <FLASH_WaitForLastOperation>
 8002c92:	4603      	mov	r3, r0
 8002c94:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_FLASHEx_Erase+0x18c>)
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	491a      	ldr	r1, [pc, #104]	; (8002d04 <HAL_FLASHEx_Erase+0x18c>)
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_FLASHEx_Erase+0x190>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00e      	beq.n	8002ccc <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8002cae:	2102      	movs	r1, #2
 8002cb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cb4:	f7ff fec4 	bl	8002a40 <FLASH_WaitForLastOperation>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_FLASHEx_Erase+0x18c>)
 8002cbe:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002cc2:	4910      	ldr	r1, [pc, #64]	; (8002d04 <HAL_FLASHEx_Erase+0x18c>)
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_FLASHEx_Erase+0x190>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	601a      	str	r2, [r3, #0]
          break;
 8002cd8:	e00a      	b.n	8002cf0 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4413      	add	r3, r2
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d3bd      	bcc.n	8002c6c <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <HAL_FLASHEx_Erase+0x188>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	751a      	strb	r2, [r3, #20]

  return status;
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	24001250 	.word	0x24001250
 8002d04:	52002000 	.word	0x52002000
 8002d08:	ffffe03b 	.word	0xffffe03b

08002d0c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d106      	bne.n	8002d2e <FLASH_MassErase+0x22>
    FLASH->CR1 |= VoltageRange;
    FLASH->CR2 |= VoltageRange;
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <FLASH_MassErase+0x60>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <FLASH_MassErase+0x60>)
 8002d26:	f043 0310 	orr.w	r3, r3, #16
 8002d2a:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8002d2c:	e017      	b.n	8002d5e <FLASH_MassErase+0x52>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <FLASH_MassErase+0x38>
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <FLASH_MassErase+0x60>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <FLASH_MassErase+0x60>)
 8002d3e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002d42:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <FLASH_MassErase+0x52>
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <FLASH_MassErase+0x60>)
 8002d50:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002d54:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <FLASH_MassErase+0x60>)
 8002d56:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002d5a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	52002000 	.word	0x52002000

08002d70 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00e      	beq.n	8002da4 <FLASH_Erase_Sector+0x34>
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#else
    /* Reset Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_SNB);
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <FLASH_Erase_Sector+0x70>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <FLASH_Erase_Sector+0x70>)
 8002d8c:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8002d90:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <FLASH_Erase_Sector+0x70>)
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <FLASH_Erase_Sector+0x70>)
 8002d9e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8002da2:	60d3      	str	r3, [r2, #12]
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <FLASH_Erase_Sector+0x64>
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#else
    /* Reset Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_SNB);
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <FLASH_Erase_Sector+0x70>)
 8002db0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <FLASH_Erase_Sector+0x70>)
 8002db6:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8002dba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <FLASH_Erase_Sector+0x70>)
 8002dc0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	019b      	lsls	r3, r3, #6
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <FLASH_Erase_Sector+0x70>)
 8002dcc:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8002dd0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	52002000 	.word	0x52002000

08002de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002df2:	4b89      	ldr	r3, [pc, #548]	; (8003018 <HAL_GPIO_Init+0x234>)
 8002df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002df6:	e194      	b.n	8003122 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8186 	beq.w	800311c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d005      	beq.n	8002e28 <HAL_GPIO_Init+0x44>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d130      	bne.n	8002e8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e5e:	2201      	movs	r2, #1
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f003 0201 	and.w	r2, r3, #1
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d017      	beq.n	8002ec6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d123      	bne.n	8002f1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	08da      	lsrs	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3208      	adds	r2, #8
 8002eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	69b9      	ldr	r1, [r7, #24]
 8002f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0203 	and.w	r2, r3, #3
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80e0 	beq.w	800311c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <HAL_GPIO_Init+0x238>)
 8002f5e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002f62:	4a2e      	ldr	r2, [pc, #184]	; (800301c <HAL_GPIO_Init+0x238>)
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002f6c:	4b2b      	ldr	r3, [pc, #172]	; (800301c <HAL_GPIO_Init+0x238>)
 8002f6e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f7a:	4a29      	ldr	r2, [pc, #164]	; (8003020 <HAL_GPIO_Init+0x23c>)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a20      	ldr	r2, [pc, #128]	; (8003024 <HAL_GPIO_Init+0x240>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d052      	beq.n	800304c <HAL_GPIO_Init+0x268>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_GPIO_Init+0x244>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d031      	beq.n	8003012 <HAL_GPIO_Init+0x22e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_GPIO_Init+0x248>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02b      	beq.n	800300e <HAL_GPIO_Init+0x22a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <HAL_GPIO_Init+0x24c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d025      	beq.n	800300a <HAL_GPIO_Init+0x226>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_GPIO_Init+0x250>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01f      	beq.n	8003006 <HAL_GPIO_Init+0x222>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <HAL_GPIO_Init+0x254>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d019      	beq.n	8003002 <HAL_GPIO_Init+0x21e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1a      	ldr	r2, [pc, #104]	; (800303c <HAL_GPIO_Init+0x258>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_GPIO_Init+0x21a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a19      	ldr	r2, [pc, #100]	; (8003040 <HAL_GPIO_Init+0x25c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00d      	beq.n	8002ffa <HAL_GPIO_Init+0x216>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_GPIO_Init+0x260>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_Init+0x212>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a17      	ldr	r2, [pc, #92]	; (8003048 <HAL_GPIO_Init+0x264>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_GPIO_Init+0x20e>
 8002fee:	2309      	movs	r3, #9
 8002ff0:	e02d      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8002ff2:	230a      	movs	r3, #10
 8002ff4:	e02b      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	e029      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8002ffa:	2307      	movs	r3, #7
 8002ffc:	e027      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8002ffe:	2306      	movs	r3, #6
 8003000:	e025      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8003002:	2305      	movs	r3, #5
 8003004:	e023      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8003006:	2304      	movs	r3, #4
 8003008:	e021      	b.n	800304e <HAL_GPIO_Init+0x26a>
 800300a:	2303      	movs	r3, #3
 800300c:	e01f      	b.n	800304e <HAL_GPIO_Init+0x26a>
 800300e:	2302      	movs	r3, #2
 8003010:	e01d      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8003012:	2301      	movs	r3, #1
 8003014:	e01b      	b.n	800304e <HAL_GPIO_Init+0x26a>
 8003016:	bf00      	nop
 8003018:	58000080 	.word	0x58000080
 800301c:	58024400 	.word	0x58024400
 8003020:	58000400 	.word	0x58000400
 8003024:	58020000 	.word	0x58020000
 8003028:	58020400 	.word	0x58020400
 800302c:	58020800 	.word	0x58020800
 8003030:	58020c00 	.word	0x58020c00
 8003034:	58021000 	.word	0x58021000
 8003038:	58021400 	.word	0x58021400
 800303c:	58021800 	.word	0x58021800
 8003040:	58021c00 	.word	0x58021c00
 8003044:	58022000 	.word	0x58022000
 8003048:	58022400 	.word	0x58022400
 800304c:	2300      	movs	r3, #0
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	f002 0203 	and.w	r2, r2, #3
 8003054:	0092      	lsls	r2, r2, #2
 8003056:	4093      	lsls	r3, r2
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800305e:	4938      	ldr	r1, [pc, #224]	; (8003140 <HAL_GPIO_Init+0x35c>)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	3302      	adds	r3, #2
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800309a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	f47f ae63 	bne.w	8002df8 <HAL_GPIO_Init+0x14>
  }
}
 8003132:	bf00      	nop
 8003134:	bf00      	nop
 8003136:	3724      	adds	r7, #36	; 0x24
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	58000400 	.word	0x58000400

08003144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
 8003150:	4613      	mov	r3, r2
 8003152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003154:	787b      	ldrb	r3, [r7, #1]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003160:	e003      	b.n	800316a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003162:	887b      	ldrh	r3, [r7, #2]
 8003164:	041a      	lsls	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	619a      	str	r2, [r3, #24]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a04      	ldr	r2, [pc, #16]	; (8003194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	58024800 	.word	0x58024800

08003198 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80031a0:	4b29      	ldr	r3, [pc, #164]	; (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d00a      	beq.n	80031c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031ac:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e040      	b.n	8003240 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e03e      	b.n	8003240 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031c2:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80031ca:	491f      	ldr	r1, [pc, #124]	; (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031d2:	f7fe f9d3 	bl	800157c <HAL_GetTick>
 80031d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031d8:	e009      	b.n	80031ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031da:	f7fe f9cf 	bl	800157c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031e8:	d901      	bls.n	80031ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e028      	b.n	8003240 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fa:	d1ee      	bne.n	80031da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b1e      	cmp	r3, #30
 8003200:	d008      	beq.n	8003214 <HAL_PWREx_ConfigSupply+0x7c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b2e      	cmp	r3, #46	; 0x2e
 8003206:	d005      	beq.n	8003214 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b1d      	cmp	r3, #29
 800320c:	d002      	beq.n	8003214 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b2d      	cmp	r3, #45	; 0x2d
 8003212:	d114      	bne.n	800323e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003214:	f7fe f9b2 	bl	800157c <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800321a:	e009      	b.n	8003230 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800321c:	f7fe f9ae 	bl	800157c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800322a:	d901      	bls.n	8003230 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e007      	b.n	8003240 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_PWREx_ConfigSupply+0xb0>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d1ee      	bne.n	800321c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	58024800 	.word	0x58024800

0800324c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	; 0x30
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e3f3      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80b3 	beq.w	80033d2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800326c:	4b9e      	ldr	r3, [pc, #632]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003276:	4b9c      	ldr	r3, [pc, #624]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	2b10      	cmp	r3, #16
 8003280:	d007      	beq.n	8003292 <HAL_RCC_OscConfig+0x46>
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	2b18      	cmp	r3, #24
 8003286:	d112      	bne.n	80032ae <HAL_RCC_OscConfig+0x62>
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d10d      	bne.n	80032ae <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003292:	4b95      	ldr	r3, [pc, #596]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8098 	beq.w	80033d0 <HAL_RCC_OscConfig+0x184>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f040 8093 	bne.w	80033d0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e3cb      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x7a>
 80032b8:	4b8b      	ldr	r3, [pc, #556]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a8a      	ldr	r2, [pc, #552]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e058      	b.n	8003378 <HAL_RCC_OscConfig+0x12c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d112      	bne.n	80032f4 <HAL_RCC_OscConfig+0xa8>
 80032ce:	4b86      	ldr	r3, [pc, #536]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a85      	ldr	r2, [pc, #532]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80032d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b83      	ldr	r3, [pc, #524]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a82      	ldr	r2, [pc, #520]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80032e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b80      	ldr	r3, [pc, #512]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7f      	ldr	r2, [pc, #508]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80032ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e041      	b.n	8003378 <HAL_RCC_OscConfig+0x12c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d112      	bne.n	8003324 <HAL_RCC_OscConfig+0xd8>
 80032fe:	4b7a      	ldr	r3, [pc, #488]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a79      	ldr	r2, [pc, #484]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b77      	ldr	r3, [pc, #476]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a76      	ldr	r2, [pc, #472]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003310:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b74      	ldr	r3, [pc, #464]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a73      	ldr	r2, [pc, #460]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e029      	b.n	8003378 <HAL_RCC_OscConfig+0x12c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800332c:	d112      	bne.n	8003354 <HAL_RCC_OscConfig+0x108>
 800332e:	4b6e      	ldr	r3, [pc, #440]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6d      	ldr	r2, [pc, #436]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b6b      	ldr	r3, [pc, #428]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6a      	ldr	r2, [pc, #424]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a67      	ldr	r2, [pc, #412]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e011      	b.n	8003378 <HAL_RCC_OscConfig+0x12c>
 8003354:	4b64      	ldr	r3, [pc, #400]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a63      	ldr	r2, [pc, #396]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a60      	ldr	r2, [pc, #384]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	4b5e      	ldr	r3, [pc, #376]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003372:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d013      	beq.n	80033a8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe f8fc 	bl	800157c <HAL_GetTick>
 8003384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003388:	f7fe f8f8 	bl	800157c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e355      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800339a:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x13c>
 80033a6:	e014      	b.n	80033d2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe f8e8 	bl	800157c <HAL_GetTick>
 80033ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b0:	f7fe f8e4 	bl	800157c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e341      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033c2:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x164>
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 808c 	beq.w	80034f8 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e0:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033ea:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_RCC_OscConfig+0x1ba>
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2b18      	cmp	r3, #24
 80033fa:	d137      	bne.n	800346c <HAL_RCC_OscConfig+0x220>
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d132      	bne.n	800346c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003406:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_RCC_OscConfig+0x1d2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e313      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800341e:	4b32      	ldr	r3, [pc, #200]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 0219 	bic.w	r2, r3, #25
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	492f      	ldr	r1, [pc, #188]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003430:	f7fe f8a4 	bl	800157c <HAL_GetTick>
 8003434:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003438:	f7fe f8a0 	bl	800157c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e2fd      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800344a:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003456:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	061b      	lsls	r3, r3, #24
 8003464:	4920      	ldr	r1, [pc, #128]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800346a:	e045      	b.n	80034f8 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d026      	beq.n	80034c2 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003474:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 0219 	bic.w	r2, r3, #25
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4919      	ldr	r1, [pc, #100]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fe f879 	bl	800157c <HAL_GetTick>
 800348a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348e:	f7fe f875 	bl	800157c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e2d2      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	490b      	ldr	r1, [pc, #44]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
 80034c0:	e01a      	b.n	80034f8 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <HAL_RCC_OscConfig+0x29c>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fe f855 	bl	800157c <HAL_GetTick>
 80034d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d6:	f7fe f851 	bl	800157c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d903      	bls.n	80034ec <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e2ae      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
 80034e8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034ec:	4b99      	ldr	r3, [pc, #612]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ee      	bne.n	80034d6 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	d06a      	beq.n	80035da <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003504:	4b93      	ldr	r3, [pc, #588]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800350c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800350e:	4b91      	ldr	r3, [pc, #580]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b08      	cmp	r3, #8
 8003518:	d007      	beq.n	800352a <HAL_RCC_OscConfig+0x2de>
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b18      	cmp	r3, #24
 800351e:	d11b      	bne.n	8003558 <HAL_RCC_OscConfig+0x30c>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d116      	bne.n	8003558 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800352a:	4b8a      	ldr	r3, [pc, #552]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_RCC_OscConfig+0x2f6>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	2b80      	cmp	r3, #128	; 0x80
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e281      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003542:	4b84      	ldr	r3, [pc, #528]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	061b      	lsls	r3, r3, #24
 8003550:	4980      	ldr	r1, [pc, #512]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003552:	4313      	orrs	r3, r2
 8003554:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003556:	e040      	b.n	80035da <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d023      	beq.n	80035a8 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003560:	4b7c      	ldr	r3, [pc, #496]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a7b      	ldr	r2, [pc, #492]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe f806 	bl	800157c <HAL_GetTick>
 8003570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003574:	f7fe f802 	bl	800157c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e25f      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003586:	4b73      	ldr	r3, [pc, #460]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003592:	4b70      	ldr	r3, [pc, #448]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	061b      	lsls	r3, r3, #24
 80035a0:	496c      	ldr	r1, [pc, #432]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60cb      	str	r3, [r1, #12]
 80035a6:	e018      	b.n	80035da <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a69      	ldr	r2, [pc, #420]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 80035ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd ffe2 	bl	800157c <HAL_GetTick>
 80035b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035bc:	f7fd ffde 	bl	800157c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e23b      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035ce:	4b61      	ldr	r3, [pc, #388]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d036      	beq.n	8003654 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d019      	beq.n	8003622 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ee:	4b59      	ldr	r3, [pc, #356]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 80035f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f2:	4a58      	ldr	r2, [pc, #352]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fd ffbf 	bl	800157c <HAL_GetTick>
 80035fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003602:	f7fd ffbb 	bl	800157c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e218      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003614:	4b4f      	ldr	r3, [pc, #316]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x3b6>
 8003620:	e018      	b.n	8003654 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003622:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	4a4b      	ldr	r2, [pc, #300]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fd ffa5 	bl	800157c <HAL_GetTick>
 8003632:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003636:	f7fd ffa1 	bl	800157c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e1fe      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003648:	4b42      	ldr	r3, [pc, #264]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 800364a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d036      	beq.n	80036ce <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d019      	beq.n	800369c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003668:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a39      	ldr	r2, [pc, #228]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 800366e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003672:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003674:	f7fd ff82 	bl	800157c <HAL_GetTick>
 8003678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800367c:	f7fd ff7e 	bl	800157c <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e1db      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x430>
 800369a:	e018      	b.n	80036ce <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800369c:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2c      	ldr	r2, [pc, #176]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 80036a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036a8:	f7fd ff68 	bl	800157c <HAL_GetTick>
 80036ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036b0:	f7fd ff64 	bl	800157c <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e1c1      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80af 	beq.w	800383a <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_RCC_OscConfig+0x50c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_RCC_OscConfig+0x50c>)
 80036e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036e8:	f7fd ff48 	bl	800157c <HAL_GetTick>
 80036ec:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036f0:	f7fd ff44 	bl	800157c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	; 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e1a1      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <HAL_RCC_OscConfig+0x50c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x4d8>
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	e05b      	b.n	80037dc <HAL_RCC_OscConfig+0x590>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d117      	bne.n	800375c <HAL_RCC_OscConfig+0x510>
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a08      	ldr	r2, [pc, #32]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a05      	ldr	r2, [pc, #20]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 800373e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a02      	ldr	r2, [pc, #8]	; (8003754 <HAL_RCC_OscConfig+0x508>)
 800374a:	f023 0304 	bic.w	r3, r3, #4
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
 8003750:	e044      	b.n	80037dc <HAL_RCC_OscConfig+0x590>
 8003752:	bf00      	nop
 8003754:	58024400 	.word	0x58024400
 8003758:	58024800 	.word	0x58024800
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d112      	bne.n	800378a <HAL_RCC_OscConfig+0x53e>
 8003764:	4b95      	ldr	r3, [pc, #596]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a94      	ldr	r2, [pc, #592]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
 8003770:	4b92      	ldr	r3, [pc, #584]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a91      	ldr	r2, [pc, #580]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	4b8f      	ldr	r3, [pc, #572]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4a8e      	ldr	r2, [pc, #568]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	; 0x70
 8003788:	e028      	b.n	80037dc <HAL_RCC_OscConfig+0x590>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b85      	cmp	r3, #133	; 0x85
 8003790:	d112      	bne.n	80037b8 <HAL_RCC_OscConfig+0x56c>
 8003792:	4b8a      	ldr	r3, [pc, #552]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a89      	ldr	r2, [pc, #548]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
 800379e:	4b87      	ldr	r3, [pc, #540]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	4a86      	ldr	r2, [pc, #536]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80037a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a8:	6713      	str	r3, [r2, #112]	; 0x70
 80037aa:	4b84      	ldr	r3, [pc, #528]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4a83      	ldr	r2, [pc, #524]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
 80037b6:	e011      	b.n	80037dc <HAL_RCC_OscConfig+0x590>
 80037b8:	4b80      	ldr	r3, [pc, #512]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4a7f      	ldr	r2, [pc, #508]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	; 0x70
 80037c4:	4b7d      	ldr	r3, [pc, #500]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4a7c      	ldr	r2, [pc, #496]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80037ca:	f023 0304 	bic.w	r3, r3, #4
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70
 80037d0:	4b7a      	ldr	r3, [pc, #488]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a79      	ldr	r2, [pc, #484]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80037d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fd feca 	bl	800157c <HAL_GetTick>
 80037e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ec:	f7fd fec6 	bl	800157c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e121      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003802:	4b6e      	ldr	r3, [pc, #440]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0ee      	beq.n	80037ec <HAL_RCC_OscConfig+0x5a0>
 800380e:	e014      	b.n	800383a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fd feb4 	bl	800157c <HAL_GetTick>
 8003814:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fd feb0 	bl	800157c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e10b      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800382e:	4b63      	ldr	r3, [pc, #396]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ee      	bne.n	8003818 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8100 	beq.w	8003a44 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003844:	4b5d      	ldr	r3, [pc, #372]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384c:	2b18      	cmp	r3, #24
 800384e:	f000 80bb 	beq.w	80039c8 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b02      	cmp	r3, #2
 8003858:	f040 8095 	bne.w	8003986 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385c:	4b57      	ldr	r3, [pc, #348]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a56      	ldr	r2, [pc, #344]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd fe88 	bl	800157c <HAL_GetTick>
 800386c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003870:	f7fd fe84 	bl	800157c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0e1      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003882:	4b4e      	ldr	r3, [pc, #312]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388e:	4b4b      	ldr	r3, [pc, #300]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003892:	4b4b      	ldr	r3, [pc, #300]	; (80039c0 <HAL_RCC_OscConfig+0x774>)
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	430a      	orrs	r2, r1
 80038a2:	4946      	ldr	r1, [pc, #280]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	628b      	str	r3, [r1, #40]	; 0x28
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	3b01      	subs	r3, #1
 80038ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	3b01      	subs	r3, #1
 80038b8:	025b      	lsls	r3, r3, #9
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	3b01      	subs	r3, #1
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	3b01      	subs	r3, #1
 80038d2:	061b      	lsls	r3, r3, #24
 80038d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038d8:	4938      	ldr	r1, [pc, #224]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80038de:	4b37      	ldr	r3, [pc, #220]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	4a36      	ldr	r2, [pc, #216]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038ea:	4b34      	ldr	r3, [pc, #208]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80038ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ee:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <HAL_RCC_OscConfig+0x778>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038f6:	00d2      	lsls	r2, r2, #3
 80038f8:	4930      	ldr	r1, [pc, #192]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80038fe:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	f023 020c 	bic.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	492c      	ldr	r1, [pc, #176]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 800390c:	4313      	orrs	r3, r2
 800390e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003910:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	f023 0202 	bic.w	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	4927      	ldr	r1, [pc, #156]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 800391e:	4313      	orrs	r3, r2
 8003920:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	4a25      	ldr	r2, [pc, #148]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4a22      	ldr	r2, [pc, #136]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003944:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a19      	ldr	r2, [pc, #100]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fd fe0d 	bl	800157c <HAL_GetTick>
 8003962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003966:	f7fd fe09 	bl	800157c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e066      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003978:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x71a>
 8003984:	e05e      	b.n	8003a44 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 800398c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fd fdf3 	bl	800157c <HAL_GetTick>
 8003996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399a:	f7fd fdef 	bl	800157c <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e04c      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_RCC_OscConfig+0x770>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x74e>
 80039b8:	e044      	b.n	8003a44 <HAL_RCC_OscConfig+0x7f8>
 80039ba:	bf00      	nop
 80039bc:	58024400 	.word	0x58024400
 80039c0:	fffffc0c 	.word	0xfffffc0c
 80039c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80039c8:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <HAL_RCC_OscConfig+0x804>)
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_RCC_OscConfig+0x804>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d031      	beq.n	8003a40 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f003 0203 	and.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d12a      	bne.n	8003a40 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d122      	bne.n	8003a40 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d11a      	bne.n	8003a40 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	0a5b      	lsrs	r3, r3, #9
 8003a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a16:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d111      	bne.n	8003a40 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d108      	bne.n	8003a40 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	0e1b      	lsrs	r3, r3, #24
 8003a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3730      	adds	r7, #48	; 0x30
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	58024400 	.word	0x58024400

08003a54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e19c      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b8a      	ldr	r3, [pc, #552]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d910      	bls.n	8003a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b87      	ldr	r3, [pc, #540]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 020f 	bic.w	r2, r3, #15
 8003a7e:	4985      	ldr	r1, [pc, #532]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b83      	ldr	r3, [pc, #524]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e184      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	4b7b      	ldr	r3, [pc, #492]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d908      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ab4:	4b78      	ldr	r3, [pc, #480]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	4975      	ldr	r1, [pc, #468]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	4b70      	ldr	r3, [pc, #448]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d908      	bls.n	8003af4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ae2:	4b6d      	ldr	r3, [pc, #436]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	496a      	ldr	r1, [pc, #424]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d010      	beq.n	8003b22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	4b64      	ldr	r3, [pc, #400]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d908      	bls.n	8003b22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b10:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	495e      	ldr	r1, [pc, #376]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d908      	bls.n	8003b50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b3e:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	4953      	ldr	r1, [pc, #332]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d010      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	4b4d      	ldr	r3, [pc, #308]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d908      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f023 020f 	bic.w	r2, r3, #15
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4947      	ldr	r1, [pc, #284]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d055      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b8a:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	4940      	ldr	r1, [pc, #256]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ba4:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d121      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0f6      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d107      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bbc:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d115      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0ea      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bd4:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0de      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003be4:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0d6      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bf4:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f023 0207 	bic.w	r2, r3, #7
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4925      	ldr	r1, [pc, #148]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c06:	f7fd fcb9 	bl	800157c <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0e:	f7fd fcb5 	bl	800157c <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0be      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c24:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d1eb      	bne.n	8003c0e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d010      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d208      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f023 020f 	bic.w	r2, r3, #15
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	490e      	ldr	r1, [pc, #56]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d214      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 020f 	bic.w	r2, r3, #15
 8003c7a:	4906      	ldr	r1, [pc, #24]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e086      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
 8003c94:	52002000 	.word	0x52002000
 8003c98:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d208      	bcs.n	8003cca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cb8:	4b3c      	ldr	r3, [pc, #240]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	4939      	ldr	r1, [pc, #228]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	4b34      	ldr	r3, [pc, #208]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d208      	bcs.n	8003cf8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ce6:	4b31      	ldr	r3, [pc, #196]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	492e      	ldr	r1, [pc, #184]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699a      	ldr	r2, [r3, #24]
 8003d08:	4b28      	ldr	r3, [pc, #160]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d208      	bcs.n	8003d26 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	4922      	ldr	r1, [pc, #136]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d010      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d208      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4917      	ldr	r1, [pc, #92]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003d54:	f000 f834 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	4912      	ldr	r1, [pc, #72]	; (8003db0 <HAL_RCC_ClockConfig+0x35c>)
 8003d66:	5ccb      	ldrb	r3, [r1, r3]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d70:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <HAL_RCC_ClockConfig+0x35c>)
 8003d7c:	5cd3      	ldrb	r3, [r2, r3]
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x360>)
 8003d8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <HAL_RCC_ClockConfig+0x364>)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <HAL_RCC_ClockConfig+0x368>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd fba6 	bl	80014e8 <HAL_InitTick>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	58024400 	.word	0x58024400
 8003db0:	0800880c 	.word	0x0800880c
 8003db4:	24000020 	.word	0x24000020
 8003db8:	2400001c 	.word	0x2400001c
 8003dbc:	24000024 	.word	0x24000024

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b089      	sub	sp, #36	; 0x24
 8003dc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dc6:	4bb3      	ldr	r3, [pc, #716]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dce:	2b18      	cmp	r3, #24
 8003dd0:	f200 8155 	bhi.w	800407e <HAL_RCC_GetSysClockFreq+0x2be>
 8003dd4:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <HAL_RCC_GetSysClockFreq+0x1c>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003e41 	.word	0x08003e41
 8003de0:	0800407f 	.word	0x0800407f
 8003de4:	0800407f 	.word	0x0800407f
 8003de8:	0800407f 	.word	0x0800407f
 8003dec:	0800407f 	.word	0x0800407f
 8003df0:	0800407f 	.word	0x0800407f
 8003df4:	0800407f 	.word	0x0800407f
 8003df8:	0800407f 	.word	0x0800407f
 8003dfc:	08003e67 	.word	0x08003e67
 8003e00:	0800407f 	.word	0x0800407f
 8003e04:	0800407f 	.word	0x0800407f
 8003e08:	0800407f 	.word	0x0800407f
 8003e0c:	0800407f 	.word	0x0800407f
 8003e10:	0800407f 	.word	0x0800407f
 8003e14:	0800407f 	.word	0x0800407f
 8003e18:	0800407f 	.word	0x0800407f
 8003e1c:	08003e6d 	.word	0x08003e6d
 8003e20:	0800407f 	.word	0x0800407f
 8003e24:	0800407f 	.word	0x0800407f
 8003e28:	0800407f 	.word	0x0800407f
 8003e2c:	0800407f 	.word	0x0800407f
 8003e30:	0800407f 	.word	0x0800407f
 8003e34:	0800407f 	.word	0x0800407f
 8003e38:	0800407f 	.word	0x0800407f
 8003e3c:	08003e73 	.word	0x08003e73
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e40:	4b94      	ldr	r3, [pc, #592]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e4c:	4b91      	ldr	r3, [pc, #580]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	08db      	lsrs	r3, r3, #3
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	4a90      	ldr	r2, [pc, #576]	; (8004098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003e5e:	e111      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e60:	4b8d      	ldr	r3, [pc, #564]	; (8004098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e62:	61bb      	str	r3, [r7, #24]
    break;
 8003e64:	e10e      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003e66:	4b8d      	ldr	r3, [pc, #564]	; (800409c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e68:	61bb      	str	r3, [r7, #24]
    break;
 8003e6a:	e10b      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003e6c:	4b8c      	ldr	r3, [pc, #560]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e6e:	61bb      	str	r3, [r7, #24]
    break;
 8003e70:	e108      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e72:	4b88      	ldr	r3, [pc, #544]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003e7c:	4b85      	ldr	r3, [pc, #532]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e88:	4b82      	ldr	r3, [pc, #520]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003e92:	4b80      	ldr	r3, [pc, #512]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	08db      	lsrs	r3, r3, #3
 8003e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80e1 	beq.w	8004078 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	f000 8083 	beq.w	8003fc4 <HAL_RCC_GetSysClockFreq+0x204>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	f200 80a1 	bhi.w	8004008 <HAL_RCC_GetSysClockFreq+0x248>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x114>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d056      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ed2:	e099      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ed4:	4b6f      	ldr	r3, [pc, #444]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d02d      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ee0:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	08db      	lsrs	r3, r3, #3
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	4a6b      	ldr	r2, [pc, #428]	; (8004098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	ee07 3a90 	vmov	s15, r3
 8003ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0a:	4b62      	ldr	r3, [pc, #392]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003f3a:	e087      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	eddf 6a58 	vldr	s13, [pc, #352]	; 80040a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4e:	4b51      	ldr	r3, [pc, #324]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f62:	eddf 5a50 	vldr	s11, [pc, #320]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f7e:	e065      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80040ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f92:	4b40      	ldr	r3, [pc, #256]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fa6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fc2:	e043      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80040b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004006:	e021      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a02 	vldr	s12, [r7, #8]
 800402e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800404a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800404c:	4b11      	ldr	r3, [pc, #68]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	0a5b      	lsrs	r3, r3, #9
 8004052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004056:	3301      	adds	r3, #1
 8004058:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	ee07 3a90 	vmov	s15, r3
 8004060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004064:	edd7 6a07 	vldr	s13, [r7, #28]
 8004068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800406c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004070:	ee17 3a90 	vmov	r3, s15
 8004074:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004076:	e005      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
    break;
 800407c:	e002      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004080:	61bb      	str	r3, [r7, #24]
    break;
 8004082:	bf00      	nop
  }

  return sysclockfreq;
 8004084:	69bb      	ldr	r3, [r7, #24]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3724      	adds	r7, #36	; 0x24
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	58024400 	.word	0x58024400
 8004098:	03d09000 	.word	0x03d09000
 800409c:	003d0900 	.word	0x003d0900
 80040a0:	007a1200 	.word	0x007a1200
 80040a4:	46000000 	.word	0x46000000
 80040a8:	4c742400 	.word	0x4c742400
 80040ac:	4a742400 	.word	0x4a742400
 80040b0:	4af42400 	.word	0x4af42400

080040b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80040ba:	f7ff fe81 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 80040be:	4602      	mov	r2, r0
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <HAL_RCC_GetHCLKFreq+0x50>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	490f      	ldr	r1, [pc, #60]	; (8004108 <HAL_RCC_GetHCLKFreq+0x54>)
 80040cc:	5ccb      	ldrb	r3, [r1, r3]
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <HAL_RCC_GetHCLKFreq+0x50>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	4a09      	ldr	r2, [pc, #36]	; (8004108 <HAL_RCC_GetHCLKFreq+0x54>)
 80040e2:	5cd3      	ldrb	r3, [r2, r3]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_RCC_GetHCLKFreq+0x58>)
 80040f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040f2:	4a07      	ldr	r2, [pc, #28]	; (8004110 <HAL_RCC_GetHCLKFreq+0x5c>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <HAL_RCC_GetHCLKFreq+0x58>)
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	58024400 	.word	0x58024400
 8004108:	0800880c 	.word	0x0800880c
 800410c:	24000020 	.word	0x24000020
 8004110:	2400001c 	.word	0x2400001c

08004114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004118:	f7ff ffcc 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4904      	ldr	r1, [pc, #16]	; (800413c <HAL_RCC_GetPCLK1Freq+0x28>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd80      	pop	{r7, pc}
 8004138:	58024400 	.word	0x58024400
 800413c:	0800880c 	.word	0x0800880c

08004140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004144:	f7ff ffb6 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	4904      	ldr	r1, [pc, #16]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	58024400 	.word	0x58024400
 8004168:	0800880c 	.word	0x0800880c

0800416c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004174:	2300      	movs	r3, #0
 8004176:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004178:	2300      	movs	r3, #0
 800417a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d03f      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800418c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004190:	d02a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004192:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004196:	d824      	bhi.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800419c:	d018      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800419e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a2:	d81e      	bhi.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ac:	d007      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041ae:	e018      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b0:	4ba6      	ldr	r3, [pc, #664]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	4aa5      	ldr	r2, [pc, #660]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041bc:	e015      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2102      	movs	r1, #2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 ff17 	bl	8005ff8 <RCCEx_PLL2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041ce:	e00c      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3324      	adds	r3, #36	; 0x24
 80041d4:	2102      	movs	r1, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 ffc0 	bl	800615c <RCCEx_PLL3_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041e0:	e003      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
      break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80041f0:	4b96      	ldr	r3, [pc, #600]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041fc:	4993      	ldr	r1, [pc, #588]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	650b      	str	r3, [r1, #80]	; 0x50
 8004202:	e001      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d03d      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004218:	2b04      	cmp	r3, #4
 800421a:	d826      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004239 	.word	0x08004239
 8004228:	08004247 	.word	0x08004247
 800422c:	08004259 	.word	0x08004259
 8004230:	08004271 	.word	0x08004271
 8004234:	08004271 	.word	0x08004271
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004238:	4b84      	ldr	r3, [pc, #528]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	4a83      	ldr	r2, [pc, #524]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800423e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004244:	e015      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f001 fed3 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004256:	e00c      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3324      	adds	r3, #36	; 0x24
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f001 ff7c 	bl	800615c <RCCEx_PLL3_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004268:	e003      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
      break;
 800426e:	e000      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004278:	4b74      	ldr	r3, [pc, #464]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	f023 0207 	bic.w	r2, r3, #7
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	4971      	ldr	r1, [pc, #452]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004286:	4313      	orrs	r3, r2
 8004288:	650b      	str	r3, [r1, #80]	; 0x50
 800428a:	e001      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004298:	2b00      	cmp	r3, #0
 800429a:	d04a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042a4:	d031      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80042a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042aa:	d82b      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80042ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b0:	d02d      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80042b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b6:	d825      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80042b8:	2bc0      	cmp	r3, #192	; 0xc0
 80042ba:	d02a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80042bc:	2bc0      	cmp	r3, #192	; 0xc0
 80042be:	d821      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d016      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d81d      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d007      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80042d0:	e018      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d2:	4b5e      	ldr	r3, [pc, #376]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	4a5d      	ldr	r2, [pc, #372]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80042d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80042de:	e019      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 fe86 	bl	8005ff8 <RCCEx_PLL2_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80042f0:	e010      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3324      	adds	r3, #36	; 0x24
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f001 ff2f 	bl	800615c <RCCEx_PLL3_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004302:	e007      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
      break;
 8004308:	e004      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800430a:	bf00      	nop
 800430c:	e002      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800431a:	4b4c      	ldr	r3, [pc, #304]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800431c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	4949      	ldr	r1, [pc, #292]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004328:	4313      	orrs	r3, r2
 800432a:	650b      	str	r3, [r1, #80]	; 0x50
 800432c:	e001      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433a:	2b00      	cmp	r3, #0
 800433c:	d04f      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004342:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004346:	d036      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004348:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800434c:	d830      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800434e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004352:	d032      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004358:	d82a      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800435a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800435e:	d02e      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004360:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004364:	d824      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436a:	d018      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004370:	d81e      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437a:	d007      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800437c:	e018      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800437e:	4b33      	ldr	r3, [pc, #204]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	4a32      	ldr	r2, [pc, #200]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004388:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800438a:	e019      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f001 fe30 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800439c:	e010      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3324      	adds	r3, #36	; 0x24
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 fed9 	bl	800615c <RCCEx_PLL3_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80043ae:	e007      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
      break;
 80043b4:	e004      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80043be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80043c6:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ca:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	491e      	ldr	r1, [pc, #120]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	650b      	str	r3, [r1, #80]	; 0x50
 80043d8:	e001      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d034      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ee:	2b30      	cmp	r3, #48	; 0x30
 80043f0:	d01c      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80043f2:	2b30      	cmp	r3, #48	; 0x30
 80043f4:	d817      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	d00c      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d813      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d016      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004402:	2b10      	cmp	r3, #16
 8004404:	d10f      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	4a10      	ldr	r2, [pc, #64]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800440c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004412:	e00e      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	2102      	movs	r1, #2
 800441a:	4618      	mov	r0, r3
 800441c:	f001 fdec 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004424:	e005      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
      break;
 800442a:	e002      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800442c:	bf00      	nop
 800442e:	e000      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800443a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004444:	4901      	ldr	r1, [pc, #4]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	64cb      	str	r3, [r1, #76]	; 0x4c
 800444a:	e003      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800444c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d047      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004468:	d030      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800446a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800446e:	d82a      	bhi.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004470:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004474:	d02c      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004476:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800447a:	d824      	bhi.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800447c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004480:	d018      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004486:	d81e      	bhi.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004490:	d007      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004492:	e018      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004494:	4bb0      	ldr	r3, [pc, #704]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	4aaf      	ldr	r2, [pc, #700]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800449a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044a0:	e017      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3304      	adds	r3, #4
 80044a6:	2100      	movs	r1, #0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 fda5 	bl	8005ff8 <RCCEx_PLL2_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044b2:	e00e      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3324      	adds	r3, #36	; 0x24
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f001 fe4e 	bl	800615c <RCCEx_PLL3_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80044c4:	e005      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ca:	e002      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80044cc:	bf00      	nop
 80044ce:	e000      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80044d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044d8:	4b9f      	ldr	r3, [pc, #636]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e4:	499c      	ldr	r1, [pc, #624]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	650b      	str	r3, [r1, #80]	; 0x50
 80044ea:	e001      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
 80044ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d049      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004504:	d02e      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004506:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800450a:	d828      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800450c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004510:	d02a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004512:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004516:	d822      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004518:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800451c:	d026      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800451e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004522:	d81c      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004528:	d010      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800452a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800452e:	d816      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01d      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	d111      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f001 fd59 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800454a:	e012      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3324      	adds	r3, #36	; 0x24
 8004550:	2101      	movs	r1, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fe02 	bl	800615c <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800455c:	e009      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
      break;
 8004562:	e006      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004564:	bf00      	nop
 8004566:	e004      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004568:	bf00      	nop
 800456a:	e002      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d109      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004578:	4b77      	ldr	r3, [pc, #476]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004584:	4974      	ldr	r1, [pc, #464]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004586:	4313      	orrs	r3, r2
 8004588:	650b      	str	r3, [r1, #80]	; 0x50
 800458a:	e001      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d053      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045a2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80045a6:	d034      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80045a8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80045ac:	d82e      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80045ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045b2:	d030      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80045b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045b8:	d828      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045be:	d02c      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c4:	d822      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80045c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045ca:	d028      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80045cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045d0:	d81c      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80045d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d6:	d010      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80045d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045dc:	d816      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d01f      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80045e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e6:	d111      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	2101      	movs	r1, #1
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 fd02 	bl	8005ff8 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045f8:	e014      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3324      	adds	r3, #36	; 0x24
 80045fe:	2101      	movs	r1, #1
 8004600:	4618      	mov	r0, r3
 8004602:	f001 fdab 	bl	800615c <RCCEx_PLL3_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800460a:	e00b      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
      break;
 8004610:	e008      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004612:	bf00      	nop
 8004614:	e006      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004616:	bf00      	nop
 8004618:	e004      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800461a:	bf00      	nop
 800461c:	e002      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800461e:	bf00      	nop
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800462a:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004638:	4947      	ldr	r1, [pc, #284]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800463a:	4313      	orrs	r3, r2
 800463c:	658b      	str	r3, [r1, #88]	; 0x58
 800463e:	e001      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	7dfb      	ldrb	r3, [r7, #23]
 8004642:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02f      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004658:	d00e      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800465a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800465e:	d814      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d015      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004668:	d10f      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	4a3a      	ldr	r2, [pc, #232]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004676:	e00c      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3304      	adds	r3, #4
 800467c:	2101      	movs	r1, #1
 800467e:	4618      	mov	r0, r3
 8004680:	f001 fcba 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004688:	e003      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
      break;
 800468e:	e000      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004698:	4b2f      	ldr	r3, [pc, #188]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a4:	492c      	ldr	r1, [pc, #176]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	650b      	str	r3, [r1, #80]	; 0x50
 80046aa:	e001      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d032      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d81b      	bhi.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x590>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	08004703 	.word	0x08004703
 80046d0:	080046dd 	.word	0x080046dd
 80046d4:	080046eb 	.word	0x080046eb
 80046d8:	08004703 	.word	0x08004703
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046dc:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	4a1d      	ldr	r2, [pc, #116]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046e8:	e00c      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	2102      	movs	r1, #2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 fc81 	bl	8005ff8 <RCCEx_PLL2_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046fa:	e003      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8004702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	f023 0203 	bic.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	4910      	ldr	r1, [pc, #64]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004718:	4313      	orrs	r3, r2
 800471a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800471c:	e001      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471e:	7dfb      	ldrb	r3, [r7, #23]
 8004720:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 808a 	beq.w	8004844 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a09      	ldr	r2, [pc, #36]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800473c:	f7fc ff1e 	bl	800157c <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004742:	e00d      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004744:	f7fc ff1a 	bl	800157c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	; 0x64
 8004750:	d906      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	75fb      	strb	r3, [r7, #23]
        break;
 8004756:	e009      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8004758:	58024400 	.word	0x58024400
 800475c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004760:	4bba      	ldr	r3, [pc, #744]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0eb      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d166      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004772:	4bb7      	ldr	r3, [pc, #732]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004774:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800477c:	4053      	eors	r3, r2
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d013      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004786:	4bb2      	ldr	r3, [pc, #712]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004790:	4baf      	ldr	r3, [pc, #700]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	4aae      	ldr	r2, [pc, #696]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800479c:	4bac      	ldr	r3, [pc, #688]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4aab      	ldr	r2, [pc, #684]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80047a8:	4aa9      	ldr	r2, [pc, #676]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b8:	d115      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fc fedf 	bl	800157c <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047c0:	e00b      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fc fedb 	bl	800157c <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d902      	bls.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	75fb      	strb	r3, [r7, #23]
            break;
 80047d8:	e005      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047da:	4b9d      	ldr	r3, [pc, #628]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0ed      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d126      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047fa:	d10d      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80047fc:	4b94      	ldr	r3, [pc, #592]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800480a:	0919      	lsrs	r1, r3, #4
 800480c:	4b91      	ldr	r3, [pc, #580]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800480e:	400b      	ands	r3, r1
 8004810:	498f      	ldr	r1, [pc, #572]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	610b      	str	r3, [r1, #16]
 8004816:	e005      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004818:	4b8d      	ldr	r3, [pc, #564]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	4a8c      	ldr	r2, [pc, #560]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800481e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004822:	6113      	str	r3, [r2, #16]
 8004824:	4b8a      	ldr	r3, [pc, #552]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800482e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004832:	4987      	ldr	r1, [pc, #540]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004834:	4313      	orrs	r3, r2
 8004836:	670b      	str	r3, [r1, #112]	; 0x70
 8004838:	e004      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	75bb      	strb	r3, [r7, #22]
 800483e:	e001      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d07f      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004856:	2b28      	cmp	r3, #40	; 0x28
 8004858:	d866      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	0800492f 	.word	0x0800492f
 8004864:	08004929 	.word	0x08004929
 8004868:	08004929 	.word	0x08004929
 800486c:	08004929 	.word	0x08004929
 8004870:	08004929 	.word	0x08004929
 8004874:	08004929 	.word	0x08004929
 8004878:	08004929 	.word	0x08004929
 800487c:	08004929 	.word	0x08004929
 8004880:	08004905 	.word	0x08004905
 8004884:	08004929 	.word	0x08004929
 8004888:	08004929 	.word	0x08004929
 800488c:	08004929 	.word	0x08004929
 8004890:	08004929 	.word	0x08004929
 8004894:	08004929 	.word	0x08004929
 8004898:	08004929 	.word	0x08004929
 800489c:	08004929 	.word	0x08004929
 80048a0:	08004917 	.word	0x08004917
 80048a4:	08004929 	.word	0x08004929
 80048a8:	08004929 	.word	0x08004929
 80048ac:	08004929 	.word	0x08004929
 80048b0:	08004929 	.word	0x08004929
 80048b4:	08004929 	.word	0x08004929
 80048b8:	08004929 	.word	0x08004929
 80048bc:	08004929 	.word	0x08004929
 80048c0:	0800492f 	.word	0x0800492f
 80048c4:	08004929 	.word	0x08004929
 80048c8:	08004929 	.word	0x08004929
 80048cc:	08004929 	.word	0x08004929
 80048d0:	08004929 	.word	0x08004929
 80048d4:	08004929 	.word	0x08004929
 80048d8:	08004929 	.word	0x08004929
 80048dc:	08004929 	.word	0x08004929
 80048e0:	0800492f 	.word	0x0800492f
 80048e4:	08004929 	.word	0x08004929
 80048e8:	08004929 	.word	0x08004929
 80048ec:	08004929 	.word	0x08004929
 80048f0:	08004929 	.word	0x08004929
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004929 	.word	0x08004929
 80048fc:	08004929 	.word	0x08004929
 8004900:	0800492f 	.word	0x0800492f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f001 fb74 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004914:	e00c      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3324      	adds	r3, #36	; 0x24
 800491a:	2101      	movs	r1, #1
 800491c:	4618      	mov	r0, r3
 800491e:	f001 fc1d 	bl	800615c <RCCEx_PLL3_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004926:	e003      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	75fb      	strb	r3, [r7, #23]
      break;
 800492c:	e000      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800492e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004936:	4b46      	ldr	r3, [pc, #280]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004944:	4942      	ldr	r1, [pc, #264]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	654b      	str	r3, [r1, #84]	; 0x54
 800494a:	e001      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d038      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004960:	2b05      	cmp	r3, #5
 8004962:	d821      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004964:	a201      	add	r2, pc, #4	; (adr r2, 800496c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	080049af 	.word	0x080049af
 8004970:	08004985 	.word	0x08004985
 8004974:	08004997 	.word	0x08004997
 8004978:	080049af 	.word	0x080049af
 800497c:	080049af 	.word	0x080049af
 8004980:	080049af 	.word	0x080049af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	2101      	movs	r1, #1
 800498a:	4618      	mov	r0, r3
 800498c:	f001 fb34 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004994:	e00c      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3324      	adds	r3, #36	; 0x24
 800499a:	2101      	movs	r1, #1
 800499c:	4618      	mov	r0, r3
 800499e:	f001 fbdd 	bl	800615c <RCCEx_PLL3_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80049a6:	e003      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	75fb      	strb	r3, [r7, #23]
      break;
 80049ac:	e000      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80049ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80049b6:	4b26      	ldr	r3, [pc, #152]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	f023 0207 	bic.w	r2, r3, #7
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c2:	4923      	ldr	r1, [pc, #140]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	654b      	str	r3, [r1, #84]	; 0x54
 80049c8:	e001      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	7dfb      	ldrb	r3, [r7, #23]
 80049cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d040      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d821      	bhi.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80049e4:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	08004a2f 	.word	0x08004a2f
 80049f0:	08004a05 	.word	0x08004a05
 80049f4:	08004a17 	.word	0x08004a17
 80049f8:	08004a2f 	.word	0x08004a2f
 80049fc:	08004a2f 	.word	0x08004a2f
 8004a00:	08004a2f 	.word	0x08004a2f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	2101      	movs	r1, #1
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f001 faf4 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a14:	e00c      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3324      	adds	r3, #36	; 0x24
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f001 fb9d 	bl	800615c <RCCEx_PLL3_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a26:	e003      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2c:	e000      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d110      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3a:	f023 0207 	bic.w	r2, r3, #7
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a44:	4902      	ldr	r1, [pc, #8]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	658b      	str	r3, [r1, #88]	; 0x58
 8004a4a:	e007      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004a4c:	58024800 	.word	0x58024800
 8004a50:	58024400 	.word	0x58024400
 8004a54:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d04b      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a72:	d02e      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a78:	d828      	bhi.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7e:	d02a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a84:	d822      	bhi.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004a86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a8a:	d026      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004a8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a90:	d81c      	bhi.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a96:	d010      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9c:	d816      	bhi.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01d      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa6:	d111      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 faa2 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ab8:	e012      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3324      	adds	r3, #36	; 0x24
 8004abe:	2102      	movs	r1, #2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 fb4b 	bl	800615c <RCCEx_PLL3_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004aca:	e009      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad0:	e006      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004ad2:	bf00      	nop
 8004ad4:	e004      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004ad6:	bf00      	nop
 8004ad8:	e002      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004ade:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ae6:	4bb3      	ldr	r3, [pc, #716]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af4:	49af      	ldr	r1, [pc, #700]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	654b      	str	r3, [r1, #84]	; 0x54
 8004afa:	e001      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d04b      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b16:	d02e      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004b18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b1c:	d828      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b22:	d02a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b28:	d822      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b2e:	d026      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b34:	d81c      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3a:	d010      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b40:	d816      	bhi.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01d      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4a:	d111      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 fa50 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b5c:	e012      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3324      	adds	r3, #36	; 0x24
 8004b62:	2102      	movs	r1, #2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 faf9 	bl	800615c <RCCEx_PLL3_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b6e:	e009      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	75fb      	strb	r3, [r7, #23]
      break;
 8004b74:	e006      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b76:	bf00      	nop
 8004b78:	e004      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004b82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b8a:	4b8a      	ldr	r3, [pc, #552]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b98:	4986      	ldr	r1, [pc, #536]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b9e:	e001      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d04b      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bba:	d02e      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004bbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bc0:	d828      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc6:	d02a      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bcc:	d822      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004bce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bd2:	d026      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004bd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bd8:	d81c      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bde:	d010      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be4:	d816      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01d      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bee:	d111      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 f9fe 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c00:	e012      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3324      	adds	r3, #36	; 0x24
 8004c06:	2102      	movs	r1, #2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 faa7 	bl	800615c <RCCEx_PLL3_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c12:	e009      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	75fb      	strb	r3, [r7, #23]
      break;
 8004c18:	e006      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e004      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e002      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c2e:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c3c:	495d      	ldr	r1, [pc, #372]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	658b      	str	r3, [r1, #88]	; 0x58
 8004c42:	e001      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5e:	d10a      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3324      	adds	r3, #36	; 0x24
 8004c64:	2102      	movs	r1, #2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 fa78 	bl	800615c <RCCEx_PLL3_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c76:	4b4f      	ldr	r3, [pc, #316]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	494b      	ldr	r1, [pc, #300]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca0:	d10a      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3324      	adds	r3, #36	; 0x24
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 fa57 	bl	800615c <RCCEx_PLL3_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cb8:	4b3e      	ldr	r3, [pc, #248]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cc6:	493b      	ldr	r1, [pc, #236]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d034      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce2:	d01d      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce8:	d817      	bhi.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf2:	d009      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004cf4:	e011      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 f97b 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d06:	e00c      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3324      	adds	r3, #36	; 0x24
 8004d0c:	2102      	movs	r1, #2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 fa24 	bl	800615c <RCCEx_PLL3_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d18:	e003      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d1e:	e000      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d28:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d36:	491f      	ldr	r1, [pc, #124]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	658b      	str	r3, [r1, #88]	; 0x58
 8004d3c:	e001      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
 8004d40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d036      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d58:	d01c      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004d5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d5e:	d816      	bhi.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d64:	d003      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004d66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d6a:	d007      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004d6c:	e00f      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	4a10      	ldr	r2, [pc, #64]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d7a:	e00c      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3324      	adds	r3, #36	; 0x24
 8004d80:	2101      	movs	r1, #1
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 f9ea 	bl	800615c <RCCEx_PLL3_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d8c:	e003      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	75fb      	strb	r3, [r7, #23]
      break;
 8004d92:	e000      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10d      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004daa:	4902      	ldr	r1, [pc, #8]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	654b      	str	r3, [r1, #84]	; 0x54
 8004db0:	e004      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004db2:	bf00      	nop
 8004db4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d029      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d007      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004dd6:	e00f      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd8:	4b69      	ldr	r3, [pc, #420]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	4a68      	ldr	r2, [pc, #416]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004de4:	e00b      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3304      	adds	r3, #4
 8004dea:	2102      	movs	r1, #2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 f903 	bl	8005ff8 <RCCEx_PLL2_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004df6:	e002      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e04:	4b5e      	ldr	r3, [pc, #376]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e10:	495b      	ldr	r1, [pc, #364]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e16:	e001      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
 8004e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3324      	adds	r3, #36	; 0x24
 8004e2c:	2102      	movs	r1, #2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 f994 	bl	800615c <RCCEx_PLL3_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d032      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e54:	d017      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5a:	d811      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e60:	d013      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e66:	d80b      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d010      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e70:	d106      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e72:	4b43      	ldr	r3, [pc, #268]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	4a42      	ldr	r2, [pc, #264]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004e7e:	e007      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
      break;
 8004e84:	e004      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004e86:	bf00      	nop
 8004e88:	e002      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10a      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e96:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea4:	4936      	ldr	r1, [pc, #216]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	654b      	str	r3, [r1, #84]	; 0x54
 8004eaa:	e001      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
 8004eae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ebc:	4b30      	ldr	r3, [pc, #192]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec8:	492d      	ldr	r1, [pc, #180]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eda:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ede:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee6:	4926      	ldr	r1, [pc, #152]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004ef8:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	491e      	ldr	r1, [pc, #120]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f20:	6113      	str	r3, [r2, #16]
 8004f22:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f2c:	4914      	ldr	r1, [pc, #80]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da08      	bge.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f46:	490e      	ldr	r1, [pc, #56]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f58:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	4906      	ldr	r1, [pc, #24]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004f6c:	7dbb      	ldrb	r3, [r7, #22]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e000      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	58024400 	.word	0x58024400

08004f84 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b090      	sub	sp, #64	; 0x40
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f92:	f040 8089 	bne.w	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004f96:	4ba8      	ldr	r3, [pc, #672]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d87d      	bhi.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004fa6:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fac:	08004fc1 	.word	0x08004fc1
 8004fb0:	08004fe5 	.word	0x08004fe5
 8004fb4:	08005009 	.word	0x08005009
 8004fb8:	0800509d 	.word	0x0800509d
 8004fbc:	0800502d 	.word	0x0800502d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fc0:	4b9d      	ldr	r3, [pc, #628]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fcc:	d107      	bne.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 febe 	bl	8005d54 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fdc:	e3f5      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe2:	e3f2      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fe4:	4b94      	ldr	r3, [pc, #592]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff0:	d107      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ff2:	f107 0318 	add.w	r3, r7, #24
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fc04 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005000:	e3e3      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005006:	e3e0      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005008:	4b8b      	ldr	r3, [pc, #556]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005014:	d107      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005016:	f107 030c 	add.w	r3, r7, #12
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fd46 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005024:	e3d1      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800502a:	e3ce      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800502c:	4b82      	ldr	r3, [pc, #520]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800502e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005034:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005036:	4b80      	ldr	r3, [pc, #512]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b04      	cmp	r3, #4
 8005040:	d10c      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005048:	4b7b      	ldr	r3, [pc, #492]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	4a7a      	ldr	r2, [pc, #488]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800505a:	e01e      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800505c:	4b76      	ldr	r3, [pc, #472]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005068:	d106      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005070:	d102      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005072:	4b73      	ldr	r3, [pc, #460]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005076:	e010      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005078:	4b6f      	ldr	r3, [pc, #444]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005084:	d106      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800508c:	d102      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800508e:	4b6d      	ldr	r3, [pc, #436]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005092:	e002      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005098:	e397      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800509a:	e396      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800509c:	4b6a      	ldr	r3, [pc, #424]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800509e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050a0:	e393      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050a6:	e390      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ae:	f040 8095 	bne.w	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80050b2:	4b61      	ldr	r3, [pc, #388]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80050b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80050ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c2:	d04d      	beq.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ca:	f200 8084 	bhi.w	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	2bc0      	cmp	r3, #192	; 0xc0
 80050d2:	d07d      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	2bc0      	cmp	r3, #192	; 0xc0
 80050d8:	d87d      	bhi.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	2b80      	cmp	r3, #128	; 0x80
 80050de:	d02d      	beq.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	2b80      	cmp	r3, #128	; 0x80
 80050e4:	d877      	bhi.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	2b40      	cmp	r3, #64	; 0x40
 80050f0:	d012      	beq.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80050f2:	e070      	b.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050f4:	4b50      	ldr	r3, [pc, #320]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005100:	d107      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fe24 	bl	8005d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005110:	e35b      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005116:	e358      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005118:	4b47      	ldr	r3, [pc, #284]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005124:	d107      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005126:	f107 0318 	add.w	r3, r7, #24
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fb6a 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005134:	e349      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800513a:	e346      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800513c:	4b3e      	ldr	r3, [pc, #248]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005148:	d107      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800514a:	f107 030c 	add.w	r3, r7, #12
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fcac 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005158:	e337      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800515e:	e334      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005168:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800516a:	4b33      	ldr	r3, [pc, #204]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b04      	cmp	r3, #4
 8005174:	d10c      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8005176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800517c:	4b2e      	ldr	r3, [pc, #184]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	08db      	lsrs	r3, r3, #3
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	4a2d      	ldr	r2, [pc, #180]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005188:	fa22 f303 	lsr.w	r3, r2, r3
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518e:	e01e      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005190:	4b29      	ldr	r3, [pc, #164]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800519c:	d106      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 800519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a4:	d102      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80051a6:	4b26      	ldr	r3, [pc, #152]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051aa:	e010      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051ac:	4b22      	ldr	r3, [pc, #136]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051b8:	d106      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80051ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c0:	d102      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80051c2:	4b20      	ldr	r3, [pc, #128]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c6:	e002      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80051cc:	e2fd      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80051ce:	e2fc      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80051d0:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051d4:	e2f9      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051da:	e2f6      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e2:	f040 80a7 	bne.w	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80051e6:	4b14      	ldr	r3, [pc, #80]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80051e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ea:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80051ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f6:	d05f      	beq.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fe:	f200 8096 	bhi.w	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005208:	f000 808e 	beq.w	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 800520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005212:	f200 808c 	bhi.w	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521c:	d03a      	beq.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005224:	f200 8083 	bhi.w	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00e      	beq.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005234:	d01c      	beq.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8005236:	e07a      	b.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005238:	58024400 	.word	0x58024400
 800523c:	03d09000 	.word	0x03d09000
 8005240:	003d0900 	.word	0x003d0900
 8005244:	007a1200 	.word	0x007a1200
 8005248:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800524c:	4ba8      	ldr	r3, [pc, #672]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005258:	d107      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800525a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fd78 	bl	8005d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005268:	e2af      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800526e:	e2ac      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005270:	4b9f      	ldr	r3, [pc, #636]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527c:	d107      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800527e:	f107 0318 	add.w	r3, r7, #24
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fabe 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800528c:	e29d      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005292:	e29a      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005294:	4b96      	ldr	r3, [pc, #600]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800529c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a0:	d107      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052a2:	f107 030c 	add.w	r3, r7, #12
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fc00 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052b0:	e28b      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052b6:	e288      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052b8:	4b8d      	ldr	r3, [pc, #564]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80052ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052c2:	4b8b      	ldr	r3, [pc, #556]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d109      	bne.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052d4:	4b86      	ldr	r3, [pc, #536]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	4a85      	ldr	r2, [pc, #532]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
 80052e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e6:	e01e      	b.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052e8:	4b81      	ldr	r3, [pc, #516]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f4:	d106      	bne.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 80052f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052fc:	d102      	bne.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052fe:	4b7e      	ldr	r3, [pc, #504]	; (80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005302:	e010      	b.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005304:	4b7a      	ldr	r3, [pc, #488]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005310:	d106      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005318:	d102      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800531a:	4b78      	ldr	r3, [pc, #480]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800531e:	e002      	b.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8005324:	e251      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005326:	e250      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005328:	4b75      	ldr	r3, [pc, #468]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800532a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800532c:	e24d      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005332:	e24a      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533a:	f040 809c 	bne.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800533e:	4b6c      	ldr	r3, [pc, #432]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005342:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005346:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800534e:	d054      	beq.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005356:	f200 808b 	bhi.w	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005360:	f000 8083 	beq.w	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800536a:	f200 8081 	bhi.w	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005374:	d02f      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537c:	d878      	bhi.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	2b00      	cmp	r3, #0
 8005382:	d004      	beq.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538a:	d012      	beq.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 800538c:	e070      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800538e:	4b58      	ldr	r3, [pc, #352]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800539a:	d107      	bne.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800539c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fcd7 	bl	8005d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053aa:	e20e      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053b0:	e20b      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053b2:	4b4f      	ldr	r3, [pc, #316]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053be:	d107      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c0:	f107 0318 	add.w	r3, r7, #24
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fa1d 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053ce:	e1fc      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053d4:	e1f9      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053d6:	4b46      	ldr	r3, [pc, #280]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e2:	d107      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e4:	f107 030c 	add.w	r3, r7, #12
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fb5f 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053f2:	e1ea      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053f8:	e1e7      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053fa:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005402:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005404:	4b3a      	ldr	r3, [pc, #232]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d10c      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005416:	4b36      	ldr	r3, [pc, #216]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	08db      	lsrs	r3, r3, #3
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	4a34      	ldr	r2, [pc, #208]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005428:	e01e      	b.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800542a:	4b31      	ldr	r3, [pc, #196]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005436:	d106      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800543e:	d102      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005440:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005444:	e010      	b.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005446:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005452:	d106      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545a:	d102      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800545c:	4b27      	ldr	r3, [pc, #156]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005460:	e002      	b.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005466:	e1b0      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005468:	e1af      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800546a:	4b25      	ldr	r3, [pc, #148]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800546e:	e1ac      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005474:	e1a9      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800547c:	d17d      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800547e:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005486:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800548e:	d039      	beq.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005496:	d86d      	bhi.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a4:	d012      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80054a6:	e065      	b.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054a8:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b4:	d107      	bne.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054b6:	f107 0318 	add.w	r3, r7, #24
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f9a2 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054c4:	e181      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ca:	e17e      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054cc:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d8:	d107      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054da:	f107 030c 	add.w	r3, r7, #12
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fae4 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054e8:	e16f      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ee:	e16c      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80054f0:	58024400 	.word	0x58024400
 80054f4:	03d09000 	.word	0x03d09000
 80054f8:	003d0900 	.word	0x003d0900
 80054fc:	007a1200 	.word	0x007a1200
 8005500:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005504:	4ba0      	ldr	r3, [pc, #640]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800550c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800550e:	4b9e      	ldr	r3, [pc, #632]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b04      	cmp	r3, #4
 8005518:	d10c      	bne.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	2b00      	cmp	r3, #0
 800551e:	d109      	bne.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005520:	4b99      	ldr	r3, [pc, #612]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	08db      	lsrs	r3, r3, #3
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	4a98      	ldr	r2, [pc, #608]	; (800578c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
 8005530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005532:	e01e      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005534:	4b94      	ldr	r3, [pc, #592]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005540:	d106      	bne.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005548:	d102      	bne.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800554a:	4b91      	ldr	r3, [pc, #580]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554e:	e010      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005550:	4b8d      	ldr	r3, [pc, #564]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800555c:	d106      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005564:	d102      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005566:	4b8b      	ldr	r3, [pc, #556]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556a:	e002      	b.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005570:	e12b      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005572:	e12a      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005578:	e127      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005580:	d133      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005582:	4b81      	ldr	r3, [pc, #516]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800558a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	2b00      	cmp	r3, #0
 8005590:	d004      	beq.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005598:	d012      	beq.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800559a:	e023      	b.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800559c:	4b7a      	ldr	r3, [pc, #488]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055a8:	d107      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fbd0 	bl	8005d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055b8:	e107      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055be:	e104      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055c0:	4b71      	ldr	r3, [pc, #452]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055cc:	d107      	bne.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ce:	f107 0318 	add.w	r3, r7, #24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f916 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055dc:	e0f5      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055e2:	e0f2      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055e8:	e0ef      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f0:	f040 8091 	bne.w	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80055f4:	4b64      	ldr	r3, [pc, #400]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80055f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80055fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005604:	f000 8081 	beq.w	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800560e:	d87f      	bhi.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005616:	d06b      	beq.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800561e:	d877      	bhi.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005626:	d056      	beq.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d86f      	bhi.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005636:	d03b      	beq.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800563e:	d867      	bhi.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005646:	d021      	beq.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800564e:	d85f      	bhi.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800565c:	d004      	beq.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 800565e:	e057      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005660:	f000 f8ba 	bl	80057d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005664:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005666:	e0b0      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005668:	4b47      	ldr	r3, [pc, #284]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005674:	d107      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005676:	f107 0318 	add.w	r3, r7, #24
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f8c2 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005684:	e0a1      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800568a:	e09e      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800568c:	4b3e      	ldr	r3, [pc, #248]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005698:	d107      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800569a:	f107 030c 	add.w	r3, r7, #12
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fa04 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056a8:	e08f      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ae:	e08c      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056b0:	4b35      	ldr	r3, [pc, #212]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d109      	bne.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056bc:	4b32      	ldr	r3, [pc, #200]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	08db      	lsrs	r3, r3, #3
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	4a31      	ldr	r2, [pc, #196]	; (800578c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056ce:	e07c      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056d4:	e079      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80056d6:	4b2c      	ldr	r3, [pc, #176]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e2:	d102      	bne.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 80056e4:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056e8:	e06f      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ee:	e06c      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80056f0:	4b25      	ldr	r3, [pc, #148]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056fc:	d102      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 80056fe:	4b25      	ldr	r3, [pc, #148]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005702:	e062      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005708:	e05f      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800570a:	4b23      	ldr	r3, [pc, #140]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800570e:	e05c      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005714:	e059      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571c:	d153      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800571e:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005722:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005726:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572e:	d035      	beq.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005736:	d843      	bhi.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005744:	d00d      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8005746:	e03b      	b.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005754:	d102      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8005756:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800575a:	e036      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005760:	e033      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800576e:	d107      	bne.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005774:	4618      	mov	r0, r3
 8005776:	f000 faed 	bl	8005d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800577e:	e024      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005780:	2300      	movs	r3, #0
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005784:	e021      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005786:	bf00      	nop
 8005788:	58024400 	.word	0x58024400
 800578c:	03d09000 	.word	0x03d09000
 8005790:	003d0900 	.word	0x003d0900
 8005794:	007a1200 	.word	0x007a1200
 8005798:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800579c:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057a8:	d107      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057aa:	f107 0318 	add.w	r3, r7, #24
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 f828 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80057b8:	e007      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057be:	e004      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057c4:	e001      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3740      	adds	r7, #64	; 0x40
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	58024400 	.word	0x58024400

080057d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80057dc:	f7fe fc6a 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80057e0:	4602      	mov	r2, r0
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	4904      	ldr	r1, [pc, #16]	; (8005800 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80057ee:	5ccb      	ldrb	r3, [r1, r3]
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	58024400 	.word	0x58024400
 8005800:	0800880c 	.word	0x0800880c

08005804 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005804:	b480      	push	{r7}
 8005806:	b089      	sub	sp, #36	; 0x24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800580c:	4ba1      	ldr	r3, [pc, #644]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005816:	4b9f      	ldr	r3, [pc, #636]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	0b1b      	lsrs	r3, r3, #12
 800581c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005820:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005822:	4b9c      	ldr	r3, [pc, #624]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800582e:	4b99      	ldr	r3, [pc, #612]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	08db      	lsrs	r3, r3, #3
 8005834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8111 	beq.w	8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2b02      	cmp	r3, #2
 8005856:	f000 8083 	beq.w	8005960 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b02      	cmp	r3, #2
 800585e:	f200 80a1 	bhi.w	80059a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d056      	beq.n	800591c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800586e:	e099      	b.n	80059a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005870:	4b88      	ldr	r3, [pc, #544]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b00      	cmp	r3, #0
 800587a:	d02d      	beq.n	80058d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800587c:	4b85      	ldr	r3, [pc, #532]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	08db      	lsrs	r3, r3, #3
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	4a84      	ldr	r2, [pc, #528]	; (8005a98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
 800588c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	ee07 3a90 	vmov	s15, r3
 8005894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a6:	4b7b      	ldr	r3, [pc, #492]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80058d6:	e087      	b.n	80059e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80058e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ea:	4b6a      	ldr	r3, [pc, #424]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80058fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800590e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800591a:	e065      	b.n	80059e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800592a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592e:	4b59      	ldr	r3, [pc, #356]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005942:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800595e:	e043      	b.n	80059e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800596e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005972:	4b48      	ldr	r3, [pc, #288]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005982:	ed97 6a03 	vldr	s12, [r7, #12]
 8005986:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800598a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059a2:	e021      	b.n	80059e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b6:	4b37      	ldr	r3, [pc, #220]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80059e8:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	0a5b      	lsrs	r3, r3, #9
 80059ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0e:	ee17 2a90 	vmov	r2, s15
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005a16:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3c:	ee17 2a90 	vmov	r2, s15
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005a44:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	0e1b      	lsrs	r3, r3, #24
 8005a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a6a:	ee17 2a90 	vmov	r2, s15
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a72:	e008      	b.n	8005a86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	609a      	str	r2, [r3, #8]
}
 8005a86:	bf00      	nop
 8005a88:	3724      	adds	r7, #36	; 0x24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	58024400 	.word	0x58024400
 8005a98:	03d09000 	.word	0x03d09000
 8005a9c:	46000000 	.word	0x46000000
 8005aa0:	4c742400 	.word	0x4c742400
 8005aa4:	4a742400 	.word	0x4a742400
 8005aa8:	4af42400 	.word	0x4af42400

08005aac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b089      	sub	sp, #36	; 0x24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ab4:	4ba1      	ldr	r3, [pc, #644]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005abe:	4b9f      	ldr	r3, [pc, #636]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	0d1b      	lsrs	r3, r3, #20
 8005ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005aca:	4b9c      	ldr	r3, [pc, #624]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005ad6:	4b99      	ldr	r3, [pc, #612]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	08db      	lsrs	r3, r3, #3
 8005adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8111 	beq.w	8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	f000 8083 	beq.w	8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	f200 80a1 	bhi.w	8005c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d056      	beq.n	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b16:	e099      	b.n	8005c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b18:	4b88      	ldr	r3, [pc, #544]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d02d      	beq.n	8005b80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b24:	4b85      	ldr	r3, [pc, #532]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	08db      	lsrs	r3, r3, #3
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	4a84      	ldr	r2, [pc, #528]	; (8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
 8005b34:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	ee07 3a90 	vmov	s15, r3
 8005b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b4e:	4b7b      	ldr	r3, [pc, #492]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b7e:	e087      	b.n	8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b92:	4b6a      	ldr	r3, [pc, #424]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ba6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bc2:	e065      	b.n	8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd6:	4b59      	ldr	r3, [pc, #356]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c06:	e043      	b.n	8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1a:	4b48      	ldr	r3, [pc, #288]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c4a:	e021      	b.n	8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5e:	4b37      	ldr	r3, [pc, #220]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005c90:	4b2a      	ldr	r3, [pc, #168]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	0a5b      	lsrs	r3, r3, #9
 8005c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb6:	ee17 2a90 	vmov	r2, s15
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005cbe:	4b1f      	ldr	r3, [pc, #124]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	0c1b      	lsrs	r3, r3, #16
 8005cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce4:	ee17 2a90 	vmov	r2, s15
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005cec:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	0e1b      	lsrs	r3, r3, #24
 8005cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d12:	ee17 2a90 	vmov	r2, s15
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d1a:	e008      	b.n	8005d2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
}
 8005d2e:	bf00      	nop
 8005d30:	3724      	adds	r7, #36	; 0x24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	03d09000 	.word	0x03d09000
 8005d44:	46000000 	.word	0x46000000
 8005d48:	4c742400 	.word	0x4c742400
 8005d4c:	4a742400 	.word	0x4a742400
 8005d50:	4af42400 	.word	0x4af42400

08005d54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b089      	sub	sp, #36	; 0x24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d5c:	4ba0      	ldr	r3, [pc, #640]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005d66:	4b9e      	ldr	r3, [pc, #632]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	091b      	lsrs	r3, r3, #4
 8005d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005d72:	4b9b      	ldr	r3, [pc, #620]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d7c:	4b98      	ldr	r3, [pc, #608]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d80:	08db      	lsrs	r3, r3, #3
 8005d82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	fb02 f303 	mul.w	r3, r2, r3
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 8111 	beq.w	8005fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	f000 8083 	beq.w	8005eae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	f200 80a1 	bhi.w	8005ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d056      	beq.n	8005e6a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005dbc:	e099      	b.n	8005ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dbe:	4b88      	ldr	r3, [pc, #544]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d02d      	beq.n	8005e26 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dca:	4b85      	ldr	r3, [pc, #532]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	08db      	lsrs	r3, r3, #3
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	4a83      	ldr	r2, [pc, #524]	; (8005fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dda:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df4:	4b7a      	ldr	r3, [pc, #488]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e08:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e20:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e24:	e087      	b.n	8005f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	ee07 3a90 	vmov	s15, r3
 8005e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005fec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e38:	4b69      	ldr	r3, [pc, #420]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e40:	ee07 3a90 	vmov	s15, r3
 8005e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e68:	e065      	b.n	8005f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7c:	4b58      	ldr	r3, [pc, #352]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e84:	ee07 3a90 	vmov	s15, r3
 8005e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e90:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eac:	e043      	b.n	8005f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec0:	4b47      	ldr	r3, [pc, #284]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ed4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ef0:	e021      	b.n	8005f36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005fec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f04:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0c:	ee07 3a90 	vmov	s15, r3
 8005f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f14:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f18:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f34:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005f36:	4b2a      	ldr	r3, [pc, #168]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	0a5b      	lsrs	r3, r3, #9
 8005f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f40:	ee07 3a90 	vmov	s15, r3
 8005f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5c:	ee17 2a90 	vmov	r2, s15
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005f64:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	0c1b      	lsrs	r3, r3, #16
 8005f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f8a:	ee17 2a90 	vmov	r2, s15
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005f92:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	0e1b      	lsrs	r3, r3, #24
 8005f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb8:	ee17 2a90 	vmov	r2, s15
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	609a      	str	r2, [r3, #8]
}
 8005fd4:	bf00      	nop
 8005fd6:	3724      	adds	r7, #36	; 0x24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	03d09000 	.word	0x03d09000
 8005fe8:	46000000 	.word	0x46000000
 8005fec:	4c742400 	.word	0x4c742400
 8005ff0:	4a742400 	.word	0x4a742400
 8005ff4:	4af42400 	.word	0x4af42400

08005ff8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006006:	4b53      	ldr	r3, [pc, #332]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b03      	cmp	r3, #3
 8006010:	d101      	bne.n	8006016 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e099      	b.n	800614a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006016:	4b4f      	ldr	r3, [pc, #316]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a4e      	ldr	r2, [pc, #312]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 800601c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006022:	f7fb faab 	bl	800157c <HAL_GetTick>
 8006026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006028:	e008      	b.n	800603c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800602a:	f7fb faa7 	bl	800157c <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e086      	b.n	800614a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800603c:	4b45      	ldr	r3, [pc, #276]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f0      	bne.n	800602a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006048:	4b42      	ldr	r3, [pc, #264]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	031b      	lsls	r3, r3, #12
 8006056:	493f      	ldr	r1, [pc, #252]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 8006058:	4313      	orrs	r3, r2
 800605a:	628b      	str	r3, [r1, #40]	; 0x28
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	3b01      	subs	r3, #1
 8006062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	3b01      	subs	r3, #1
 800606c:	025b      	lsls	r3, r3, #9
 800606e:	b29b      	uxth	r3, r3
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	3b01      	subs	r3, #1
 8006078:	041b      	lsls	r3, r3, #16
 800607a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	3b01      	subs	r3, #1
 8006086:	061b      	lsls	r3, r3, #24
 8006088:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800608c:	4931      	ldr	r1, [pc, #196]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 800608e:	4313      	orrs	r3, r2
 8006090:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006092:	4b30      	ldr	r3, [pc, #192]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	492d      	ldr	r1, [pc, #180]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80060a4:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	f023 0220 	bic.w	r2, r3, #32
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	4928      	ldr	r1, [pc, #160]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80060b6:	4b27      	ldr	r3, [pc, #156]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	4a26      	ldr	r2, [pc, #152]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060bc:	f023 0310 	bic.w	r3, r3, #16
 80060c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060c2:	4b24      	ldr	r3, [pc, #144]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060c6:	4b24      	ldr	r3, [pc, #144]	; (8006158 <RCCEx_PLL2_Config+0x160>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	69d2      	ldr	r2, [r2, #28]
 80060ce:	00d2      	lsls	r2, r2, #3
 80060d0:	4920      	ldr	r1, [pc, #128]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060d6:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060dc:	f043 0310 	orr.w	r3, r3, #16
 80060e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060e8:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4a19      	ldr	r2, [pc, #100]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060f4:	e00f      	b.n	8006116 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d106      	bne.n	800610a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060fc:	4b15      	ldr	r3, [pc, #84]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	4a14      	ldr	r2, [pc, #80]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 8006102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006108:	e005      	b.n	8006116 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	4a11      	ldr	r2, [pc, #68]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 8006110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006114:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006116:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a0e      	ldr	r2, [pc, #56]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 800611c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006122:	f7fb fa2b 	bl	800157c <HAL_GetTick>
 8006126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006128:	e008      	b.n	800613c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800612a:	f7fb fa27 	bl	800157c <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e006      	b.n	800614a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <RCCEx_PLL2_Config+0x15c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0f0      	beq.n	800612a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	58024400 	.word	0x58024400
 8006158:	ffff0007 	.word	0xffff0007

0800615c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800616a:	4b53      	ldr	r3, [pc, #332]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b03      	cmp	r3, #3
 8006174:	d101      	bne.n	800617a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e099      	b.n	80062ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800617a:	4b4f      	ldr	r3, [pc, #316]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a4e      	ldr	r2, [pc, #312]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006186:	f7fb f9f9 	bl	800157c <HAL_GetTick>
 800618a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800618c:	e008      	b.n	80061a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800618e:	f7fb f9f5 	bl	800157c <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e086      	b.n	80062ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061a0:	4b45      	ldr	r3, [pc, #276]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f0      	bne.n	800618e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80061ac:	4b42      	ldr	r3, [pc, #264]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	051b      	lsls	r3, r3, #20
 80061ba:	493f      	ldr	r1, [pc, #252]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	628b      	str	r3, [r1, #40]	; 0x28
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	025b      	lsls	r3, r3, #9
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	3b01      	subs	r3, #1
 80061dc:	041b      	lsls	r3, r3, #16
 80061de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	061b      	lsls	r3, r3, #24
 80061ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061f0:	4931      	ldr	r1, [pc, #196]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061f6:	4b30      	ldr	r3, [pc, #192]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	492d      	ldr	r1, [pc, #180]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006204:	4313      	orrs	r3, r2
 8006206:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006208:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	4928      	ldr	r1, [pc, #160]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006216:	4313      	orrs	r3, r2
 8006218:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800621a:	4b27      	ldr	r3, [pc, #156]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006224:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006226:	4b24      	ldr	r3, [pc, #144]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622a:	4b24      	ldr	r3, [pc, #144]	; (80062bc <RCCEx_PLL3_Config+0x160>)
 800622c:	4013      	ands	r3, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	69d2      	ldr	r2, [r2, #28]
 8006232:	00d2      	lsls	r2, r2, #3
 8006234:	4920      	ldr	r1, [pc, #128]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006236:	4313      	orrs	r3, r2
 8006238:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800623a:	4b1f      	ldr	r3, [pc, #124]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006244:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d106      	bne.n	800625a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800624c:	4b1a      	ldr	r3, [pc, #104]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006252:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006256:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006258:	e00f      	b.n	800627a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d106      	bne.n	800626e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006260:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006266:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800626a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800626c:	e005      	b.n	800627a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	4a11      	ldr	r2, [pc, #68]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006278:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800627a:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 8006280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006286:	f7fb f979 	bl	800157c <HAL_GetTick>
 800628a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800628c:	e008      	b.n	80062a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800628e:	f7fb f975 	bl	800157c <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e006      	b.n	80062ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <RCCEx_PLL3_Config+0x15c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0f0      	beq.n	800628e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	58024400 	.word	0x58024400
 80062bc:	ffff0007 	.word	0xffff0007

080062c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e091      	b.n	80063f6 <HAL_RNG_Init+0x136>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	7a5b      	ldrb	r3, [r3, #9]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fa fee2 	bl	80010ac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0204 	bic.w	r2, r2, #4
 80062fc:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4b3e      	ldr	r3, [pc, #248]	; (8006400 <HAL_RNG_Init+0x140>)
 8006306:	4013      	ands	r3, r2
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6852      	ldr	r2, [r2, #4]
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006316:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a39      	ldr	r2, [pc, #228]	; (8006404 <HAL_RNG_Init+0x144>)
 800631e:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a38      	ldr	r2, [pc, #224]	; (8006408 <HAL_RNG_Init+0x148>)
 8006326:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8006336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006338:	f7fb f920 	bl	800157c <HAL_GetTick>
 800633c:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800633e:	e016      	b.n	800636e <HAL_RNG_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006340:	f7fb f91c 	bl	800157c <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d90f      	bls.n	800636e <HAL_RNG_Init+0xae>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635c:	d107      	bne.n	800636e <HAL_RNG_Init+0xae>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e043      	b.n	80063f6 <HAL_RNG_Init+0x136>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637c:	d0e0      	beq.n	8006340 <HAL_RNG_Init+0x80>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0204 	orr.w	r2, r2, #4
 800638c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d104      	bne.n	80063a6 <HAL_RNG_Init+0xe6>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2204      	movs	r2, #4
 80063a0:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e027      	b.n	80063f6 <HAL_RNG_Init+0x136>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80063a6:	f7fb f8e9 	bl	800157c <HAL_GetTick>
 80063aa:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80063ac:	e015      	b.n	80063da <HAL_RNG_Init+0x11a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80063ae:	f7fb f8e5 	bl	800157c <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d90e      	bls.n	80063da <HAL_RNG_Init+0x11a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d107      	bne.n	80063da <HAL_RNG_Init+0x11a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2204      	movs	r2, #4
 80063ce:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e00d      	b.n	80063f6 <HAL_RNG_Init+0x136>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d0e2      	beq.n	80063ae <HAL_RNG_Init+0xee>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	bfffffdf 	.word	0xbfffffdf
 8006404:	17590abc 	.word	0x17590abc
 8006408:	000caa74 	.word	0x000caa74

0800640c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d06a      	beq.n	80064f4 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fa fe72 	bl	800111c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	22ca      	movs	r2, #202	; 0xca
 8006446:	625a      	str	r2, [r3, #36]	; 0x24
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2253      	movs	r2, #83	; 0x53
 800644e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fa85 	bl	8006960 <RTC_EnterInitMode>
 8006456:	4603      	mov	r3, r0
 8006458:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d13e      	bne.n	80064de <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6999      	ldr	r1, [r3, #24]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4b25      	ldr	r3, [pc, #148]	; (8006500 <HAL_RTC_Init+0xf4>)
 800646c:	400b      	ands	r3, r1
 800646e:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6999      	ldr	r1, [r3, #24]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	0419      	lsls	r1, r3, #16
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fa93 	bl	80069cc <RTC_ExitInitMode>
 80064a6:	4603      	mov	r3, r0
 80064a8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d116      	bne.n	80064de <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80064be:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6999      	ldr	r1, [r3, #24]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1a      	ldr	r2, [r3, #32]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	22ff      	movs	r2, #255	; 0xff
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	fb8fffbf 	.word	0xfb8fffbf

08006504 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006504:	b590      	push	{r4, r7, lr}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_RTC_SetTime+0x1a>
 800651a:	2302      	movs	r3, #2
 800651c:	e089      	b.n	8006632 <HAL_RTC_SetTime+0x12e>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2202      	movs	r2, #2
 800652a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	22ca      	movs	r2, #202	; 0xca
 8006534:	625a      	str	r2, [r3, #36]	; 0x24
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2253      	movs	r2, #83	; 0x53
 800653c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fa0e 	bl	8006960 <RTC_EnterInitMode>
 8006544:	4603      	mov	r3, r0
 8006546:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006548:	7cfb      	ldrb	r3, [r7, #19]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d161      	bne.n	8006612 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d126      	bne.n	80065a2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d102      	bne.n	8006568 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2200      	movs	r2, #0
 8006566:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fa6b 	bl	8006a48 <RTC_ByteToBcd2>
 8006572:	4603      	mov	r3, r0
 8006574:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fa64 	bl	8006a48 <RTC_ByteToBcd2>
 8006580:	4603      	mov	r3, r0
 8006582:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006584:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	789b      	ldrb	r3, [r3, #2]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fa5c 	bl	8006a48 <RTC_ByteToBcd2>
 8006590:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006592:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	78db      	ldrb	r3, [r3, #3]
 800659a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e018      	b.n	80065d4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	785b      	ldrb	r3, [r3, #1]
 80065c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065c2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065c8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	78db      	ldrb	r3, [r3, #3]
 80065ce:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	6979      	ldr	r1, [r7, #20]
 80065da:	4b18      	ldr	r3, [pc, #96]	; (800663c <HAL_RTC_SetTime+0x138>)
 80065dc:	400b      	ands	r3, r1
 80065de:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065ee:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6999      	ldr	r1, [r3, #24]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	431a      	orrs	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 f9df 	bl	80069cc <RTC_ExitInitMode>
 800660e:	4603      	mov	r3, r0
 8006610:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	22ff      	movs	r2, #255	; 0xff
 8006618:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800661a:	7cfb      	ldrb	r3, [r7, #19]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006630:	7cfb      	ldrb	r3, [r7, #19]
}
 8006632:	4618      	mov	r0, r3
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	bd90      	pop	{r4, r7, pc}
 800663a:	bf00      	nop
 800663c:	007f7f7f 	.word	0x007f7f7f

08006640 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006640:	b590      	push	{r4, r7, lr}
 8006642:	b089      	sub	sp, #36	; 0x24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_RTC_SetAlarm_IT+0x1a>
 8006656:	2302      	movs	r3, #2
 8006658:	e127      	b.n	80068aa <HAL_RTC_SetAlarm_IT+0x26a>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2202      	movs	r2, #2
 8006666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if(Format == RTC_FORMAT_BIN)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d137      	bne.n	80066e0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2200      	movs	r2, #0
 8006682:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f000 f9dd 	bl	8006a48 <RTC_ByteToBcd2>
 800668e:	4603      	mov	r3, r0
 8006690:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f9d6 	bl	8006a48 <RTC_ByteToBcd2>
 800669c:	4603      	mov	r3, r0
 800669e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80066a0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	789b      	ldrb	r3, [r3, #2]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f9ce 	bl	8006a48 <RTC_ByteToBcd2>
 80066ac:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80066ae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	78db      	ldrb	r3, [r3, #3]
 80066b6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 80066b8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f9c0 	bl	8006a48 <RTC_ByteToBcd2>
 80066c8:	4603      	mov	r3, r0
 80066ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 80066cc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80066d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80066da:	4313      	orrs	r3, r2
 80066dc:	61fb      	str	r3, [r7, #28]
 80066de:	e023      	b.n	8006728 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2200      	movs	r2, #0
 80066f2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	785b      	ldrb	r3, [r3, #1]
 80066fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8006700:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8006706:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	78db      	ldrb	r3, [r3, #3]
 800670c:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 800670e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006716:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8006718:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 800671e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8006724:	4313      	orrs	r3, r2
 8006726:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	4313      	orrs	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	22ca      	movs	r2, #202	; 0xca
 800673a:	625a      	str	r2, [r3, #36]	; 0x24
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2253      	movs	r2, #83	; 0x53
 8006742:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674c:	d149      	bne.n	80067e2 <HAL_RTC_SetAlarm_IT+0x1a2>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800675c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0201 	orr.w	r2, r2, #1
 800676c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800676e:	f7fa ff05 	bl	800157c <HAL_GetTick>
 8006772:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
 8006774:	e015      	b.n	80067a2 <HAL_RTC_SetAlarm_IT+0x162>
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006776:	f7fa ff01 	bl	800157c <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006784:	d90d      	bls.n	80067a2 <HAL_RTC_SetAlarm_IT+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	22ff      	movs	r2, #255	; 0xff
 800678c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2203      	movs	r2, #3
 8006792:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e083      	b.n	80068aa <HAL_RTC_SetAlarm_IT+0x26a>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0e2      	beq.n	8006776 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067ce:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067de:	619a      	str	r2, [r3, #24]
 80067e0:	e048      	b.n	8006874 <HAL_RTC_SetAlarm_IT+0x234>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	699a      	ldr	r2, [r3, #24]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067f0:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0202 	orr.w	r2, r2, #2
 8006800:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8006802:	f7fa febb 	bl	800157c <HAL_GetTick>
 8006806:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
 8006808:	e015      	b.n	8006836 <HAL_RTC_SetAlarm_IT+0x1f6>
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800680a:	f7fa feb7 	bl	800157c <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006818:	d90d      	bls.n	8006836 <HAL_RTC_SetAlarm_IT+0x1f6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	22ff      	movs	r2, #255	; 0xff
 8006820:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2203      	movs	r2, #3
 8006826:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e039      	b.n	80068aa <HAL_RTC_SetAlarm_IT+0x26a>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0e2      	beq.n	800680a <HAL_RTC_SetAlarm_IT+0x1ca>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006862:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699a      	ldr	r2, [r3, #24]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006872:	619a      	str	r2, [r3, #24]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006874:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <HAL_RTC_SetAlarm_IT+0x274>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a0e      	ldr	r2, [pc, #56]	; (80068b4 <HAL_RTC_SetAlarm_IT+0x274>)
 800687a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800687e:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800688a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800688e:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	22ff      	movs	r2, #255	; 0xff
 8006896:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3724      	adds	r7, #36	; 0x24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd90      	pop	{r4, r7, pc}
 80068b2:	bf00      	nop
 80068b4:	58000080 	.word	0x58000080

080068b8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80068c0:	4b13      	ldr	r3, [pc, #76]	; (8006910 <HAL_RTC_AlarmIRQHandler+0x58>)
 80068c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068c6:	609a      	str	r2, [r3, #8]
#endif /* DUAL_CORE */

#if defined(RTC_MISR_ALRAMF)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	60fb      	str	r3, [r7, #12]

  if((tmp & RTC_MISR_ALRAMF) != 0u)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d006      	beq.n	80068e8 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2201      	movs	r2, #1
 80068e0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fa f9ec 	bl	8000cc0 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }
#endif /* RTC_MISR_ALRAMF */

#if defined(RTC_MISR_ALRBMF)
  if((tmp & RTC_MISR_ALRBMF) != 0u)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d006      	beq.n	8006900 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2202      	movs	r2, #2
 80068f8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f8f8 	bl	8006af0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	58000080 	.word	0x58000080

08006914 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800692a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800692c:	f7fa fe26 	bl	800157c <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006932:	e009      	b.n	8006948 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006934:	f7fa fe22 	bl	800157c <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006942:	d901      	bls.n	8006948 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e007      	b.n	8006958 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0ee      	beq.n	8006934 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d123      	bne.n	80069c2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006988:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800698a:	f7fa fdf7 	bl	800157c <HAL_GetTick>
 800698e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006990:	e00d      	b.n	80069ae <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006992:	f7fa fdf3 	bl	800157c <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069a0:	d905      	bls.n	80069ae <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2203      	movs	r2, #3
 80069aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d102      	bne.n	80069c2 <RTC_EnterInitMode+0x62>
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d1e7      	bne.n	8006992 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80069d8:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <RTC_ExitInitMode+0x78>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	4a19      	ldr	r2, [pc, #100]	; (8006a44 <RTC_ExitInitMode+0x78>)
 80069de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069e2:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80069e4:	4b17      	ldr	r3, [pc, #92]	; (8006a44 <RTC_ExitInitMode+0x78>)
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10c      	bne.n	8006a0a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff ff8f 	bl	8006914 <HAL_RTC_WaitForSynchro>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01e      	beq.n	8006a3a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2203      	movs	r2, #3
 8006a00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	73fb      	strb	r3, [r7, #15]
 8006a08:	e017      	b.n	8006a3a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a0a:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <RTC_ExitInitMode+0x78>)
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	4a0d      	ldr	r2, [pc, #52]	; (8006a44 <RTC_ExitInitMode+0x78>)
 8006a10:	f023 0320 	bic.w	r3, r3, #32
 8006a14:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff ff7c 	bl	8006914 <HAL_RTC_WaitForSynchro>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2203      	movs	r2, #3
 8006a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <RTC_ExitInitMode+0x78>)
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	4a04      	ldr	r2, [pc, #16]	; (8006a44 <RTC_ExitInitMode+0x78>)
 8006a34:	f043 0320 	orr.w	r3, r3, #32
 8006a38:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	58004000 	.word	0x58004000

08006a48 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8006a5a:	e005      	b.n	8006a68 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8006a62:	7afb      	ldrb	r3, [r7, #11]
 8006a64:	3b0a      	subs	r3, #10
 8006a66:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	d8f6      	bhi.n	8006a5c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	7afb      	ldrb	r3, [r7, #11]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	b2db      	uxtb	r3, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Point on address of first backup register */
#if defined(TAMP_BKP0R)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006aa0:	617b      	str	r3, [r7, #20]
#endif /* TAMP_BKP0R */
#if defined(RTC_BKP0R)
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* RTC_BKP0R */

  tmp += (BackupRegister * 4U);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Point on address of first backup register */
#if defined(TAMP_BKP0R)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006ad4:	60fb      	str	r3, [r7, #12]
#endif /* TAMP_BKP0R */
#if defined(RTC_BKP0R)
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* RTC_BKP0R */

  tmp += (BackupRegister * 4U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e042      	b.n	8006b9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fa fb2f 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2224      	movs	r2, #36	; 0x24
 8006b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f8c2 	bl	8006cd0 <UART_SetConfig>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e022      	b.n	8006b9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 ff14 	bl	800798c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 ff9b 	bl	8007ad0 <UART_CheckIdleState>
 8006b9a:	4603      	mov	r3, r0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	f040 8083 	bne.w	8006cc6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_UART_Transmit+0x28>
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e07b      	b.n	8006cc8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_UART_Transmit+0x3a>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e074      	b.n	8006cc8 <HAL_UART_Transmit+0x124>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2221      	movs	r2, #33	; 0x21
 8006bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bf6:	f7fa fcc1 	bl	800157c <HAL_GetTick>
 8006bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c14:	d108      	bne.n	8006c28 <HAL_UART_Transmit+0x84>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d104      	bne.n	8006c28 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	e003      	b.n	8006c30 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006c38:	e02c      	b.n	8006c94 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2200      	movs	r2, #0
 8006c42:	2180      	movs	r1, #128	; 0x80
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 ff8e 	bl	8007b66 <UART_WaitOnFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e039      	b.n	8006cc8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10b      	bne.n	8006c72 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	61bb      	str	r3, [r7, #24]
 8006c70:	e007      	b.n	8006c82 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	781a      	ldrb	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1cc      	bne.n	8006c3a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2140      	movs	r1, #64	; 0x40
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 ff5b 	bl	8007b66 <UART_WaitOnFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e006      	b.n	8006cc8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e000      	b.n	8006cc8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006cc6:	2302      	movs	r3, #2
  }
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	b5b0      	push	{r4, r5, r7, lr}
 8006cd2:	b08e      	sub	sp, #56	; 0x38
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	4bbf      	ldr	r3, [pc, #764]	; (8006ffc <UART_SetConfig+0x32c>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6812      	ldr	r2, [r2, #0]
 8006d04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d06:	430b      	orrs	r3, r1
 8006d08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4ab5      	ldr	r2, [pc, #724]	; (8007000 <UART_SetConfig+0x330>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d004      	beq.n	8006d3a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d36:	4313      	orrs	r3, r2
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	4bb0      	ldr	r3, [pc, #704]	; (8007004 <UART_SetConfig+0x334>)
 8006d42:	4013      	ands	r3, r2
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	f023 010f 	bic.w	r1, r3, #15
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4aa7      	ldr	r2, [pc, #668]	; (8007008 <UART_SetConfig+0x338>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d176      	bne.n	8006e5c <UART_SetConfig+0x18c>
 8006d6e:	4ba7      	ldr	r3, [pc, #668]	; (800700c <UART_SetConfig+0x33c>)
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d76:	2b28      	cmp	r3, #40	; 0x28
 8006d78:	d86c      	bhi.n	8006e54 <UART_SetConfig+0x184>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <UART_SetConfig+0xb0>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006e25 	.word	0x08006e25
 8006d84:	08006e55 	.word	0x08006e55
 8006d88:	08006e55 	.word	0x08006e55
 8006d8c:	08006e55 	.word	0x08006e55
 8006d90:	08006e55 	.word	0x08006e55
 8006d94:	08006e55 	.word	0x08006e55
 8006d98:	08006e55 	.word	0x08006e55
 8006d9c:	08006e55 	.word	0x08006e55
 8006da0:	08006e2d 	.word	0x08006e2d
 8006da4:	08006e55 	.word	0x08006e55
 8006da8:	08006e55 	.word	0x08006e55
 8006dac:	08006e55 	.word	0x08006e55
 8006db0:	08006e55 	.word	0x08006e55
 8006db4:	08006e55 	.word	0x08006e55
 8006db8:	08006e55 	.word	0x08006e55
 8006dbc:	08006e55 	.word	0x08006e55
 8006dc0:	08006e35 	.word	0x08006e35
 8006dc4:	08006e55 	.word	0x08006e55
 8006dc8:	08006e55 	.word	0x08006e55
 8006dcc:	08006e55 	.word	0x08006e55
 8006dd0:	08006e55 	.word	0x08006e55
 8006dd4:	08006e55 	.word	0x08006e55
 8006dd8:	08006e55 	.word	0x08006e55
 8006ddc:	08006e55 	.word	0x08006e55
 8006de0:	08006e3d 	.word	0x08006e3d
 8006de4:	08006e55 	.word	0x08006e55
 8006de8:	08006e55 	.word	0x08006e55
 8006dec:	08006e55 	.word	0x08006e55
 8006df0:	08006e55 	.word	0x08006e55
 8006df4:	08006e55 	.word	0x08006e55
 8006df8:	08006e55 	.word	0x08006e55
 8006dfc:	08006e55 	.word	0x08006e55
 8006e00:	08006e45 	.word	0x08006e45
 8006e04:	08006e55 	.word	0x08006e55
 8006e08:	08006e55 	.word	0x08006e55
 8006e0c:	08006e55 	.word	0x08006e55
 8006e10:	08006e55 	.word	0x08006e55
 8006e14:	08006e55 	.word	0x08006e55
 8006e18:	08006e55 	.word	0x08006e55
 8006e1c:	08006e55 	.word	0x08006e55
 8006e20:	08006e4d 	.word	0x08006e4d
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2a:	e326      	b.n	800747a <UART_SetConfig+0x7aa>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e32:	e322      	b.n	800747a <UART_SetConfig+0x7aa>
 8006e34:	2308      	movs	r3, #8
 8006e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e3a:	e31e      	b.n	800747a <UART_SetConfig+0x7aa>
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e42:	e31a      	b.n	800747a <UART_SetConfig+0x7aa>
 8006e44:	2320      	movs	r3, #32
 8006e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e4a:	e316      	b.n	800747a <UART_SetConfig+0x7aa>
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e52:	e312      	b.n	800747a <UART_SetConfig+0x7aa>
 8006e54:	2380      	movs	r3, #128	; 0x80
 8006e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e5a:	e30e      	b.n	800747a <UART_SetConfig+0x7aa>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a6b      	ldr	r2, [pc, #428]	; (8007010 <UART_SetConfig+0x340>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d130      	bne.n	8006ec8 <UART_SetConfig+0x1f8>
 8006e66:	4b69      	ldr	r3, [pc, #420]	; (800700c <UART_SetConfig+0x33c>)
 8006e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	2b05      	cmp	r3, #5
 8006e70:	d826      	bhi.n	8006ec0 <UART_SetConfig+0x1f0>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0x1a8>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e91 	.word	0x08006e91
 8006e7c:	08006e99 	.word	0x08006e99
 8006e80:	08006ea1 	.word	0x08006ea1
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006eb1 	.word	0x08006eb1
 8006e8c:	08006eb9 	.word	0x08006eb9
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e96:	e2f0      	b.n	800747a <UART_SetConfig+0x7aa>
 8006e98:	2304      	movs	r3, #4
 8006e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9e:	e2ec      	b.n	800747a <UART_SetConfig+0x7aa>
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea6:	e2e8      	b.n	800747a <UART_SetConfig+0x7aa>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eae:	e2e4      	b.n	800747a <UART_SetConfig+0x7aa>
 8006eb0:	2320      	movs	r3, #32
 8006eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eb6:	e2e0      	b.n	800747a <UART_SetConfig+0x7aa>
 8006eb8:	2340      	movs	r3, #64	; 0x40
 8006eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ebe:	e2dc      	b.n	800747a <UART_SetConfig+0x7aa>
 8006ec0:	2380      	movs	r3, #128	; 0x80
 8006ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ec6:	e2d8      	b.n	800747a <UART_SetConfig+0x7aa>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a51      	ldr	r2, [pc, #324]	; (8007014 <UART_SetConfig+0x344>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d130      	bne.n	8006f34 <UART_SetConfig+0x264>
 8006ed2:	4b4e      	ldr	r3, [pc, #312]	; (800700c <UART_SetConfig+0x33c>)
 8006ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	2b05      	cmp	r3, #5
 8006edc:	d826      	bhi.n	8006f2c <UART_SetConfig+0x25c>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <UART_SetConfig+0x214>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006efd 	.word	0x08006efd
 8006ee8:	08006f05 	.word	0x08006f05
 8006eec:	08006f0d 	.word	0x08006f0d
 8006ef0:	08006f15 	.word	0x08006f15
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f25 	.word	0x08006f25
 8006efc:	2300      	movs	r3, #0
 8006efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f02:	e2ba      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f04:	2304      	movs	r3, #4
 8006f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f0a:	e2b6      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f12:	e2b2      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f14:	2310      	movs	r3, #16
 8006f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f1a:	e2ae      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f1c:	2320      	movs	r3, #32
 8006f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f22:	e2aa      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f24:	2340      	movs	r3, #64	; 0x40
 8006f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f2a:	e2a6      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f2c:	2380      	movs	r3, #128	; 0x80
 8006f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f32:	e2a2      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a37      	ldr	r2, [pc, #220]	; (8007018 <UART_SetConfig+0x348>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d130      	bne.n	8006fa0 <UART_SetConfig+0x2d0>
 8006f3e:	4b33      	ldr	r3, [pc, #204]	; (800700c <UART_SetConfig+0x33c>)
 8006f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	2b05      	cmp	r3, #5
 8006f48:	d826      	bhi.n	8006f98 <UART_SetConfig+0x2c8>
 8006f4a:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <UART_SetConfig+0x280>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006f69 	.word	0x08006f69
 8006f54:	08006f71 	.word	0x08006f71
 8006f58:	08006f79 	.word	0x08006f79
 8006f5c:	08006f81 	.word	0x08006f81
 8006f60:	08006f89 	.word	0x08006f89
 8006f64:	08006f91 	.word	0x08006f91
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f6e:	e284      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f70:	2304      	movs	r3, #4
 8006f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f76:	e280      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f78:	2308      	movs	r3, #8
 8006f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f7e:	e27c      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f80:	2310      	movs	r3, #16
 8006f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f86:	e278      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f88:	2320      	movs	r3, #32
 8006f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f8e:	e274      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f90:	2340      	movs	r3, #64	; 0x40
 8006f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f96:	e270      	b.n	800747a <UART_SetConfig+0x7aa>
 8006f98:	2380      	movs	r3, #128	; 0x80
 8006f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f9e:	e26c      	b.n	800747a <UART_SetConfig+0x7aa>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1d      	ldr	r2, [pc, #116]	; (800701c <UART_SetConfig+0x34c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d142      	bne.n	8007030 <UART_SetConfig+0x360>
 8006faa:	4b18      	ldr	r3, [pc, #96]	; (800700c <UART_SetConfig+0x33c>)
 8006fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	d838      	bhi.n	8007028 <UART_SetConfig+0x358>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <UART_SetConfig+0x2ec>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fd5 	.word	0x08006fd5
 8006fc0:	08006fdd 	.word	0x08006fdd
 8006fc4:	08006fe5 	.word	0x08006fe5
 8006fc8:	08006fed 	.word	0x08006fed
 8006fcc:	08006ff5 	.word	0x08006ff5
 8006fd0:	08007021 	.word	0x08007021
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fda:	e24e      	b.n	800747a <UART_SetConfig+0x7aa>
 8006fdc:	2304      	movs	r3, #4
 8006fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fe2:	e24a      	b.n	800747a <UART_SetConfig+0x7aa>
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fea:	e246      	b.n	800747a <UART_SetConfig+0x7aa>
 8006fec:	2310      	movs	r3, #16
 8006fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ff2:	e242      	b.n	800747a <UART_SetConfig+0x7aa>
 8006ff4:	2320      	movs	r3, #32
 8006ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ffa:	e23e      	b.n	800747a <UART_SetConfig+0x7aa>
 8006ffc:	cfff69f3 	.word	0xcfff69f3
 8007000:	58000c00 	.word	0x58000c00
 8007004:	11fff4ff 	.word	0x11fff4ff
 8007008:	40011000 	.word	0x40011000
 800700c:	58024400 	.word	0x58024400
 8007010:	40004400 	.word	0x40004400
 8007014:	40004800 	.word	0x40004800
 8007018:	40004c00 	.word	0x40004c00
 800701c:	40005000 	.word	0x40005000
 8007020:	2340      	movs	r3, #64	; 0x40
 8007022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007026:	e228      	b.n	800747a <UART_SetConfig+0x7aa>
 8007028:	2380      	movs	r3, #128	; 0x80
 800702a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800702e:	e224      	b.n	800747a <UART_SetConfig+0x7aa>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4ab1      	ldr	r2, [pc, #708]	; (80072fc <UART_SetConfig+0x62c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d176      	bne.n	8007128 <UART_SetConfig+0x458>
 800703a:	4bb1      	ldr	r3, [pc, #708]	; (8007300 <UART_SetConfig+0x630>)
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007042:	2b28      	cmp	r3, #40	; 0x28
 8007044:	d86c      	bhi.n	8007120 <UART_SetConfig+0x450>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x37c>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	080070f1 	.word	0x080070f1
 8007050:	08007121 	.word	0x08007121
 8007054:	08007121 	.word	0x08007121
 8007058:	08007121 	.word	0x08007121
 800705c:	08007121 	.word	0x08007121
 8007060:	08007121 	.word	0x08007121
 8007064:	08007121 	.word	0x08007121
 8007068:	08007121 	.word	0x08007121
 800706c:	080070f9 	.word	0x080070f9
 8007070:	08007121 	.word	0x08007121
 8007074:	08007121 	.word	0x08007121
 8007078:	08007121 	.word	0x08007121
 800707c:	08007121 	.word	0x08007121
 8007080:	08007121 	.word	0x08007121
 8007084:	08007121 	.word	0x08007121
 8007088:	08007121 	.word	0x08007121
 800708c:	08007101 	.word	0x08007101
 8007090:	08007121 	.word	0x08007121
 8007094:	08007121 	.word	0x08007121
 8007098:	08007121 	.word	0x08007121
 800709c:	08007121 	.word	0x08007121
 80070a0:	08007121 	.word	0x08007121
 80070a4:	08007121 	.word	0x08007121
 80070a8:	08007121 	.word	0x08007121
 80070ac:	08007109 	.word	0x08007109
 80070b0:	08007121 	.word	0x08007121
 80070b4:	08007121 	.word	0x08007121
 80070b8:	08007121 	.word	0x08007121
 80070bc:	08007121 	.word	0x08007121
 80070c0:	08007121 	.word	0x08007121
 80070c4:	08007121 	.word	0x08007121
 80070c8:	08007121 	.word	0x08007121
 80070cc:	08007111 	.word	0x08007111
 80070d0:	08007121 	.word	0x08007121
 80070d4:	08007121 	.word	0x08007121
 80070d8:	08007121 	.word	0x08007121
 80070dc:	08007121 	.word	0x08007121
 80070e0:	08007121 	.word	0x08007121
 80070e4:	08007121 	.word	0x08007121
 80070e8:	08007121 	.word	0x08007121
 80070ec:	08007119 	.word	0x08007119
 80070f0:	2301      	movs	r3, #1
 80070f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070f6:	e1c0      	b.n	800747a <UART_SetConfig+0x7aa>
 80070f8:	2304      	movs	r3, #4
 80070fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070fe:	e1bc      	b.n	800747a <UART_SetConfig+0x7aa>
 8007100:	2308      	movs	r3, #8
 8007102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007106:	e1b8      	b.n	800747a <UART_SetConfig+0x7aa>
 8007108:	2310      	movs	r3, #16
 800710a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800710e:	e1b4      	b.n	800747a <UART_SetConfig+0x7aa>
 8007110:	2320      	movs	r3, #32
 8007112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007116:	e1b0      	b.n	800747a <UART_SetConfig+0x7aa>
 8007118:	2340      	movs	r3, #64	; 0x40
 800711a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711e:	e1ac      	b.n	800747a <UART_SetConfig+0x7aa>
 8007120:	2380      	movs	r3, #128	; 0x80
 8007122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007126:	e1a8      	b.n	800747a <UART_SetConfig+0x7aa>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a75      	ldr	r2, [pc, #468]	; (8007304 <UART_SetConfig+0x634>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d130      	bne.n	8007194 <UART_SetConfig+0x4c4>
 8007132:	4b73      	ldr	r3, [pc, #460]	; (8007300 <UART_SetConfig+0x630>)
 8007134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b05      	cmp	r3, #5
 800713c:	d826      	bhi.n	800718c <UART_SetConfig+0x4bc>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <UART_SetConfig+0x474>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	0800715d 	.word	0x0800715d
 8007148:	08007165 	.word	0x08007165
 800714c:	0800716d 	.word	0x0800716d
 8007150:	08007175 	.word	0x08007175
 8007154:	0800717d 	.word	0x0800717d
 8007158:	08007185 	.word	0x08007185
 800715c:	2300      	movs	r3, #0
 800715e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007162:	e18a      	b.n	800747a <UART_SetConfig+0x7aa>
 8007164:	2304      	movs	r3, #4
 8007166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716a:	e186      	b.n	800747a <UART_SetConfig+0x7aa>
 800716c:	2308      	movs	r3, #8
 800716e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007172:	e182      	b.n	800747a <UART_SetConfig+0x7aa>
 8007174:	2310      	movs	r3, #16
 8007176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717a:	e17e      	b.n	800747a <UART_SetConfig+0x7aa>
 800717c:	2320      	movs	r3, #32
 800717e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007182:	e17a      	b.n	800747a <UART_SetConfig+0x7aa>
 8007184:	2340      	movs	r3, #64	; 0x40
 8007186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800718a:	e176      	b.n	800747a <UART_SetConfig+0x7aa>
 800718c:	2380      	movs	r3, #128	; 0x80
 800718e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007192:	e172      	b.n	800747a <UART_SetConfig+0x7aa>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a5b      	ldr	r2, [pc, #364]	; (8007308 <UART_SetConfig+0x638>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d130      	bne.n	8007200 <UART_SetConfig+0x530>
 800719e:	4b58      	ldr	r3, [pc, #352]	; (8007300 <UART_SetConfig+0x630>)
 80071a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	d826      	bhi.n	80071f8 <UART_SetConfig+0x528>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <UART_SetConfig+0x4e0>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071c9 	.word	0x080071c9
 80071b4:	080071d1 	.word	0x080071d1
 80071b8:	080071d9 	.word	0x080071d9
 80071bc:	080071e1 	.word	0x080071e1
 80071c0:	080071e9 	.word	0x080071e9
 80071c4:	080071f1 	.word	0x080071f1
 80071c8:	2300      	movs	r3, #0
 80071ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ce:	e154      	b.n	800747a <UART_SetConfig+0x7aa>
 80071d0:	2304      	movs	r3, #4
 80071d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071d6:	e150      	b.n	800747a <UART_SetConfig+0x7aa>
 80071d8:	2308      	movs	r3, #8
 80071da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071de:	e14c      	b.n	800747a <UART_SetConfig+0x7aa>
 80071e0:	2310      	movs	r3, #16
 80071e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071e6:	e148      	b.n	800747a <UART_SetConfig+0x7aa>
 80071e8:	2320      	movs	r3, #32
 80071ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ee:	e144      	b.n	800747a <UART_SetConfig+0x7aa>
 80071f0:	2340      	movs	r3, #64	; 0x40
 80071f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071f6:	e140      	b.n	800747a <UART_SetConfig+0x7aa>
 80071f8:	2380      	movs	r3, #128	; 0x80
 80071fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071fe:	e13c      	b.n	800747a <UART_SetConfig+0x7aa>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a41      	ldr	r2, [pc, #260]	; (800730c <UART_SetConfig+0x63c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	f040 8082 	bne.w	8007310 <UART_SetConfig+0x640>
 800720c:	4b3c      	ldr	r3, [pc, #240]	; (8007300 <UART_SetConfig+0x630>)
 800720e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007210:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007214:	2b28      	cmp	r3, #40	; 0x28
 8007216:	d86d      	bhi.n	80072f4 <UART_SetConfig+0x624>
 8007218:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <UART_SetConfig+0x550>)
 800721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721e:	bf00      	nop
 8007220:	080072c5 	.word	0x080072c5
 8007224:	080072f5 	.word	0x080072f5
 8007228:	080072f5 	.word	0x080072f5
 800722c:	080072f5 	.word	0x080072f5
 8007230:	080072f5 	.word	0x080072f5
 8007234:	080072f5 	.word	0x080072f5
 8007238:	080072f5 	.word	0x080072f5
 800723c:	080072f5 	.word	0x080072f5
 8007240:	080072cd 	.word	0x080072cd
 8007244:	080072f5 	.word	0x080072f5
 8007248:	080072f5 	.word	0x080072f5
 800724c:	080072f5 	.word	0x080072f5
 8007250:	080072f5 	.word	0x080072f5
 8007254:	080072f5 	.word	0x080072f5
 8007258:	080072f5 	.word	0x080072f5
 800725c:	080072f5 	.word	0x080072f5
 8007260:	080072d5 	.word	0x080072d5
 8007264:	080072f5 	.word	0x080072f5
 8007268:	080072f5 	.word	0x080072f5
 800726c:	080072f5 	.word	0x080072f5
 8007270:	080072f5 	.word	0x080072f5
 8007274:	080072f5 	.word	0x080072f5
 8007278:	080072f5 	.word	0x080072f5
 800727c:	080072f5 	.word	0x080072f5
 8007280:	080072dd 	.word	0x080072dd
 8007284:	080072f5 	.word	0x080072f5
 8007288:	080072f5 	.word	0x080072f5
 800728c:	080072f5 	.word	0x080072f5
 8007290:	080072f5 	.word	0x080072f5
 8007294:	080072f5 	.word	0x080072f5
 8007298:	080072f5 	.word	0x080072f5
 800729c:	080072f5 	.word	0x080072f5
 80072a0:	080072e5 	.word	0x080072e5
 80072a4:	080072f5 	.word	0x080072f5
 80072a8:	080072f5 	.word	0x080072f5
 80072ac:	080072f5 	.word	0x080072f5
 80072b0:	080072f5 	.word	0x080072f5
 80072b4:	080072f5 	.word	0x080072f5
 80072b8:	080072f5 	.word	0x080072f5
 80072bc:	080072f5 	.word	0x080072f5
 80072c0:	080072ed 	.word	0x080072ed
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ca:	e0d6      	b.n	800747a <UART_SetConfig+0x7aa>
 80072cc:	2304      	movs	r3, #4
 80072ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072d2:	e0d2      	b.n	800747a <UART_SetConfig+0x7aa>
 80072d4:	2308      	movs	r3, #8
 80072d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072da:	e0ce      	b.n	800747a <UART_SetConfig+0x7aa>
 80072dc:	2310      	movs	r3, #16
 80072de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072e2:	e0ca      	b.n	800747a <UART_SetConfig+0x7aa>
 80072e4:	2320      	movs	r3, #32
 80072e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ea:	e0c6      	b.n	800747a <UART_SetConfig+0x7aa>
 80072ec:	2340      	movs	r3, #64	; 0x40
 80072ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f2:	e0c2      	b.n	800747a <UART_SetConfig+0x7aa>
 80072f4:	2380      	movs	r3, #128	; 0x80
 80072f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fa:	e0be      	b.n	800747a <UART_SetConfig+0x7aa>
 80072fc:	40011400 	.word	0x40011400
 8007300:	58024400 	.word	0x58024400
 8007304:	40007800 	.word	0x40007800
 8007308:	40007c00 	.word	0x40007c00
 800730c:	40011800 	.word	0x40011800
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4aad      	ldr	r2, [pc, #692]	; (80075cc <UART_SetConfig+0x8fc>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d176      	bne.n	8007408 <UART_SetConfig+0x738>
 800731a:	4bad      	ldr	r3, [pc, #692]	; (80075d0 <UART_SetConfig+0x900>)
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007322:	2b28      	cmp	r3, #40	; 0x28
 8007324:	d86c      	bhi.n	8007400 <UART_SetConfig+0x730>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x65c>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	080073d1 	.word	0x080073d1
 8007330:	08007401 	.word	0x08007401
 8007334:	08007401 	.word	0x08007401
 8007338:	08007401 	.word	0x08007401
 800733c:	08007401 	.word	0x08007401
 8007340:	08007401 	.word	0x08007401
 8007344:	08007401 	.word	0x08007401
 8007348:	08007401 	.word	0x08007401
 800734c:	080073d9 	.word	0x080073d9
 8007350:	08007401 	.word	0x08007401
 8007354:	08007401 	.word	0x08007401
 8007358:	08007401 	.word	0x08007401
 800735c:	08007401 	.word	0x08007401
 8007360:	08007401 	.word	0x08007401
 8007364:	08007401 	.word	0x08007401
 8007368:	08007401 	.word	0x08007401
 800736c:	080073e1 	.word	0x080073e1
 8007370:	08007401 	.word	0x08007401
 8007374:	08007401 	.word	0x08007401
 8007378:	08007401 	.word	0x08007401
 800737c:	08007401 	.word	0x08007401
 8007380:	08007401 	.word	0x08007401
 8007384:	08007401 	.word	0x08007401
 8007388:	08007401 	.word	0x08007401
 800738c:	080073e9 	.word	0x080073e9
 8007390:	08007401 	.word	0x08007401
 8007394:	08007401 	.word	0x08007401
 8007398:	08007401 	.word	0x08007401
 800739c:	08007401 	.word	0x08007401
 80073a0:	08007401 	.word	0x08007401
 80073a4:	08007401 	.word	0x08007401
 80073a8:	08007401 	.word	0x08007401
 80073ac:	080073f1 	.word	0x080073f1
 80073b0:	08007401 	.word	0x08007401
 80073b4:	08007401 	.word	0x08007401
 80073b8:	08007401 	.word	0x08007401
 80073bc:	08007401 	.word	0x08007401
 80073c0:	08007401 	.word	0x08007401
 80073c4:	08007401 	.word	0x08007401
 80073c8:	08007401 	.word	0x08007401
 80073cc:	080073f9 	.word	0x080073f9
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073d6:	e050      	b.n	800747a <UART_SetConfig+0x7aa>
 80073d8:	2304      	movs	r3, #4
 80073da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073de:	e04c      	b.n	800747a <UART_SetConfig+0x7aa>
 80073e0:	2308      	movs	r3, #8
 80073e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073e6:	e048      	b.n	800747a <UART_SetConfig+0x7aa>
 80073e8:	2310      	movs	r3, #16
 80073ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ee:	e044      	b.n	800747a <UART_SetConfig+0x7aa>
 80073f0:	2320      	movs	r3, #32
 80073f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073f6:	e040      	b.n	800747a <UART_SetConfig+0x7aa>
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073fe:	e03c      	b.n	800747a <UART_SetConfig+0x7aa>
 8007400:	2380      	movs	r3, #128	; 0x80
 8007402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007406:	e038      	b.n	800747a <UART_SetConfig+0x7aa>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a71      	ldr	r2, [pc, #452]	; (80075d4 <UART_SetConfig+0x904>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d130      	bne.n	8007474 <UART_SetConfig+0x7a4>
 8007412:	4b6f      	ldr	r3, [pc, #444]	; (80075d0 <UART_SetConfig+0x900>)
 8007414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b05      	cmp	r3, #5
 800741c:	d826      	bhi.n	800746c <UART_SetConfig+0x79c>
 800741e:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0x754>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	0800743d 	.word	0x0800743d
 8007428:	08007445 	.word	0x08007445
 800742c:	0800744d 	.word	0x0800744d
 8007430:	08007455 	.word	0x08007455
 8007434:	0800745d 	.word	0x0800745d
 8007438:	08007465 	.word	0x08007465
 800743c:	2302      	movs	r3, #2
 800743e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007442:	e01a      	b.n	800747a <UART_SetConfig+0x7aa>
 8007444:	2304      	movs	r3, #4
 8007446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744a:	e016      	b.n	800747a <UART_SetConfig+0x7aa>
 800744c:	2308      	movs	r3, #8
 800744e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007452:	e012      	b.n	800747a <UART_SetConfig+0x7aa>
 8007454:	2310      	movs	r3, #16
 8007456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745a:	e00e      	b.n	800747a <UART_SetConfig+0x7aa>
 800745c:	2320      	movs	r3, #32
 800745e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007462:	e00a      	b.n	800747a <UART_SetConfig+0x7aa>
 8007464:	2340      	movs	r3, #64	; 0x40
 8007466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800746a:	e006      	b.n	800747a <UART_SetConfig+0x7aa>
 800746c:	2380      	movs	r3, #128	; 0x80
 800746e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007472:	e002      	b.n	800747a <UART_SetConfig+0x7aa>
 8007474:	2380      	movs	r3, #128	; 0x80
 8007476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a55      	ldr	r2, [pc, #340]	; (80075d4 <UART_SetConfig+0x904>)
 8007480:	4293      	cmp	r3, r2
 8007482:	f040 80f0 	bne.w	8007666 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800748a:	2b20      	cmp	r3, #32
 800748c:	dc46      	bgt.n	800751c <UART_SetConfig+0x84c>
 800748e:	2b02      	cmp	r3, #2
 8007490:	db75      	blt.n	800757e <UART_SetConfig+0x8ae>
 8007492:	3b02      	subs	r3, #2
 8007494:	2b1e      	cmp	r3, #30
 8007496:	d872      	bhi.n	800757e <UART_SetConfig+0x8ae>
 8007498:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <UART_SetConfig+0x7d0>)
 800749a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749e:	bf00      	nop
 80074a0:	08007523 	.word	0x08007523
 80074a4:	0800757f 	.word	0x0800757f
 80074a8:	0800752b 	.word	0x0800752b
 80074ac:	0800757f 	.word	0x0800757f
 80074b0:	0800757f 	.word	0x0800757f
 80074b4:	0800757f 	.word	0x0800757f
 80074b8:	0800753b 	.word	0x0800753b
 80074bc:	0800757f 	.word	0x0800757f
 80074c0:	0800757f 	.word	0x0800757f
 80074c4:	0800757f 	.word	0x0800757f
 80074c8:	0800757f 	.word	0x0800757f
 80074cc:	0800757f 	.word	0x0800757f
 80074d0:	0800757f 	.word	0x0800757f
 80074d4:	0800757f 	.word	0x0800757f
 80074d8:	0800754b 	.word	0x0800754b
 80074dc:	0800757f 	.word	0x0800757f
 80074e0:	0800757f 	.word	0x0800757f
 80074e4:	0800757f 	.word	0x0800757f
 80074e8:	0800757f 	.word	0x0800757f
 80074ec:	0800757f 	.word	0x0800757f
 80074f0:	0800757f 	.word	0x0800757f
 80074f4:	0800757f 	.word	0x0800757f
 80074f8:	0800757f 	.word	0x0800757f
 80074fc:	0800757f 	.word	0x0800757f
 8007500:	0800757f 	.word	0x0800757f
 8007504:	0800757f 	.word	0x0800757f
 8007508:	0800757f 	.word	0x0800757f
 800750c:	0800757f 	.word	0x0800757f
 8007510:	0800757f 	.word	0x0800757f
 8007514:	0800757f 	.word	0x0800757f
 8007518:	08007571 	.word	0x08007571
 800751c:	2b40      	cmp	r3, #64	; 0x40
 800751e:	d02a      	beq.n	8007576 <UART_SetConfig+0x8a6>
 8007520:	e02d      	b.n	800757e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007522:	f7fe f959 	bl	80057d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007526:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007528:	e02f      	b.n	800758a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800752a:	f107 0314 	add.w	r3, r7, #20
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe f968 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007538:	e027      	b.n	800758a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800753a:	f107 0308 	add.w	r3, r7, #8
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe fab4 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007548:	e01f      	b.n	800758a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800754a:	4b21      	ldr	r3, [pc, #132]	; (80075d0 <UART_SetConfig+0x900>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007556:	4b1e      	ldr	r3, [pc, #120]	; (80075d0 <UART_SetConfig+0x900>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	08db      	lsrs	r3, r3, #3
 800755c:	f003 0303 	and.w	r3, r3, #3
 8007560:	4a1d      	ldr	r2, [pc, #116]	; (80075d8 <UART_SetConfig+0x908>)
 8007562:	fa22 f303 	lsr.w	r3, r2, r3
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007568:	e00f      	b.n	800758a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800756a:	4b1b      	ldr	r3, [pc, #108]	; (80075d8 <UART_SetConfig+0x908>)
 800756c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800756e:	e00c      	b.n	800758a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007570:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <UART_SetConfig+0x90c>)
 8007572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007574:	e009      	b.n	800758a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800757a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800757c:	e005      	b.n	800758a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007588:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 81e6 	beq.w	800795e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	4a12      	ldr	r2, [pc, #72]	; (80075e0 <UART_SetConfig+0x910>)
 8007598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800759c:	461a      	mov	r2, r3
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	6a3a      	ldr	r2, [r7, #32]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d305      	bcc.n	80075c2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075bc:	6a3a      	ldr	r2, [r7, #32]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d910      	bls.n	80075e4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80075c8:	e1c9      	b.n	800795e <UART_SetConfig+0xc8e>
 80075ca:	bf00      	nop
 80075cc:	40011c00 	.word	0x40011c00
 80075d0:	58024400 	.word	0x58024400
 80075d4:	58000c00 	.word	0x58000c00
 80075d8:	03d09000 	.word	0x03d09000
 80075dc:	003d0900 	.word	0x003d0900
 80075e0:	0800881c 	.word	0x0800881c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	4618      	mov	r0, r3
 80075e8:	f04f 0100 	mov.w	r1, #0
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	4ac1      	ldr	r2, [pc, #772]	; (80078f8 <UART_SetConfig+0xc28>)
 80075f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	f7f8 fed0 	bl	80003a0 <__aeabi_uldivmod>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4610      	mov	r0, r2
 8007606:	4619      	mov	r1, r3
 8007608:	f04f 0200 	mov.w	r2, #0
 800760c:	f04f 0300 	mov.w	r3, #0
 8007610:	020b      	lsls	r3, r1, #8
 8007612:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007616:	0202      	lsls	r2, r0, #8
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	6849      	ldr	r1, [r1, #4]
 800761c:	0849      	lsrs	r1, r1, #1
 800761e:	4608      	mov	r0, r1
 8007620:	f04f 0100 	mov.w	r1, #0
 8007624:	1814      	adds	r4, r2, r0
 8007626:	eb43 0501 	adc.w	r5, r3, r1
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	461a      	mov	r2, r3
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	4620      	mov	r0, r4
 8007636:	4629      	mov	r1, r5
 8007638:	f7f8 feb2 	bl	80003a0 <__aeabi_uldivmod>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4613      	mov	r3, r2
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800764a:	d308      	bcc.n	800765e <UART_SetConfig+0x98e>
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007652:	d204      	bcs.n	800765e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800765a:	60da      	str	r2, [r3, #12]
 800765c:	e17f      	b.n	800795e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007664:	e17b      	b.n	800795e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800766e:	f040 80bd 	bne.w	80077ec <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8007672:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007676:	2b20      	cmp	r3, #32
 8007678:	dc48      	bgt.n	800770c <UART_SetConfig+0xa3c>
 800767a:	2b00      	cmp	r3, #0
 800767c:	db7b      	blt.n	8007776 <UART_SetConfig+0xaa6>
 800767e:	2b20      	cmp	r3, #32
 8007680:	d879      	bhi.n	8007776 <UART_SetConfig+0xaa6>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <UART_SetConfig+0x9b8>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	08007713 	.word	0x08007713
 800768c:	0800771b 	.word	0x0800771b
 8007690:	08007777 	.word	0x08007777
 8007694:	08007777 	.word	0x08007777
 8007698:	08007723 	.word	0x08007723
 800769c:	08007777 	.word	0x08007777
 80076a0:	08007777 	.word	0x08007777
 80076a4:	08007777 	.word	0x08007777
 80076a8:	08007733 	.word	0x08007733
 80076ac:	08007777 	.word	0x08007777
 80076b0:	08007777 	.word	0x08007777
 80076b4:	08007777 	.word	0x08007777
 80076b8:	08007777 	.word	0x08007777
 80076bc:	08007777 	.word	0x08007777
 80076c0:	08007777 	.word	0x08007777
 80076c4:	08007777 	.word	0x08007777
 80076c8:	08007743 	.word	0x08007743
 80076cc:	08007777 	.word	0x08007777
 80076d0:	08007777 	.word	0x08007777
 80076d4:	08007777 	.word	0x08007777
 80076d8:	08007777 	.word	0x08007777
 80076dc:	08007777 	.word	0x08007777
 80076e0:	08007777 	.word	0x08007777
 80076e4:	08007777 	.word	0x08007777
 80076e8:	08007777 	.word	0x08007777
 80076ec:	08007777 	.word	0x08007777
 80076f0:	08007777 	.word	0x08007777
 80076f4:	08007777 	.word	0x08007777
 80076f8:	08007777 	.word	0x08007777
 80076fc:	08007777 	.word	0x08007777
 8007700:	08007777 	.word	0x08007777
 8007704:	08007777 	.word	0x08007777
 8007708:	08007769 	.word	0x08007769
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	d02e      	beq.n	800776e <UART_SetConfig+0xa9e>
 8007710:	e031      	b.n	8007776 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007712:	f7fc fcff 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8007716:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007718:	e033      	b.n	8007782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800771a:	f7fc fd11 	bl	8004140 <HAL_RCC_GetPCLK2Freq>
 800771e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007720:	e02f      	b.n	8007782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007722:	f107 0314 	add.w	r3, r7, #20
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe f86c 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007730:	e027      	b.n	8007782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007732:	f107 0308 	add.w	r3, r7, #8
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe f9b8 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007740:	e01f      	b.n	8007782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007742:	4b6e      	ldr	r3, [pc, #440]	; (80078fc <UART_SetConfig+0xc2c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b00      	cmp	r3, #0
 800774c:	d009      	beq.n	8007762 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800774e:	4b6b      	ldr	r3, [pc, #428]	; (80078fc <UART_SetConfig+0xc2c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	08db      	lsrs	r3, r3, #3
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	4a69      	ldr	r2, [pc, #420]	; (8007900 <UART_SetConfig+0xc30>)
 800775a:	fa22 f303 	lsr.w	r3, r2, r3
 800775e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007760:	e00f      	b.n	8007782 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8007762:	4b67      	ldr	r3, [pc, #412]	; (8007900 <UART_SetConfig+0xc30>)
 8007764:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007766:	e00c      	b.n	8007782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007768:	4b66      	ldr	r3, [pc, #408]	; (8007904 <UART_SetConfig+0xc34>)
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800776c:	e009      	b.n	8007782 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800776e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007774:	e005      	b.n	8007782 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007780:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80ea 	beq.w	800795e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	4a5a      	ldr	r2, [pc, #360]	; (80078f8 <UART_SetConfig+0xc28>)
 8007790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007794:	461a      	mov	r2, r3
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	fbb3 f3f2 	udiv	r3, r3, r2
 800779c:	005a      	lsls	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	441a      	add	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	2b0f      	cmp	r3, #15
 80077b4:	d916      	bls.n	80077e4 <UART_SetConfig+0xb14>
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077bc:	d212      	bcs.n	80077e4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f023 030f 	bic.w	r3, r3, #15
 80077c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077d6:	4313      	orrs	r3, r2
 80077d8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80077e0:	60da      	str	r2, [r3, #12]
 80077e2:	e0bc      	b.n	800795e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80077ea:	e0b8      	b.n	800795e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	dc4b      	bgt.n	800788c <UART_SetConfig+0xbbc>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f2c0 8087 	blt.w	8007908 <UART_SetConfig+0xc38>
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	f200 8084 	bhi.w	8007908 <UART_SetConfig+0xc38>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <UART_SetConfig+0xb38>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	08007893 	.word	0x08007893
 800780c:	0800789b 	.word	0x0800789b
 8007810:	08007909 	.word	0x08007909
 8007814:	08007909 	.word	0x08007909
 8007818:	080078a3 	.word	0x080078a3
 800781c:	08007909 	.word	0x08007909
 8007820:	08007909 	.word	0x08007909
 8007824:	08007909 	.word	0x08007909
 8007828:	080078b3 	.word	0x080078b3
 800782c:	08007909 	.word	0x08007909
 8007830:	08007909 	.word	0x08007909
 8007834:	08007909 	.word	0x08007909
 8007838:	08007909 	.word	0x08007909
 800783c:	08007909 	.word	0x08007909
 8007840:	08007909 	.word	0x08007909
 8007844:	08007909 	.word	0x08007909
 8007848:	080078c3 	.word	0x080078c3
 800784c:	08007909 	.word	0x08007909
 8007850:	08007909 	.word	0x08007909
 8007854:	08007909 	.word	0x08007909
 8007858:	08007909 	.word	0x08007909
 800785c:	08007909 	.word	0x08007909
 8007860:	08007909 	.word	0x08007909
 8007864:	08007909 	.word	0x08007909
 8007868:	08007909 	.word	0x08007909
 800786c:	08007909 	.word	0x08007909
 8007870:	08007909 	.word	0x08007909
 8007874:	08007909 	.word	0x08007909
 8007878:	08007909 	.word	0x08007909
 800787c:	08007909 	.word	0x08007909
 8007880:	08007909 	.word	0x08007909
 8007884:	08007909 	.word	0x08007909
 8007888:	080078e9 	.word	0x080078e9
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d02e      	beq.n	80078ee <UART_SetConfig+0xc1e>
 8007890:	e03a      	b.n	8007908 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007892:	f7fc fc3f 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8007896:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007898:	e03c      	b.n	8007914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800789a:	f7fc fc51 	bl	8004140 <HAL_RCC_GetPCLK2Freq>
 800789e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80078a0:	e038      	b.n	8007914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a2:	f107 0314 	add.w	r3, r7, #20
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fd ffac 	bl	8005804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078b0:	e030      	b.n	8007914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b2:	f107 0308 	add.w	r3, r7, #8
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe f8f8 	bl	8005aac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078c0:	e028      	b.n	8007914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078c2:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <UART_SetConfig+0xc2c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078ce:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <UART_SetConfig+0xc2c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	08db      	lsrs	r3, r3, #3
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	4a09      	ldr	r2, [pc, #36]	; (8007900 <UART_SetConfig+0xc30>)
 80078da:	fa22 f303 	lsr.w	r3, r2, r3
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078e0:	e018      	b.n	8007914 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80078e2:	4b07      	ldr	r3, [pc, #28]	; (8007900 <UART_SetConfig+0xc30>)
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078e6:	e015      	b.n	8007914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <UART_SetConfig+0xc34>)
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078ec:	e012      	b.n	8007914 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078f4:	e00e      	b.n	8007914 <UART_SetConfig+0xc44>
 80078f6:	bf00      	nop
 80078f8:	0800881c 	.word	0x0800881c
 80078fc:	58024400 	.word	0x58024400
 8007900:	03d09000 	.word	0x03d09000
 8007904:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007912:	bf00      	nop
    }

    if (pclk != 0U)
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d021      	beq.n	800795e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	4a1a      	ldr	r2, [pc, #104]	; (8007988 <UART_SetConfig+0xcb8>)
 8007920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007924:	461a      	mov	r2, r3
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	fbb3 f2f2 	udiv	r2, r3, r2
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	085b      	lsrs	r3, r3, #1
 8007932:	441a      	add	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	2b0f      	cmp	r3, #15
 8007942:	d909      	bls.n	8007958 <UART_SetConfig+0xc88>
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800794a:	d205      	bcs.n	8007958 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	b29a      	uxth	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60da      	str	r2, [r3, #12]
 8007956:	e002      	b.n	800795e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800797a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800797e:	4618      	mov	r0, r3
 8007980:	3738      	adds	r7, #56	; 0x38
 8007982:	46bd      	mov	sp, r7
 8007984:	bdb0      	pop	{r4, r5, r7, pc}
 8007986:	bf00      	nop
 8007988:	0800881c 	.word	0x0800881c

0800798c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00a      	beq.n	80079b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fe:	f003 0308 	and.w	r3, r3, #8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00a      	beq.n	8007a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a42:	f003 0320 	and.w	r3, r3, #32
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d01a      	beq.n	8007aa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a8a:	d10a      	bne.n	8007aa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	605a      	str	r2, [r3, #4]
  }
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ae0:	f7f9 fd4c 	bl	800157c <HAL_GetTick>
 8007ae4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d10e      	bne.n	8007b12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f82f 	bl	8007b66 <UART_WaitOnFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e025      	b.n	8007b5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d10e      	bne.n	8007b3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f819 	bl	8007b66 <UART_WaitOnFlagUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e00f      	b.n	8007b5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b09c      	sub	sp, #112	; 0x70
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	603b      	str	r3, [r7, #0]
 8007b72:	4613      	mov	r3, r2
 8007b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b76:	e0a9      	b.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7e:	f000 80a5 	beq.w	8007ccc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b82:	f7f9 fcfb 	bl	800157c <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d302      	bcc.n	8007b98 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d140      	bne.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bac:	667b      	str	r3, [r7, #100]	; 0x64
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bb8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e6      	bne.n	8007b98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	f023 0301 	bic.w	r3, r3, #1
 8007be0:	663b      	str	r3, [r7, #96]	; 0x60
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3308      	adds	r3, #8
 8007be8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bea:	64ba      	str	r2, [r7, #72]	; 0x48
 8007bec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e5      	bne.n	8007bca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e069      	b.n	8007cee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d051      	beq.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c36:	d149      	bne.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c60:	637b      	str	r3, [r7, #52]	; 0x34
 8007c62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e6      	bne.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	613b      	str	r3, [r7, #16]
   return(result);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c94:	623a      	str	r2, [r7, #32]
 8007c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	69f9      	ldr	r1, [r7, #28]
 8007c9a:	6a3a      	ldr	r2, [r7, #32]
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e5      	bne.n	8007c74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e010      	b.n	8007cee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	69da      	ldr	r2, [r3, #28]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	bf0c      	ite	eq
 8007cdc:	2301      	moveq	r3, #1
 8007cde:	2300      	movne	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	f43f af46 	beq.w	8007b78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3770      	adds	r7, #112	; 0x70
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_UARTEx_DisableFifoMode+0x16>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e027      	b.n	8007d5c <HAL_UARTEx_DisableFifoMode+0x66>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2224      	movs	r2, #36	; 0x24
 8007d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e02d      	b.n	8007ddc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2224      	movs	r2, #36	; 0x24
 8007d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0201 	bic.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f84f 	bl	8007e60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d101      	bne.n	8007dfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007df8:	2302      	movs	r3, #2
 8007dfa:	e02d      	b.n	8007e58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2224      	movs	r2, #36	; 0x24
 8007e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0201 	bic.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f811 	bl	8007e60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d108      	bne.n	8007e82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e80:	e031      	b.n	8007ee6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e82:	2310      	movs	r3, #16
 8007e84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e86:	2310      	movs	r3, #16
 8007e88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	0e5b      	lsrs	r3, r3, #25
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	0f5b      	lsrs	r3, r3, #29
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	7b3a      	ldrb	r2, [r7, #12]
 8007eae:	4911      	ldr	r1, [pc, #68]	; (8007ef4 <UARTEx_SetNbDataToProcess+0x94>)
 8007eb0:	5c8a      	ldrb	r2, [r1, r2]
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007eb6:	7b3a      	ldrb	r2, [r7, #12]
 8007eb8:	490f      	ldr	r1, [pc, #60]	; (8007ef8 <UARTEx_SetNbDataToProcess+0x98>)
 8007eba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ebc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
 8007eca:	7b7a      	ldrb	r2, [r7, #13]
 8007ecc:	4909      	ldr	r1, [pc, #36]	; (8007ef4 <UARTEx_SetNbDataToProcess+0x94>)
 8007ece:	5c8a      	ldrb	r2, [r1, r2]
 8007ed0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ed4:	7b7a      	ldrb	r2, [r7, #13]
 8007ed6:	4908      	ldr	r1, [pc, #32]	; (8007ef8 <UARTEx_SetNbDataToProcess+0x98>)
 8007ed8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eda:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	08008834 	.word	0x08008834
 8007ef8:	0800883c 	.word	0x0800883c

08007efc <__errno>:
 8007efc:	4b01      	ldr	r3, [pc, #4]	; (8007f04 <__errno+0x8>)
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	2400002c 	.word	0x2400002c

08007f08 <__libc_init_array>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	4d0d      	ldr	r5, [pc, #52]	; (8007f40 <__libc_init_array+0x38>)
 8007f0c:	4c0d      	ldr	r4, [pc, #52]	; (8007f44 <__libc_init_array+0x3c>)
 8007f0e:	1b64      	subs	r4, r4, r5
 8007f10:	10a4      	asrs	r4, r4, #2
 8007f12:	2600      	movs	r6, #0
 8007f14:	42a6      	cmp	r6, r4
 8007f16:	d109      	bne.n	8007f2c <__libc_init_array+0x24>
 8007f18:	4d0b      	ldr	r5, [pc, #44]	; (8007f48 <__libc_init_array+0x40>)
 8007f1a:	4c0c      	ldr	r4, [pc, #48]	; (8007f4c <__libc_init_array+0x44>)
 8007f1c:	f000 fc4e 	bl	80087bc <_init>
 8007f20:	1b64      	subs	r4, r4, r5
 8007f22:	10a4      	asrs	r4, r4, #2
 8007f24:	2600      	movs	r6, #0
 8007f26:	42a6      	cmp	r6, r4
 8007f28:	d105      	bne.n	8007f36 <__libc_init_array+0x2e>
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f30:	4798      	blx	r3
 8007f32:	3601      	adds	r6, #1
 8007f34:	e7ee      	b.n	8007f14 <__libc_init_array+0xc>
 8007f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f3a:	4798      	blx	r3
 8007f3c:	3601      	adds	r6, #1
 8007f3e:	e7f2      	b.n	8007f26 <__libc_init_array+0x1e>
 8007f40:	08008880 	.word	0x08008880
 8007f44:	08008880 	.word	0x08008880
 8007f48:	08008880 	.word	0x08008880
 8007f4c:	08008884 	.word	0x08008884

08007f50 <memset>:
 8007f50:	4402      	add	r2, r0
 8007f52:	4603      	mov	r3, r0
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d100      	bne.n	8007f5a <memset+0xa>
 8007f58:	4770      	bx	lr
 8007f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f5e:	e7f9      	b.n	8007f54 <memset+0x4>

08007f60 <siprintf>:
 8007f60:	b40e      	push	{r1, r2, r3}
 8007f62:	b500      	push	{lr}
 8007f64:	b09c      	sub	sp, #112	; 0x70
 8007f66:	ab1d      	add	r3, sp, #116	; 0x74
 8007f68:	9002      	str	r0, [sp, #8]
 8007f6a:	9006      	str	r0, [sp, #24]
 8007f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f70:	4809      	ldr	r0, [pc, #36]	; (8007f98 <siprintf+0x38>)
 8007f72:	9107      	str	r1, [sp, #28]
 8007f74:	9104      	str	r1, [sp, #16]
 8007f76:	4909      	ldr	r1, [pc, #36]	; (8007f9c <siprintf+0x3c>)
 8007f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f7c:	9105      	str	r1, [sp, #20]
 8007f7e:	6800      	ldr	r0, [r0, #0]
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	a902      	add	r1, sp, #8
 8007f84:	f000 f868 	bl	8008058 <_svfiprintf_r>
 8007f88:	9b02      	ldr	r3, [sp, #8]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	b01c      	add	sp, #112	; 0x70
 8007f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f94:	b003      	add	sp, #12
 8007f96:	4770      	bx	lr
 8007f98:	2400002c 	.word	0x2400002c
 8007f9c:	ffff0208 	.word	0xffff0208

08007fa0 <__ssputs_r>:
 8007fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	688e      	ldr	r6, [r1, #8]
 8007fa6:	429e      	cmp	r6, r3
 8007fa8:	4682      	mov	sl, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4690      	mov	r8, r2
 8007fae:	461f      	mov	r7, r3
 8007fb0:	d838      	bhi.n	8008024 <__ssputs_r+0x84>
 8007fb2:	898a      	ldrh	r2, [r1, #12]
 8007fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fb8:	d032      	beq.n	8008020 <__ssputs_r+0x80>
 8007fba:	6825      	ldr	r5, [r4, #0]
 8007fbc:	6909      	ldr	r1, [r1, #16]
 8007fbe:	eba5 0901 	sub.w	r9, r5, r1
 8007fc2:	6965      	ldr	r5, [r4, #20]
 8007fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fcc:	3301      	adds	r3, #1
 8007fce:	444b      	add	r3, r9
 8007fd0:	106d      	asrs	r5, r5, #1
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	bf38      	it	cc
 8007fd6:	461d      	movcc	r5, r3
 8007fd8:	0553      	lsls	r3, r2, #21
 8007fda:	d531      	bpl.n	8008040 <__ssputs_r+0xa0>
 8007fdc:	4629      	mov	r1, r5
 8007fde:	f000 fb47 	bl	8008670 <_malloc_r>
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	b950      	cbnz	r0, 8007ffc <__ssputs_r+0x5c>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	f8ca 3000 	str.w	r3, [sl]
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff2:	81a3      	strh	r3, [r4, #12]
 8007ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ffc:	6921      	ldr	r1, [r4, #16]
 8007ffe:	464a      	mov	r2, r9
 8008000:	f000 fabe 	bl	8008580 <memcpy>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800800a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	6126      	str	r6, [r4, #16]
 8008012:	6165      	str	r5, [r4, #20]
 8008014:	444e      	add	r6, r9
 8008016:	eba5 0509 	sub.w	r5, r5, r9
 800801a:	6026      	str	r6, [r4, #0]
 800801c:	60a5      	str	r5, [r4, #8]
 800801e:	463e      	mov	r6, r7
 8008020:	42be      	cmp	r6, r7
 8008022:	d900      	bls.n	8008026 <__ssputs_r+0x86>
 8008024:	463e      	mov	r6, r7
 8008026:	4632      	mov	r2, r6
 8008028:	6820      	ldr	r0, [r4, #0]
 800802a:	4641      	mov	r1, r8
 800802c:	f000 fab6 	bl	800859c <memmove>
 8008030:	68a3      	ldr	r3, [r4, #8]
 8008032:	6822      	ldr	r2, [r4, #0]
 8008034:	1b9b      	subs	r3, r3, r6
 8008036:	4432      	add	r2, r6
 8008038:	60a3      	str	r3, [r4, #8]
 800803a:	6022      	str	r2, [r4, #0]
 800803c:	2000      	movs	r0, #0
 800803e:	e7db      	b.n	8007ff8 <__ssputs_r+0x58>
 8008040:	462a      	mov	r2, r5
 8008042:	f000 fb6f 	bl	8008724 <_realloc_r>
 8008046:	4606      	mov	r6, r0
 8008048:	2800      	cmp	r0, #0
 800804a:	d1e1      	bne.n	8008010 <__ssputs_r+0x70>
 800804c:	6921      	ldr	r1, [r4, #16]
 800804e:	4650      	mov	r0, sl
 8008050:	f000 fabe 	bl	80085d0 <_free_r>
 8008054:	e7c7      	b.n	8007fe6 <__ssputs_r+0x46>
	...

08008058 <_svfiprintf_r>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	4698      	mov	r8, r3
 800805e:	898b      	ldrh	r3, [r1, #12]
 8008060:	061b      	lsls	r3, r3, #24
 8008062:	b09d      	sub	sp, #116	; 0x74
 8008064:	4607      	mov	r7, r0
 8008066:	460d      	mov	r5, r1
 8008068:	4614      	mov	r4, r2
 800806a:	d50e      	bpl.n	800808a <_svfiprintf_r+0x32>
 800806c:	690b      	ldr	r3, [r1, #16]
 800806e:	b963      	cbnz	r3, 800808a <_svfiprintf_r+0x32>
 8008070:	2140      	movs	r1, #64	; 0x40
 8008072:	f000 fafd 	bl	8008670 <_malloc_r>
 8008076:	6028      	str	r0, [r5, #0]
 8008078:	6128      	str	r0, [r5, #16]
 800807a:	b920      	cbnz	r0, 8008086 <_svfiprintf_r+0x2e>
 800807c:	230c      	movs	r3, #12
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	f04f 30ff 	mov.w	r0, #4294967295
 8008084:	e0d1      	b.n	800822a <_svfiprintf_r+0x1d2>
 8008086:	2340      	movs	r3, #64	; 0x40
 8008088:	616b      	str	r3, [r5, #20]
 800808a:	2300      	movs	r3, #0
 800808c:	9309      	str	r3, [sp, #36]	; 0x24
 800808e:	2320      	movs	r3, #32
 8008090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008094:	f8cd 800c 	str.w	r8, [sp, #12]
 8008098:	2330      	movs	r3, #48	; 0x30
 800809a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008244 <_svfiprintf_r+0x1ec>
 800809e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080a2:	f04f 0901 	mov.w	r9, #1
 80080a6:	4623      	mov	r3, r4
 80080a8:	469a      	mov	sl, r3
 80080aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ae:	b10a      	cbz	r2, 80080b4 <_svfiprintf_r+0x5c>
 80080b0:	2a25      	cmp	r2, #37	; 0x25
 80080b2:	d1f9      	bne.n	80080a8 <_svfiprintf_r+0x50>
 80080b4:	ebba 0b04 	subs.w	fp, sl, r4
 80080b8:	d00b      	beq.n	80080d2 <_svfiprintf_r+0x7a>
 80080ba:	465b      	mov	r3, fp
 80080bc:	4622      	mov	r2, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	4638      	mov	r0, r7
 80080c2:	f7ff ff6d 	bl	8007fa0 <__ssputs_r>
 80080c6:	3001      	adds	r0, #1
 80080c8:	f000 80aa 	beq.w	8008220 <_svfiprintf_r+0x1c8>
 80080cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ce:	445a      	add	r2, fp
 80080d0:	9209      	str	r2, [sp, #36]	; 0x24
 80080d2:	f89a 3000 	ldrb.w	r3, [sl]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 80a2 	beq.w	8008220 <_svfiprintf_r+0x1c8>
 80080dc:	2300      	movs	r3, #0
 80080de:	f04f 32ff 	mov.w	r2, #4294967295
 80080e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080e6:	f10a 0a01 	add.w	sl, sl, #1
 80080ea:	9304      	str	r3, [sp, #16]
 80080ec:	9307      	str	r3, [sp, #28]
 80080ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080f2:	931a      	str	r3, [sp, #104]	; 0x68
 80080f4:	4654      	mov	r4, sl
 80080f6:	2205      	movs	r2, #5
 80080f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fc:	4851      	ldr	r0, [pc, #324]	; (8008244 <_svfiprintf_r+0x1ec>)
 80080fe:	f7f8 f8ff 	bl	8000300 <memchr>
 8008102:	9a04      	ldr	r2, [sp, #16]
 8008104:	b9d8      	cbnz	r0, 800813e <_svfiprintf_r+0xe6>
 8008106:	06d0      	lsls	r0, r2, #27
 8008108:	bf44      	itt	mi
 800810a:	2320      	movmi	r3, #32
 800810c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008110:	0711      	lsls	r1, r2, #28
 8008112:	bf44      	itt	mi
 8008114:	232b      	movmi	r3, #43	; 0x2b
 8008116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800811a:	f89a 3000 	ldrb.w	r3, [sl]
 800811e:	2b2a      	cmp	r3, #42	; 0x2a
 8008120:	d015      	beq.n	800814e <_svfiprintf_r+0xf6>
 8008122:	9a07      	ldr	r2, [sp, #28]
 8008124:	4654      	mov	r4, sl
 8008126:	2000      	movs	r0, #0
 8008128:	f04f 0c0a 	mov.w	ip, #10
 800812c:	4621      	mov	r1, r4
 800812e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008132:	3b30      	subs	r3, #48	; 0x30
 8008134:	2b09      	cmp	r3, #9
 8008136:	d94e      	bls.n	80081d6 <_svfiprintf_r+0x17e>
 8008138:	b1b0      	cbz	r0, 8008168 <_svfiprintf_r+0x110>
 800813a:	9207      	str	r2, [sp, #28]
 800813c:	e014      	b.n	8008168 <_svfiprintf_r+0x110>
 800813e:	eba0 0308 	sub.w	r3, r0, r8
 8008142:	fa09 f303 	lsl.w	r3, r9, r3
 8008146:	4313      	orrs	r3, r2
 8008148:	9304      	str	r3, [sp, #16]
 800814a:	46a2      	mov	sl, r4
 800814c:	e7d2      	b.n	80080f4 <_svfiprintf_r+0x9c>
 800814e:	9b03      	ldr	r3, [sp, #12]
 8008150:	1d19      	adds	r1, r3, #4
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	9103      	str	r1, [sp, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	bfbb      	ittet	lt
 800815a:	425b      	neglt	r3, r3
 800815c:	f042 0202 	orrlt.w	r2, r2, #2
 8008160:	9307      	strge	r3, [sp, #28]
 8008162:	9307      	strlt	r3, [sp, #28]
 8008164:	bfb8      	it	lt
 8008166:	9204      	strlt	r2, [sp, #16]
 8008168:	7823      	ldrb	r3, [r4, #0]
 800816a:	2b2e      	cmp	r3, #46	; 0x2e
 800816c:	d10c      	bne.n	8008188 <_svfiprintf_r+0x130>
 800816e:	7863      	ldrb	r3, [r4, #1]
 8008170:	2b2a      	cmp	r3, #42	; 0x2a
 8008172:	d135      	bne.n	80081e0 <_svfiprintf_r+0x188>
 8008174:	9b03      	ldr	r3, [sp, #12]
 8008176:	1d1a      	adds	r2, r3, #4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	9203      	str	r2, [sp, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	bfb8      	it	lt
 8008180:	f04f 33ff 	movlt.w	r3, #4294967295
 8008184:	3402      	adds	r4, #2
 8008186:	9305      	str	r3, [sp, #20]
 8008188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008254 <_svfiprintf_r+0x1fc>
 800818c:	7821      	ldrb	r1, [r4, #0]
 800818e:	2203      	movs	r2, #3
 8008190:	4650      	mov	r0, sl
 8008192:	f7f8 f8b5 	bl	8000300 <memchr>
 8008196:	b140      	cbz	r0, 80081aa <_svfiprintf_r+0x152>
 8008198:	2340      	movs	r3, #64	; 0x40
 800819a:	eba0 000a 	sub.w	r0, r0, sl
 800819e:	fa03 f000 	lsl.w	r0, r3, r0
 80081a2:	9b04      	ldr	r3, [sp, #16]
 80081a4:	4303      	orrs	r3, r0
 80081a6:	3401      	adds	r4, #1
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ae:	4826      	ldr	r0, [pc, #152]	; (8008248 <_svfiprintf_r+0x1f0>)
 80081b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081b4:	2206      	movs	r2, #6
 80081b6:	f7f8 f8a3 	bl	8000300 <memchr>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d038      	beq.n	8008230 <_svfiprintf_r+0x1d8>
 80081be:	4b23      	ldr	r3, [pc, #140]	; (800824c <_svfiprintf_r+0x1f4>)
 80081c0:	bb1b      	cbnz	r3, 800820a <_svfiprintf_r+0x1b2>
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	3307      	adds	r3, #7
 80081c6:	f023 0307 	bic.w	r3, r3, #7
 80081ca:	3308      	adds	r3, #8
 80081cc:	9303      	str	r3, [sp, #12]
 80081ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d0:	4433      	add	r3, r6
 80081d2:	9309      	str	r3, [sp, #36]	; 0x24
 80081d4:	e767      	b.n	80080a6 <_svfiprintf_r+0x4e>
 80081d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081da:	460c      	mov	r4, r1
 80081dc:	2001      	movs	r0, #1
 80081de:	e7a5      	b.n	800812c <_svfiprintf_r+0xd4>
 80081e0:	2300      	movs	r3, #0
 80081e2:	3401      	adds	r4, #1
 80081e4:	9305      	str	r3, [sp, #20]
 80081e6:	4619      	mov	r1, r3
 80081e8:	f04f 0c0a 	mov.w	ip, #10
 80081ec:	4620      	mov	r0, r4
 80081ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081f2:	3a30      	subs	r2, #48	; 0x30
 80081f4:	2a09      	cmp	r2, #9
 80081f6:	d903      	bls.n	8008200 <_svfiprintf_r+0x1a8>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0c5      	beq.n	8008188 <_svfiprintf_r+0x130>
 80081fc:	9105      	str	r1, [sp, #20]
 80081fe:	e7c3      	b.n	8008188 <_svfiprintf_r+0x130>
 8008200:	fb0c 2101 	mla	r1, ip, r1, r2
 8008204:	4604      	mov	r4, r0
 8008206:	2301      	movs	r3, #1
 8008208:	e7f0      	b.n	80081ec <_svfiprintf_r+0x194>
 800820a:	ab03      	add	r3, sp, #12
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	462a      	mov	r2, r5
 8008210:	4b0f      	ldr	r3, [pc, #60]	; (8008250 <_svfiprintf_r+0x1f8>)
 8008212:	a904      	add	r1, sp, #16
 8008214:	4638      	mov	r0, r7
 8008216:	f3af 8000 	nop.w
 800821a:	1c42      	adds	r2, r0, #1
 800821c:	4606      	mov	r6, r0
 800821e:	d1d6      	bne.n	80081ce <_svfiprintf_r+0x176>
 8008220:	89ab      	ldrh	r3, [r5, #12]
 8008222:	065b      	lsls	r3, r3, #25
 8008224:	f53f af2c 	bmi.w	8008080 <_svfiprintf_r+0x28>
 8008228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800822a:	b01d      	add	sp, #116	; 0x74
 800822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008230:	ab03      	add	r3, sp, #12
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	462a      	mov	r2, r5
 8008236:	4b06      	ldr	r3, [pc, #24]	; (8008250 <_svfiprintf_r+0x1f8>)
 8008238:	a904      	add	r1, sp, #16
 800823a:	4638      	mov	r0, r7
 800823c:	f000 f87a 	bl	8008334 <_printf_i>
 8008240:	e7eb      	b.n	800821a <_svfiprintf_r+0x1c2>
 8008242:	bf00      	nop
 8008244:	08008844 	.word	0x08008844
 8008248:	0800884e 	.word	0x0800884e
 800824c:	00000000 	.word	0x00000000
 8008250:	08007fa1 	.word	0x08007fa1
 8008254:	0800884a 	.word	0x0800884a

08008258 <_printf_common>:
 8008258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800825c:	4616      	mov	r6, r2
 800825e:	4699      	mov	r9, r3
 8008260:	688a      	ldr	r2, [r1, #8]
 8008262:	690b      	ldr	r3, [r1, #16]
 8008264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008268:	4293      	cmp	r3, r2
 800826a:	bfb8      	it	lt
 800826c:	4613      	movlt	r3, r2
 800826e:	6033      	str	r3, [r6, #0]
 8008270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008274:	4607      	mov	r7, r0
 8008276:	460c      	mov	r4, r1
 8008278:	b10a      	cbz	r2, 800827e <_printf_common+0x26>
 800827a:	3301      	adds	r3, #1
 800827c:	6033      	str	r3, [r6, #0]
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	0699      	lsls	r1, r3, #26
 8008282:	bf42      	ittt	mi
 8008284:	6833      	ldrmi	r3, [r6, #0]
 8008286:	3302      	addmi	r3, #2
 8008288:	6033      	strmi	r3, [r6, #0]
 800828a:	6825      	ldr	r5, [r4, #0]
 800828c:	f015 0506 	ands.w	r5, r5, #6
 8008290:	d106      	bne.n	80082a0 <_printf_common+0x48>
 8008292:	f104 0a19 	add.w	sl, r4, #25
 8008296:	68e3      	ldr	r3, [r4, #12]
 8008298:	6832      	ldr	r2, [r6, #0]
 800829a:	1a9b      	subs	r3, r3, r2
 800829c:	42ab      	cmp	r3, r5
 800829e:	dc26      	bgt.n	80082ee <_printf_common+0x96>
 80082a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082a4:	1e13      	subs	r3, r2, #0
 80082a6:	6822      	ldr	r2, [r4, #0]
 80082a8:	bf18      	it	ne
 80082aa:	2301      	movne	r3, #1
 80082ac:	0692      	lsls	r2, r2, #26
 80082ae:	d42b      	bmi.n	8008308 <_printf_common+0xb0>
 80082b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082b4:	4649      	mov	r1, r9
 80082b6:	4638      	mov	r0, r7
 80082b8:	47c0      	blx	r8
 80082ba:	3001      	adds	r0, #1
 80082bc:	d01e      	beq.n	80082fc <_printf_common+0xa4>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	68e5      	ldr	r5, [r4, #12]
 80082c2:	6832      	ldr	r2, [r6, #0]
 80082c4:	f003 0306 	and.w	r3, r3, #6
 80082c8:	2b04      	cmp	r3, #4
 80082ca:	bf08      	it	eq
 80082cc:	1aad      	subeq	r5, r5, r2
 80082ce:	68a3      	ldr	r3, [r4, #8]
 80082d0:	6922      	ldr	r2, [r4, #16]
 80082d2:	bf0c      	ite	eq
 80082d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082d8:	2500      	movne	r5, #0
 80082da:	4293      	cmp	r3, r2
 80082dc:	bfc4      	itt	gt
 80082de:	1a9b      	subgt	r3, r3, r2
 80082e0:	18ed      	addgt	r5, r5, r3
 80082e2:	2600      	movs	r6, #0
 80082e4:	341a      	adds	r4, #26
 80082e6:	42b5      	cmp	r5, r6
 80082e8:	d11a      	bne.n	8008320 <_printf_common+0xc8>
 80082ea:	2000      	movs	r0, #0
 80082ec:	e008      	b.n	8008300 <_printf_common+0xa8>
 80082ee:	2301      	movs	r3, #1
 80082f0:	4652      	mov	r2, sl
 80082f2:	4649      	mov	r1, r9
 80082f4:	4638      	mov	r0, r7
 80082f6:	47c0      	blx	r8
 80082f8:	3001      	adds	r0, #1
 80082fa:	d103      	bne.n	8008304 <_printf_common+0xac>
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008304:	3501      	adds	r5, #1
 8008306:	e7c6      	b.n	8008296 <_printf_common+0x3e>
 8008308:	18e1      	adds	r1, r4, r3
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	2030      	movs	r0, #48	; 0x30
 800830e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008312:	4422      	add	r2, r4
 8008314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800831c:	3302      	adds	r3, #2
 800831e:	e7c7      	b.n	80082b0 <_printf_common+0x58>
 8008320:	2301      	movs	r3, #1
 8008322:	4622      	mov	r2, r4
 8008324:	4649      	mov	r1, r9
 8008326:	4638      	mov	r0, r7
 8008328:	47c0      	blx	r8
 800832a:	3001      	adds	r0, #1
 800832c:	d0e6      	beq.n	80082fc <_printf_common+0xa4>
 800832e:	3601      	adds	r6, #1
 8008330:	e7d9      	b.n	80082e6 <_printf_common+0x8e>
	...

08008334 <_printf_i>:
 8008334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008338:	460c      	mov	r4, r1
 800833a:	4691      	mov	r9, r2
 800833c:	7e27      	ldrb	r7, [r4, #24]
 800833e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008340:	2f78      	cmp	r7, #120	; 0x78
 8008342:	4680      	mov	r8, r0
 8008344:	469a      	mov	sl, r3
 8008346:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800834a:	d807      	bhi.n	800835c <_printf_i+0x28>
 800834c:	2f62      	cmp	r7, #98	; 0x62
 800834e:	d80a      	bhi.n	8008366 <_printf_i+0x32>
 8008350:	2f00      	cmp	r7, #0
 8008352:	f000 80d8 	beq.w	8008506 <_printf_i+0x1d2>
 8008356:	2f58      	cmp	r7, #88	; 0x58
 8008358:	f000 80a3 	beq.w	80084a2 <_printf_i+0x16e>
 800835c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008364:	e03a      	b.n	80083dc <_printf_i+0xa8>
 8008366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800836a:	2b15      	cmp	r3, #21
 800836c:	d8f6      	bhi.n	800835c <_printf_i+0x28>
 800836e:	a001      	add	r0, pc, #4	; (adr r0, 8008374 <_printf_i+0x40>)
 8008370:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008374:	080083cd 	.word	0x080083cd
 8008378:	080083e1 	.word	0x080083e1
 800837c:	0800835d 	.word	0x0800835d
 8008380:	0800835d 	.word	0x0800835d
 8008384:	0800835d 	.word	0x0800835d
 8008388:	0800835d 	.word	0x0800835d
 800838c:	080083e1 	.word	0x080083e1
 8008390:	0800835d 	.word	0x0800835d
 8008394:	0800835d 	.word	0x0800835d
 8008398:	0800835d 	.word	0x0800835d
 800839c:	0800835d 	.word	0x0800835d
 80083a0:	080084ed 	.word	0x080084ed
 80083a4:	08008411 	.word	0x08008411
 80083a8:	080084cf 	.word	0x080084cf
 80083ac:	0800835d 	.word	0x0800835d
 80083b0:	0800835d 	.word	0x0800835d
 80083b4:	0800850f 	.word	0x0800850f
 80083b8:	0800835d 	.word	0x0800835d
 80083bc:	08008411 	.word	0x08008411
 80083c0:	0800835d 	.word	0x0800835d
 80083c4:	0800835d 	.word	0x0800835d
 80083c8:	080084d7 	.word	0x080084d7
 80083cc:	680b      	ldr	r3, [r1, #0]
 80083ce:	1d1a      	adds	r2, r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	600a      	str	r2, [r1, #0]
 80083d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083dc:	2301      	movs	r3, #1
 80083de:	e0a3      	b.n	8008528 <_printf_i+0x1f4>
 80083e0:	6825      	ldr	r5, [r4, #0]
 80083e2:	6808      	ldr	r0, [r1, #0]
 80083e4:	062e      	lsls	r6, r5, #24
 80083e6:	f100 0304 	add.w	r3, r0, #4
 80083ea:	d50a      	bpl.n	8008402 <_printf_i+0xce>
 80083ec:	6805      	ldr	r5, [r0, #0]
 80083ee:	600b      	str	r3, [r1, #0]
 80083f0:	2d00      	cmp	r5, #0
 80083f2:	da03      	bge.n	80083fc <_printf_i+0xc8>
 80083f4:	232d      	movs	r3, #45	; 0x2d
 80083f6:	426d      	negs	r5, r5
 80083f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083fc:	485e      	ldr	r0, [pc, #376]	; (8008578 <_printf_i+0x244>)
 80083fe:	230a      	movs	r3, #10
 8008400:	e019      	b.n	8008436 <_printf_i+0x102>
 8008402:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008406:	6805      	ldr	r5, [r0, #0]
 8008408:	600b      	str	r3, [r1, #0]
 800840a:	bf18      	it	ne
 800840c:	b22d      	sxthne	r5, r5
 800840e:	e7ef      	b.n	80083f0 <_printf_i+0xbc>
 8008410:	680b      	ldr	r3, [r1, #0]
 8008412:	6825      	ldr	r5, [r4, #0]
 8008414:	1d18      	adds	r0, r3, #4
 8008416:	6008      	str	r0, [r1, #0]
 8008418:	0628      	lsls	r0, r5, #24
 800841a:	d501      	bpl.n	8008420 <_printf_i+0xec>
 800841c:	681d      	ldr	r5, [r3, #0]
 800841e:	e002      	b.n	8008426 <_printf_i+0xf2>
 8008420:	0669      	lsls	r1, r5, #25
 8008422:	d5fb      	bpl.n	800841c <_printf_i+0xe8>
 8008424:	881d      	ldrh	r5, [r3, #0]
 8008426:	4854      	ldr	r0, [pc, #336]	; (8008578 <_printf_i+0x244>)
 8008428:	2f6f      	cmp	r7, #111	; 0x6f
 800842a:	bf0c      	ite	eq
 800842c:	2308      	moveq	r3, #8
 800842e:	230a      	movne	r3, #10
 8008430:	2100      	movs	r1, #0
 8008432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008436:	6866      	ldr	r6, [r4, #4]
 8008438:	60a6      	str	r6, [r4, #8]
 800843a:	2e00      	cmp	r6, #0
 800843c:	bfa2      	ittt	ge
 800843e:	6821      	ldrge	r1, [r4, #0]
 8008440:	f021 0104 	bicge.w	r1, r1, #4
 8008444:	6021      	strge	r1, [r4, #0]
 8008446:	b90d      	cbnz	r5, 800844c <_printf_i+0x118>
 8008448:	2e00      	cmp	r6, #0
 800844a:	d04d      	beq.n	80084e8 <_printf_i+0x1b4>
 800844c:	4616      	mov	r6, r2
 800844e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008452:	fb03 5711 	mls	r7, r3, r1, r5
 8008456:	5dc7      	ldrb	r7, [r0, r7]
 8008458:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800845c:	462f      	mov	r7, r5
 800845e:	42bb      	cmp	r3, r7
 8008460:	460d      	mov	r5, r1
 8008462:	d9f4      	bls.n	800844e <_printf_i+0x11a>
 8008464:	2b08      	cmp	r3, #8
 8008466:	d10b      	bne.n	8008480 <_printf_i+0x14c>
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	07df      	lsls	r7, r3, #31
 800846c:	d508      	bpl.n	8008480 <_printf_i+0x14c>
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	6861      	ldr	r1, [r4, #4]
 8008472:	4299      	cmp	r1, r3
 8008474:	bfde      	ittt	le
 8008476:	2330      	movle	r3, #48	; 0x30
 8008478:	f806 3c01 	strble.w	r3, [r6, #-1]
 800847c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008480:	1b92      	subs	r2, r2, r6
 8008482:	6122      	str	r2, [r4, #16]
 8008484:	f8cd a000 	str.w	sl, [sp]
 8008488:	464b      	mov	r3, r9
 800848a:	aa03      	add	r2, sp, #12
 800848c:	4621      	mov	r1, r4
 800848e:	4640      	mov	r0, r8
 8008490:	f7ff fee2 	bl	8008258 <_printf_common>
 8008494:	3001      	adds	r0, #1
 8008496:	d14c      	bne.n	8008532 <_printf_i+0x1fe>
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	b004      	add	sp, #16
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	4835      	ldr	r0, [pc, #212]	; (8008578 <_printf_i+0x244>)
 80084a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	680e      	ldr	r6, [r1, #0]
 80084ac:	061f      	lsls	r7, r3, #24
 80084ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80084b2:	600e      	str	r6, [r1, #0]
 80084b4:	d514      	bpl.n	80084e0 <_printf_i+0x1ac>
 80084b6:	07d9      	lsls	r1, r3, #31
 80084b8:	bf44      	itt	mi
 80084ba:	f043 0320 	orrmi.w	r3, r3, #32
 80084be:	6023      	strmi	r3, [r4, #0]
 80084c0:	b91d      	cbnz	r5, 80084ca <_printf_i+0x196>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	f023 0320 	bic.w	r3, r3, #32
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	2310      	movs	r3, #16
 80084cc:	e7b0      	b.n	8008430 <_printf_i+0xfc>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	f043 0320 	orr.w	r3, r3, #32
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	2378      	movs	r3, #120	; 0x78
 80084d8:	4828      	ldr	r0, [pc, #160]	; (800857c <_printf_i+0x248>)
 80084da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084de:	e7e3      	b.n	80084a8 <_printf_i+0x174>
 80084e0:	065e      	lsls	r6, r3, #25
 80084e2:	bf48      	it	mi
 80084e4:	b2ad      	uxthmi	r5, r5
 80084e6:	e7e6      	b.n	80084b6 <_printf_i+0x182>
 80084e8:	4616      	mov	r6, r2
 80084ea:	e7bb      	b.n	8008464 <_printf_i+0x130>
 80084ec:	680b      	ldr	r3, [r1, #0]
 80084ee:	6826      	ldr	r6, [r4, #0]
 80084f0:	6960      	ldr	r0, [r4, #20]
 80084f2:	1d1d      	adds	r5, r3, #4
 80084f4:	600d      	str	r5, [r1, #0]
 80084f6:	0635      	lsls	r5, r6, #24
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	d501      	bpl.n	8008500 <_printf_i+0x1cc>
 80084fc:	6018      	str	r0, [r3, #0]
 80084fe:	e002      	b.n	8008506 <_printf_i+0x1d2>
 8008500:	0671      	lsls	r1, r6, #25
 8008502:	d5fb      	bpl.n	80084fc <_printf_i+0x1c8>
 8008504:	8018      	strh	r0, [r3, #0]
 8008506:	2300      	movs	r3, #0
 8008508:	6123      	str	r3, [r4, #16]
 800850a:	4616      	mov	r6, r2
 800850c:	e7ba      	b.n	8008484 <_printf_i+0x150>
 800850e:	680b      	ldr	r3, [r1, #0]
 8008510:	1d1a      	adds	r2, r3, #4
 8008512:	600a      	str	r2, [r1, #0]
 8008514:	681e      	ldr	r6, [r3, #0]
 8008516:	6862      	ldr	r2, [r4, #4]
 8008518:	2100      	movs	r1, #0
 800851a:	4630      	mov	r0, r6
 800851c:	f7f7 fef0 	bl	8000300 <memchr>
 8008520:	b108      	cbz	r0, 8008526 <_printf_i+0x1f2>
 8008522:	1b80      	subs	r0, r0, r6
 8008524:	6060      	str	r0, [r4, #4]
 8008526:	6863      	ldr	r3, [r4, #4]
 8008528:	6123      	str	r3, [r4, #16]
 800852a:	2300      	movs	r3, #0
 800852c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008530:	e7a8      	b.n	8008484 <_printf_i+0x150>
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	4632      	mov	r2, r6
 8008536:	4649      	mov	r1, r9
 8008538:	4640      	mov	r0, r8
 800853a:	47d0      	blx	sl
 800853c:	3001      	adds	r0, #1
 800853e:	d0ab      	beq.n	8008498 <_printf_i+0x164>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	079b      	lsls	r3, r3, #30
 8008544:	d413      	bmi.n	800856e <_printf_i+0x23a>
 8008546:	68e0      	ldr	r0, [r4, #12]
 8008548:	9b03      	ldr	r3, [sp, #12]
 800854a:	4298      	cmp	r0, r3
 800854c:	bfb8      	it	lt
 800854e:	4618      	movlt	r0, r3
 8008550:	e7a4      	b.n	800849c <_printf_i+0x168>
 8008552:	2301      	movs	r3, #1
 8008554:	4632      	mov	r2, r6
 8008556:	4649      	mov	r1, r9
 8008558:	4640      	mov	r0, r8
 800855a:	47d0      	blx	sl
 800855c:	3001      	adds	r0, #1
 800855e:	d09b      	beq.n	8008498 <_printf_i+0x164>
 8008560:	3501      	adds	r5, #1
 8008562:	68e3      	ldr	r3, [r4, #12]
 8008564:	9903      	ldr	r1, [sp, #12]
 8008566:	1a5b      	subs	r3, r3, r1
 8008568:	42ab      	cmp	r3, r5
 800856a:	dcf2      	bgt.n	8008552 <_printf_i+0x21e>
 800856c:	e7eb      	b.n	8008546 <_printf_i+0x212>
 800856e:	2500      	movs	r5, #0
 8008570:	f104 0619 	add.w	r6, r4, #25
 8008574:	e7f5      	b.n	8008562 <_printf_i+0x22e>
 8008576:	bf00      	nop
 8008578:	08008855 	.word	0x08008855
 800857c:	08008866 	.word	0x08008866

08008580 <memcpy>:
 8008580:	440a      	add	r2, r1
 8008582:	4291      	cmp	r1, r2
 8008584:	f100 33ff 	add.w	r3, r0, #4294967295
 8008588:	d100      	bne.n	800858c <memcpy+0xc>
 800858a:	4770      	bx	lr
 800858c:	b510      	push	{r4, lr}
 800858e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008596:	4291      	cmp	r1, r2
 8008598:	d1f9      	bne.n	800858e <memcpy+0xe>
 800859a:	bd10      	pop	{r4, pc}

0800859c <memmove>:
 800859c:	4288      	cmp	r0, r1
 800859e:	b510      	push	{r4, lr}
 80085a0:	eb01 0402 	add.w	r4, r1, r2
 80085a4:	d902      	bls.n	80085ac <memmove+0x10>
 80085a6:	4284      	cmp	r4, r0
 80085a8:	4623      	mov	r3, r4
 80085aa:	d807      	bhi.n	80085bc <memmove+0x20>
 80085ac:	1e43      	subs	r3, r0, #1
 80085ae:	42a1      	cmp	r1, r4
 80085b0:	d008      	beq.n	80085c4 <memmove+0x28>
 80085b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ba:	e7f8      	b.n	80085ae <memmove+0x12>
 80085bc:	4402      	add	r2, r0
 80085be:	4601      	mov	r1, r0
 80085c0:	428a      	cmp	r2, r1
 80085c2:	d100      	bne.n	80085c6 <memmove+0x2a>
 80085c4:	bd10      	pop	{r4, pc}
 80085c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085ce:	e7f7      	b.n	80085c0 <memmove+0x24>

080085d0 <_free_r>:
 80085d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085d2:	2900      	cmp	r1, #0
 80085d4:	d048      	beq.n	8008668 <_free_r+0x98>
 80085d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085da:	9001      	str	r0, [sp, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f1a1 0404 	sub.w	r4, r1, #4
 80085e2:	bfb8      	it	lt
 80085e4:	18e4      	addlt	r4, r4, r3
 80085e6:	f000 f8d3 	bl	8008790 <__malloc_lock>
 80085ea:	4a20      	ldr	r2, [pc, #128]	; (800866c <_free_r+0x9c>)
 80085ec:	9801      	ldr	r0, [sp, #4]
 80085ee:	6813      	ldr	r3, [r2, #0]
 80085f0:	4615      	mov	r5, r2
 80085f2:	b933      	cbnz	r3, 8008602 <_free_r+0x32>
 80085f4:	6063      	str	r3, [r4, #4]
 80085f6:	6014      	str	r4, [r2, #0]
 80085f8:	b003      	add	sp, #12
 80085fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085fe:	f000 b8cd 	b.w	800879c <__malloc_unlock>
 8008602:	42a3      	cmp	r3, r4
 8008604:	d90b      	bls.n	800861e <_free_r+0x4e>
 8008606:	6821      	ldr	r1, [r4, #0]
 8008608:	1862      	adds	r2, r4, r1
 800860a:	4293      	cmp	r3, r2
 800860c:	bf04      	itt	eq
 800860e:	681a      	ldreq	r2, [r3, #0]
 8008610:	685b      	ldreq	r3, [r3, #4]
 8008612:	6063      	str	r3, [r4, #4]
 8008614:	bf04      	itt	eq
 8008616:	1852      	addeq	r2, r2, r1
 8008618:	6022      	streq	r2, [r4, #0]
 800861a:	602c      	str	r4, [r5, #0]
 800861c:	e7ec      	b.n	80085f8 <_free_r+0x28>
 800861e:	461a      	mov	r2, r3
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	b10b      	cbz	r3, 8008628 <_free_r+0x58>
 8008624:	42a3      	cmp	r3, r4
 8008626:	d9fa      	bls.n	800861e <_free_r+0x4e>
 8008628:	6811      	ldr	r1, [r2, #0]
 800862a:	1855      	adds	r5, r2, r1
 800862c:	42a5      	cmp	r5, r4
 800862e:	d10b      	bne.n	8008648 <_free_r+0x78>
 8008630:	6824      	ldr	r4, [r4, #0]
 8008632:	4421      	add	r1, r4
 8008634:	1854      	adds	r4, r2, r1
 8008636:	42a3      	cmp	r3, r4
 8008638:	6011      	str	r1, [r2, #0]
 800863a:	d1dd      	bne.n	80085f8 <_free_r+0x28>
 800863c:	681c      	ldr	r4, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	6053      	str	r3, [r2, #4]
 8008642:	4421      	add	r1, r4
 8008644:	6011      	str	r1, [r2, #0]
 8008646:	e7d7      	b.n	80085f8 <_free_r+0x28>
 8008648:	d902      	bls.n	8008650 <_free_r+0x80>
 800864a:	230c      	movs	r3, #12
 800864c:	6003      	str	r3, [r0, #0]
 800864e:	e7d3      	b.n	80085f8 <_free_r+0x28>
 8008650:	6825      	ldr	r5, [r4, #0]
 8008652:	1961      	adds	r1, r4, r5
 8008654:	428b      	cmp	r3, r1
 8008656:	bf04      	itt	eq
 8008658:	6819      	ldreq	r1, [r3, #0]
 800865a:	685b      	ldreq	r3, [r3, #4]
 800865c:	6063      	str	r3, [r4, #4]
 800865e:	bf04      	itt	eq
 8008660:	1949      	addeq	r1, r1, r5
 8008662:	6021      	streq	r1, [r4, #0]
 8008664:	6054      	str	r4, [r2, #4]
 8008666:	e7c7      	b.n	80085f8 <_free_r+0x28>
 8008668:	b003      	add	sp, #12
 800866a:	bd30      	pop	{r4, r5, pc}
 800866c:	240010b0 	.word	0x240010b0

08008670 <_malloc_r>:
 8008670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008672:	1ccd      	adds	r5, r1, #3
 8008674:	f025 0503 	bic.w	r5, r5, #3
 8008678:	3508      	adds	r5, #8
 800867a:	2d0c      	cmp	r5, #12
 800867c:	bf38      	it	cc
 800867e:	250c      	movcc	r5, #12
 8008680:	2d00      	cmp	r5, #0
 8008682:	4606      	mov	r6, r0
 8008684:	db01      	blt.n	800868a <_malloc_r+0x1a>
 8008686:	42a9      	cmp	r1, r5
 8008688:	d903      	bls.n	8008692 <_malloc_r+0x22>
 800868a:	230c      	movs	r3, #12
 800868c:	6033      	str	r3, [r6, #0]
 800868e:	2000      	movs	r0, #0
 8008690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008692:	f000 f87d 	bl	8008790 <__malloc_lock>
 8008696:	4921      	ldr	r1, [pc, #132]	; (800871c <_malloc_r+0xac>)
 8008698:	680a      	ldr	r2, [r1, #0]
 800869a:	4614      	mov	r4, r2
 800869c:	b99c      	cbnz	r4, 80086c6 <_malloc_r+0x56>
 800869e:	4f20      	ldr	r7, [pc, #128]	; (8008720 <_malloc_r+0xb0>)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	b923      	cbnz	r3, 80086ae <_malloc_r+0x3e>
 80086a4:	4621      	mov	r1, r4
 80086a6:	4630      	mov	r0, r6
 80086a8:	f000 f862 	bl	8008770 <_sbrk_r>
 80086ac:	6038      	str	r0, [r7, #0]
 80086ae:	4629      	mov	r1, r5
 80086b0:	4630      	mov	r0, r6
 80086b2:	f000 f85d 	bl	8008770 <_sbrk_r>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	d123      	bne.n	8008702 <_malloc_r+0x92>
 80086ba:	230c      	movs	r3, #12
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	4630      	mov	r0, r6
 80086c0:	f000 f86c 	bl	800879c <__malloc_unlock>
 80086c4:	e7e3      	b.n	800868e <_malloc_r+0x1e>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	1b5b      	subs	r3, r3, r5
 80086ca:	d417      	bmi.n	80086fc <_malloc_r+0x8c>
 80086cc:	2b0b      	cmp	r3, #11
 80086ce:	d903      	bls.n	80086d8 <_malloc_r+0x68>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	441c      	add	r4, r3
 80086d4:	6025      	str	r5, [r4, #0]
 80086d6:	e004      	b.n	80086e2 <_malloc_r+0x72>
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	42a2      	cmp	r2, r4
 80086dc:	bf0c      	ite	eq
 80086de:	600b      	streq	r3, [r1, #0]
 80086e0:	6053      	strne	r3, [r2, #4]
 80086e2:	4630      	mov	r0, r6
 80086e4:	f000 f85a 	bl	800879c <__malloc_unlock>
 80086e8:	f104 000b 	add.w	r0, r4, #11
 80086ec:	1d23      	adds	r3, r4, #4
 80086ee:	f020 0007 	bic.w	r0, r0, #7
 80086f2:	1ac2      	subs	r2, r0, r3
 80086f4:	d0cc      	beq.n	8008690 <_malloc_r+0x20>
 80086f6:	1a1b      	subs	r3, r3, r0
 80086f8:	50a3      	str	r3, [r4, r2]
 80086fa:	e7c9      	b.n	8008690 <_malloc_r+0x20>
 80086fc:	4622      	mov	r2, r4
 80086fe:	6864      	ldr	r4, [r4, #4]
 8008700:	e7cc      	b.n	800869c <_malloc_r+0x2c>
 8008702:	1cc4      	adds	r4, r0, #3
 8008704:	f024 0403 	bic.w	r4, r4, #3
 8008708:	42a0      	cmp	r0, r4
 800870a:	d0e3      	beq.n	80086d4 <_malloc_r+0x64>
 800870c:	1a21      	subs	r1, r4, r0
 800870e:	4630      	mov	r0, r6
 8008710:	f000 f82e 	bl	8008770 <_sbrk_r>
 8008714:	3001      	adds	r0, #1
 8008716:	d1dd      	bne.n	80086d4 <_malloc_r+0x64>
 8008718:	e7cf      	b.n	80086ba <_malloc_r+0x4a>
 800871a:	bf00      	nop
 800871c:	240010b0 	.word	0x240010b0
 8008720:	240010b4 	.word	0x240010b4

08008724 <_realloc_r>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	4607      	mov	r7, r0
 8008728:	4614      	mov	r4, r2
 800872a:	460e      	mov	r6, r1
 800872c:	b921      	cbnz	r1, 8008738 <_realloc_r+0x14>
 800872e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008732:	4611      	mov	r1, r2
 8008734:	f7ff bf9c 	b.w	8008670 <_malloc_r>
 8008738:	b922      	cbnz	r2, 8008744 <_realloc_r+0x20>
 800873a:	f7ff ff49 	bl	80085d0 <_free_r>
 800873e:	4625      	mov	r5, r4
 8008740:	4628      	mov	r0, r5
 8008742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008744:	f000 f830 	bl	80087a8 <_malloc_usable_size_r>
 8008748:	42a0      	cmp	r0, r4
 800874a:	d20f      	bcs.n	800876c <_realloc_r+0x48>
 800874c:	4621      	mov	r1, r4
 800874e:	4638      	mov	r0, r7
 8008750:	f7ff ff8e 	bl	8008670 <_malloc_r>
 8008754:	4605      	mov	r5, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	d0f2      	beq.n	8008740 <_realloc_r+0x1c>
 800875a:	4631      	mov	r1, r6
 800875c:	4622      	mov	r2, r4
 800875e:	f7ff ff0f 	bl	8008580 <memcpy>
 8008762:	4631      	mov	r1, r6
 8008764:	4638      	mov	r0, r7
 8008766:	f7ff ff33 	bl	80085d0 <_free_r>
 800876a:	e7e9      	b.n	8008740 <_realloc_r+0x1c>
 800876c:	4635      	mov	r5, r6
 800876e:	e7e7      	b.n	8008740 <_realloc_r+0x1c>

08008770 <_sbrk_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4d06      	ldr	r5, [pc, #24]	; (800878c <_sbrk_r+0x1c>)
 8008774:	2300      	movs	r3, #0
 8008776:	4604      	mov	r4, r0
 8008778:	4608      	mov	r0, r1
 800877a:	602b      	str	r3, [r5, #0]
 800877c:	f7f8 fda0 	bl	80012c0 <_sbrk>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d102      	bne.n	800878a <_sbrk_r+0x1a>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	b103      	cbz	r3, 800878a <_sbrk_r+0x1a>
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	2400126c 	.word	0x2400126c

08008790 <__malloc_lock>:
 8008790:	4801      	ldr	r0, [pc, #4]	; (8008798 <__malloc_lock+0x8>)
 8008792:	f000 b811 	b.w	80087b8 <__retarget_lock_acquire_recursive>
 8008796:	bf00      	nop
 8008798:	24001274 	.word	0x24001274

0800879c <__malloc_unlock>:
 800879c:	4801      	ldr	r0, [pc, #4]	; (80087a4 <__malloc_unlock+0x8>)
 800879e:	f000 b80c 	b.w	80087ba <__retarget_lock_release_recursive>
 80087a2:	bf00      	nop
 80087a4:	24001274 	.word	0x24001274

080087a8 <_malloc_usable_size_r>:
 80087a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ac:	1f18      	subs	r0, r3, #4
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	bfbc      	itt	lt
 80087b2:	580b      	ldrlt	r3, [r1, r0]
 80087b4:	18c0      	addlt	r0, r0, r3
 80087b6:	4770      	bx	lr

080087b8 <__retarget_lock_acquire_recursive>:
 80087b8:	4770      	bx	lr

080087ba <__retarget_lock_release_recursive>:
 80087ba:	4770      	bx	lr

080087bc <_init>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	bf00      	nop
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr

080087c8 <_fini>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	bf00      	nop
 80087cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ce:	bc08      	pop	{r3}
 80087d0:	469e      	mov	lr, r3
 80087d2:	4770      	bx	lr
